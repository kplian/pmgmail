/*
 http://keithamus.mit-license.org/
 @copyright Copyright ?? 2011, Keith Cirkel

*/
if (top.document == document) {

    function initMessenger(window) {
        Array.prototype.remove = function (from, to) {
            var rest = this.slice((to || from) + 1 || this.length);
            this.length = from < 0 ? this.length + from : from;
            return this.push.apply(this, rest)
        };
        var Messenger;
        Messenger = {
            el: null,
            ob_els: {},
            ob_callbacks: {},
            init: function (cb) {
                this.el = document.getElementById("messengerEventPasser");
                if (!this.el) {
                    this.el = document.createElement("div");
                    this.el.setAttribute("id", "messengerEventPasser");
                    this.el.setAttribute("style", "display:none;");
                    document.body.appendChild(this.el)
                }
                if (cb) cb(this)
            },
            observe: function (msgName, cb, id) {
                var self = this;
                if (!id) id = "noid";
                if (!this.ob_els[msgName]) {
                    var e = document.getElementById(msgName + "_eventPasser");
                    if (!e) {
                        e = document.createElement("div");
                        e.setAttribute("id", msgName + "_eventPasser");
                        e.setAttribute("style", "display:none");
                        this.el.appendChild(e)
                    }
                    this.ob_els[msgName] = e
                }
                this.ob_els[msgName].addEventListener(msgName, function (e) {
                    var data = null;
                    var kids = self.listToArray(this.childNodes);
                    for (var i = 0; el = kids[i]; i++) {
                        var eid =
                            el.getAttribute("id").split("_")[1];
                        if (id == "all" || eid == id) {
                            var subkids = self.listToArray(el.childNodes);
                            var mpEl = subkids[subkids.length - 1];
                            try {
                                data = JSON.parse(mpEl.innerText)
                            } catch (err) {}
                            el.parentNode.removeChild(el);
                            var tCBs = [];
                            var len = self.ob_callbacks[msgName][id].length;
                            for (var j = 0; j < len; j++) {
                                var cb = self.ob_callbacks[msgName][id][j];
                                if (!cb.runOnce) tCBs.push(cb);
                                cb(data, eid)
                            }
                            if (el) el.innerText = "";
                            if (self.ob_callbacks[msgName][id])
                                for (var k = len; k < self.ob_callbacks[msgName][id].length; k++) tCBs.push(self.ob_callbacks[msgName][id][k]);
                            self.ob_callbacks[msgName][id] = tCBs
                        }
                    }
                });
                if (!this.ob_callbacks[msgName]) this.ob_callbacks[msgName] = {};
                if (!this.ob_callbacks[msgName][id]) this.ob_callbacks[msgName][id] = [];
                this.ob_callbacks[msgName][id].push(cb)
            },
            unobserve: function (msgName, id) {
                delete this.ob_callbacks[msgName][id]
            },
            sendMessage: function (msgName, data, retMsgName, cb, id) {
                var cEl = document.getElementById(msgName + "_eventPasser");
                if (cEl) {
                    if (!id) id = "noid";
                    if (retMsgName)
                        if (cb) {
                            cb.runOnce = true;
                            this.observe(retMsgName, cb, id)
                        }
                    var cEvent = document.createEvent("Event");
                    cEvent.initEvent(msgName, true, true);
                    cEvent.callId = id;
                    var mEl = document.getElementById(msgName + "_" + id + "_eventPasser");
                    if (!mEl) {
                        mEl = this.createElement(msgName + "_" + id + "_eventPasser");
                        cEl.appendChild(mEl)
                    }
                    var mpEl = document.createElement("div");
                    mpEl.setAttribute("style", "display:none");
                    mEl.appendChild(mpEl);
                    var copy = {};
                    try {
                        var fields = Object.getOwnPropertyNames(data);
                        for (var i = 0; i < fields.length; i++) {
                            var field = fields[i];
                            try {
                                copy[field] = data[field]
                            } catch (err) {
                                copy[field] = null
                            }
                        }
                    } catch (outerErr) {}
                    try {
                        mpEl.innerText =
                            JSON.stringify(copy)
                    } catch (err) {}
                    cEl.dispatchEvent(cEvent)
                }
            },
            storeData: function (id, data) {
                var theId = "messenger_" + id + "_dataStore";
                var d = document.getElementById(theId);
                if (!d) {
                    d = document.createElement("div");
                    d.setAttribute("style", "display:none;");
                    d.setAttribute("id", theId);
                    this.el.appendChild(d)
                }
                d.innerText = JSON.stringify(data)
            },
            getData: function (id) {
                var theId = "messenger_" + id + "_dataStore";
                var d = document.getElementById(theId);
                if (d) try {
                    return JSON.parse(d.innerText)
                } catch (err) {}
            },
            createElement: function (id) {
                var e =
                    document.createElement("div");
                e.setAttribute("style", "display:none");
                e.setAttribute("id", id);
                return e
            },
            listToArray: function (nodeList) {
                var arr = [];
                for (var i = 0; node = nodeList[i]; i++) arr.push(node);
                return arr
            }
        };
        window.Messenger = Messenger;
        Messenger.init()
    }
    initMessenger(window)
}
var Streak = {};
Streak.clientVersion = "6.716";
Streak.optimizelyAccountID = 173001298;
Streak.optimizelyExperimentID = 181337382;
Streak.optimizelyOriginalVariationID = 181261759;
Streak.googleAnalyticsID = "UA-25304962-3";
Streak.extVersion = Messenger.getData("extVersion");
Streak.server = Messenger.getData("server");
Streak.combinedPath = Messenger.getData("combinedPath");
Streak.devRealtimeServer = Messenger.getData("devRealtimeServer");
Streak.isSafari = Messenger.getData("isSafari");
Streak.getCombined = function (type, includeServer) {
    return (includeServer ? Streak.server : "") + Streak.combinedPath + "combined-" + Streak.extVersion + "." + type
};
if (!top.document.getElementById("js_frame")) throw new Error("not in gmail");
Streak.iframe = document.createElement("iframe");
Streak.iframe.style.display = "none";
document.body.appendChild(Streak.iframe);
Streak.Date = Streak.iframe.contentWindow.Date;
(function (Streak) {
    var CSSStyleManipulator = {
        addRule: function (rule) {
            var stylesheets = Streak.document.styleSheets;
            var insertedRule = null;
            var stylesheet = null;
            for (var ii = 0; ii < stylesheets.length; ii++) try {
                stylesheet = stylesheets[ii];
                insertedRule = stylesheet.insertRule(rule, 0);
                break
            } catch (err) {}
            return {
                stylesheet: stylesheet,
                rule: insertedRule,
                destroy: function () {
                    stylesheet.removeRule(rule)
                }
            }
        }
    };
    Streak.CSSStyleManipulator = CSSStyleManipulator
})(Streak);
(function (Streak) {
    var delimiter = ",";
    var delimiterCode = ",".charCodeAt(0);
    Streak.csvParser = {
        parse: function (text, f) {
            var o;
            return this.parseRows(text, function (row, i) {
                if (o) return o(row, i - 1);
                var a = new Function("d", "return {" + row.map(function (name, i) {
                    return JSON.stringify(name) + ": d[" + i + "]"
                }).join(",") + "}");
                o = f ? function (row, i) {
                    return f(a(row), i)
                } : a
            })
        },
        parseRows: function (text, f) {
            var EOL = {}, EOF = {}, rows = [],
                N = text.length,
                I = 0,
                n = 0,
                t, eol;

            function token() {
                if (I >= N) return EOF;
                if (eol) return eol = false, EOL;
                var j = I;
                if (text.charCodeAt(j) ===
                    34) {
                    var i = j;
                    while (i++ < N)
                        if (text.charCodeAt(i) === 34) {
                            if (text.charCodeAt(i + 1) !== 34) break;
                            ++i
                        }
                    I = i + 2;
                    var c = text.charCodeAt(i + 1);
                    if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(i + 2) === 10)++I
                    } else if (c === 10) eol = true;
                    return text.substring(j + 1, i).replace(/""/g, '"')
                }
                while (I < N) {
                    var c = text.charCodeAt(I++),
                        k = 1;
                    if (c === 10) eol = true;
                    else if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(I) === 10)++I, ++k
                    } else if (c !== delimiterCode) continue;
                    return text.substring(j, I - k)
                }
                return text.substring(j)
            }
            while ((t = token()) !== EOF) {
                var a = [];
                while (t !==
                    EOL && t !== EOF) {
                    a.push(t);
                    t = token()
                }
                if (f && !(a = f(a, n++))) continue;
                rows.push(a)
            }
            return rows
        }
    }
})(Streak);
(function (Streak) {
    var Date = Streak.Date;
    var object = Object,
        array = Array,
        regexp = RegExp,
        date = Date,
        string = String,
        number = Number,
        math = Math,
        Undefined;
    var internalToString = object.prototype.toString;
    var globalContext = typeof global !== "undefined" ? global : this;
    var typeChecks = {};
    var definePropertySupport = object.defineProperty && object.defineProperties;
    var ClassNames = "Array,Boolean,Date,Function,Number,String,RegExp".split(",");
    var isArray = buildClassCheck(ClassNames[0]);
    var isBoolean = buildClassCheck(ClassNames[1]);
    var isDate = buildClassCheck(ClassNames[2]);
    var isFunction = buildClassCheck(ClassNames[3]);
    var isNumber = buildClassCheck(ClassNames[4]);
    var isString = buildClassCheck(ClassNames[5]);
    var isRegExp = buildClassCheck(ClassNames[6]);

    function buildClassCheck(name) {
        var type, fn;
        if (/String|Number|Boolean/.test(name)) type = name.toLowerCase();
        fn = name === "Array" && array.isArray || function (obj) {
            if (type && typeof obj === type) return true;
            return className(obj) === "[object " + name + "]"
        };
        typeChecks[name] = fn;
        return fn
    }

    function className(obj) {
        return internalToString.call(obj)
    }

    function initializeClasses() {
        initializeClass(object);
        initializeClass(date);
        iterateOverObject(ClassNames, function (i, name) {
            initializeClass(globalContext[name])
        })
    }

    function initializeClass(klass) {
        if (klass["SugarMethods"]) return;
        defineProperty(klass, "SugarMethods", {});
        extend(klass, false, false, {
            "extend": function (methods, override, instance) {
                extend(klass, instance !== false, override, methods)
            },
            "sugarRestore": function () {
                return batchMethodExecute(klass, arguments, function (target, name, m) {
                    defineProperty(target, name,
                        m.method)
                })
            },
            "sugarRevert": function () {
                return batchMethodExecute(klass, arguments, function (target, name, m) {
                    if (m.existed) defineProperty(target, name, m.original);
                    else delete target[name]
                })
            }
        })
    }

    function extend(klass, instance, override, methods) {
        var extendee = instance ? klass.prototype : klass;
        initializeClass(klass);
        iterateOverObject(methods, function (name, method) {
            var original = extendee[name];
            var existed = hasOwnProperty(extendee, name);
            if (typeof override === "function") method = wrapNative(extendee[name], method, override);
            if (override !== false || !extendee[name]) defineProperty(extendee, name, method);
            klass["SugarMethods"][name] = {
                instance: instance,
                method: method,
                original: original,
                existed: existed
            }
        })
    }

    function extendSimilar(klass, instance, override, set, fn) {
        var methods = {};
        set = isString(set) ? set.split(",") : set;
        set.forEach(function (name, i) {
            fn(methods, name, i)
        });
        extend(klass, instance, override, methods)
    }

    function batchMethodExecute(klass, args, fn) {
        var all = args.length === 0,
            methods = multiArgs(args),
            changed = false;
        iterateOverObject(klass["SugarMethods"],
            function (name, m) {
                if (all || methods.indexOf(name) > -1) {
                    changed = true;
                    fn(m.instance ? klass.prototype : klass, name, m)
                }
            });
        return changed
    }

    function wrapNative(nativeFn, extendedFn, condition) {
        return function () {
            var fn;
            if (nativeFn && (condition === true || !condition.apply(this, arguments))) fn = nativeFn;
            else fn = extendedFn;
            return fn.apply(this, arguments)
        }
    }

    function defineProperty(target, name, method) {
        if (definePropertySupport) object.defineProperty(target, name, {
            "value": method,
            "configurable": true,
            "enumerable": false,
            "writable": true
        });
        else target[name] = method
    }

    function multiArgs(args, fn) {
        var result = [],
            i, len;
        for (i = 0, len = args.length; i < len; i++) {
            result.push(args[i]);
            if (fn) fn.call(args, args[i], i)
        }
        return result
    }

    function flattenedArgs(obj, fn, from) {
        multiArgs(array.prototype.concat.apply([], array.prototype.slice.call(obj, from || 0)), fn)
    }

    function checkCallback(fn) {
        if (!fn || !fn.call) throw new TypeError("Callback is not callable");
    }

    function isDefined(o) {
        return o !== Undefined
    }

    function isUndefined(o) {
        return o === Undefined
    }

    function isObjectPrimitive(obj) {
        return obj &&
            typeof obj === "object"
    }

    function isObject(obj) {
        return !!obj && className(obj) === "[object Object]" && "hasOwnProperty" in obj
    }

    function hasOwnProperty(obj, key) {
        return object["hasOwnProperty"].call(obj, key)
    }

    function iterateOverObject(obj, fn) {
        var key;
        for (key in obj) {
            if (!hasOwnProperty(obj, key)) continue;
            if (fn.call(obj, key, obj[key], obj) === false) break
        }
    }

    function simpleMerge(target, source) {
        iterateOverObject(source, function (key) {
            target[key] = source[key]
        });
        return target
    }

    function Hash(obj) {
        simpleMerge(this, obj)
    }
    Hash.prototype.constructor =
        object;

    function getRange(start, stop, fn, step) {
        var arr = [],
            i = parseInt(start),
            down = step < 0;
        while (!down && i <= stop || down && i >= stop) {
            arr.push(i);
            if (fn) fn.call(this, i);
            i += step || 1
        }
        return arr
    }

    function round(val, precision, method) {
        var fn = math[method || "round"];
        var multiplier = math.pow(10, math.abs(precision || 0));
        if (precision < 0) multiplier = 1 / multiplier;
        return fn(val * multiplier) / multiplier
    }

    function ceil(val, precision) {
        return round(val, precision, "ceil")
    }

    function floor(val, precision) {
        return round(val, precision, "floor")
    }

    function padNumber(num, place, sign, base) {
        var str = math.abs(num).toString(base || 10);
        str = repeatString(place - str.replace(/\.\d+/, "").length, "0") + str;
        if (sign || num < 0) str = (num < 0 ? "-" : "+") + str;
        return str
    }

    function getOrdinalizedSuffix(num) {
        if (num >= 11 && num <= 13) return "th";
        else switch (num % 10) {
        case 1:
            return "st";
        case 2:
            return "nd";
        case 3:
            return "rd";
        default:
            return "th"
        }
    }

    function getTrimmableCharacters() {
        return "\t\n\x0B\u000c\r \u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u2028\u2029\u3000\ufeff"
    }

    function repeatString(times, str) {
        return array(math.max(0, isDefined(times) ? times : 1) + 1).join(str || "")
    }

    function getRegExpFlags(reg, add) {
        var flags = reg.toString().match(/[^/]*$/)[0];
        if (add) flags = (flags + add).split("").sort().join("").replace(/([gimy])\1+/g, "$1");
        return flags
    }

    function escapeRegExp(str) {
        if (!isString(str)) str = string(str);
        return str.replace(/([\\/'*+?|()\[\]{}.^$])/g, "\\$1")
    }

    function stringify(thing, stack) {
        var type = typeof thing,
            thingIsObject, thingIsArray, klass, value, arr, key, i, len;
        if (type ===
            "string") return thing;
        klass = internalToString.call(thing);
        thingIsObject = isObject(thing);
        thingIsArray = klass === "[object Array]";
        if (thing != null && thingIsObject || thingIsArray) {
            if (!stack) stack = [];
            if (stack.length > 1) {
                i = stack.length;
                while (i--)
                    if (stack[i] === thing) return "CYC"
            }
            stack.push(thing);
            value = string(thing.constructor);
            arr = thingIsArray ? thing : object.keys(thing).sort();
            for (i = 0, len = arr.length; i < len; i++) {
                key = thingIsArray ? i : arr[i];
                value += key + stringify(thing[key], stack)
            }
            stack.pop()
        } else if (1 / thing === -Infinity) value =
            "-0";
        else value = string(thing && thing.valueOf ? thing.valueOf() : thing);
        return type + klass + value
    }

    function isEqual(a, b) {
        if (objectIsMatchedByValue(a) && objectIsMatchedByValue(b)) return stringify(a) === stringify(b);
        else return a === b
    }

    function objectIsMatchedByValue(obj) {
        var klass = className(obj);
        return /^\[object Date|Array|String|Number|RegExp|Boolean|Arguments\]$/.test(klass) || isObject(obj)
    }

    function entryAtIndex(arr, args, str) {
        var result = [],
            length = arr.length,
            loop = args[args.length - 1] !== false,
            r;
        multiArgs(args, function (index) {
            if (isBoolean(index)) return false;
            if (loop) {
                index = index % length;
                if (index < 0) index = length + index
            }
            r = str ? arr.charAt(index) || "" : arr[index];
            result.push(r)
        });
        return result.length < 2 ? result[0] : result
    }

    function buildObjectInstanceMethods(set, target) {
        extendSimilar(target, true, false, set, function (methods, name) {
            methods[name + (name === "equal" ? "s" : "")] = function () {
                return object[name].apply(null, [this].concat(multiArgs(arguments)))
            }
        })
    }
    initializeClasses();

    function multiMatch(el, match, scope, params) {
        var result = true;
        if (el === match) return true;
        else if (isRegExp(match) &&
            isString(el)) return regexp(match).test(el);
        else if (isFunction(match)) return match.apply(scope, params);
        else if (isObject(match) && isObjectPrimitive(el)) {
            iterateOverObject(match, function (key, value) {
                if (!multiMatch(el[key], match[key], scope, [el[key], el])) result = false
            });
            return result
        } else return isEqual(el, match)
    }

    function transformArgument(el, map, context, mapArgs) {
        if (isUndefined(map)) return el;
        else if (isFunction(map)) return map.apply(context, mapArgs || []);
        else if (isFunction(el[map])) return el[map].call(el);
        else return el[map]
    }

    function arrayEach(arr, fn, startIndex, loop) {
        var length, index, i;
        if (startIndex < 0) startIndex = arr.length + startIndex;
        i = isNaN(startIndex) ? 0 : startIndex;
        length = loop === true ? arr.length + i : arr.length;
        while (i < length) {
            index = i % arr.length;
            if (!(index in arr)) return iterateOverSparseArray(arr, fn, i, loop);
            else if (fn.call(arr, arr[index], index, arr) === false) break;
            i++
        }
    }

    function iterateOverSparseArray(arr, fn, fromIndex, loop) {
        var indexes = [],
            i;
        for (i in arr)
            if (isArrayIndex(arr, i) && i >= fromIndex) indexes.push(parseInt(i));
        indexes.sort().each(function (index) {
            return fn.call(arr, arr[index], index, arr)
        });
        return arr
    }

    function isArrayIndex(arr, i) {
        return i in arr && toUInt32(i) == i && i != 4294967295
    }

    function toUInt32(i) {
        return i >>> 0
    }

    function arrayFind(arr, f, startIndex, loop, returnIndex) {
        var result, index;
        arrayEach(arr, function (el, i, arr) {
            if (multiMatch(el, f, arr, [el, i, arr])) {
                result = el;
                index = i;
                return false
            }
        }, startIndex, loop);
        return returnIndex ? index : result
    }

    function arrayUnique(arr, map) {
        var result = [],
            o = {}, transformed;
        arrayEach(arr, function (el,
            i) {
            transformed = map ? transformArgument(el, map, arr, [el, i, arr]) : el;
            if (!checkForElementInHashAndSet(o, transformed)) result.push(el)
        });
        return result
    }

    function arrayIntersect(arr1, arr2, subtract) {
        var result = [],
            o = {};
        arr2.each(function (el) {
            checkForElementInHashAndSet(o, el)
        });
        arr1.each(function (el) {
            var stringified = stringify(el),
                isReference = !objectIsMatchedByValue(el);
            if (elementExistsInHash(o, stringified, el, isReference) != subtract) {
                discardElementFromHash(o, stringified, el, isReference);
                result.push(el)
            }
        });
        return result
    }

    function arrayFlatten(arr, level, current) {
        level = level || Infinity;
        current = current || 0;
        var result = [];
        arrayEach(arr, function (el) {
            if (isArray(el) && current < level) result = result.concat(arrayFlatten(el, level, current + 1));
            else result.push(el)
        });
        return result
    }

    function flatArguments(args) {
        var result = [];
        multiArgs(args, function (arg) {
            result = result.concat(arg)
        });
        return result
    }

    function elementExistsInHash(hash, key, element, isReference) {
        var exists = key in hash;
        if (isReference) {
            if (!hash[key]) hash[key] = [];
            exists = hash[key].indexOf(element) !== -1
        }
        return exists
    }

    function checkForElementInHashAndSet(hash, element) {
        var stringified = stringify(element),
            isReference = !objectIsMatchedByValue(element),
            exists = elementExistsInHash(hash, stringified, element, isReference);
        if (isReference) hash[stringified].push(element);
        else hash[stringified] = element;
        return exists
    }

    function discardElementFromHash(hash, key, element, isReference) {
        var arr, i = 0;
        if (isReference) {
            arr = hash[key];
            while (i < arr.length)
                if (arr[i] === element) arr.splice(i, 1);
                else i += 1
        } else delete hash[key]
    }

    function getMinOrMax(obj,
        map, which, all) {
        var edge, result = [],
            max = which === "max",
            min = which === "min",
            isArray = Array.isArray(obj);
        iterateOverObject(obj, function (key) {
            var el = obj[key],
                test = transformArgument(el, map, obj, isArray ? [el, parseInt(key), obj] : []);
            if (isUndefined(test)) throw new TypeError("Cannot compare with undefined");
            if (test === edge) result.push(el);
            else if (isUndefined(edge) || max && test > edge || min && test < edge) {
                result = [el];
                edge = test
            }
        });
        if (!isArray) result = arrayFlatten(result, 1);
        return all ? result : result[0]
    }

    function collateStrings(a,
        b) {
        var aValue, bValue, aChar, bChar, aEquiv, bEquiv, index = 0,
            tiebreaker = 0;
        a = getCollationReadyString(a);
        b = getCollationReadyString(b);
        do {
            aChar = getCollationCharacter(a, index);
            bChar = getCollationCharacter(b, index);
            aValue = getCollationValue(aChar);
            bValue = getCollationValue(bChar);
            if (aValue === -1 || bValue === -1) {
                aValue = a.charCodeAt(index) || null;
                bValue = b.charCodeAt(index) || null
            }
            aEquiv = aChar !== a.charAt(index);
            bEquiv = bChar !== b.charAt(index);
            if (aEquiv !== bEquiv && tiebreaker === 0) tiebreaker = aEquiv - bEquiv;
            index += 1
        } while (aValue !=
            null && bValue != null && aValue === bValue);
        if (aValue === bValue) return tiebreaker;
        return aValue < bValue ? -1 : 1
    }

    function getCollationReadyString(str) {
        if (array[AlphanumericSortIgnoreCase]) str = str.toLowerCase();
        return str.replace(array[AlphanumericSortIgnore], "")
    }

    function getCollationCharacter(str, index) {
        var chr = str.charAt(index),
            eq = array[AlphanumericSortEquivalents] || {};
        return eq[chr] || chr
    }

    function getCollationValue(chr) {
        var order = array[AlphanumericSortOrder];
        if (!chr) return null;
        else return order.indexOf(chr)
    }
    var AlphanumericSortOrder = "AlphanumericSortOrder";
    var AlphanumericSortIgnore = "AlphanumericSortIgnore";
    var AlphanumericSortIgnoreCase = "AlphanumericSortIgnoreCase";
    var AlphanumericSortEquivalents = "AlphanumericSortEquivalents";

    function buildEnhancements() {
        var callbackCheck = function () {
            var a = arguments;
            return a.length > 0 && !isFunction(a[0])
        };
        extendSimilar(array, true, callbackCheck, "map,every,all,some,any,none,filter", function (methods, name) {
            methods[name] = function (f) {
                return this[name](function (el, index) {
                    if (name ===
                        "map") return transformArgument(el, f, this, [el, index, this]);
                    else return multiMatch(el, f, this, [el, index, this])
                })
            }
        })
    }

    function buildAlphanumericSort() {
        var order = "A\u00c1\u00c0\u00c2\u00c3\u0104BC\u0106\u010c\u00c7D\u010e\u00d0E\u00c9\u00c8\u011a\u00ca\u00cb\u0118FG\u011eH\u0131I\u00cd\u00cc\u0130\u00ce\u00cfJKL\u0141MN\u0143\u0147\u00d1O\u00d3\u00d2\u00d4PQR\u0158S\u015a\u0160\u015eT\u0164U\u00da\u00d9\u016e\u00db\u00dcVWXY\u00ddZ\u0179\u017b\u017d\u00de\u00c6\u0152\u00d8\u00d5\u00c5\u00c4\u00d6";
        var equiv =
            "A\u00c1\u00c0\u00c2\u00c3\u00c4,C\u00c7,E\u00c9\u00c8\u00ca\u00cb,I\u00cd\u00cc\u0130\u00ce\u00cf,O\u00d3\u00d2\u00d4\u00d5\u00d6,S\u00df,U\u00da\u00d9\u00db\u00dc";
        array[AlphanumericSortOrder] = order.split("").map(function (str) {
            return str + str.toLowerCase()
        }).join("");
        var equivalents = {};
        arrayEach(equiv.split(","), function (set) {
            var equivalent = set.charAt(0);
            arrayEach(set.slice(1).split(""), function (chr) {
                equivalents[chr] = equivalent;
                equivalents[chr.toLowerCase()] = equivalent.toLowerCase()
            })
        });
        array[AlphanumericSortIgnoreCase] =
            true;
        array[AlphanumericSortEquivalents] = equivalents
    }
    extend(array, false, false, {
        "create": function () {
            var result = [],
                tmp;
            multiArgs(arguments, function (a) {
                if (isObjectPrimitive(a)) try {
                    tmp = array.prototype.slice.call(a, 0);
                    if (tmp.length > 0) a = tmp
                } catch (e) {}
                result = result.concat(a)
            });
            return result
        }
    });
    extend(array, true, false, {
        "find": function (f, index, loop) {
            return arrayFind(this, f, index, loop)
        },
        "findAll": function (f, index, loop) {
            var result = [];
            arrayEach(this, function (el, i, arr) {
                    if (multiMatch(el, f, arr, [el, i, arr])) result.push(el)
                },
                index, loop);
            return result
        },
        "findIndex": function (f, startIndex, loop) {
            var index = arrayFind(this, f, startIndex, loop, true);
            return isUndefined(index) ? -1 : index
        },
        "count": function (f) {
            if (isUndefined(f)) return this.length;
            return this.findAll(f).length
        },
        "removeAt": function (start, end) {
            var i, len;
            if (isUndefined(start)) return this;
            if (isUndefined(end)) end = start;
            for (i = 0, len = end - start; i <= len; i++) this.splice(start, 1);
            return this
        },
        "include": function (el, index) {
            return this.clone().add(el, index)
        },
        "exclude": function () {
            return array.prototype.remove.apply(this.clone(),
                arguments)
        },
        "clone": function () {
            return simpleMerge([], this)
        },
        "unique": function (map) {
            return arrayUnique(this, map)
        },
        "flatten": function (limit) {
            return arrayFlatten(this, limit)
        },
        "union": function () {
            return arrayUnique(this.concat(flatArguments(arguments)))
        },
        "intersect": function () {
            return arrayIntersect(this, flatArguments(arguments), false)
        },
        "subtract": function (a) {
            return arrayIntersect(this, flatArguments(arguments), true)
        },
        "at": function () {
            return entryAtIndex(this, arguments)
        },
        "first": function (num) {
            if (isUndefined(num)) return this[0];
            if (num < 0) num = 0;
            return this.slice(0, num)
        },
        "last": function (num) {
            if (isUndefined(num)) return this[this.length - 1];
            var start = this.length - num < 0 ? 0 : this.length - num;
            return this.slice(start)
        },
        "from": function (num) {
            return this.slice(num)
        },
        "to": function (num) {
            if (isUndefined(num)) num = this.length;
            return this.slice(0, num)
        },
        "min": function (map, all) {
            return getMinOrMax(this, map, "min", all)
        },
        "max": function (map, all) {
            return getMinOrMax(this, map, "max", all)
        },
        "least": function (map, all) {
            return getMinOrMax(this.groupBy.apply(this, [map]), "length", "min", all)
        },
        "most": function (map, all) {
            return getMinOrMax(this.groupBy.apply(this, [map]), "length", "max", all)
        },
        "sum": function (map) {
            var arr = map ? this.map(map) : this;
            return arr.length > 0 ? arr.reduce(function (a, b) {
                return a + b
            }) : 0
        },
        "average": function (map) {
            var arr = map ? this.map(map) : this;
            return arr.length > 0 ? arr.sum() / arr.length : 0
        },
        "inGroups": function (num, padding) {
            var pad = arguments.length > 1;
            var arr = this;
            var result = [];
            var divisor = ceil(this.length / num);
            getRange(0, num - 1, function (i) {
                var index = i * divisor;
                var group = arr.slice(index, index + divisor);
                if (pad && group.length < divisor) getRange(1, divisor - group.length, function () {
                    group = group.add(padding)
                });
                result.push(group)
            });
            return result
        },
        "inGroupsOf": function (num, padding) {
            var result = [],
                len = this.length,
                arr = this,
                group;
            if (len === 0 || num === 0) return arr;
            if (isUndefined(num)) num = 1;
            if (isUndefined(padding)) padding = null;
            getRange(0, ceil(len / num) - 1, function (i) {
                group = arr.slice(num * i, num * i + num);
                while (group.length < num) group.push(padding);
                result.push(group)
            });
            return result
        },
        "isEmpty": function () {
            return this.compact().length == 0
        },
        "sortBy": function (map, desc) {
            var arr = this.clone();
            arr.sort(function (a, b) {
                var aProperty, bProperty, comp;
                aProperty = transformArgument(a, map, arr, [a]);
                bProperty = transformArgument(b, map, arr, [b]);
                if (isString(aProperty) && isString(bProperty)) comp = collateStrings(aProperty, bProperty);
                else if (aProperty < bProperty) comp = -1;
                else if (aProperty > bProperty) comp = 1;
                else comp = 0;
                return comp * (desc ? -1 : 1)
            });
            return arr
        },
        "randomize": function () {
            var arr = this.concat(),
                i = arr.length,
                j, x;
            while (i) {
                j = math.random() * i | 0;
                x = arr[--i];
                arr[i] = arr[j];
                arr[j] = x
            }
            return arr
        },
        "zip": function () {
            var args = multiArgs(arguments);
            return this.map(function (el, i) {
                return [el].concat(args.map(function (k) {
                    return i in k ? k[i] : null
                }))
            })
        },
        "sample": function (num) {
            var arr = this.randomize();
            return arguments.length > 0 ? arr.slice(0, num) : arr[0]
        },
        "each": function (fn, index, loop) {
            arrayEach(this, fn, index, loop);
            return this
        },
        "add": function (el, index) {
            if (!isNumber(number(index)) || isNaN(index)) index = this.length;
            array.prototype.splice.apply(this, [index, 0].concat(el));
            return this
        },
        "remove": function () {
            var i, arr = this;
            multiArgs(arguments, function (f) {
                i = 0;
                while (i < arr.length)
                    if (multiMatch(arr[i], f, arr, [arr[i], i, arr])) arr.splice(i, 1);
                    else i++
            });
            return arr
        },
        "compact": function (all) {
            var result = [];
            arrayEach(this, function (el, i) {
                if (isArray(el)) result.push(el.compact());
                else if (all && el) result.push(el);
                else if (!all && el != null && el.valueOf() === el.valueOf()) result.push(el)
            });
            return result
        },
        "groupBy": function (map, fn) {
            var arr = this,
                result = {}, key;
            arrayEach(arr,
                function (el, index) {
                    key = transformArgument(el, map, arr, [el, index, arr]);
                    if (!result[key]) result[key] = [];
                    result[key].push(el)
                });
            if (fn) iterateOverObject(result, fn);
            return result
        },
        "none": function () {
            return !this.any.apply(this, arguments)
        }
    });
    extend(array, true, false, {
        "all": array.prototype.every,
        "any": array.prototype.some,
        "insert": array.prototype.add
    });

    function keysWithCoercion(obj) {
        if (obj && obj.valueOf) obj = obj.valueOf();
        return object.keys(obj)
    }

    function buildEnumerableMethods(names, mapping) {
        extendSimilar(object,
            false, false, names, function (methods, name) {
                methods[name] = function (obj, arg1, arg2) {
                    var result, coerced = keysWithCoercion(obj);
                    result = array.prototype[name].call(coerced, function (key) {
                        if (mapping) return transformArgument(obj[key], arg1, obj, [key, obj[key], obj]);
                        else return multiMatch(obj[key], arg1, obj, [key, obj[key], obj])
                    }, arg2);
                    if (isArray(result)) result = result.reduce(function (o, key, i) {
                        o[key] = obj[key];
                        return o
                    }, {});
                    return result
                }
            });
        buildObjectInstanceMethods(names, Hash)
    }
    extend(object, false, false, {
        "map": function (obj,
            map) {
            return keysWithCoercion(obj).reduce(function (result, key) {
                result[key] = transformArgument(obj[key], map, obj, [key, obj[key], obj]);
                return result
            }, {})
        },
        "reduce": function (obj) {
            var values = keysWithCoercion(obj).map(function (key) {
                return obj[key]
            });
            return values.reduce.apply(values, multiArgs(arguments).slice(1))
        },
        "each": function (obj, fn) {
            checkCallback(fn);
            iterateOverObject(obj, fn);
            return obj
        },
        "size": function (obj) {
            return keysWithCoercion(obj).length
        }
    });
    var EnumerableFindingMethods = "any,all,none,count,find,findAll,isEmpty".split(",");
    var EnumerableMappingMethods = "sum,average,min,max,least,most".split(",");
    var EnumerableOtherMethods = "map,reduce,size".split(",");
    var EnumerableMethods = EnumerableFindingMethods.concat(EnumerableMappingMethods).concat(EnumerableOtherMethods);
    buildEnhancements();
    buildAlphanumericSort();
    buildEnumerableMethods(EnumerableFindingMethods);
    buildEnumerableMethods(EnumerableMappingMethods, true);
    buildObjectInstanceMethods(EnumerableOtherMethods, Hash);
    var English;
    var CurrentLocalization;
    var TimeFormat = ["ampm",
        "hour", "minute", "second", "ampm", "utc", "offset_sign", "offset_hours", "offset_minutes", "ampm"
    ];
    var DecimalReg = "(?:[,.]\\d+)?";
    var HoursReg = "\\d{1,2}" + DecimalReg;
    var SixtyReg = "[0-5]\\d" + DecimalReg;
    var RequiredTime = "({t})?\\s*(" + HoursReg + ")(?:{h}(" + SixtyReg + ")?{m}(?::?(" + SixtyReg + "){s})?\\s*(?:({t})|(Z)|(?:([+-])(\\d{2,2})(?::?(\\d{2,2}))?)?)?|\\s*({t}))";
    var KanjiDigits = "\u3007\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u767e\u5343\u4e07";
    var FullWidthDigits = "\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19";
    var AsianDigitMap = {};
    var AsianDigitReg;
    var DateArgumentUnits;
    var DateUnitsReversed;
    var CoreDateFormats = [];
    var DateOutputFormats = [{
        token: "f{1,4}|ms|milliseconds",
        format: function (d) {
            return callDateGet(d, "Milliseconds")
        }
    }, {
        token: "ss?|seconds",
        format: function (d, len) {
            return callDateGet(d, "Seconds")
        }
    }, {
        token: "mm?|minutes",
        format: function (d, len) {
            return callDateGet(d, "Minutes")
        }
    }, {
        token: "hh?|hours|12hr",
        format: function (d) {
            return getShortHour(d)
        }
    }, {
        token: "HH?|24hr",
        format: function (d) {
            return callDateGet(d,
                "Hours")
        }
    }, {
        token: "dd?|date|day",
        format: function (d) {
            return callDateGet(d, "Date")
        }
    }, {
        token: "dow|weekday",
        word: true,
        format: function (d, loc, n, t) {
            var dow = callDateGet(d, "Day");
            return loc["weekdays"][dow + (n - 1) * 7]
        }
    }, {
        token: "MM?",
        format: function (d) {
            return callDateGet(d, "Month") + 1
        }
    }, {
        token: "mon|month",
        word: true,
        format: function (d, loc, n, len) {
            var month = callDateGet(d, "Month");
            return loc["months"][month + (n - 1) * 12]
        }
    }, {
        token: "y{2,4}|year",
        format: function (d) {
            return callDateGet(d, "FullYear")
        }
    }, {
        token: "[Tt]{1,2}",
        format: function (d,
            loc, n, format) {
            if (loc["ampm"].length == 0) return "";
            var hours = callDateGet(d, "Hours");
            var str = loc["ampm"][floor(hours / 12)];
            if (format.length === 1) str = str.slice(0, 1);
            if (format.slice(0, 1) === "T") str = str.toUpperCase();
            return str
        }
    }, {
        token: "z{1,4}|tz|timezone",
        text: true,
        format: function (d, loc, n, format) {
            var tz = d.getUTCOffset();
            if (format == "z" || format == "zz") tz = tz.replace(/(\d{2})(\d{2})/, function (f, h, m) {
                return padNumber(h, format.length)
            });
            return tz
        }
    }, {
        token: "iso(tz|timezone)",
        format: function (d) {
            return d.getUTCOffset(true)
        }
    }, {
        token: "ord",
        format: function (d) {
            var date = callDateGet(d, "Date");
            return date + getOrdinalizedSuffix(date)
        }
    }];
    var DateUnits = [{
        unit: "year",
        method: "FullYear",
        ambiguous: true,
        multiplier: function (d) {
            var adjust = d ? d.isLeapYear() ? 1 : 0 : 0.25;
            return (365 + adjust) * 24 * 60 * 60 * 1E3
        }
    }, {
        unit: "month",
        method: "Month",
        ambiguous: true,
        multiplier: function (d, ms) {
            var days = 30.4375,
                inMonth;
            if (d) {
                inMonth = d.daysInMonth();
                if (ms <= inMonth.days()) days = inMonth
            }
            return days * 24 * 60 * 60 * 1E3
        },
        error: 0.919
    }, {
        unit: "week",
        method: "ISOWeek",
        multiplier: function () {
            return 7 *
                24 * 60 * 60 * 1E3
        }
    }, {
        unit: "day",
        method: "Date",
        ambiguous: true,
        multiplier: function () {
            return 24 * 60 * 60 * 1E3
        }
    }, {
        unit: "hour",
        method: "Hours",
        multiplier: function () {
            return 60 * 60 * 1E3
        }
    }, {
        unit: "minute",
        method: "Minutes",
        multiplier: function () {
            return 60 * 1E3
        }
    }, {
        unit: "second",
        method: "Seconds",
        multiplier: function () {
            return 1E3
        }
    }, {
        unit: "millisecond",
        method: "Milliseconds",
        multiplier: function () {
            return 1
        }
    }];
    var Localizations = {};

    function Localization(l) {
        simpleMerge(this, l);
        this.compiledFormats = CoreDateFormats.concat()
    }
    Localization.prototype = {
        getMonth: function (n) {
            if (isNumber(n)) return n - 1;
            else return this["months"].indexOf(n) % 12
        },
        getWeekday: function (n) {
            return this["weekdays"].indexOf(n) % 7
        },
        getNumber: function (n) {
            var i;
            if (isNumber(n)) return n;
            else if (n && (i = this["numbers"].indexOf(n)) !== -1) return (i + 1) % 10;
            else return 1
        },
        getNumericDate: function (n) {
            var self = this;
            return n.replace(regexp(this["num"], "g"), function (d) {
                var num = self.getNumber(d);
                return num || ""
            })
        },
        getEnglishUnit: function (n) {
            return English["units"][this["units"].indexOf(n) % 8]
        },
        getRelativeFormat: function (adu) {
            return this.convertAdjustedToFormat(adu,
                adu[2] > 0 ? "future" : "past")
        },
        getDuration: function (ms) {
            return this.convertAdjustedToFormat(getAdjustedUnit(ms), "duration")
        },
        hasVariant: function (code) {
            code = code || this.code;
            return code === "en" || code === "en-US" ? true : this["variant"]
        },
        matchAM: function (str) {
            return str === this["ampm"][0]
        },
        matchPM: function (str) {
            return str && str === this["ampm"][1]
        },
        convertAdjustedToFormat: function (adu, mode) {
            var sign, unit, mult, num = adu[0],
                u = adu[1],
                ms = adu[2],
                format = this[mode] || this["relative"];
            if (isFunction(format)) return format.call(this,
                num, u, ms, mode);
            mult = this["plural"] && num > 1 ? 1 : 0;
            unit = this["units"][mult * 8 + u] || this["units"][u];
            if (this["capitalizeUnit"]) unit = simpleCapitalize(unit);
            sign = this["modifiers"].filter(function (m) {
                return m.name == "sign" && m.value == (ms > 0 ? 1 : -1)
            })[0];
            return format.replace(/\{(.*?)\}/g, function (full, match) {
                switch (match) {
                case "num":
                    return num;
                case "unit":
                    return unit;
                case "sign":
                    return sign.src
                }
            })
        },
        getFormats: function () {
            return this.cachedFormat ? [this.cachedFormat].concat(this.compiledFormats) : this.compiledFormats
        },
        addFormat: function (src, allowsTime, match, variant, iso) {
            var to = match || [],
                loc = this,
                time, timeMarkers, lastIsNumeral;
            src = src.replace(/\s+/g, "[-,. ]*");
            src = src.replace(/\{([^,]+?)\}/g, function (all, k) {
                var value, arr, result, opt = k.match(/\?$/),
                    nc = k.match(/^(\d+)\??$/),
                    slice = k.match(/(\d)(?:-(\d))?/),
                    key = k.replace(/[^a-z]+$/, "");
                if (nc) value = loc["tokens"][nc[1]];
                else if (loc[key]) value = loc[key];
                else if (loc[key + "s"]) {
                    value = loc[key + "s"];
                    if (slice) {
                        arr = [];
                        value.forEach(function (m, i) {
                            var mod = i % (loc["units"] ? 8 : value.length);
                            if (mod >= slice[1] && mod <= (slice[2] || slice[1])) arr.push(m)
                        });
                        value = arr
                    }
                    value = arrayToAlternates(value)
                }
                if (nc) result = "(?:" + value + ")";
                else {
                    if (!match) to.push(key);
                    result = "(" + value + ")"
                } if (opt) result += "?";
                return result
            });
            if (allowsTime) {
                time = prepareTime(RequiredTime, loc, iso);
                timeMarkers = ["t", "[\\s\\u3000]"].concat(loc["timeMarker"]);
                lastIsNumeral = src.match(/\\d\{\d,\d\}\)+\??$/);
                addDateInputFormat(loc, "(?:" + time + ")[,\\s\\u3000]+?" + src, TimeFormat.concat(to), variant);
                addDateInputFormat(loc, src + "(?:[,\\s]*(?:" +
                    timeMarkers.join("|") + (lastIsNumeral ? "+" : "*") + ")" + time + ")?", to.concat(TimeFormat), variant)
            } else addDateInputFormat(loc, src, to, variant)
        }
    };

    function getLocalization(localeCode, fallback) {
        var loc;
        if (!isString(localeCode)) localeCode = "";
        loc = Localizations[localeCode] || Localizations[localeCode.slice(0, 2)];
        if (fallback === false && !loc) throw new Error("Invalid locale.");
        return loc || CurrentLocalization
    }

    function setLocalization(localeCode, set) {
        var loc, canAbbreviate;

        function initializeField(name) {
            var val = loc[name];
            if (isString(val)) loc[name] = val.split(",");
            else if (!val) loc[name] = []
        }

        function eachAlternate(str, fn) {
            str = str.split("+").map(function (split) {
                return split.replace(/(.+):(.+)$/, function (full, base, suffixes) {
                    return suffixes.split("|").map(function (suffix) {
                        return base + suffix
                    }).join("|")
                })
            }).join("|");
            return str.split("|").forEach(fn)
        }

        function setArray(name, abbreviate, multiple) {
            var arr = [];
            loc[name].forEach(function (full, i) {
                if (abbreviate) full += "+" + full.slice(0, 3);
                eachAlternate(full, function (day, j) {
                    arr[j * multiple +
                        i] = day.toLowerCase()
                })
            });
            loc[name] = arr
        }

        function getDigit(start, stop, allowNumbers) {
            var str = "\\d{" + start + "," + stop + "}";
            if (allowNumbers) str += "|(?:" + arrayToAlternates(loc["numbers"]) + ")+";
            return str
        }

        function getNum() {
            var arr = ["\\d+"].concat(loc["articles"]);
            if (loc["numbers"]) arr = arr.concat(loc["numbers"]);
            return arrayToAlternates(arr)
        }

        function setDefault(name, value) {
            loc[name] = loc[name] || value
        }

        function setModifiers() {
            var arr = [];
            loc.modifiersByName = {};
            loc["modifiers"].push({
                "name": "day",
                "src": "yesterday",
                "value": -1
            });
            loc["modifiers"].push({
                "name": "day",
                "src": "today",
                "value": 0
            });
            loc["modifiers"].push({
                "name": "day",
                "src": "tomorrow",
                "value": 1
            });
            loc["modifiers"].forEach(function (modifier) {
                var name = modifier.name;
                eachAlternate(modifier.src, function (t) {
                    var locEntry = loc[name];
                    loc.modifiersByName[t] = modifier;
                    arr.push({
                        name: name,
                        src: t,
                        value: modifier.value
                    });
                    loc[name] = locEntry ? locEntry + "|" + t : t
                })
            });
            loc["day"] += "|" + arrayToAlternates(loc["weekdays"]);
            loc["modifiers"] = arr
        }
        loc = new Localization(set);
        initializeField("modifiers");
        "months,weekdays,units,numbers,articles,tokens,timeMarker,ampm,timeSuffixes,dateParse,timeParse".split(",").forEach(initializeField);
        canAbbreviate = !loc["monthSuffix"];
        setArray("months", canAbbreviate, 12);
        setArray("weekdays", canAbbreviate, 7);
        setArray("units", false, 8);
        setArray("numbers", false, 10);
        setDefault("code", localeCode);
        setDefault("date", getDigit(1, 2, loc["digitDate"]));
        setDefault("year", "'\\d{2}|" + getDigit(4, 4));
        setDefault("num", getNum());
        setModifiers();
        if (loc["monthSuffix"]) {
            loc["month"] = getDigit(1,
                2);
            loc["months"] = getRange(1, 12).map(function (n) {
                return n + loc["monthSuffix"]
            })
        }
        loc["full_month"] = getDigit(1, 2) + "|" + arrayToAlternates(loc["months"]);
        if (loc["timeSuffixes"].length > 0) loc.addFormat(prepareTime(RequiredTime, loc), false, TimeFormat);
        loc.addFormat("{day}", true);
        loc.addFormat("{month}" + (loc["monthSuffix"] || ""));
        loc.addFormat("{year}" + (loc["yearSuffix"] || ""));
        loc["timeParse"].forEach(function (src) {
            loc.addFormat(src, true)
        });
        loc["dateParse"].forEach(function (src) {
            loc.addFormat(src)
        });
        return Localizations[localeCode] =
            loc
    }

    function addDateInputFormat(locale, format, match, variant) {
        locale.compiledFormats.unshift({
            variant: variant,
            locale: locale,
            reg: regexp("^" + format + "$", "i"),
            to: match
        })
    }

    function simpleCapitalize(str) {
        return str.slice(0, 1).toUpperCase() + str.slice(1)
    }

    function arrayToAlternates(arr) {
        return arr.filter(function (el) {
            return !!el
        }).join("|")
    }

    function collectDateArguments(args, allowDuration) {
        var obj, arr;
        if (isObject(args[0])) return args;
        else if (isNumber(args[0]) && !isNumber(args[1])) return [args[0]];
        else if (isString(args[0]) &&
            allowDuration) return [getDateParamsFromString(args[0]), args[1]];
        obj = {};
        DateArgumentUnits.forEach(function (u, i) {
            obj[u.unit] = args[i]
        });
        return [obj]
    }

    function getDateParamsFromString(str, num) {
        var params = {};
        match = str.match(/^(\d+)?\s?(\w+?)s?$/i);
        if (match) {
            if (isUndefined(num)) num = parseInt(match[1]) || 1;
            params[match[2].toLowerCase()] = num
        }
        return params
    }

    function getFormatMatch(match, arr) {
        var obj = {}, value, num;
        arr.forEach(function (key, i) {
            value = match[i + 1];
            if (isUndefined(value) || value === "") return;
            if (key === "year") obj.yearAsString =
                value.replace(/'/, "");
            num = parseFloat(value.replace(/'/, "").replace(/,/, "."));
            obj[key] = !isNaN(num) ? num : value.toLowerCase()
        });
        return obj
    }

    function cleanDateInput(str) {
        str = str.trim().replace(/^just (?=now)|\.+$/i, "");
        return convertAsianDigits(str)
    }

    function convertAsianDigits(str) {
        return str.replace(AsianDigitReg, function (full, disallowed, match) {
            var sum = 0,
                place = 1,
                lastWasHolder, lastHolder;
            if (disallowed) return full;
            match.split("").reverse().forEach(function (letter) {
                var value = AsianDigitMap[letter],
                    holder =
                        value > 9;
                if (holder) {
                    if (lastWasHolder) sum += place;
                    place *= value / (lastHolder || 1);
                    lastHolder = value
                } else {
                    if (lastWasHolder === false) place *= 10;
                    sum += place * value
                }
                lastWasHolder = holder
            });
            if (lastWasHolder) sum += place;
            return sum
        })
    }

    function getExtendedDate(f, localeCode, prefer, forceUTC) {
        var d = new date,
            relative = false,
            staticTime = false,
            baseLocalization, loc, format, set, unit, weekday, num, tmp, after;
        d.utc(forceUTC);
        if (isDate(f)) d.utc(f.isUTC()).setTime(f.getTime());
        else if (isNumber(f)) d.setTime(f);
        else if (isObject(f)) {
            d.set(f,
                true);
            set = f
        } else if (isString(f)) {
            baseLocalization = getLocalization(localeCode);
            f = cleanDateInput(f);
            if (baseLocalization) iterateOverObject(baseLocalization.getFormats(), function (i, dif) {
                var match = f.match(dif.reg);
                if (match) {
                    format = dif;
                    loc = format.locale;
                    set = getFormatMatch(match, format.to, loc);
                    if (set["utc"]) d.utc();
                    loc.cachedFormat = format;
                    if (set.timestamp) {
                        set = set.timestamp;
                        return false
                    }
                    if (format.variant && !isString(set["month"]) && (isString(set["date"]) || baseLocalization.hasVariant(localeCode))) {
                        tmp = set["month"];
                        set["month"] = set["date"];
                        set["date"] = tmp
                    }
                    if (set["year"] && set.yearAsString.length === 2) set["year"] = getYearFromAbbreviation(set["year"]);
                    if (set["month"]) {
                        set["month"] = loc.getMonth(set["month"]);
                        if (set["shift"] && !set["unit"]) set["unit"] = loc["units"][7]
                    }
                    if (set["weekday"] && set["date"]) delete set["weekday"];
                    else if (set["weekday"]) {
                        set["weekday"] = loc.getWeekday(set["weekday"]);
                        if (set["shift"] && !set["unit"]) set["unit"] = loc["units"][5]
                    }
                    if (set["day"] && (tmp = loc.modifiersByName[set["day"]])) {
                        set["day"] = tmp.value;
                        d.reset();
                        relative = true
                    } else if (set["day"] && (weekday = loc.getWeekday(set["day"])) > -1) {
                        delete set["day"];
                        if (set["num"] && set["month"]) {
                            after = function () {
                                var w = d.getWeekday();
                                d.setWeekday(7 * (set["num"] - 1) + (w > weekday ? weekday + 7 : weekday))
                            };
                            set["day"] = 1
                        } else set["weekday"] = weekday
                    }
                    if (set["date"] && !isNumber(set["date"])) set["date"] = loc.getNumericDate(set["date"]);
                    if (loc.matchPM(set["ampm"]) && set["hour"] < 12) set["hour"] += 12;
                    else if (loc.matchAM(set["ampm"]) && set["hour"] === 12) set["hour"] = 0;
                    if ("offset_hours" in set ||
                        "offset_minutes" in set) {
                        d.utc();
                        set["offset_minutes"] = set["offset_minutes"] || 0;
                        set["offset_minutes"] += set["offset_hours"] * 60;
                        if (set["offset_sign"] === "-") set["offset_minutes"] *= -1;
                        set["minute"] -= set["offset_minutes"]
                    }
                    if (set["unit"]) {
                        relative = true;
                        num = loc.getNumber(set["num"]);
                        unit = loc.getEnglishUnit(set["unit"]);
                        if (set["shift"] || set["edge"]) {
                            num *= (tmp = loc.modifiersByName[set["shift"]]) ? tmp.value : 0;
                            if (unit === "month" && isDefined(set["date"])) {
                                d.set({
                                    "day": set["date"]
                                }, true);
                                delete set["date"]
                            }
                            if (unit ===
                                "year" && isDefined(set["month"])) {
                                d.set({
                                    "month": set["month"],
                                    "day": set["date"]
                                }, true);
                                delete set["month"];
                                delete set["date"]
                            }
                        }
                        if (set["sign"] && (tmp = loc.modifiersByName[set["sign"]])) num *= tmp.value;
                        if (isDefined(set["weekday"])) {
                            d.set({
                                "weekday": set["weekday"]
                            }, true);
                            delete set["weekday"]
                        }
                        set[unit] = (set[unit] || 0) + num;
                        if ((unit === "day" || unit === "week" || unit === "month" || unit === "year") && isDefined(set["hour"])) staticTime = true
                    } else if (set["edge"] && set["hour"]) staticTime = true;
                    if (set["year_sign"] === "-") set["year"] *= -1;
                    DateUnitsReversed.slice(1, 4).forEach(function (u, i) {
                        var value = set[u.unit],
                            fraction = value % 1;
                        if (fraction) {
                            set[DateUnitsReversed[i].unit] = round(fraction * (u.unit === "second" ? 1E3 : 60));
                            set[u.unit] = floor(value)
                        }
                    });
                    return false
                }
            });
            if (!format) {
                if (f !== "now") d = new date(f);
                if (forceUTC) d.addMinutes(-d.getTimezoneOffset())
            } else if (relative) {
                if (staticTime) d.reset();
                d.advance(set)
            } else {
                if (d._utc) d.reset();
                updateDate(d, set, true, false, prefer)
            } if (set && set["edge"]) {
                tmp = loc.modifiersByName[set["edge"]];
                iterateOverObject(DateUnitsReversed.slice(4),
                    function (i, u) {
                        if (isDefined(set[u.unit])) {
                            unit = u.unit;
                            return false
                        }
                    });
                if (unit === "year") set.specificity = "month";
                else if (unit === "month" || unit === "week") set.specificity = "day";
                d[(tmp.value < 0 ? "endOf" : "beginningOf") + simpleCapitalize(unit)]();
                if (tmp.value === -2) d.reset()
            }
            if (staticTime) {
                d.reset();
                if (isDefined(set["hour"])) d.setHours(set["hour"]);
                if (isDefined(set["minute"])) d.setMinutes(set["minute"]);
                if (isDefined(set["second"])) d.setSeconds(set["second"])
            }
            if (d && d.getTime() && isDefined(set)) {
                var currentWeekday =
                    (new date).getWeekday();
                var weekday = d.getWeekday();
                if (isDefined(set["week"]) || isDefined(set["weekday"]))
                    if (isDefined(set["shift"])) {
                        if ((set["shift"] === "this" || set["shift"] === "last") && set["unit"] === "week")
                            if (currentWeekday > weekday) d.addWeeks(1)
                    } else if (currentWeekday > weekday) d.addWeeks(1)
            }
            if (after) after();
            d.utc(false)
        }
        return {
            date: d,
            set: set
        }
    }

    function getYearFromAbbreviation(year) {
        return round(callDateGet(new date, "FullYear") / 100) * 100 - round(year / 100) * 100 + year
    }

    function getShortHour(d) {
        var hours = callDateGet(d,
            "Hours");
        return hours === 0 ? 12 : hours - floor(hours / 13) * 12
    }

    function getWeekNumber(date) {
        date = date.clone();
        var dow = callDateGet(date, "Day") || 7;
        date.addDays(4 - dow).reset();
        return 1 + floor(date.daysSince(date.clone().beginningOfYear()) / 7)
    }

    function getAdjustedUnit(ms) {
        var next, ams = math.abs(ms),
            value = ams,
            unit = 0;
        DateUnitsReversed.slice(1).forEach(function (u, i) {
            next = floor(round(ams / u.multiplier() * 10) / 10);
            if (next >= 1) {
                value = next;
                unit = i + 1
            }
        });
        return [value, unit, ms]
    }

    function getAdjustedUnitWithMonthFallback(date) {
        var adu =
            getAdjustedUnit(date.millisecondsFromNow());
        if (adu[1] === 6) adu[0] = math.abs(date.monthsFromNow());
        return adu
    }

    function formatDate(date, format, relative, localeCode) {
        var adu, loc = getLocalization(localeCode),
            caps = regexp(/^[A-Z]/),
            value, shortcut;
        if (!date.isValid()) return "Invalid Date";
        else if (Date[format]) format = Date[format];
        else if (isFunction(format)) {
            adu = getAdjustedUnitWithMonthFallback(date);
            format = format.apply(date, adu.concat(loc))
        }
        if (!format && relative) {
            adu = adu || getAdjustedUnitWithMonthFallback(date);
            if (adu[1] === 0) {
                adu[1] = 1;
                adu[0] = 1
            }
            return loc.getRelativeFormat(adu)
        }
        format = format || "long";
        format = loc[format] || format;
        DateOutputFormats.forEach(function (dof) {
            format = format.replace(regexp("\\{(" + dof.token + ")(\\d)?\\}", dof.word ? "i" : ""), function (m, t, d) {
                var val = dof.format(date, loc, d || 1, t),
                    l = t.length,
                    one = t.match(/^(.)\1+$/);
                if (dof.word) {
                    if (l === 3) val = val.slice(0, 3);
                    if (one || t.match(caps)) val = simpleCapitalize(val)
                } else if (one && !dof.text) val = (isNumber(val) ? padNumber(val, l) : val.toString()).slice(-l);
                return val
            })
        });
        return format
    }

    function compareDate(d, find, buffer, forceUTC) {
        var p, t, min, max, minOffset, maxOffset, override, capitalized, accuracy = 0,
            loBuffer = 0,
            hiBuffer = 0;
        p = getExtendedDate(find, null, null, forceUTC);
        if (buffer > 0) {
            loBuffer = hiBuffer = buffer;
            override = true
        }
        if (!p.date.isValid()) return false;
        if (p.set && p.set.specificity) {
            DateUnits.forEach(function (u, i) {
                if (u.unit === p.set.specificity) accuracy = u.multiplier(p.date, d - p.date) - 1
            });
            capitalized = simpleCapitalize(p.set.specificity);
            if (p.set["edge"] || p.set["shift"]) p.date["beginningOf" +
                capitalized]();
            if (p.set.specificity === "month") max = p.date.clone()["endOf" + capitalized]().getTime();
            if (!override && p.set["sign"] && p.set.specificity != "millisecond") {
                loBuffer = 50;
                hiBuffer = -50
            }
        }
        t = d.getTime();
        min = p.date.getTime();
        max = max || min + accuracy;
        max = compensateForTimezoneTraversal(d, min, max);
        return t >= min - loBuffer && t <= max + hiBuffer
    }

    function compensateForTimezoneTraversal(d, min, max) {
        var dMin, dMax, minOffset, maxOffset;
        dMin = new Date(min);
        dMax = (new Date(max)).utc(d.isUTC());
        if (callDateGet(dMax, "Hours") !==
            23) {
            minOffset = dMin.getTimezoneOffset();
            maxOffset = dMax.getTimezoneOffset();
            if (minOffset !== maxOffset) max += (maxOffset - minOffset).minutes()
        }
        return max
    }

    function updateDate(d, params, reset, advance, prefer) {
        var weekday, specificityIndex;

        function getParam(key) {
            return isDefined(params[key]) ? params[key] : params[key + "s"]
        }

        function paramExists(key) {
            return isDefined(getParam(key))
        }

        function uniqueParamExists(key, isDay) {
            return paramExists(key) || isDay && paramExists("weekday")
        }

        function canDisambiguate() {
            var now = new date;
            return prefer === -1 && d > now || prefer === 1 && d < now
        }
        if (isNumber(params) && advance) params = {
            "milliseconds": params
        };
        else if (isNumber(params)) {
            d.setTime(params);
            return d
        }
        if (isDefined(params["date"])) params["day"] = params["date"];
        iterateOverObject(DateUnitsReversed, function (i, u) {
            var isDay = u.unit === "day";
            if (uniqueParamExists(u.unit, isDay)) {
                params.specificity = u.unit;
                specificityIndex = +i;
                return false
            } else if (reset && u.unit !== "week" && (!isDay || !paramExists("week"))) callDateSet(d, u.method, isDay ? 1 : 0)
        });
        DateUnits.forEach(function (u,
            i) {
            var unit = u.unit,
                method = u.method,
                higherUnit = DateUnits[i - 1],
                value;
            value = getParam(unit);
            if (isUndefined(value)) return;
            if (advance) {
                if (unit === "week") {
                    value = value * 7;
                    method = "Date"
                }
                value = value * advance + callDateGet(d, method)
            } else if (unit === "month" && paramExists("day")) callDateSet(d, "Date", 15);
            callDateSet(d, method, value);
            if (advance && unit === "month") checkMonthTraversal(d, value)
        });
        if (!advance && !paramExists("day") && paramExists("weekday")) {
            var weekday = getParam("weekday"),
                isAhead, futurePreferred;
            d.setWeekday(weekday)
        }
        if (canDisambiguate()) iterateOverObject(DateUnitsReversed.slice(specificityIndex +
            1), function (i, u) {
            var ambiguous = u.ambiguous || u.unit === "week" && paramExists("weekday");
            if (ambiguous && !uniqueParamExists(u.unit, u.unit === "day")) {
                d[u.addMethod](prefer);
                return false
            }
        });
        return d
    }

    function callDateGet(d, method) {
        return d["get" + (d._utc ? "UTC" : "") + method]()
    }

    function callDateSet(d, method, value) {
        return d["set" + (d._utc && method != "ISOWeek" ? "UTC" : "") + method](value)
    }

    function prepareTime(format, loc, iso) {
        var timeSuffixMapping = {
            "h": 0,
            "m": 1,
            "s": 2
        }, add;
        loc = loc || English;
        return format.replace(/{([a-z])}/g,
            function (full, token) {
                var separators = [],
                    isHours = token === "h",
                    tokenIsRequired = isHours && !iso;
                if (token === "t") return loc["ampm"].join("|");
                else {
                    if (isHours) separators.push(":");
                    if (add = loc["timeSuffixes"][timeSuffixMapping[token]]) separators.push(add + "\\s*");
                    return separators.length === 0 ? "" : "(?:" + separators.join("|") + ")" + (tokenIsRequired ? "" : "?")
                }
            })
    }

    function checkMonthTraversal(date, targetMonth) {
        if (targetMonth < 0) targetMonth = targetMonth % 12 + 12;
        if (targetMonth % 12 != callDateGet(date, "Month")) callDateSet(date, "Date",
            0)
    }

    function createDate(args, prefer, forceUTC) {
        var f, localeCode;
        if (isNumber(args[1])) f = collectDateArguments(args)[0];
        else {
            f = args[0];
            localeCode = args[1]
        }
        return getExtendedDate(f, localeCode, prefer, forceUTC).date
    }

    function buildDateUnits() {
        DateUnitsReversed = DateUnits.concat().reverse();
        DateArgumentUnits = DateUnits.concat();
        DateArgumentUnits.splice(2, 1)
    }

    function buildDateMethods() {
        extendSimilar(date, true, false, DateUnits, function (methods, u, i) {
            var unit = u.unit,
                caps = simpleCapitalize(unit),
                multiplier = u.multiplier(),
                since, until;
            u.addMethod = "add" + caps + "s";

            function applyErrorMargin(ms) {
                var num = ms / multiplier,
                    fraction = num % 1,
                    error = u.error || 0.999;
                if (fraction && math.abs(fraction % 1) > error) num = round(num);
                return parseInt(num)
            }
            since = function (f, localeCode) {
                return applyErrorMargin(this.getTime() - date.create(f, localeCode).getTime())
            };
            until = function (f, localeCode) {
                return applyErrorMargin(date.create(f, localeCode).getTime() - this.getTime())
            };
            methods[unit + "sAgo"] = until;
            methods[unit + "sUntil"] = until;
            methods[unit + "sSince"] = since;
            methods[unit +
                "sFromNow"] = since;
            methods[u.addMethod] = function (num, reset) {
                var set = {};
                set[unit] = num;
                return this.advance(set, reset)
            };
            buildNumberToDateAlias(u, multiplier);
            if (i < 3)["Last", "This", "Next"].forEach(function (shift) {
                methods["is" + shift + caps] = function () {
                    return this.is(shift + " " + unit)
                }
            });
            if (i < 4) {
                methods["beginningOf" + caps] = function () {
                    var set = {};
                    switch (unit) {
                    case "year":
                        set["year"] = callDateGet(this, "FullYear");
                        break;
                    case "month":
                        set["month"] = callDateGet(this, "Month");
                        break;
                    case "day":
                        set["day"] = callDateGet(this,
                            "Date");
                        break;
                    case "week":
                        set["weekday"] = 0;
                        break
                    }
                    return this.set(set, true)
                };
                methods["endOf" + caps] = function () {
                    var set = {
                        "hours": 23,
                        "minutes": 59,
                        "seconds": 59,
                        "milliseconds": 999
                    };
                    switch (unit) {
                    case "year":
                        set["month"] = 11;
                        set["day"] = 31;
                        break;
                    case "month":
                        set["day"] = this.daysInMonth();
                        break;
                    case "week":
                        set["weekday"] = 6;
                        break
                    }
                    return this.set(set, true)
                }
            }
        })
    }

    function buildCoreInputFormats() {
        English.addFormat("([+-])?(\\d{4,4})[-.]?{full_month}[-.]?(\\d{1,2})?", true, ["year_sign", "year", "month", "date"], false,
            true);
        English.addFormat("(\\d{1,2})[-.\\/]{full_month}(?:[-.\\/](\\d{2,4}))?", true, ["date", "month", "year"], true);
        English.addFormat("{full_month}[-.](\\d{4,4})", false, ["month", "year"]);
        English.addFormat("\\/Date\\((\\d+(?:\\+\\d{4,4})?)\\)\\/", false, ["timestamp"]);
        English.addFormat(prepareTime(RequiredTime, English), false, TimeFormat);
        CoreDateFormats = English.compiledFormats.slice(0, 7).reverse();
        English.compiledFormats = English.compiledFormats.slice(7).concat(CoreDateFormats)
    }

    function buildDateOutputShortcuts() {
        extendSimilar(date,
            true, false, "short,long,full", function (methods, name) {
                methods[name] = function (localeCode) {
                    return formatDate(this, name, false, localeCode)
                }
            })
    }

    function buildAsianDigits() {
        KanjiDigits.split("").forEach(function (digit, value) {
            var holder;
            if (value > 9) value = math.pow(10, value - 9);
            AsianDigitMap[digit] = value
        });
        FullWidthDigits.split("").forEach(function (digit, value) {
            AsianDigitMap[digit] = value
        });
        AsianDigitReg = regexp("([\u671f\u9031\u5468])?([" + KanjiDigits + FullWidthDigits + "]+)(?!\u6628)", "g")
    }

    function buildRelativeAliases() {
        var special =
            "today,yesterday,tomorrow,weekday,weekend,future,past".split(",");
        var weekdays = English["weekdays"].slice(0, 7);
        var months = English["months"].slice(0, 12);
        extendSimilar(date, true, false, special.concat(weekdays).concat(months), function (methods, name) {
            methods["is" + simpleCapitalize(name)] = function (utc) {
                return this.is(name, 0, utc)
            }
        })
    }

    function buildUTCAliases() {
        date.extend({
            "utc": {
                "create": function () {
                    return createDate(arguments, 0, true)
                },
                "past": function () {
                    return createDate(arguments, -1, true)
                },
                "future": function () {
                    return createDate(arguments,
                        1, true)
                }
            }
        }, false, false)
    }

    function setDateProperties() {
        date.extend({
            "RFC1123": "{Dow}, {dd} {Mon} {yyyy} {HH}:{mm}:{ss} {tz}",
            "RFC1036": "{Weekday}, {dd}-{Mon}-{yy} {HH}:{mm}:{ss} {tz}",
            "ISO8601_DATE": "{yyyy}-{MM}-{dd}",
            "ISO8601_DATETIME": "{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}.{fff}{isotz}"
        }, false, false)
    }
    date.extend({
        "create": function () {
            return createDate(arguments)
        },
        "past": function () {
            return createDate(arguments, -1)
        },
        "future": function () {
            return createDate(arguments, 1)
        },
        "addLocale": function (localeCode, set) {
            return setLocalization(localeCode,
                set)
        },
        "setLocale": function (localeCode, set) {
            var loc = getLocalization(localeCode, false);
            CurrentLocalization = loc;
            if (localeCode && localeCode != loc["code"]) loc["code"] = localeCode;
            return loc
        },
        "getLocale": function (localeCode) {
            return !localeCode ? CurrentLocalization : getLocalization(localeCode, false)
        },
        "addFormat": function (format, match, localeCode) {
            addDateInputFormat(getLocalization(localeCode), format, match)
        },
        "addOutputFormat": function (format) {
            DateOutputFormats.push(format)
        }
    }, false, false);
    date.extend({
        "set": function () {
            var args =
                collectDateArguments(arguments);
            return updateDate(this, args[0], args[1])
        },
        "setWeekday": function (dow) {
            if (isUndefined(dow)) return;
            return callDateSet(this, "Date", callDateGet(this, "Date") + dow - callDateGet(this, "Day"))
        },
        "setISOWeek": function (week) {
            var weekday = callDateGet(this, "Day") || 7;
            if (isUndefined(week)) return;
            this.set({
                "month": 0,
                "date": 4
            });
            this.set({
                "weekday": 1
            });
            if (week > 1) this.addWeeks(week - 1);
            if (weekday !== 1) this.advance({
                "days": weekday - 1
            });
            return this.getTime()
        },
        "getISOWeek": function () {
            return getWeekNumber(this)
        },
        "getUTCOffset": function (iso) {
            var offset = this._utc ? 0 : this.getTimezoneOffset();
            var colon = iso === true ? ":" : "";
            if (!offset && iso) return "Z";
            return padNumber(floor(-offset / 60), 2, true) + colon + padNumber(math.abs(offset % 60), 2)
        },
        "utc": function (set) {
            defineProperty(this, "_utc", set === true || arguments.length === 0);
            return this
        },
        "isUTC": function () {
            return !!this._utc || this.getTimezoneOffset() === 0
        },
        "advance": function () {
            var args = collectDateArguments(arguments, true);
            return updateDate(this, args[0], args[1], 1)
        },
        "rewind": function () {
            var args =
                collectDateArguments(arguments, true);
            return updateDate(this, args[0], args[1], -1)
        },
        "isValid": function () {
            return !isNaN(this.getTime())
        },
        "isAfter": function (d, margin, utc) {
            return this.getTime() > date.create(d).getTime() - (margin || 0)
        },
        "isBefore": function (d, margin) {
            return this.getTime() < date.create(d).getTime() + (margin || 0)
        },
        "isBetween": function (d1, d2, margin) {
            var t = this.getTime();
            var t1 = date.create(d1).getTime();
            var t2 = date.create(d2).getTime();
            var lo = math.min(t1, t2);
            var hi = math.max(t1, t2);
            margin = margin || 0;
            return lo -
                margin < t && hi + margin > t
        },
        "isLeapYear": function () {
            var year = callDateGet(this, "FullYear");
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
        },
        "daysInMonth": function () {
            return 32 - callDateGet(new date(callDateGet(this, "FullYear"), callDateGet(this, "Month"), 32), "Date")
        },
        "format": function (f, localeCode) {
            return formatDate(this, f, false, localeCode)
        },
        "relative": function (f, localeCode) {
            if (isString(f)) {
                localeCode = f;
                f = null
            }
            return formatDate(this, f, true, localeCode)
        },
        "is": function (d, margin, utc) {
            var tmp, comp;
            if (!this.isValid()) return;
            if (isString(d)) {
                d = d.trim().toLowerCase();
                comp = this.clone().utc(utc);
                switch (true) {
                case d === "future":
                    return this.getTime() > (new date).getTime();
                case d === "past":
                    return this.getTime() < (new date).getTime();
                case d === "weekday":
                    return callDateGet(comp, "Day") > 0 && callDateGet(comp, "Day") < 6;
                case d === "weekend":
                    return callDateGet(comp, "Day") === 0 || callDateGet(comp, "Day") === 6;
                case (tmp = English["weekdays"].indexOf(d) % 7) > -1:
                    return callDateGet(comp, "Day") === tmp;
                case (tmp = English["months"].indexOf(d) % 12) > -1:
                    return callDateGet(comp,
                        "Month") === tmp
                }
            }
            return compareDate(this, d, margin, utc)
        },
        "reset": function (unit) {
            var params = {}, recognized;
            unit = unit || "hours";
            if (unit === "date") unit = "days";
            recognized = DateUnits.some(function (u) {
                return unit === u.unit || unit === u.unit + "s"
            });
            params[unit] = unit.match(/^days?/) ? 1 : 0;
            return recognized ? this.set(params, true) : this
        },
        "clone": function () {
            var d = new date(this.getTime());
            d.utc( !! this._utc);
            return d
        }
    });
    date.extend({
        "iso": function () {
            return this.toISOString()
        },
        "getWeekday": date.prototype.getDay,
        "getUTCWeekday": date.prototype.getUTCDay
    });

    function buildNumberToDateAlias(u, multiplier) {
        var unit = u.unit,
            methods = {};

        function base() {
            return round(this * multiplier)
        }

        function after() {
            return createDate(arguments)[u.addMethod](this)
        }

        function before() {
            return createDate(arguments)[u.addMethod](-this)
        }
        methods[unit] = base;
        methods[unit + "s"] = base;
        methods[unit + "Before"] = before;
        methods[unit + "sBefore"] = before;
        methods[unit + "Ago"] = before;
        methods[unit + "sAgo"] = before;
        methods[unit + "After"] = after;
        methods[unit + "sAfter"] = after;
        methods[unit + "FromNow"] = after;
        methods[unit +
            "sFromNow"] = after;
        number.extend(methods)
    }
    number.extend({
        "duration": function (localeCode) {
            return getLocalization(localeCode).getDuration(this)
        }
    });
    English = CurrentLocalization = date.addLocale("en", {
        "plural": true,
        "timeMarker": "at",
        "ampm": "am,pm",
        "months": "January,February,March,April,May,June,July,August,September,October,November,December",
        "weekdays": "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",
        "units": "millisecond:|s,second:|s,minute:|s,hour:|s,day:|s,week:|s,month:|s,year:|s",
        "numbers": "one,two,three,four,five,six,seven,eight,nine,ten",
        "articles": "a,an,the",
        "tokens": "the,st|nd|rd|th,of",
        "short": "{Month} {d}, {yyyy}",
        "long": "{Month} {d}, {yyyy} {h}:{mm}{tt}",
        "full": "{Weekday} {Month} {d}, {yyyy} {h}:{mm}:{ss}{tt}",
        "past": "{num} {unit} {sign}",
        "future": "{num} {unit} {sign}",
        "duration": "{num} {unit}",
        "modifiers": [{
            "name": "sign",
            "src": "ago|before",
            "value": -1
        }, {
            "name": "sign",
            "src": "from now|after|from|in|later",
            "value": 1
        }, {
            "name": "edge",
            "src": "last day",
            "value": -2
        }, {
            "name": "edge",
            "src": "end",
            "value": -1
        }, {
            "name": "edge",
            "src": "first day|beginning",
            "value": 1
        }, {
            "name": "shift",
            "src": "last",
            "value": -1
        }, {
            "name": "shift",
            "src": "the|this",
            "value": 0
        }, {
            "name": "shift",
            "src": "next",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}", "{sign} {num} {unit}", "{month} {year}", "{shift} {unit=5-7}", "{0?} {date}{1}", "{0?} {edge} of {shift?} {unit=4-7?}{month?}{year?}"],
        "timeParse": ["{0} {num}{1} {day} of {month} {year?}", "{weekday?} {month} {date}{1?} {year?}", "{date} {month} {year}", "{date} {month}", "{shift} {weekday}", "{shift} week {weekday}", "{weekday} {2?} {shift} week",
            "{num} {unit=1-7} {sign} {day?}", "in {num} {unit=1-7} {sign} {day?}", "{0?} {edge} of {shift?} {unit?}{month?}{year?}", "{0?} {date}{1} of {month}", "{0?}{month?} {date?}{1?} of {shift} {unit=6-7}"
        ]
    });
    buildDateUnits();
    buildDateMethods();
    buildCoreInputFormats();
    buildDateOutputShortcuts();
    buildAsianDigits();
    buildRelativeAliases();
    buildUTCAliases();
    setDateProperties();
    Date.addLocale("da", {
        "plural": true,
        "months": "januar,februar,marts,april,maj,juni,juli,august,september,oktober,november,december",
        "weekdays": "s\u00f8ndag|sondag,mandag,tirsdag,onsdag,torsdag,fredag,l\u00f8rdag|lordag",
        "units": "millisekund:|er,sekund:|er,minut:|ter,tim:e|er,dag:|e,ug:e|er|en,m\u00e5ned:|er|en+maaned:|er|en,\u00e5r:||et+aar:||et",
        "numbers": "en|et,to,tre,fire,fem,seks,syv,otte,ni,ti",
        "tokens": "den,for",
        "articles": "den",
        "short": "d. {d}. {month} {yyyy}",
        "long": "den {d}. {month} {yyyy} {H}:{mm}",
        "full": "{Weekday} den {d}. {month} {yyyy} {H}:{mm}:{ss}",
        "past": "{num} {unit} {sign}",
        "future": "{sign} {num} {unit}",
        "duration": "{num} {unit}",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "forg\u00e5rs|i forg\u00e5rs|forgaars|i forgaars",
            "value": -2
        }, {
            "name": "day",
            "src": "i g\u00e5r|ig\u00e5r|i gaar|igaar",
            "value": -1
        }, {
            "name": "day",
            "src": "i dag|idag",
            "value": 0
        }, {
            "name": "day",
            "src": "i morgen|imorgen",
            "value": 1
        }, {
            "name": "day",
            "src": "over morgon|overmorgen|i over morgen|i overmorgen|iovermorgen",
            "value": 2
        }, {
            "name": "sign",
            "src": "siden",
            "value": -1
        }, {
            "name": "sign",
            "src": "om",
            "value": 1
        }, {
            "name": "shift",
            "src": "i sidste|sidste",
            "value": -1
        }, {
            "name": "shift",
            "src": "denne",
            "value": 0
        }, {
            "name": "shift",
            "src": "n\u00e6ste|naeste",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}",
            "{sign} {num} {unit}", "{1?} {num} {unit} {sign}", "{shift} {unit=5-7}"
        ],
        "timeParse": ["{0?} {weekday?} {date?} {month} {year}", "{date} {month}", "{shift} {weekday}"]
    });
    Date.addLocale("de", {
        "plural": true,
        "capitalizeUnit": true,
        "months": "Januar,Februar,M\u00e4rz|Marz,April,Mai,Juni,Juli,August,September,Oktober,November,Dezember",
        "weekdays": "Sonntag,Montag,Dienstag,Mittwoch,Donnerstag,Freitag,Samstag",
        "units": "Millisekunde:|n,Sekunde:|n,Minute:|n,Stunde:|n,Tag:|en,Woche:|n,Monat:|en,Jahr:|en",
        "numbers": "ein:|e|er|en|em,zwei,drei,vier,fuenf,sechs,sieben,acht,neun,zehn",
        "tokens": "der",
        "short": "{d}. {Month} {yyyy}",
        "long": "{d}. {Month} {yyyy} {H}:{mm}",
        "full": "{Weekday} {d}. {Month} {yyyy} {H}:{mm}:{ss}",
        "past": "{sign} {num} {unit}",
        "future": "{sign} {num} {unit}",
        "duration": "{num} {unit}",
        "timeMarker": "um",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "vorgestern",
            "value": -2
        }, {
            "name": "day",
            "src": "gestern",
            "value": -1
        }, {
            "name": "day",
            "src": "heute",
            "value": 0
        }, {
            "name": "day",
            "src": "morgen",
            "value": 1
        }, {
            "name": "day",
            "src": "\u00fcbermorgen|ubermorgen|uebermorgen",
            "value": 2
        }, {
            "name": "sign",
            "src": "vor:|her",
            "value": -1
        }, {
            "name": "sign",
            "src": "in",
            "value": 1
        }, {
            "name": "shift",
            "src": "letzte:|r|n|s",
            "value": -1
        }, {
            "name": "shift",
            "src": "n\u00e4chste:|r|n|s+nachste:|r|n|s+naechste:|r|n|s+kommende:n|r",
            "value": 1
        }],
        "dateParse": ["{sign} {num} {unit}", "{num} {unit} {sign}", "{shift} {unit=5-7}"],
        "timeParse": ["{weekday?} {date?} {month} {year?}", "{shift} {weekday}"]
    });
    Date.addLocale("es", {
        "plural": true,
        "months": "enero,febrero,marzo,abril,mayo,junio,julio,agosto,septiembre,octubre,noviembre,diciembre",
        "weekdays": "domingo,lunes,martes,mi\u00e9rcoles|miercoles,jueves,viernes,s\u00e1bado|sabado",
        "units": "milisegundo:|s,segundo:|s,minuto:|s,hora:|s,d\u00eda|d\u00edas|dia|dias,semana:|s,mes:|es,a\u00f1o|a\u00f1os|ano|anos",
        "numbers": "uno,dos,tres,cuatro,cinco,seis,siete,ocho,nueve,diez",
        "tokens": "el,de",
        "short": "{d} {month} {yyyy}",
        "long": "{d} {month} {yyyy} {H}:{mm}",
        "full": "{Weekday} {d} {month} {yyyy} {H}:{mm}:{ss}",
        "past": "{sign} {num} {unit}",
        "future": "{num} {unit} {sign}",
        "duration": "{num} {unit}",
        "timeMarker": "a las",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "anteayer",
            "value": -2
        }, {
            "name": "day",
            "src": "ayer",
            "value": -1
        }, {
            "name": "day",
            "src": "hoy",
            "value": 0
        }, {
            "name": "day",
            "src": "ma\u00f1ana|manana",
            "value": 1
        }, {
            "name": "sign",
            "src": "hace",
            "value": -1
        }, {
            "name": "sign",
            "src": "de ahora",
            "value": 1
        }, {
            "name": "shift",
            "src": "pasad:o|a",
            "value": -1
        }, {
            "name": "shift",
            "src": "pr\u00f3ximo|pr\u00f3xima|proximo|proxima",
            "value": 1
        }],
        "dateParse": ["{sign} {num} {unit}", "{num} {unit} {sign}", "{0?} {unit=5-7} {shift}",
            "{0?} {shift} {unit=5-7}"
        ],
        "timeParse": ["{shift} {weekday}", "{weekday} {shift}", "{date?} {1?} {month} {1?} {year?}"]
    });
    Date.addLocale("fi", {
        "plural": true,
        "timeMarker": "kello",
        "ampm": ",",
        "months": "tammikuu,helmikuu,maaliskuu,huhtikuu,toukokuu,kes\u00e4kuu,hein\u00e4kuu,elokuu,syyskuu,lokakuu,marraskuu,joulukuu",
        "weekdays": "sunnuntai,maanantai,tiistai,keskiviikko,torstai,perjantai,lauantai",
        "units": "millisekun:ti|tia|teja|tina|nin,sekun:ti|tia|teja|tina|nin,minuut:ti|tia|teja|tina|in,tun:ti|tia|teja|tina|nin,p\u00e4iv:\u00e4|\u00e4\u00e4|i\u00e4|\u00e4n\u00e4|\u00e4n,viik:ko|koa|koja|on|kona,kuukau:si|sia|tta|den|tena,vuo:si|sia|tta|den|tena",
        "numbers": "yksi|ensimm\u00e4inen,kaksi|toinen,kolm:e|as,nelj\u00e4:s,vii:si|des,kuu:si|des,seitsem\u00e4:n|s,kahdeksa:n|s,yhdeks\u00e4:n|s,kymmene:n|s",
        "articles": "",
        "optionals": "",
        "short": "{d}. {month}ta {yyyy}",
        "long": "{d}. {month}ta {yyyy} kello {H}.{mm}",
        "full": "{Weekday}na {d}. {month}ta {yyyy} kello {H}.{mm}",
        "relative": function (num, unit, ms, format) {
            var units = this["units"];

            function numberWithUnit(mult) {
                return (num === 1 ? "" : num + " ") + units[8 * mult + unit]
            }
            switch (format) {
            case "duration":
                return numberWithUnit(0);
            case "past":
                return numberWithUnit(num > 1 ? 1 : 0) + " sitten";
            case "future":
                return numberWithUnit(4) + " p\u00e4\u00e4st\u00e4"
            }
        },
        "modifiers": [{
            "name": "day",
            "src": "toissa p\u00e4iv\u00e4n\u00e4|toissa p\u00e4iv\u00e4ist\u00e4",
            "value": -2
        }, {
            "name": "day",
            "src": "eilen|eilist\u00e4",
            "value": -1
        }, {
            "name": "day",
            "src": "t\u00e4n\u00e4\u00e4n",
            "value": 0
        }, {
            "name": "day",
            "src": "huomenna|huomista",
            "value": 1
        }, {
            "name": "day",
            "src": "ylihuomenna|ylihuomista",
            "value": 2
        }, {
            "name": "sign",
            "src": "sitten|aiemmin",
            "value": -1
        }, {
            "name": "sign",
            "src": "p\u00e4\u00e4st\u00e4|kuluttua|my\u00f6hemmin",
            "value": 1
        }, {
            "name": "edge",
            "src": "viimeinen|viimeisen\u00e4",
            "value": -2
        }, {
            "name": "edge",
            "src": "lopussa",
            "value": -1
        }, {
            "name": "edge",
            "src": "ensimm\u00e4inen|ensimm\u00e4isen\u00e4",
            "value": 1
        }, {
            "name": "shift",
            "src": "edellinen|edellisen\u00e4|edelt\u00e4v\u00e4|edelt\u00e4v\u00e4n\u00e4|viime|toissa",
            "value": -1
        }, {
            "name": "shift",
            "src": "t\u00e4n\u00e4|t\u00e4m\u00e4n",
            "value": 0
        }, {
            "name": "shift",
            "src": "seuraava|seuraavana|tuleva|tulevana|ensi",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}", "{sign} {num} {unit}", "{num} {unit=4-5} {sign} {day}", "{month} {year}", "{shift} {unit=5-7}"],
        "timeParse": ["{0} {num}{1} {day} of {month} {year?}", "{weekday?} {month} {date}{1} {year?}", "{date} {month} {year}", "{shift} {weekday}", "{shift} week {weekday}", "{weekday} {2} {shift} week", "{0} {date}{1} of {month}", "{0}{month?} {date?}{1} of {shift} {unit=6-7}"]
    });
    Date.addLocale("fr", {
        "plural": true,
        "months": "janvier,f\u00e9vrier|fevrier,mars,avril,mai,juin,juillet,ao\u00fbt,septembre,octobre,novembre,d\u00e9cembre|decembre",
        "weekdays": "dimanche,lundi,mardi,mercredi,jeudi,vendredi,samedi",
        "units": "milliseconde:|s,seconde:|s,minute:|s,heure:|s,jour:|s,semaine:|s,mois,an:|s|n\u00e9e|nee",
        "numbers": "un:|e,deux,trois,quatre,cinq,six,sept,huit,neuf,dix",
        "tokens": ["l'|la|le"],
        "short": "{d} {month} {yyyy}",
        "long": "{d} {month} {yyyy} {H}:{mm}",
        "full": "{Weekday} {d} {month} {yyyy} {H}:{mm}:{ss}",
        "past": "{sign} {num} {unit}",
        "future": "{sign} {num} {unit}",
        "duration": "{num} {unit}",
        "timeMarker": "\u00e0",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "hier",
            "value": -1
        }, {
            "name": "day",
            "src": "aujourd'hui",
            "value": 0
        }, {
            "name": "day",
            "src": "demain",
            "value": 1
        }, {
            "name": "sign",
            "src": "il y a",
            "value": -1
        }, {
            "name": "sign",
            "src": "dans|d'ici",
            "value": 1
        }, {
            "name": "shift",
            "src": "derni:\u00e8r|er|\u00e8re|ere",
            "value": -1
        }, {
            "name": "shift",
            "src": "prochain:|e",
            "value": 1
        }],
        "dateParse": ["{sign} {num} {unit}", "{sign} {num} {unit}", "{0?} {unit=5-7} {shift}"],
        "timeParse": ["{weekday?} {0?} {date?} {month} {year?}", "{0?} {weekday} {shift}"]
    });
    Date.addLocale("it", {
        "plural": true,
        "months": "Gennaio,Febbraio,Marzo,Aprile,Maggio,Giugno,Luglio,Agosto,Settembre,Ottobre,Novembre,Dicembre",
        "weekdays": "Domenica,Luned:\u00ec|i,Marted:\u00ec|i,Mercoled:\u00ec|i,Gioved:\u00ec|i,Venerd:\u00ec|i,Sabato",
        "units": "millisecond:o|i,second:o|i,minut:o|i,or:a|e,giorn:o|i,settiman:a|e,mes:e|i,ann:o|i",
        "numbers": "un:|a|o|',due,tre,quattro,cinque,sei,sette,otto,nove,dieci",
        "tokens": "l'|la|il",
        "short": "{d} {Month} {yyyy}",
        "long": "{d} {Month} {yyyy} {H}:{mm}",
        "full": "{Weekday} {d} {Month} {yyyy} {H}:{mm}:{ss}",
        "past": "{num} {unit} {sign}",
        "future": "{num} {unit} {sign}",
        "duration": "{num} {unit}",
        "timeMarker": "alle",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "ieri",
            "value": -1
        }, {
            "name": "day",
            "src": "oggi",
            "value": 0
        }, {
            "name": "day",
            "src": "domani",
            "value": 1
        }, {
            "name": "day",
            "src": "dopodomani",
            "value": 2
        }, {
            "name": "sign",
            "src": "fa",
            "value": -1
        }, {
            "name": "sign",
            "src": "da adesso",
            "value": 1
        }, {
            "name": "shift",
            "src": "scors:o|a",
            "value": -1
        }, {
            "name": "shift",
            "src": "prossim:o|a",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}",
            "{0?} {unit=5-7} {shift}", "{0?} {shift} {unit=5-7}"
        ],
        "timeParse": ["{weekday?} {date?} {month} {year?}", "{shift} {weekday}"]
    });
    Date.addLocale("ja", {
        "monthSuffix": "\u6708",
        "weekdays": "\u65e5\u66dc\u65e5,\u6708\u66dc\u65e5,\u706b\u66dc\u65e5,\u6c34\u66dc\u65e5,\u6728\u66dc\u65e5,\u91d1\u66dc\u65e5,\u571f\u66dc\u65e5",
        "units": "\u30df\u30ea\u79d2,\u79d2,\u5206,\u6642\u9593,\u65e5,\u9031\u9593|\u9031,\u30f6\u6708|\u30f5\u6708|\u6708,\u5e74",
        "short": "{yyyy}\u5e74{M}\u6708{d}\u65e5",
        "long": "{yyyy}\u5e74{M}\u6708{d}\u65e5 {H}\u6642{mm}\u5206",
        "full": "{yyyy}\u5e74{M}\u6708{d}\u65e5 {Weekday} {H}\u6642{mm}\u5206{ss}\u79d2",
        "past": "{num}{unit}{sign}",
        "future": "{num}{unit}{sign}",
        "duration": "{num}{unit}",
        "timeSuffixes": "\u6642,\u5206,\u79d2",
        "ampm": "\u5348\u524d,\u5348\u5f8c",
        "modifiers": [{
            "name": "day",
            "src": "\u4e00\u6628\u65e5",
            "value": -2
        }, {
            "name": "day",
            "src": "\u6628\u65e5",
            "value": -1
        }, {
            "name": "day",
            "src": "\u4eca\u65e5",
            "value": 0
        }, {
            "name": "day",
            "src": "\u660e\u65e5",
            "value": 1
        }, {
            "name": "day",
            "src": "\u660e\u5f8c\u65e5",
            "value": 2
        }, {
            "name": "sign",
            "src": "\u524d",
            "value": -1
        }, {
            "name": "sign",
            "src": "\u5f8c",
            "value": 1
        }, {
            "name": "shift",
            "src": "\u53bb|\u5148",
            "value": -1
        }, {
            "name": "shift",
            "src": "\u6765",
            "value": 1
        }],
        "dateParse": ["{num}{unit}{sign}"],
        "timeParse": ["{shift}{unit=5-7}{weekday?}", "{year}\u5e74{month?}\u6708?{date?}\u65e5?", "{month}\u6708{date?}\u65e5?", "{date}\u65e5"]
    });
    Date.addLocale("ko", {
        "digitDate": true,
        "monthSuffix": "\uc6d4",
        "weekdays": "\uc77c\uc694\uc77c,\uc6d4\uc694\uc77c,\ud654\uc694\uc77c,\uc218\uc694\uc77c,\ubaa9\uc694\uc77c,\uae08\uc694\uc77c,\ud1a0\uc694\uc77c",
        "units": "\ubc00\ub9ac\ucd08,\ucd08,\ubd84,\uc2dc\uac04,\uc77c,\uc8fc,\uac1c\uc6d4|\ub2ec,\ub144",
        "numbers": "\uc77c|\ud55c,\uc774,\uc0bc,\uc0ac,\uc624,\uc721,\uce60,\ud314,\uad6c,\uc2ed",
        "short": "{yyyy}\ub144{M}\uc6d4{d}\uc77c",
        "long": "{yyyy}\ub144{M}\uc6d4{d}\uc77c {H}\uc2dc{mm}\ubd84",
        "full": "{yyyy}\ub144{M}\uc6d4{d}\uc77c {Weekday} {H}\uc2dc{mm}\ubd84{ss}\ucd08",
        "past": "{num}{unit} {sign}",
        "future": "{num}{unit} {sign}",
        "duration": "{num}{unit}",
        "timeSuffixes": "\uc2dc,\ubd84,\ucd08",
        "ampm": "\uc624\uc804,\uc624\ud6c4",
        "modifiers": [{
            "name": "day",
            "src": "\uadf8\uc800\uaed8",
            "value": -2
        }, {
            "name": "day",
            "src": "\uc5b4\uc81c",
            "value": -1
        }, {
            "name": "day",
            "src": "\uc624\ub298",
            "value": 0
        }, {
            "name": "day",
            "src": "\ub0b4\uc77c",
            "value": 1
        }, {
            "name": "day",
            "src": "\ubaa8\ub808",
            "value": 2
        }, {
            "name": "sign",
            "src": "\uc804",
            "value": -1
        }, {
            "name": "sign",
            "src": "\ud6c4",
            "value": 1
        }, {
            "name": "shift",
            "src": "\uc9c0\ub09c|\uc791",
            "value": -1
        }, {
            "name": "shift",
            "src": "\uc774\ubc88",
            "value": 0
        }, {
            "name": "shift",
            "src": "\ub2e4\uc74c|\ub0b4",
            "value": 1
        }],
        "dateParse": ["{num}{unit} {sign}",
            "{shift?} {unit=5-7}"
        ],
        "timeParse": ["{shift} {unit=5?} {weekday}", "{year}\ub144{month?}\uc6d4?{date?}\uc77c?", "{month}\uc6d4{date?}\uc77c?", "{date}\uc77c"]
    });
    Date.addLocale("nl", {
        "plural": true,
        "months": "januari,februari,maart,april,mei,juni,juli,augustus,september,oktober,november,december",
        "weekdays": "zondag|zo,maandag|ma,dinsdag|di,woensdag|woe|wo,donderdag|do,vrijdag|vrij|vr,zaterdag|za",
        "units": "milliseconde:|n,seconde:|n,minu:ut|ten,uur,dag:|en,we:ek|ken,maand:|en,jaar",
        "numbers": "een,twee,drie,vier,vijf,zes,zeven,acht,negen",
        "tokens": "",
        "short": "{d} {Month} {yyyy}",
        "long": "{d} {Month} {yyyy} {H}:{mm}",
        "full": "{Weekday} {d} {Month} {yyyy} {H}:{mm}:{ss}",
        "past": "{num} {unit} {sign}",
        "future": "{num} {unit} {sign}",
        "duration": "{num} {unit}",
        "timeMarker": "'s|om",
        "modifiers": [{
            "name": "day",
            "src": "gisteren",
            "value": -1
        }, {
            "name": "day",
            "src": "vandaag",
            "value": 0
        }, {
            "name": "day",
            "src": "morgen",
            "value": 1
        }, {
            "name": "day",
            "src": "overmorgen",
            "value": 2
        }, {
            "name": "sign",
            "src": "geleden",
            "value": -1
        }, {
            "name": "sign",
            "src": "vanaf nu",
            "value": 1
        }, {
            "name": "shift",
            "src": "laatste|vorige|afgelopen",
            "value": -1
        }, {
            "name": "shift",
            "src": "volgend:|e",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}", "{0?} {unit=5-7} {shift}", "{0?} {shift} {unit=5-7}"],
        "timeParse": ["{weekday?} {date?} {month} {year?}", "{shift} {weekday}"]
    });
    Date.addLocale("pl", {
        "plural": true,
        "months": "Stycze\u0144|Stycznia,Luty|Lutego,Marzec|Marca,Kwiecie\u0144|Kwietnia,Maj|Maja,Czerwiec|Czerwca,Lipiec|Lipca,Sierpie\u0144|Sierpnia,Wrzesie\u0144|Wrze\u015bnia,Pa\u017adziernik|Pa\u017adziernika,Listopad|Listopada,Grudzie\u0144|Grudnia",
        "weekdays": "Niedziela|Niedziel\u0119,Poniedzia\u0142ek,Wtorek,\u015arod:a|\u0119,Czwartek,Pi\u0105tek,Sobota|Sobot\u0119",
        "units": "milisekund:a|y|,sekund:a|y|,minut:a|y|,godzin:a|y|,dzie\u0144|dni,tydzie\u0144|tygodnie|tygodni,miesi\u0105ce|miesi\u0105ce|miesi\u0119cy,rok|lata|lat",
        "numbers": "jeden|jedn\u0105,dwa|dwie,trzy,cztery,pi\u0119\u0107,sze\u015b\u0107,siedem,osiem,dziewi\u0119\u0107,dziesi\u0119\u0107",
        "optionals": "w|we,roku",
        "short": "{d} {Month} {yyyy}",
        "long": "{d} {Month} {yyyy} {H}:{mm}",
        "full": "{Weekday}, {d} {Month} {yyyy} {H}:{mm}:{ss}",
        "past": "{num} {unit} {sign}",
        "future": "{sign} {num} {unit}",
        "duration": "{num} {unit}",
        "timeMarker": "o",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "przedwczoraj",
            "value": -2
        }, {
            "name": "day",
            "src": "wczoraj",
            "value": -1
        }, {
            "name": "day",
            "src": "dzisiaj|dzi\u015b",
            "value": 0
        }, {
            "name": "day",
            "src": "jutro",
            "value": 1
        }, {
            "name": "day",
            "src": "pojutrze",
            "value": 2
        }, {
            "name": "sign",
            "src": "temu|przed",
            "value": -1
        }, {
            "name": "sign",
            "src": "za",
            "value": 1
        }, {
            "name": "shift",
            "src": "zesz\u0142y|zesz\u0142a|ostatni|ostatnia",
            "value": -1
        }, {
            "name": "shift",
            "src": "nast\u0119pny|nast\u0119pna|nast\u0119pnego|przysz\u0142y|przysz\u0142a|przysz\u0142ego",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}", "{sign} {num} {unit}", "{month} {year}", "{shift} {unit=5-7}", "{0} {shift?} {weekday}"],
        "timeParse": ["{date} {month} {year?} {1}", "{0} {shift?} {weekday}"]
    });
    Date.addLocale("pt", {
        "plural": true,
        "months": "janeiro,fevereiro,mar\u00e7o,abril,maio,junho,julho,agosto,setembro,outubro,novembro,dezembro",
        "weekdays": "domingo,segunda-feira,ter\u00e7a-feira,quarta-feira,quinta-feira,sexta-feira,s\u00e1bado|sabado",
        "units": "milisegundo:|s,segundo:|s,minuto:|s,hora:|s,dia:|s,semana:|s,m\u00eas|m\u00eases|mes|meses,ano:|s",
        "numbers": "um,dois,tr\u00eas|tres,quatro,cinco,seis,sete,oito,nove,dez,uma,duas",
        "tokens": "a,de",
        "short": "{d} de {month} de {yyyy}",
        "long": "{d} de {month} de {yyyy} {H}:{mm}",
        "full": "{Weekday}, {d} de {month} de {yyyy} {H}:{mm}:{ss}",
        "past": "{num} {unit} {sign}",
        "future": "{sign} {num} {unit}",
        "duration": "{num} {unit}",
        "timeMarker": "\u00e0s",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "anteontem",
            "value": -2
        }, {
            "name": "day",
            "src": "ontem",
            "value": -1
        }, {
            "name": "day",
            "src": "hoje",
            "value": 0
        }, {
            "name": "day",
            "src": "amanh:\u00e3|a",
            "value": 1
        }, {
            "name": "sign",
            "src": "atr\u00e1s|atras|h\u00e1|ha",
            "value": -1
        }, {
            "name": "sign",
            "src": "daqui a",
            "value": 1
        }, {
            "name": "shift",
            "src": "passad:o|a",
            "value": -1
        }, {
            "name": "shift",
            "src": "pr\u00f3ximo|pr\u00f3xima|proximo|proxima",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}",
            "{sign} {num} {unit}", "{0?} {unit=5-7} {shift}", "{0?} {shift} {unit=5-7}"
        ],
        "timeParse": ["{date?} {1?} {month} {1?} {year?}", "{0?} {shift} {weekday}"]
    });
    Date.addLocale("ru", {
        "months": "\u042f\u043d\u0432\u0430\u0440:\u044f|\u044c,\u0424\u0435\u0432\u0440\u0430\u043b:\u044f|\u044c,\u041c\u0430\u0440\u0442:\u0430|,\u0410\u043f\u0440\u0435\u043b:\u044f|\u044c,\u041c\u0430:\u044f|\u0439,\u0418\u044e\u043d:\u044f|\u044c,\u0418\u044e\u043b:\u044f|\u044c,\u0410\u0432\u0433\u0443\u0441\u0442:\u0430|,\u0421\u0435\u043d\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041e\u043a\u0442\u044f\u0431\u0440:\u044f|\u044c,\u041d\u043e\u044f\u0431\u0440:\u044f|\u044c,\u0414\u0435\u043a\u0430\u0431\u0440:\u044f|\u044c",
        "weekdays": "\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435,\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a,\u0412\u0442\u043e\u0440\u043d\u0438\u043a,\u0421\u0440\u0435\u0434\u0430,\u0427\u0435\u0442\u0432\u0435\u0440\u0433,\u041f\u044f\u0442\u043d\u0438\u0446\u0430,\u0421\u0443\u0431\u0431\u043e\u0442\u0430",
        "units": "\u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434:\u0430|\u0443|\u044b|,\u0441\u0435\u043a\u0443\u043d\u0434:\u0430|\u0443|\u044b|,\u043c\u0438\u043d\u0443\u0442:\u0430|\u0443|\u044b|,\u0447\u0430\u0441:||\u0430|\u043e\u0432,\u0434\u0435\u043d\u044c|\u0434\u0435\u043d\u044c|\u0434\u043d\u044f|\u0434\u043d\u0435\u0439,\u043d\u0435\u0434\u0435\u043b:\u044f|\u044e|\u0438|\u044c|\u0435,\u043c\u0435\u0441\u044f\u0446:||\u0430|\u0435\u0432|\u0435,\u0433\u043e\u0434|\u0433\u043e\u0434|\u0433\u043e\u0434\u0430|\u043b\u0435\u0442|\u0433\u043e\u0434\u0443",
        "numbers": "\u043e\u0434:\u0438\u043d|\u043d\u0443,\u0434\u0432:\u0430|\u0435,\u0442\u0440\u0438,\u0447\u0435\u0442\u044b\u0440\u0435,\u043f\u044f\u0442\u044c,\u0448\u0435\u0441\u0442\u044c,\u0441\u0435\u043c\u044c,\u0432\u043e\u0441\u0435\u043c\u044c,\u0434\u0435\u0432\u044f\u0442\u044c,\u0434\u0435\u0441\u044f\u0442\u044c",
        "tokens": "\u0432|\u043d\u0430,\u0433\u043e\u0434\u0430",
        "short": "{d} {month} {yyyy} \u0433\u043e\u0434\u0430",
        "long": "{d} {month} {yyyy} \u0433\u043e\u0434\u0430 {H}:{mm}",
        "full": "{Weekday} {d} {month} {yyyy} \u0433\u043e\u0434\u0430 {H}:{mm}:{ss}",
        "relative": function (num, unit, ms, format) {
            var numberWithUnit, last = num.toString().slice(-1);
            switch (true) {
            case num >= 11 && num <= 15:
                mult = 3;
                break;
            case last == 1:
                mult = 1;
                break;
            case last >= 2 && last <= 4:
                mult = 2;
                break;
            default:
                mult = 3
            }
            numberWithUnit = num + " " + this["units"][mult * 8 + unit];
            switch (format) {
            case "duration":
                return numberWithUnit;
            case "past":
                return numberWithUnit + " \u043d\u0430\u0437\u0430\u0434";
            case "future":
                return "\u0447\u0435\u0440\u0435\u0437 " + numberWithUnit
            }
        },
        "timeMarker": "\u0432",
        "ampm": " \u0443\u0442\u0440\u0430, \u0432\u0435\u0447\u0435\u0440\u0430",
        "modifiers": [{
            "name": "day",
            "src": "\u043f\u043e\u0437\u0430\u0432\u0447\u0435\u0440\u0430",
            "value": -2
        }, {
            "name": "day",
            "src": "\u0432\u0447\u0435\u0440\u0430",
            "value": -1
        }, {
            "name": "day",
            "src": "\u0441\u0435\u0433\u043e\u0434\u043d\u044f",
            "value": 0
        }, {
            "name": "day",
            "src": "\u0437\u0430\u0432\u0442\u0440\u0430",
            "value": 1
        }, {
            "name": "day",
            "src": "\u043f\u043e\u0441\u043b\u0435\u0437\u0430\u0432\u0442\u0440\u0430",
            "value": 2
        }, {
            "name": "sign",
            "src": "\u043d\u0430\u0437\u0430\u0434",
            "value": -1
        }, {
            "name": "sign",
            "src": "\u0447\u0435\u0440\u0435\u0437",
            "value": 1
        }, {
            "name": "shift",
            "src": "\u043f\u0440\u043e\u0448\u043b:\u044b\u0439|\u043e\u0439|\u043e\u043c",
            "value": -1
        }, {
            "name": "shift",
            "src": "\u0441\u043b\u0435\u0434\u0443\u044e\u0449:\u0438\u0439|\u0435\u0439|\u0435\u043c",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}", "{sign} {num} {unit}", "{month} {year}", "{0?} {shift} {unit=5-7}"],
        "timeParse": ["{date} {month} {year?} {1?}", "{0?} {shift} {weekday}"]
    });
    Date.addLocale("sv", {
        "plural": true,
        "months": "januari,februari,mars,april,maj,juni,juli,augusti,september,oktober,november,december",
        "weekdays": "s\u00f6ndag|sondag,m\u00e5ndag:|en+mandag:|en,tisdag,onsdag,torsdag,fredag,l\u00f6rdag|lordag",
        "units": "millisekund:|er,sekund:|er,minut:|er,timm:e|ar,dag:|ar,veck:a|or|an,m\u00e5nad:|er|en+manad:|er|en,\u00e5r:||et+ar:||et",
        "numbers": "en|ett,tv\u00e5|tva,tre,fyra,fem,sex,sju,\u00e5tta|atta,nio,tio",
        "tokens": "den,f\u00f6r|for",
        "articles": "den",
        "short": "den {d} {month} {yyyy}",
        "long": "den {d} {month} {yyyy} {H}:{mm}",
        "full": "{Weekday} den {d} {month} {yyyy} {H}:{mm}:{ss}",
        "past": "{num} {unit} {sign}",
        "future": "{sign} {num} {unit}",
        "duration": "{num} {unit}",
        "ampm": "am,pm",
        "modifiers": [{
            "name": "day",
            "src": "f\u00f6rrg\u00e5r|i f\u00f6rrg\u00e5r|if\u00f6rrg\u00e5r|forrgar|i forrgar|iforrgar",
            "value": -2
        }, {
            "name": "day",
            "src": "g\u00e5r|i g\u00e5r|ig\u00e5r|gar|i gar|igar",
            "value": -1
        }, {
            "name": "day",
            "src": "dag|i dag|idag",
            "value": 0
        }, {
            "name": "day",
            "src": "morgon|i morgon|imorgon",
            "value": 1
        }, {
            "name": "day",
            "src": "\u00f6ver morgon|\u00f6vermorgon|i \u00f6ver morgon|i \u00f6vermorgon|i\u00f6vermorgon|over morgon|overmorgon|i over morgon|i overmorgon|iovermorgon",
            "value": 2
        }, {
            "name": "sign",
            "src": "sedan|sen",
            "value": -1
        }, {
            "name": "sign",
            "src": "om",
            "value": 1
        }, {
            "name": "shift",
            "src": "i f\u00f6rra|f\u00f6rra|i forra|forra",
            "value": -1
        }, {
            "name": "shift",
            "src": "denna",
            "value": 0
        }, {
            "name": "shift",
            "src": "n\u00e4sta|nasta",
            "value": 1
        }],
        "dateParse": ["{num} {unit} {sign}", "{sign} {num} {unit}", "{1?} {num} {unit} {sign}", "{shift} {unit=5-7}"],
        "timeParse": ["{0?} {weekday?} {date?} {month} {year}", "{date} {month}", "{shift} {weekday}"]
    });
    Date.addLocale("zh-CN", {
        "variant": true,
        "monthSuffix": "\u6708",
        "weekdays": "\u661f\u671f\u65e5|\u5468\u65e5,\u661f\u671f\u4e00|\u5468\u4e00,\u661f\u671f\u4e8c|\u5468\u4e8c,\u661f\u671f\u4e09|\u5468\u4e09,\u661f\u671f\u56db|\u5468\u56db,\u661f\u671f\u4e94|\u5468\u4e94,\u661f\u671f\u516d|\u5468\u516d",
        "units": "\u6beb\u79d2,\u79d2\u949f,\u5206\u949f,\u5c0f\u65f6,\u5929,\u4e2a\u661f\u671f|\u5468,\u4e2a\u6708,\u5e74",
        "tokens": "\u65e5|\u53f7",
        "short": "{yyyy}\u5e74{M}\u6708{d}\u65e5",
        "long": "{yyyy}\u5e74{M}\u6708{d}\u65e5 {tt}{h}:{mm}",
        "full": "{yyyy}\u5e74{M}\u6708{d}\u65e5 {weekday} {tt}{h}:{mm}:{ss}",
        "past": "{num}{unit}{sign}",
        "future": "{num}{unit}{sign}",
        "duration": "{num}{unit}",
        "timeSuffixes": "\u70b9|\u65f6,\u5206\u949f?,\u79d2",
        "ampm": "\u4e0a\u5348,\u4e0b\u5348",
        "modifiers": [{
            "name": "day",
            "src": "\u524d\u5929",
            "value": -2
        }, {
            "name": "day",
            "src": "\u6628\u5929",
            "value": -1
        }, {
            "name": "day",
            "src": "\u4eca\u5929",
            "value": 0
        }, {
            "name": "day",
            "src": "\u660e\u5929",
            "value": 1
        }, {
            "name": "day",
            "src": "\u540e\u5929",
            "value": 2
        }, {
            "name": "sign",
            "src": "\u524d",
            "value": -1
        }, {
            "name": "sign",
            "src": "\u540e",
            "value": 1
        }, {
            "name": "shift",
            "src": "\u4e0a|\u53bb",
            "value": -1
        }, {
            "name": "shift",
            "src": "\u8fd9",
            "value": 0
        }, {
            "name": "shift",
            "src": "\u4e0b|\u660e",
            "value": 1
        }],
        "dateParse": ["{num}{unit}{sign}", "{shift}{unit=5-7}"],
        "timeParse": ["{shift}{weekday}", "{year}\u5e74{month?}\u6708?{date?}{0?}", "{month}\u6708{date?}{0?}", "{date}[\u65e5\u53f7]"]
    });
    Date.addLocale("zh-TW", {
        "monthSuffix": "\u6708",
        "weekdays": "\u661f\u671f\u65e5|\u9031\u65e5,\u661f\u671f\u4e00|\u9031\u4e00,\u661f\u671f\u4e8c|\u9031\u4e8c,\u661f\u671f\u4e09|\u9031\u4e09,\u661f\u671f\u56db|\u9031\u56db,\u661f\u671f\u4e94|\u9031\u4e94,\u661f\u671f\u516d|\u9031\u516d",
        "units": "\u6beb\u79d2,\u79d2\u9418,\u5206\u9418,\u5c0f\u6642,\u5929,\u500b\u661f\u671f|\u9031,\u500b\u6708,\u5e74",
        "tokens": "\u65e5|\u865f",
        "short": "{yyyy}\u5e74{M}\u6708{d}\u65e5",
        "long": "{yyyy}\u5e74{M}\u6708{d}\u65e5 {tt}{h}:{mm}",
        "full": "{yyyy}\u5e74{M}\u6708{d}\u65e5 {Weekday} {tt}{h}:{mm}:{ss}",
        "past": "{num}{unit}{sign}",
        "future": "{num}{unit}{sign}",
        "duration": "{num}{unit}",
        "timeSuffixes": "\u9ede|\u6642,\u5206\u9418?,\u79d2",
        "ampm": "\u4e0a\u5348,\u4e0b\u5348",
        "modifiers": [{
            "name": "day",
            "src": "\u524d\u5929",
            "value": -2
        }, {
            "name": "day",
            "src": "\u6628\u5929",
            "value": -1
        }, {
            "name": "day",
            "src": "\u4eca\u5929",
            "value": 0
        }, {
            "name": "day",
            "src": "\u660e\u5929",
            "value": 1
        }, {
            "name": "day",
            "src": "\u5f8c\u5929",
            "value": 2
        }, {
            "name": "sign",
            "src": "\u524d",
            "value": -1
        }, {
            "name": "sign",
            "src": "\u5f8c",
            "value": 1
        }, {
            "name": "shift",
            "src": "\u4e0a|\u53bb",
            "value": -1
        }, {
            "name": "shift",
            "src": "\u9019",
            "value": 0
        }, {
            "name": "shift",
            "src": "\u4e0b|\u660e",
            "value": 1
        }],
        "dateParse": ["{num}{unit}{sign}", "{shift}{unit=5-7}"],
        "timeParse": ["{shift}{weekday}",
            "{year}\u5e74{month?}\u6708?{date?}{0?}", "{month}\u6708{date?}{0?}", "{date}[\u65e5\u865f]"
        ]
    });
    var DateRange = function (start, end) {
        this.start = date.create(start);
        this.end = date.create(end)
    };
    DateRange.prototype.toString = function () {
        return this.isValid() ? this.start.full() + ".." + this.end.full() : "Invalid DateRange"
    };
    extend(DateRange, true, false, {
        "isValid": function () {
            return this.start < this.end
        },
        "duration": function () {
            return this.isValid() ? this.end.getTime() - this.start.getTime() : NaN
        },
        "contains": function (obj) {
            var self =
                this,
                arr = obj.start && obj.end ? [obj.start, obj.end] : [obj];
            return arr.every(function (d) {
                return d >= self.start && d <= self.end
            })
        },
        "every": function (increment, fn) {
            var current = this.start.clone(),
                result = [],
                index = 0,
                params, isDay;
            if (isString(increment)) {
                current.advance(getDateParamsFromString(increment, 0), true);
                params = getDateParamsFromString(increment);
                isDay = increment.toLowerCase() === "day"
            } else params = {
                "milliseconds": increment
            };
            while (current <= this.end) {
                result.push(current);
                if (fn) fn(current, index);
                if (isDay && callDateGet(current,
                    "Hours") === 23) {
                    current = current.clone();
                    callDateSet(current, "Hours", 48)
                } else current = current.clone().advance(params, true);
                index++
            }
            return result
        },
        "union": function (range) {
            return new DateRange(this.start < range.start ? this.start : range.start, this.end > range.end ? this.end : range.end)
        },
        "intersect": function (range) {
            return new DateRange(this.start > range.start ? this.start : range.start, this.end < range.end ? this.end : range.end)
        },
        "clone": function (range) {
            return new DateRange(this.start, this.end)
        }
    });
    extendSimilar(DateRange,
        true, false, "Millisecond,Second,Minute,Hour,Day,Week,Month,Year", function (methods, name) {
            methods["each" + name] = function (fn) {
                return this.every(name, fn)
            }
        });
    extend(date, false, false, {
        "range": function (start, end) {
            return new DateRange(start, end)
        }
    });

    function abbreviateNumber(num, roundTo, str, mid, limit, bytes) {
        var fixed = num.toFixed(20),
            decimalPlace = fixed.search(/\./),
            numeralPlace = fixed.search(/[1-9]/),
            significant = decimalPlace - numeralPlace,
            unit, i, divisor;
        if (significant > 0) significant -= 1;
        i = math.max(math.min((significant /
            3).floor(), limit === false ? str.length : limit), -mid);
        unit = str.charAt(i + mid - 1);
        if (significant < -9) {
            i = -3;
            roundTo = significant.abs() - 9;
            unit = str.slice(0, 1)
        }
        divisor = bytes ? (2).pow(10 * i) : (10).pow(i * 3);
        return (num / divisor).round(roundTo || 0).format() + unit.trim()
    }
    extend(number, false, false, {
        "random": function (n1, n2) {
            var min, max;
            if (arguments.length == 1) n2 = n1, n1 = 0;
            min = math.min(n1 || 0, isUndefined(n2) ? 1 : n2);
            max = math.max(n1 || 0, isUndefined(n2) ? 1 : n2) + 1;
            return floor(math.random() * (max - min) + min)
        }
    });
    extend(number, true, false, {
        "log": function (base) {
            return math.log(this) /
                (base ? math.log(base) : 1)
        },
        "abbr": function (precision) {
            return abbreviateNumber(this, precision, "kmbt", 0, 4)
        },
        "metric": function (precision, limit) {
            return abbreviateNumber(this, precision, "n\u03bcm kMGTPE", 4, isUndefined(limit) ? 1 : limit)
        },
        "bytes": function (precision, limit) {
            return abbreviateNumber(this, precision, "kMGTPE", 0, isUndefined(limit) ? 4 : limit, true) + "B"
        },
        "isInteger": function () {
            return this % 1 == 0
        },
        "isOdd": function () {
            return !isNaN(this) && !this.isMultipleOf(2)
        },
        "isEven": function () {
            return this.isMultipleOf(2)
        },
        "isMultipleOf": function (num) {
            return this % num === 0
        },
        "format": function (place, thousands, decimal) {
            var i, str, split, integer, fraction, result = "";
            if (isUndefined(thousands)) thousands = ",";
            if (isUndefined(decimal)) decimal = ".";
            str = (isNumber(place) ? round(this, place || 0).toFixed(math.max(place, 0)) : this.toString()).replace(/^-/, "");
            split = str.split(".");
            integer = split[0];
            fraction = split[1];
            for (i = integer.length; i > 0; i -= 3) {
                if (i < integer.length) result = thousands + result;
                result = integer.slice(math.max(0, i - 3), i) + result
            }
            if (fraction) result +=
                decimal + repeatString((place || 0) - fraction.length, "0") + fraction;
            return (this < 0 ? "-" : "") + result
        },
        "hex": function (pad) {
            return this.pad(pad || 1, false, 16)
        },
        "upto": function (num, fn, step) {
            return getRange(this, num, fn, step || 1)
        },
        "downto": function (num, fn, step) {
            return getRange(this, num, fn, -(step || 1))
        },
        "times": function (fn) {
            if (fn)
                for (var i = 0; i < this; i++) fn.call(this, i);
            return this.toNumber()
        },
        "chr": function () {
            return string.fromCharCode(this)
        },
        "pad": function (place, sign, base) {
            return padNumber(this, place, sign, base)
        },
        "ordinalize": function () {
            var suffix,
                num = this.abs(),
                last = parseInt(num.toString().slice(-2));
            return this + getOrdinalizedSuffix(last)
        },
        "toNumber": function () {
            return parseFloat(this, 10)
        }
    });

    function buildNumber() {
        extendSimilar(number, true, false, "round,floor,ceil", function (methods, name) {
            methods[name] = function (precision) {
                return round(this, precision, name)
            }
        });
        extendSimilar(number, true, false, "abs,pow,sin,asin,cos,acos,tan,atan,exp,pow,sqrt", function (methods, name) {
            methods[name] = function (a, b) {
                return math[name](this, a, b)
            }
        })
    }
    buildNumber();
    var ObjectTypeMethods =
        "isObject,isNaN".split(",");
    var ObjectHashMethods = "keys,values,select,reject,each,merge,clone,equal,watch,tap,has,toQueryString".split(",");

    function setParamsObject(obj, param, value, deep) {
        var reg = /^(.+?)(\[.*\])$/,
            paramIsArray, match, allKeys, key;
        if (deep !== false && (match = param.match(reg))) {
            key = match[1];
            allKeys = match[2].replace(/^\[|\]$/g, "").split("][");
            allKeys.forEach(function (k) {
                paramIsArray = !k || k.match(/^\d+$/);
                if (!key && isArray(obj)) key = obj.length;
                if (!hasOwnProperty(obj, key)) obj[key] = paramIsArray ? [] : {};
                obj = obj[key];
                key = k
            });
            if (!key && paramIsArray) key = obj.length.toString();
            setParamsObject(obj, key, value)
        } else if (value.match(/^[+-]?\d+(\.\d+)?$/)) obj[param] = parseFloat(value);
        else if (value === "true") obj[param] = true;
        else if (value === "false") obj[param] = false;
        else obj[param] = value
    }

    function objectToQueryString(base, obj) {
        var tmp;
        if (isArray(obj) || isObject(obj) && obj.toString === internalToString) {
            tmp = [];
            iterateOverObject(obj, function (key, value) {
                if (base) key = base + "[" + key + "]";
                tmp.push(objectToQueryString(key,
                    value))
            });
            return tmp.join("&")
        } else {
            if (!base) return "";
            return sanitizeURIComponent(base) + "=" + (isDate(obj) ? obj.getTime() : sanitizeURIComponent(obj))
        }
    }

    function sanitizeURIComponent(obj) {
        return !obj && obj !== false && obj !== 0 ? "" : encodeURIComponent(obj).replace(/%20/g, "+")
    }

    function matchKey(key, match) {
        if (isRegExp(match)) return match.test(key);
        else if (isObjectPrimitive(match)) return hasOwnProperty(match, key);
        else return key === string(match)
    }

    function selectFromObject(obj, args, select) {
        var result = {}, match;
        iterateOverObject(obj,
            function (key, value) {
                match = false;
                flattenedArgs(args, function (arg) {
                    if (matchKey(key, arg)) match = true
                }, 1);
                if (match === select) result[key] = value
            });
        return result
    }

    function buildTypeMethods() {
        extendSimilar(object, false, false, ClassNames, function (methods, name) {
            var method = "is" + name;
            ObjectTypeMethods.push(method);
            methods[method] = typeChecks[name]
        })
    }

    function buildObjectExtend() {
        extend(object, false, function () {
            return arguments.length === 0
        }, {
            "extend": function () {
                var methods = ObjectTypeMethods.concat(ObjectHashMethods);
                if (typeof EnumerableMethods !== "undefined") methods = methods.concat(EnumerableMethods);
                buildObjectInstanceMethods(methods, object)
            }
        })
    }
    extend(object, false, true, {
        "watch": function (obj, prop, fn) {
            if (!definePropertySupport) return;
            var value = obj[prop];
            object.defineProperty(obj, prop, {
                "enumerable": true,
                "configurable": true,
                "get": function () {
                    return value
                },
                "set": function (to) {
                    value = fn.call(obj, prop, value, to)
                }
            })
        }
    });
    extend(object, false, function (arg1, arg2) {
        return isFunction(arg2)
    }, {
        "keys": function (obj, fn) {
            var keys = object.keys(obj);
            keys.forEach(function (key) {
                fn.call(obj, key, obj[key])
            });
            return keys
        }
    });
    extend(object, false, false, {
        "isObject": function (obj) {
            return isObject(obj)
        },
        "isNaN": function (obj) {
            return isNumber(obj) && obj.valueOf() !== obj.valueOf()
        },
        "equal": function (a, b) {
            return isEqual(a, b)
        },
        "extended": function (obj) {
            return new Hash(obj)
        },
        "merge": function (target, source, deep, resolve) {
            var key, val;
            if (target && typeof source != "string")
                for (key in source) {
                    if (!hasOwnProperty(source, key) || !target) continue;
                    val = source[key];
                    if (isDefined(target[key])) {
                        if (resolve ===
                            false) continue;
                        if (isFunction(resolve)) val = resolve.call(source, key, target[key], source[key])
                    }
                    if (deep === true && val && isObjectPrimitive(val))
                        if (isDate(val)) val = new date(val.getTime());
                        else if (isRegExp(val)) val = new regexp(val.source, getRegExpFlags(val));
                    else {
                        if (!target[key]) target[key] = array.isArray(val) ? [] : {};
                        object.merge(target[key], source[key], deep, resolve);
                        continue
                    }
                    target[key] = val
                }
            return target
        },
        "values": function (obj, fn) {
            var values = [];
            iterateOverObject(obj, function (k, v) {
                values.push(v);
                if (fn) fn.call(obj,
                    v)
            });
            return values
        },
        "clone": function (obj, deep) {
            var target;
            if (isDate(obj) && obj.clone) return obj.clone();
            else if (!isObjectPrimitive(obj)) return obj;
            else if (obj instanceof Hash) target = new Hash;
            else target = new obj.constructor;
            return object.merge(target, obj, deep)
        },
        "fromQueryString": function (str, deep) {
            var result = object.extended(),
                split;
            str = str && str.toString ? str.toString() : "";
            str.replace(/^.*?\?/, "").split("&").forEach(function (p) {
                var split = p.split("=");
                if (split.length !== 2) return;
                setParamsObject(result,
                    split[0], decodeURIComponent(split[1]), deep)
            });
            return result
        },
        "toQueryString": function (obj, namespace) {
            return objectToQueryString(namespace, obj)
        },
        "tap": function (obj, arg) {
            var fn = arg;
            if (!isFunction(arg)) fn = function () {
                if (arg) obj[arg]()
            };
            fn.call(obj, obj);
            return obj
        },
        "has": function (obj, key) {
            return hasOwnProperty(obj, key)
        },
        "select": function (obj) {
            return selectFromObject(obj, arguments, true)
        },
        "reject": function (obj) {
            return selectFromObject(obj, arguments, false)
        }
    });
    buildTypeMethods();
    buildObjectExtend();
    buildObjectInstanceMethods(ObjectHashMethods,
        Hash);
    extend(regexp, false, false, {
        "escape": function (str) {
            return escapeRegExp(str)
        }
    });
    extend(regexp, true, false, {
        "getFlags": function () {
            return getRegExpFlags(this)
        },
        "setFlags": function (flags) {
            return regexp(this.source, flags)
        },
        "addFlag": function (flag) {
            return this.setFlags(getRegExpFlags(this, flag))
        },
        "removeFlag": function (flag) {
            return this.setFlags(getRegExpFlags(this).replace(flag, ""))
        }
    });

    function getAcronym(word) {
        var inflector = string.Inflector;
        var word = inflector && inflector.acronyms[word];
        if (isString(word)) return word
    }

    function padString(str, p, left, right) {
        var padding = string(p);
        if (padding != p) padding = "";
        if (!isNumber(left)) left = 1;
        if (!isNumber(right)) right = 1;
        return padding.repeat(left) + str + padding.repeat(right)
    }

    function chr(num) {
        return string.fromCharCode(num)
    }
    var btoa, atob;

    function buildBase64(key) {
        if (this.btoa) {
            btoa = this.btoa;
            atob = this.atob;
            return
        }
        var base64reg = /[^A-Za-z0-9\+\/\=]/g;
        btoa = function (str) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            do {
                chr1 = str.charCodeAt(i++);
                chr2 = str.charCodeAt(i++);
                chr3 = str.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                enc4 = chr3 & 63;
                if (isNaN(chr2)) enc3 = enc4 = 64;
                else if (isNaN(chr3)) enc4 = 64;
                output = output + key.charAt(enc1) + key.charAt(enc2) + key.charAt(enc3) + key.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = ""
            } while (i < str.length);
            return output
        };
        atob = function (input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            if (input.match(base64reg)) throw new Error("String contains invalid base64 characters");
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g,
                "");
            do {
                enc1 = key.indexOf(input.charAt(i++));
                enc2 = key.indexOf(input.charAt(i++));
                enc3 = key.indexOf(input.charAt(i++));
                enc4 = key.indexOf(input.charAt(i++));
                chr1 = enc1 << 2 | enc2 >> 4;
                chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                chr3 = (enc3 & 3) << 6 | enc4;
                output = output + chr(chr1);
                if (enc3 != 64) output = output + chr(chr2);
                if (enc4 != 64) output = output + chr(chr3);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = ""
            } while (i < input.length);
            return output
        }
    }
    extend(string, true, function (reg) {
        return isRegExp(reg) || arguments.length > 2
    }, {
        "startsWith": function (reg, pos, c) {
            var str =
                this,
                source;
            if (pos) str = str.slice(pos);
            if (isUndefined(c)) c = true;
            source = isRegExp(reg) ? reg.source.replace("^", "") : escapeRegExp(reg);
            return regexp("^" + source, c ? "" : "i").test(str)
        },
        "endsWith": function (reg, pos, c) {
            var str = this,
                source;
            if (isDefined(pos)) str = str.slice(0, pos);
            if (isUndefined(c)) c = true;
            source = isRegExp(reg) ? reg.source.replace("$", "") : escapeRegExp(reg);
            return regexp(source + "$", c ? "" : "i").test(str)
        }
    });
    extend(string, true, false, {
        "escapeRegExp": function () {
            return escapeRegExp(this)
        },
        "escapeURL": function (param) {
            return param ?
                encodeURIComponent(this) : encodeURI(this)
        },
        "unescapeURL": function (param) {
            return param ? decodeURI(this) : decodeURIComponent(this)
        },
        "escapeHTML": function () {
            return this.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/\//g, "&#x2f;")
        },
        "unescapeHTML": function () {
            return this.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&#x2f;/g, "/").replace(/&amp;/g, "&")
        },
        "encodeBase64": function () {
            return btoa(this)
        },
        "decodeBase64": function () {
            return atob(this)
        },
        "each": function (search, fn) {
            var match, i, len;
            if (isFunction(search)) {
                fn = search;
                search = /[\s\S]/g
            } else if (!search) search = /[\s\S]/g;
            else if (isString(search)) search = regexp(escapeRegExp(search), "gi");
            else if (isRegExp(search)) search = regexp(search.source, getRegExpFlags(search, "g"));
            match = this.match(search) || [];
            if (fn)
                for (i = 0, len = match.length; i < len; i++) match[i] = fn.call(this, match[i], i, match) || match[i];
            return match
        },
        "shift": function (n) {
            var result = "";
            n = n || 0;
            this.codes(function (c) {
                result +=
                    chr(c + n)
            });
            return result
        },
        "codes": function (fn) {
            var codes = [],
                i, len;
            for (i = 0, len = this.length; i < len; i++) {
                var code = this.charCodeAt(i);
                codes.push(code);
                if (fn) fn.call(this, code, i)
            }
            return codes
        },
        "chars": function (fn) {
            return this.each(fn)
        },
        "words": function (fn) {
            return this.trim().each(/\S+/g, fn)
        },
        "lines": function (fn) {
            return this.trim().each(/^.*$/gm, fn)
        },
        "paragraphs": function (fn) {
            var paragraphs = this.trim().split(/[\r\n]{2,}/);
            paragraphs = paragraphs.map(function (p) {
                if (fn) var s = fn.call(p);
                return s ? s : p
            });
            return paragraphs
        },
        "isBlank": function () {
            return this.trim().length === 0
        },
        "has": function (find) {
            return this.search(isRegExp(find) ? find : escapeRegExp(find)) !== -1
        },
        "add": function (str, index) {
            index = isUndefined(index) ? this.length : index;
            return this.slice(0, index) + str + this.slice(index)
        },
        "remove": function (f) {
            return this.replace(f, "")
        },
        "reverse": function () {
            return this.split("").reverse().join("")
        },
        "compact": function () {
            return this.trim().replace(/([\r\n\s\u3000])+/g, function (match, whitespace) {
                return whitespace === "\u3000" ? whitespace :
                    " "
            })
        },
        "at": function () {
            return entryAtIndex(this, arguments, true)
        },
        "from": function (num) {
            return this.slice(num)
        },
        "to": function (num) {
            if (isUndefined(num)) num = this.length;
            return this.slice(0, num)
        },
        "dasherize": function () {
            return this.underscore().replace(/_/g, "-")
        },
        "underscore": function () {
            return this.replace(/[-\s]+/g, "_").replace(string.Inflector && string.Inflector.acronymRegExp, function (acronym, index) {
                return (index > 0 ? "_" : "") + acronym.toLowerCase()
            }).replace(/([A-Z\d]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g,
                "$1_$2").toLowerCase()
        },
        "camelize": function (first) {
            return this.underscore().replace(/(^|_)([^_]+)/g, function (match, pre, word, index) {
                var acronym = getAcronym(word),
                    capitalize = first !== false || index > 0;
                if (acronym) return capitalize ? acronym : acronym.toLowerCase();
                return capitalize ? word.capitalize() : word
            })
        },
        "spacify": function () {
            return this.underscore().replace(/_/g, " ")
        },
        "stripTags": function () {
            var str = this,
                args = arguments.length > 0 ? arguments : [""];
            flattenedArgs(args, function (tag) {
                str = str.replace(regexp("</?" + escapeRegExp(tag) +
                    "[^<>]*>", "gi"), "")
            });
            return str
        },
        "removeTags": function () {
            var str = this,
                args = arguments.length > 0 ? arguments : ["\\S+"];
            flattenedArgs(args, function (t) {
                var reg = regexp("<(" + t + ")[^<>]*(?:\\/>|>.*?<\\/\\1>)", "gi");
                str = str.replace(reg, "")
            });
            return str
        },
        "truncate": function (length, split, from, ellipsis) {
            var pos, prepend = "",
                append = "",
                str = this.toString(),
                chars = "[" + getTrimmableCharacters() + "]+",
                space = "[^" + getTrimmableCharacters() + "]*",
                reg = regexp(chars + space + "$");
            ellipsis = isUndefined(ellipsis) ? "..." : string(ellipsis);
            if (str.length <= length) return str;
            switch (from) {
            case "left":
                pos = str.length - length;
                prepend = ellipsis;
                str = str.slice(pos);
                reg = regexp("^" + space + chars);
                break;
            case "middle":
                pos = floor(length / 2);
                append = ellipsis + str.slice(str.length - pos).trimLeft();
                str = str.slice(0, pos);
                break;
            default:
                pos = length;
                append = ellipsis;
                str = str.slice(0, pos)
            }
            if (split === false && this.slice(pos, pos + 1).match(/\S/)) str = str.remove(reg);
            return prepend + str + append
        },
        "pad": function (padding, num) {
            return repeatString(num, padding) + this + repeatString(num,
                padding)
        },
        "padLeft": function (padding, num) {
            return repeatString(num, padding) + this
        },
        "padRight": function (padding, num) {
            return this + repeatString(num, padding)
        },
        "first": function (num) {
            if (isUndefined(num)) num = 1;
            return this.substr(0, num)
        },
        "last": function (num) {
            if (isUndefined(num)) num = 1;
            var start = this.length - num < 0 ? 0 : this.length - num;
            return this.substr(start)
        },
        "repeat": function (num) {
            var result = "",
                str = this;
            if (!isNumber(num) || num < 1) return "";
            while (num) {
                if (num & 1) result += str;
                if (num >>= 1) str += str
            }
            return result
        },
        "toNumber": function (base) {
            var str =
                this.replace(/,/g, "");
            return str.match(/\./) ? parseFloat(str) : parseInt(str, base || 10)
        },
        "capitalize": function (all) {
            var lastResponded;
            return this.toLowerCase().replace(all ? /[\s\S]/g : /^\S/, function (lower) {
                var upper = lower.toUpperCase(),
                    result;
                result = lastResponded ? lower : upper;
                lastResponded = upper !== lower;
                return result
            })
        },
        "assign": function () {
            var assign = {};
            multiArgs(arguments, function (a, i) {
                if (isObject(a)) simpleMerge(assign, a);
                else assign[i + 1] = a
            });
            return this.replace(/\{([^{]+?)\}/g, function (m, key) {
                return hasOwnProperty(assign,
                    key) ? assign[key] : m
            })
        }
    });
    extend(string, true, false, {
        "insert": string.prototype.add
    });
    buildBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=");
    var plurals = [],
        singulars = [],
        uncountables = [],
        humans = [],
        acronyms = {}, Downcased, Inflector;

    function removeFromArray(arr, find) {
        var index = arr.indexOf(find);
        if (index > -1) arr.splice(index, 1)
    }

    function removeFromUncountablesAndAddTo(arr, rule, replacement) {
        if (isString(rule)) removeFromArray(uncountables, rule);
        removeFromArray(uncountables, replacement);
        arr.unshift({
            rule: rule,
            replacement: replacement
        })
    }

    function paramMatchesType(param, type) {
        return param == type || param == "all" || !param
    }

    function isUncountable(word) {
        return uncountables.some(function (uncountable) {
            return (new regexp("\\b" + uncountable + "$", "i")).test(word)
        })
    }

    function inflect(word, pluralize) {
        word = isString(word) ? word.toString() : "";
        if (word.isBlank() || isUncountable(word)) return word;
        else return runReplacements(word, pluralize ? plurals : singulars)
    }

    function runReplacements(word, table) {
        iterateOverObject(table,
            function (i, inflection) {
                if (word.match(inflection.rule)) {
                    word = word.replace(inflection.rule, inflection.replacement);
                    return false
                }
            });
        return word
    }

    function capitalize(word) {
        return word.replace(/^\W*[a-z]/, function (w) {
            return w.toUpperCase()
        })
    }
    Inflector = {
        "acronym": function (word) {
            acronyms[word.toLowerCase()] = word;
            var all = object.keys(acronyms).map(function (key) {
                return acronyms[key]
            });
            Inflector.acronymRegExp = regexp(all.join("|"), "g")
        },
        "plural": function (rule, replacement) {
            removeFromUncountablesAndAddTo(plurals,
                rule, replacement)
        },
        "singular": function (rule, replacement) {
            removeFromUncountablesAndAddTo(singulars, rule, replacement)
        },
        "irregular": function (singular, plural) {
            var singularFirst = singular.first(),
                singularRest = singular.from(1),
                pluralFirst = plural.first(),
                pluralRest = plural.from(1),
                pluralFirstUpper = pluralFirst.toUpperCase(),
                pluralFirstLower = pluralFirst.toLowerCase(),
                singularFirstUpper = singularFirst.toUpperCase(),
                singularFirstLower = singularFirst.toLowerCase();
            removeFromArray(uncountables, singular);
            removeFromArray(uncountables,
                plural);
            if (singularFirstUpper == pluralFirstUpper) {
                Inflector.plural(new regexp("({1}){2}$".assign(singularFirst, singularRest), "i"), "$1" + pluralRest);
                Inflector.plural(new regexp("({1}){2}$".assign(pluralFirst, pluralRest), "i"), "$1" + pluralRest);
                Inflector.singular(new regexp("({1}){2}$".assign(pluralFirst, pluralRest), "i"), "$1" + singularRest)
            } else {
                Inflector.plural(new regexp("{1}{2}$".assign(singularFirstUpper, singularRest)), pluralFirstUpper + pluralRest);
                Inflector.plural(new regexp("{1}{2}$".assign(singularFirstLower,
                    singularRest)), pluralFirstLower + pluralRest);
                Inflector.plural(new regexp("{1}{2}$".assign(pluralFirstUpper, pluralRest)), pluralFirstUpper + pluralRest);
                Inflector.plural(new regexp("{1}{2}$".assign(pluralFirstLower, pluralRest)), pluralFirstLower + pluralRest);
                Inflector.singular(new regexp("{1}{2}$".assign(pluralFirstUpper, pluralRest)), singularFirstUpper + singularRest);
                Inflector.singular(new regexp("{1}{2}$".assign(pluralFirstLower, pluralRest)), singularFirstLower + singularRest)
            }
        },
        "uncountable": function (first) {
            var add =
                array.isArray(first) ? first : multiArgs(arguments);
            uncountables = uncountables.concat(add)
        },
        "human": function (rule, replacement) {
            humans.unshift({
                rule: rule,
                replacement: replacement
            })
        },
        "clear": function (type) {
            if (paramMatchesType(type, "singulars")) singulars = [];
            if (paramMatchesType(type, "plurals")) plurals = [];
            if (paramMatchesType(type, "uncountables")) uncountables = [];
            if (paramMatchesType(type, "humans")) humans = [];
            if (paramMatchesType(type, "acronyms")) acronyms = {}
        }
    };
    Downcased = ["and", "or", "nor", "a", "an", "the", "so", "but",
        "to", "of", "at", "by", "from", "into", "on", "onto", "off", "out", "in", "over", "with", "for"
    ];
    Inflector.plural(/$/, "s");
    Inflector.plural(/s$/gi, "s");
    Inflector.plural(/(ax|test)is$/gi, "$1es");
    Inflector.plural(/(octop|vir|fung|foc|radi|alumn)(i|us)$/gi, "$1i");
    Inflector.plural(/(census|alias|status)$/gi, "$1es");
    Inflector.plural(/(bu)s$/gi, "$1ses");
    Inflector.plural(/(buffal|tomat)o$/gi, "$1oes");
    Inflector.plural(/([ti])um$/gi, "$1a");
    Inflector.plural(/([ti])a$/gi, "$1a");
    Inflector.plural(/sis$/gi, "ses");
    Inflector.plural(/f+e?$/gi,
        "ves");
    Inflector.plural(/(cuff|roof)$/gi, "$1s");
    Inflector.plural(/([ht]ive)$/gi, "$1s");
    Inflector.plural(/([^aeiouy]o)$/gi, "$1es");
    Inflector.plural(/([^aeiouy]|qu)y$/gi, "$1ies");
    Inflector.plural(/(x|ch|ss|sh)$/gi, "$1es");
    Inflector.plural(/(matr|vert|ind)(?:ix|ex)$/gi, "$1ices");
    Inflector.plural(/([ml])ouse$/gi, "$1ice");
    Inflector.plural(/([ml])ice$/gi, "$1ice");
    Inflector.plural(/^(ox)$/gi, "$1en");
    Inflector.plural(/^(oxen)$/gi, "$1");
    Inflector.plural(/(quiz)$/gi, "$1zes");
    Inflector.plural(/(phot|cant|hom|zer|pian|portic|pr|quart|kimon)o$/gi,
        "$1os");
    Inflector.plural(/(craft)$/gi, "$1");
    Inflector.plural(/([ft])[eo]{2}(th?)$/gi, "$1ee$2");
    Inflector.singular(/s$/gi, "");
    Inflector.singular(/([pst][aiu]s)$/gi, "$1");
    Inflector.singular(/([aeiouy])ss$/gi, "$1ss");
    Inflector.singular(/(n)ews$/gi, "$1ews");
    Inflector.singular(/([ti])a$/gi, "$1um");
    Inflector.singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/gi, "$1$2sis");
    Inflector.singular(/(^analy)ses$/gi, "$1sis");
    Inflector.singular(/(i)(f|ves)$/i, "$1fe");
    Inflector.singular(/([aeolr]f?)(f|ves)$/i,
        "$1f");
    Inflector.singular(/([ht]ive)s$/gi, "$1");
    Inflector.singular(/([^aeiouy]|qu)ies$/gi, "$1y");
    Inflector.singular(/(s)eries$/gi, "$1eries");
    Inflector.singular(/(m)ovies$/gi, "$1ovie");
    Inflector.singular(/(x|ch|ss|sh)es$/gi, "$1");
    Inflector.singular(/([ml])(ous|ic)e$/gi, "$1ouse");
    Inflector.singular(/(bus)(es)?$/gi, "$1");
    Inflector.singular(/(o)es$/gi, "$1");
    Inflector.singular(/(shoe)s?$/gi, "$1");
    Inflector.singular(/(cris|ax|test)[ie]s$/gi, "$1is");
    Inflector.singular(/(octop|vir|fung|foc|radi|alumn)(i|us)$/gi,
        "$1us");
    Inflector.singular(/(census|alias|status)(es)?$/gi, "$1");
    Inflector.singular(/^(ox)(en)?/gi, "$1");
    Inflector.singular(/(vert|ind)(ex|ices)$/gi, "$1ex");
    Inflector.singular(/(matr)(ix|ices)$/gi, "$1ix");
    Inflector.singular(/(quiz)(zes)?$/gi, "$1");
    Inflector.singular(/(database)s?$/gi, "$1");
    Inflector.singular(/ee(th?)$/gi, "oo$1");
    Inflector.irregular("person", "people");
    Inflector.irregular("man", "men");
    Inflector.irregular("child", "children");
    Inflector.irregular("sex", "sexes");
    Inflector.irregular("move",
        "moves");
    Inflector.irregular("save", "saves");
    Inflector.irregular("save", "saves");
    Inflector.irregular("cow", "kine");
    Inflector.irregular("goose", "geese");
    Inflector.irregular("zombie", "zombies");
    Inflector.uncountable("equipment,information,rice,money,species,series,fish,sheep,jeans".split(","));
    extend(string, true, false, {
        "pluralize": function () {
            return inflect(this, true)
        },
        "singularize": function () {
            return inflect(this, false)
        },
        "humanize": function () {
            var str = runReplacements(this, humans),
                acronym;
            str = str.replace(/_id$/g,
                "");
            str = str.replace(/(_)?([a-z\d]*)/gi, function (match, _, word) {
                acronym = hasOwnProperty(acronyms, word) ? acronyms[word] : null;
                return (_ ? " " : "") + (acronym || word.toLowerCase())
            });
            return capitalize(str)
        },
        "titleize": function () {
            var fullStopPunctuation = /[.:;!]$/,
                hasPunctuation, lastHadPunctuation, isFirstOrLast;
            return this.spacify().humanize().words(function (word, index, words) {
                hasPunctuation = fullStopPunctuation.test(word);
                isFirstOrLast = index == 0 || index == words.length - 1 || hasPunctuation || lastHadPunctuation;
                lastHadPunctuation =
                    hasPunctuation;
                if (isFirstOrLast || Downcased.indexOf(word) === -1) return capitalize(word);
                else return word
            }).join(" ")
        },
        "parameterize": function (separator) {
            var str = this;
            if (separator === undefined) separator = "-";
            if (str.normalize) str = str.normalize();
            str = str.replace(/[^a-z0-9\-_]+/gi, separator);
            if (separator) str = str.replace(new regexp("^{sep}+|{sep}+$|({sep}){sep}+".assign({
                "sep": escapeRegExp(separator)
            }), "g"), "$1");
            return encodeURI(str.toLowerCase())
        }
    });
    string.Inflector = Inflector;
    string.Inflector.acronyms = acronyms
})(Streak);
(function (undefined) {
    var moment, VERSION = "2.1.0",
        round = Math.round,
        i, languages = {}, hasModule = typeof module !== "undefined" && module.exports,
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(\d*)?\.?(\d+)\:(\d+)\:(\d+)\.?(\d{3})?/,
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,
        parseTokenOneOrTwoDigits =
            /\d\d?/,
        parseTokenOneToThreeDigits = /\d{1,3}/,
        parseTokenThreeDigits = /\d{3}/,
        parseTokenFourDigits = /\d{1,4}/,
        parseTokenSixDigits = /[+\-]?\d{1,6}/,
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/i,
        parseTokenT = /T/i,
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/,
        isoRegex = /^\s*\d{4}-\d\d-\d\d((T| )(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,
        isoFormat = "YYYY-MM-DDTHH:mm:ssZ",
        isoTimes = [
            ["HH:mm:ss.S", /(T| )\d\d:\d\d:\d\d\.\d{1,3}/],
            ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/],
            ["HH:mm", /(T| )\d\d:\d\d/],
            ["HH", /(T| )\d\d/]
        ],
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,
        proxyGettersAndSetters = "Date|Hours|Minutes|Seconds|Milliseconds".split("|"),
        unitMillisecondFactors = {
            "Milliseconds": 1,
            "Seconds": 1E3,
            "Minutes": 6E4,
            "Hours": 36E5,
            "Days": 864E5,
            "Months": 2592E6,
            "Years": 31536E6
        }, unitAliases = {
            ms: "millisecond",
            s: "second",
            m: "minute",
            h: "hour",
            d: "day",
            w: "week",
            M: "month",
            y: "year"
        }, formatFunctions = {}, ordinalizeTokens =
            "DDD w W M D d".split(" "),
        paddedTokens = "M D H h m s w W".split(" "),
        formatTokenFunctions = {
            M: function () {
                return this.month() + 1
            },
            MMM: function (format) {
                return this.lang().monthsShort(this, format)
            },
            MMMM: function (format) {
                return this.lang().months(this, format)
            },
            D: function () {
                return this.date()
            },
            DDD: function () {
                return this.dayOfYear()
            },
            d: function () {
                return this.day()
            },
            dd: function (format) {
                return this.lang().weekdaysMin(this, format)
            },
            ddd: function (format) {
                return this.lang().weekdaysShort(this, format)
            },
            dddd: function (format) {
                return this.lang().weekdays(this,
                    format)
            },
            w: function () {
                return this.week()
            },
            W: function () {
                return this.isoWeek()
            },
            YY: function () {
                return leftZeroFill(this.year() % 100, 2)
            },
            YYYY: function () {
                return leftZeroFill(this.year(), 4)
            },
            YYYYY: function () {
                return leftZeroFill(this.year(), 5)
            },
            gg: function () {
                return leftZeroFill(this.weekYear() % 100, 2)
            },
            gggg: function () {
                return this.weekYear()
            },
            ggggg: function () {
                return leftZeroFill(this.weekYear(), 5)
            },
            GG: function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2)
            },
            GGGG: function () {
                return this.isoWeekYear()
            },
            GGGGG: function () {
                return leftZeroFill(this.isoWeekYear(),
                    5)
            },
            e: function () {
                return this.weekday()
            },
            E: function () {
                return this.isoWeekday()
            },
            a: function () {
                return this.lang().meridiem(this.hours(), this.minutes(), true)
            },
            A: function () {
                return this.lang().meridiem(this.hours(), this.minutes(), false)
            },
            H: function () {
                return this.hours()
            },
            h: function () {
                return this.hours() % 12 || 12
            },
            m: function () {
                return this.minutes()
            },
            s: function () {
                return this.seconds()
            },
            S: function () {
                return~~ (this.milliseconds() / 100)
            },
            SS: function () {
                return leftZeroFill(~~(this.milliseconds() / 10), 2)
            },
            SSS: function () {
                return leftZeroFill(this.milliseconds(),
                    3)
            },
            Z: function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-"
                }
                return b + leftZeroFill(~~(a / 60), 2) + ":" + leftZeroFill(~~a % 60, 2)
            },
            ZZ: function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-"
                }
                return b + leftZeroFill(~~(10 * a / 6), 4)
            },
            z: function () {
                return this.zoneAbbr()
            },
            zz: function () {
                return this.zoneName()
            },
            X: function () {
                return this.unix()
            }
        };

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count)
        }
    }

    function ordinalizeToken(func, period) {
        return function (a) {
            return this.lang().ordinal(func.call(this,
                a), period)
        }
    }
    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + "o"] = ordinalizeToken(formatTokenFunctions[i], i)
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2)
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);

    function Language() {}

    function Moment(config) {
        extend(this, config)
    }

    function Duration(duration) {
        var years = duration.years || duration.year || duration.y || 0,
            months = duration.months || duration.month || duration.M ||
                0,
            weeks = duration.weeks || duration.week || duration.w || 0,
            days = duration.days || duration.day || duration.d || 0,
            hours = duration.hours || duration.hour || duration.h || 0,
            minutes = duration.minutes || duration.minute || duration.m || 0,
            seconds = duration.seconds || duration.second || duration.s || 0,
            milliseconds = duration.milliseconds || duration.millisecond || duration.ms || 0;
        this._input = duration;
        this._milliseconds = milliseconds + seconds * 1E3 + minutes * 6E4 + hours * 36E5;
        this._days = days + weeks * 7;
        this._months = months + years * 12;
        this._data = {};
        this._bubble()
    }

    function extend(a, b) {
        for (var i in b)
            if (b.hasOwnProperty(i)) a[i] = b[i];
        return a
    }

    function absRound(number) {
        if (number < 0) return Math.ceil(number);
        else return Math.floor(number)
    }

    function leftZeroFill(number, targetLength) {
        var output = number + "";
        while (output.length < targetLength) output = "0" + output;
        return output
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months,
            minutes, hours, currentDate;
        if (milliseconds) mom._d.setTime(+mom._d +
            milliseconds * isAdding);
        if (days || months) {
            minutes = mom.minute();
            hours = mom.hour()
        }
        if (days) mom.date(mom.date() + days * isAdding);
        if (months) mom.month(mom.month() + months * isAdding);
        if (milliseconds && !ignoreUpdateOffset) moment.updateOffset(mom);
        if (days || months) {
            mom.minute(minutes);
            mom.hour(hours)
        }
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === "[object Array]"
    }

    function compareArrays(array1, array2) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++)
            if (~~array1[i] !== ~~array2[i]) diffs++;
        return diffs + lengthDiff
    }

    function normalizeUnits(units) {
        return units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, "$1") : units
    }
    Language.prototype = {
        set: function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === "function") this[i] = prop;
                else this["_" + i] = prop
            }
        },
        _months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        months: function (m) {
            return this._months[m.month()]
        },
        _monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        monthsShort: function (m) {
            return this._monthsShort[m.month()]
        },
        monthsParse: function (monthName) {
            var i, mom, regex;
            if (!this._monthsParse) this._monthsParse = [];
            for (i = 0; i < 12; i++) {
                if (!this._monthsParse[i]) {
                    mom = moment([2E3, i]);
                    regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                    this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i")
                }
                if (this._monthsParse[i].test(monthName)) return i
            }
        },
        _weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdays: function (m) {
            return this._weekdays[m.day()]
        },
        _weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysShort: function (m) {
            return this._weekdaysShort[m.day()]
        },
        _weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        weekdaysMin: function (m) {
            return this._weekdaysMin[m.day()]
        },
        weekdaysParse: function (weekdayName) {
            var i, mom, regex;
            if (!this._weekdaysParse) this._weekdaysParse = [];
            for (i = 0; i < 7; i++) {
                if (!this._weekdaysParse[i]) {
                    mom = moment([2E3, 1]).day(i);
                    regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom,
                        "") + "|^" + this.weekdaysMin(mom, "");
                    this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i")
                }
                if (this._weekdaysParse[i].test(weekdayName)) return i
            }
        },
        _longDateFormat: {
            LT: "h:mm A",
            L: "MM/DD/YYYY",
            LL: "MMMM D YYYY",
            LLL: "MMMM D YYYY LT",
            LLLL: "dddd, MMMM D YYYY LT"
        },
        longDateFormat: function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1)
                });
                this._longDateFormat[key] =
                    output
            }
            return output
        },
        isPM: function (input) {
            return (input + "").toLowerCase()[0] === "p"
        },
        _meridiemParse: /[ap]\.?m?\.?/i,
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) return isLower ? "pm" : "PM";
            else return isLower ? "am" : "AM"
        },
        _calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
        },
        calendar: function (key, mom) {
            var output = this._calendar[key];
            return typeof output === "function" ? output.apply(mom) : output
        },
        _relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
        },
        relativeTime: function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return typeof output === "function" ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number)
        },
        pastFuture: function (diff, output) {
            var format = this._relativeTime[diff > 0 ? "future" : "past"];
            return typeof format ===
                "function" ? format(output) : format.replace(/%s/i, output)
        },
        ordinal: function (number) {
            return this._ordinal.replace("%d", number)
        },
        _ordinal: "%d",
        preparse: function (string) {
            return string
        },
        postformat: function (string) {
            return string
        },
        week: function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week
        },
        _week: {
            dow: 0,
            doy: 6
        }
    };

    function loadLang(key, values) {
        values.abbr = key;
        if (!languages[key]) languages[key] = new Language;
        languages[key].set(values);
        return languages[key]
    }

    function getLangDefinition(key) {
        if (!key) return moment.fn._lang;
        if (!languages[key] && hasModule) try {
            require("./lang/" + key)
        } catch (e) {
            return moment.fn._lang
        }
        return languages[key]
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[.*\]/)) return input.replace(/^\[|\]$/g, "");
        return input.replace(/\\/g, "")
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i, length;
        for (i = 0, length = array.length; i < length; i++)
            if (formatTokenFunctions[array[i]]) array[i] = formatTokenFunctions[array[i]];
            else array[i] = removeFormattingTokens(array[i]);
        return function (mom) {
            var output =
                "";
            for (i = 0; i < length; i++) output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            return output
        }
    }

    function formatMoment(m, format) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return m.lang().longDateFormat(input) || input
        }
        while (i-- && localFormattingTokens.test(format)) format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        if (!formatFunctions[format]) formatFunctions[format] = makeFormatFunction(format);
        return formatFunctions[format](m)
    }

    function getParseRegexForToken(token,
        config) {
        switch (token) {
        case "DDDD":
            return parseTokenThreeDigits;
        case "YYYY":
            return parseTokenFourDigits;
        case "YYYYY":
            return parseTokenSixDigits;
        case "S":
        case "SS":
        case "SSS":
        case "DDD":
            return parseTokenOneToThreeDigits;
        case "MMM":
        case "MMMM":
        case "dd":
        case "ddd":
        case "dddd":
            return parseTokenWord;
        case "a":
        case "A":
            return getLangDefinition(config._l)._meridiemParse;
        case "X":
            return parseTokenTimestampMs;
        case "Z":
        case "ZZ":
            return parseTokenTimezone;
        case "T":
            return parseTokenT;
        case "MM":
        case "DD":
        case "YY":
        case "HH":
        case "hh":
        case "mm":
        case "ss":
        case "M":
        case "D":
        case "d":
        case "H":
        case "h":
        case "m":
        case "s":
            return parseTokenOneOrTwoDigits;
        default:
            return new RegExp(token.replace("\\", ""))
        }
    }

    function timezoneMinutesFromString(string) {
        var tzchunk = (parseTokenTimezone.exec(string) || [])[0],
            parts = (tzchunk + "").match(parseTimezoneChunker) || ["-", 0, 0],
            minutes = +(parts[1] * 60) + ~~parts[2];
        return parts[0] === "+" ? -minutes : minutes
    }

    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;
        switch (token) {
        case "M":
        case "MM":
            datePartArray[1] = input == null ? 0 : ~~input - 1;
            break;
        case "MMM":
        case "MMMM":
            a = getLangDefinition(config._l).monthsParse(input);
            if (a != null) datePartArray[1] = a;
            else config._isValid = false;
            break;
        case "D":
        case "DD":
        case "DDD":
        case "DDDD":
            if (input != null) datePartArray[2] = ~~input;
            break;
        case "YY":
            datePartArray[0] = ~~input + (~~input > 68 ? 1900 : 2E3);
            break;
        case "YYYY":
        case "YYYYY":
            datePartArray[0] = ~~input;
            break;
        case "a":
        case "A":
            config._isPm = getLangDefinition(config._l).isPM(input);
            break;
        case "H":
        case "HH":
        case "h":
        case "hh":
            datePartArray[3] = ~~input;
            break;
        case "m":
        case "mm":
            datePartArray[4] = ~~input;
            break;
        case "s":
        case "ss":
            datePartArray[5] = ~~input;
            break;
        case "S":
        case "SS":
        case "SSS":
            datePartArray[6] = ~~ (("0." + input) * 1E3);
            break;
        case "X":
            config._d = new Date(parseFloat(input) * 1E3);
            break;
        case "Z":
        case "ZZ":
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break
        }
        if (input == null) config._isValid = false
    }

    function dateFromArray(config) {
        var i, date, input = [];
        if (config._d) return;
        for (i = 0; i < 7; i++) config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        input[3] += ~~((config._tzm || 0) / 60);
        input[4] += ~~((config._tzm || 0) % 60);
        date = new Date(0);
        if (config._useUTC) {
            date.setUTCFullYear(input[0], input[1], input[2]);
            date.setUTCHours(input[3], input[4], input[5], input[6])
        } else {
            date.setFullYear(input[0], input[1], input[2]);
            date.setHours(input[3], input[4], input[5], input[6])
        }
        config._d = date
    }

    function makeDateFromStringAndFormat(config) {
        var tokens = config._f.match(formattingTokens),
            string = config._i,
            i, parsedInput;
        config._a = [];
        for (i = 0; i < tokens.length; i++) {
            parsedInput = (getParseRegexForToken(tokens[i], config).exec(string) || [])[0];
            if (parsedInput) string = string.slice(string.indexOf(parsedInput) +
                parsedInput.length);
            if (formatTokenFunctions[tokens[i]]) addTimeToArrayFromToken(tokens[i], parsedInput, config)
        }
        if (string) config._il = string;
        if (config._isPm && config._a[3] < 12) config._a[3] += 12;
        if (config._isPm === false && config._a[3] === 12) config._a[3] = 0;
        dateFromArray(config)
    }

    function makeDateFromStringAndArray(config) {
        var tempConfig, tempMoment, bestMoment, scoreToBeat = 99,
            i, currentScore;
        for (i = 0; i < config._f.length; i++) {
            tempConfig = extend({}, config);
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);
            tempMoment = new Moment(tempConfig);
            currentScore = compareArrays(tempConfig._a, tempMoment.toArray());
            if (tempMoment._il) currentScore += tempMoment._il.length;
            if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempMoment
            }
        }
        extend(config, bestMoment)
    }

    function makeDateFromString(config) {
        var i, string = config._i,
            match = isoRegex.exec(string);
        if (match) {
            config._f = "YYYY-MM-DD" + (match[2] || " ");
            for (i = 0; i < 4; i++)
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break
                }
            if (parseTokenTimezone.exec(string)) config._f +=
                " Z";
            makeDateFromStringAndFormat(config)
        } else config._d = new Date(string)
    }

    function makeDateFromInput(config) {
        var input = config._i,
            matched = aspNetJsonRegex.exec(input);
        if (input === undefined) config._d = new Date;
        else if (matched) config._d = new Date(+matched[1]);
        else if (typeof input === "string") makeDateFromString(config);
        else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromArray(config)
        } else config._d = input instanceof Date ? new Date(+input) : new Date(input)
    }

    function substituteTimeAgo(string, number, withoutSuffix,
        isFuture, lang) {
        return lang.relativeTime(number || 1, !! withoutSuffix, string, isFuture)
    }

    function relativeTime(milliseconds, withoutSuffix, lang) {
        var seconds = round(Math.abs(milliseconds) / 1E3),
            minutes = round(seconds / 60),
            hours = round(minutes / 60),
            days = round(hours / 24),
            years = round(days / 365),
            args = seconds < 45 && ["s", seconds] || minutes === 1 && ["m"] || minutes < 45 && ["mm", minutes] || hours === 1 && ["h"] || hours < 22 && ["hh", hours] || days === 1 && ["d"] || days <= 25 && ["dd", days] || days <= 45 && ["M"] || days < 345 && ["MM", round(days / 30)] || years === 1 && ["y"] || ["yy", years];
        args[2] = withoutSuffix;
        args[3] = milliseconds > 0;
        args[4] = lang;
        return substituteTimeAgo.apply({}, args)
    }

    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;
        if (daysToDayOfWeek > end) daysToDayOfWeek -= 7;
        if (daysToDayOfWeek < end - 7) daysToDayOfWeek += 7;
        adjustedMoment = moment(mom).add("d", daysToDayOfWeek);
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        }
    }

    function makeMoment(config) {
        var input =
            config._i,
            format = config._f;
        if (input === null || input === "") return null;
        if (typeof input === "string") config._i = input = getLangDefinition().preparse(input);
        if (moment.isMoment(input)) {
            config = extend({}, input);
            config._d = new Date(+input._d)
        } else if (format)
            if (isArray(format)) makeDateFromStringAndArray(config);
            else makeDateFromStringAndFormat(config);
            else makeDateFromInput(config);
        return new Moment(config)
    }
    moment = function (input, format, lang) {
        return makeMoment({
            _i: input,
            _f: format,
            _l: lang,
            _isUTC: false
        })
    };
    moment.utc =
        function (input, format, lang) {
            return makeMoment({
                _useUTC: true,
                _isUTC: true,
                _l: lang,
                _i: input,
                _f: format
            })
    };
    moment.unix = function (input) {
        return moment(input * 1E3)
    };
    moment.duration = function (input, key) {
        var isDuration = moment.isDuration(input),
            isNumber = typeof input === "number",
            duration = isDuration ? input._input : isNumber ? {} : input,
            matched = aspNetTimeSpanJsonRegex.exec(input),
            sign, ret;
        if (isNumber)
            if (key) duration[key] = input;
            else duration.milliseconds = input;
            else if (matched) {
            sign = matched[1] === "-" ? -1 : 1;
            duration = {
                y: 0,
                d: ~~matched[2] *
                    sign,
                h: ~~matched[3] * sign,
                m: ~~matched[4] * sign,
                s: ~~matched[5] * sign,
                ms: ~~matched[6] * sign
            }
        }
        ret = new Duration(duration);
        if (isDuration && input.hasOwnProperty("_lang")) ret._lang = input._lang;
        return ret
    };
    moment.version = VERSION;
    moment.defaultFormat = isoFormat;
    moment.updateOffset = function () {};
    moment.lang = function (key, values) {
        if (!key) return moment.fn._lang._abbr;
        if (values) loadLang(key, values);
        else if (!languages[key]) getLangDefinition(key);
        moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key)
    };
    moment.langData =
        function (key) {
            if (key && key._lang && key._lang._abbr) key = key._lang._abbr;
            return getLangDefinition(key)
    };
    moment.isMoment = function (obj) {
        return obj instanceof Moment
    };
    moment.isDuration = function (obj) {
        return obj instanceof Duration
    };
    moment.fn = Moment.prototype = {
        clone: function () {
            return moment(this)
        },
        valueOf: function () {
            return +this._d + (this._offset || 0) * 6E4
        },
        unix: function () {
            return Math.floor(+this / 1E3)
        },
        toString: function () {
            return this.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
        },
        toDate: function () {
            return this._offset ?
                new Date(+this) : this._d
        },
        toISOString: function () {
            return formatMoment(moment(this).utc(), "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
        },
        toArray: function () {
            var m = this;
            return [m.year(), m.month(), m.date(), m.hours(), m.minutes(), m.seconds(), m.milliseconds()]
        },
        isValid: function () {
            if (this._isValid == null)
                if (this._a) this._isValid = !compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray());
                else this._isValid = !isNaN(this._d.getTime());
            return !!this._isValid
        },
        utc: function () {
            return this.zone(0)
        },
        local: function () {
            this.zone(0);
            this._isUTC = false;
            return this
        },
        format: function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.lang().postformat(output)
        },
        add: function (input, val) {
            var dur;
            if (typeof input === "string") dur = moment.duration(+val, input);
            else dur = moment.duration(input, val);
            addOrSubtractDurationFromMoment(this, dur, 1);
            return this
        },
        subtract: function (input, val) {
            var dur;
            if (typeof input === "string") dur = moment.duration(+val, input);
            else dur = moment.duration(input, val);
            addOrSubtractDurationFromMoment(this,
                dur, -1);
            return this
        },
        diff: function (input, units, asFloat) {
            var that = this._isUTC ? moment(input).zone(this._offset || 0) : moment(input).local(),
                zoneDiff = (this.zone() - that.zone()) * 6E4,
                diff, output;
            units = normalizeUnits(units);
            if (units === "year" || units === "month") {
                diff = (this.daysInMonth() + that.daysInMonth()) * 432E5;
                output = (this.year() - that.year()) * 12 + (this.month() - that.month());
                output += (this - moment(this).startOf("month") - (that - moment(that).startOf("month"))) / diff;
                output -= (this.zone() - moment(this).startOf("month").zone() -
                    (that.zone() - moment(that).startOf("month").zone())) * 6E4 / diff;
                if (units === "year") output = output / 12
            } else {
                diff = this - that;
                output = units === "second" ? diff / 1E3 : units === "minute" ? diff / 6E4 : units === "hour" ? diff / 36E5 : units === "day" ? (diff - zoneDiff) / 864E5 : units === "week" ? (diff - zoneDiff) / 6048E5 : diff
            }
            return asFloat ? output : absRound(output)
        },
        from: function (time, withoutSuffix) {
            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix)
        },
        fromNow: function (withoutSuffix) {
            return this.from(moment(),
                withoutSuffix)
        },
        calendar: function () {
            var diff = this.diff(moment().startOf("day"), "days", true),
                format = diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
            return this.format(this.lang().calendar(format, this))
        },
        isLeapYear: function () {
            var year = this.year();
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
        },
        isDST: function () {
            return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone()
        },
        day: function (input) {
            var day = this._isUTC ?
                this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                if (typeof input === "string") {
                    input = this.lang().weekdaysParse(input);
                    if (typeof input !== "number") return this
                }
                return this.add({
                    d: input - day
                })
            } else return day
        },
        month: function (input) {
            var utc = this._isUTC ? "UTC" : "",
                dayOfMonth, daysInMonth;
            if (input != null) {
                if (typeof input === "string") {
                    input = this.lang().monthsParse(input);
                    if (typeof input !== "number") return this
                }
                dayOfMonth = this.date();
                this.date(1);
                this._d["set" + utc + "Month"](input);
                this.date(Math.min(dayOfMonth,
                    this.daysInMonth()));
                moment.updateOffset(this);
                return this
            } else return this._d["get" + utc + "Month"]()
        },
        startOf: function (units) {
            units = normalizeUnits(units);
            switch (units) {
            case "year":
                this.month(0);
            case "month":
                this.date(1);
            case "week":
            case "day":
                this.hours(0);
            case "hour":
                this.minutes(0);
            case "minute":
                this.seconds(0);
            case "second":
                this.milliseconds(0)
            }
            if (units === "week") this.weekday(0);
            return this
        },
        endOf: function (units) {
            return this.startOf(units).add(units, 1).subtract("ms", 1)
        },
        isAfter: function (input, units) {
            units =
                typeof units !== "undefined" ? units : "millisecond";
            return +this.clone().startOf(units) > +moment(input).startOf(units)
        },
        isBefore: function (input, units) {
            units = typeof units !== "undefined" ? units : "millisecond";
            return +this.clone().startOf(units) < +moment(input).startOf(units)
        },
        isSame: function (input, units) {
            units = typeof units !== "undefined" ? units : "millisecond";
            return +this.clone().startOf(units) === +moment(input).startOf(units)
        },
        min: function (other) {
            other = moment.apply(null, arguments);
            return other < this ? this : other
        },
        max: function (other) {
            other =
                moment.apply(null, arguments);
            return other > this ? this : other
        },
        zone: function (input) {
            var offset = this._offset || 0;
            if (input != null) {
                if (typeof input === "string") input = timezoneMinutesFromString(input);
                if (Math.abs(input) < 16) input = input * 60;
                this._offset = input;
                this._isUTC = true;
                if (offset !== input) addOrSubtractDurationFromMoment(this, moment.duration(offset - input, "m"), 1, true)
            } else return this._isUTC ? offset : this._d.getTimezoneOffset();
            return this
        },
        zoneAbbr: function () {
            return this._isUTC ? "UTC" : ""
        },
        zoneName: function () {
            return this._isUTC ?
                "Coordinated Universal Time" : ""
        },
        daysInMonth: function () {
            return moment.utc([this.year(), this.month() + 1, 0]).date()
        },
        dayOfYear: function (input) {
            var dayOfYear = round((moment(this).startOf("day") - moment(this).startOf("year")) / 864E5) + 1;
            return input == null ? dayOfYear : this.add("d", input - dayOfYear)
        },
        weekYear: function (input) {
            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
            return input == null ? year : this.add("y", input - year)
        },
        isoWeekYear: function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add("y", input - year)
        },
        week: function (input) {
            var week = this.lang().week(this);
            return input == null ? week : this.add("d", (input - week) * 7)
        },
        isoWeek: function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add("d", (input - week) * 7)
        },
        weekday: function (input) {
            var weekday = (this._d.getDay() + 7 - this.lang()._week.dow) % 7;
            return input == null ? weekday : this.add("d", input - weekday)
        },
        isoWeekday: function (input) {
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input -
                7)
        },
        lang: function (key) {
            if (key === undefined) return this._lang;
            else {
                this._lang = getLangDefinition(key);
                return this
            }
        }
    };

    function makeGetterAndSetter(name, key) {
        moment.fn[name] = moment.fn[name + "s"] = function (input) {
            var utc = this._isUTC ? "UTC" : "";
            if (input != null) {
                this._d["set" + utc + key](input);
                moment.updateOffset(this);
                return this
            } else return this._d["get" + utc + key]()
        }
    }
    for (i = 0; i < proxyGettersAndSetters.length; i++) makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ""), proxyGettersAndSetters[i]);
    makeGetterAndSetter("year", "FullYear");
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.toJSON = moment.fn.toISOString;
    moment.duration.fn = Duration.prototype = {
        _bubble: function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years;
            data.milliseconds = milliseconds % 1E3;
            seconds = absRound(milliseconds / 1E3);
            data.seconds = seconds % 60;
            minutes = absRound(seconds /
                60);
            data.minutes = minutes % 60;
            hours = absRound(minutes / 60);
            data.hours = hours % 24;
            days += absRound(hours / 24);
            data.days = days % 30;
            months += absRound(days / 30);
            data.months = months % 12;
            years = absRound(months / 12);
            data.years = years
        },
        weeks: function () {
            return absRound(this.days() / 7)
        },
        valueOf: function () {
            return this._milliseconds + this._days * 864E5 + this._months % 12 * 2592E6 + ~~(this._months / 12) * 31536E6
        },
        humanize: function (withSuffix) {
            var difference = +this,
                output = relativeTime(difference, !withSuffix, this.lang());
            if (withSuffix) output =
                this.lang().pastFuture(difference, output);
            return this.lang().postformat(output)
        },
        add: function (input, val) {
            var dur = moment.duration(input, val);
            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;
            this._bubble();
            return this
        },
        subtract: function (input, val) {
            var dur = moment.duration(input, val);
            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;
            this._bubble();
            return this
        },
        get: function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() +
                "s"]()
        },
        as: function (units) {
            units = normalizeUnits(units);
            return this["as" + units.charAt(0).toUpperCase() + units.slice(1) + "s"]()
        },
        lang: moment.fn.lang
    };

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name]
        }
    }

    function makeDurationAsGetter(name, factor) {
        moment.duration.fn["as" + name] = function () {
            return +this / factor
        }
    }
    for (i in unitMillisecondFactors)
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationAsGetter(i, unitMillisecondFactors[i]);
            makeDurationGetter(i.toLowerCase())
        }
    makeDurationAsGetter("Weeks",
        6048E5);
    moment.duration.fn.asMonths = function () {
        return (+this - this.years() * 31536E6) / 2592E6 + this.years() * 12
    };
    moment.lang("en", {
        ordinal: function (number) {
            var b = number % 10,
                output = ~~ (number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
            return number + output
        }
    });
    Streak.moment = moment
}).call(this);
(function (Streak) {
    var self, DomWatcher;

    function getAnimationCSSString(selector, animationName) {
        return [selector, "{", "animation-duration: 0.001s;", "-o-animation-duration: 0.001s;", "-ms-animation-duration: 0.001s;", "-moz-animation-duration: 0.001s;", "-webkit-animation-duration: 0.001s;", "animation-name:", animationName, ";", "-o-animation-name:", animationName, ";", "-ms-animation-name:", animationName, ";", "-moz-animation-name:", animationName, ";", "-webkit-animation-name:", animationName, ";", "}"].join("")
    }
    self =
        DomWatcher = {
            initialized: false,
            watchedSelectors: {},
            animationCallbacks: {},
            initialize: function () {
                Streak.document.addEventListener("animationStart", DomWatcher.animationStarted, false);
                Streak.document.addEventListener("MSAnimationStart", DomWatcher.animationStarted, false);
                Streak.document.addEventListener("webkitAnimationStart", DomWatcher.animationStarted, false)
            },
            watchForNewSelector: function (selector, callback) {
                if (!self.initialized) {
                    self.initialize();
                    self.initialized = true
                }
                if (!self.watchedSelectors[selector]) self.generateNewSelectorWatch(selector);
                self.watchedSelectors[selector].callbacks.push(callback)
            },
            generateNewSelectorWatch: function (selector) {
                var animationName = ("bb" + Date.now() + "." + Math.random()).replace(/\./ig, "");
                var animationRule = ["@-webkit-keyframes ", animationName, " {", "from { clip: rect(1px, auto, auto, auto); }", " to { clip: rect(0px, auto, auto, auto); }", "}"].join("");
                Streak.CSSStyleManipulator.addRule(animationRule, 0);
                var animationString = getAnimationCSSString(selector, animationName);
                Streak.CSSStyleManipulator.addRule(animationString,
                    0);
                var callbacks = [];
                self.watchedSelectors[selector] = {
                    animationName: animationName,
                    callbacks: callbacks
                };
                self.animationCallbacks[animationName] = callbacks
            },
            notifyWhenSelectorChanged: function (initialSelector, changeSelector, callback) {
                var animationNameBase = ("bb" + Date.now() + "." + Math.random()).replace(/\./ig, "");
                var animationNameInitial = animationNameBase + "_initial";
                var animationNameChange = animationNameBase + "_change";
                Streak.CSSStyleManipulator.addRule(["@-webkit-keyframes ", animationNameInitial, " {", "from { clip: rect(auto, 0px, auto, auto); }",
                    " to { clip: rect(auto, 1px, auto, auto); }", "}"
                ].join(""), 0);
                Streak.CSSStyleManipulator.addRule(getAnimationCSSString(initialSelector, animationNameInitial), 0);
                Streak.CSSStyleManipulator.addRule(["@-webkit-keyframes ", animationNameChange, " {", "from { clip: rect(auto, 1px, auto, auto); }", " to { clip: rect(auto, 0px, auto, auto); }", "}"].join(""), 0);
                Streak.CSSStyleManipulator.addRule(getAnimationCSSString(changeSelector, animationNameChange), 0);
                self.animationCallbacks[animationNameInitial] = [callback];
                self.animationCallbacks[animationNameChange] = [callback]
            },
            notifyAttributeChanged: function (element, attribute, callback) {
                if (!window.MutationObserver) return;
                var observer = new MutationObserver(function (mutations) {
                    for (var ii = 0; ii < mutations.length; ii++)
                        if (mutations[ii].attributeName === attribute) {
                            callback();
                            return
                        }
                });
                observer.observe(element, {
                    attributes: true
                });
                return function () {
                    observer.disconnect()
                }
            },
            animationStarted: function (event) {
                var callbacks = self.animationCallbacks[event.animationName];
                if (callbacks) {
                    var callbackLength =
                        callbacks.length;
                    for (var ii = 0; ii < callbackLength; ii++) callbacks[ii](event.target)
                }
            }
    };
    Streak.DomWatcher = DomWatcher
})(Streak);
(function (Streak) {
    var stemWordCache = {};
    var vowelsWithY = /^(.*[aeiouy].*)y$/;
    var sses = /sses$/;
    var plusHatS = /^(.+?)([^s])s$/;
    var re_1a = /^(.+?)eed$/;
    var re2_1a = /^(.+?)(ed|ing)$/;
    var re_1b = /^(.+?)eed$/;
    var re2_1b = /^(.+?)(ed|ing)$/;
    var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;
    var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
    var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
    var re2_4 = /^(.+?)(s|t)(ion)$/;
    var re_5 = /^(.+?)e$/;
    var re_5b = /ll$/;
    var fewVowels = /([^aeiouylsz])\1$/;
    var someVowels = /^([^aeiou][^aeiouy]*)?[aeiouy]/;
    var moreVowels = /^[^aeiou][^aeiouy]*[aeiouy][^aeiouwxy]$/;
    var lotsOfVowels = /^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*/;
    var tonsOfVowels = /^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*[aeiouy][aeiou]*[^aeiou][^aeiouy]*/;
    var tonsOfVowelsMaybe = /^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*([aeiouy][aeiou]*)?$/;
    var generate =
        /.*generate?s?d?(ing)?$/;
    var general = /.*general(ly)?$/;
    var generic = /.*generic(ally)?$/;
    var generous = /.*generous(ly)?$/;
    var communit = /.*communit(ies)?y?/;
    var Stemmer = function () {
        function i() {}

        function j() {
            console.log(Array.prototype.slice.call(arguments).join(" "))
        }
        var k = {
            ational: "ate",
            tional: "tion",
            enci: "ence",
            anci: "ance",
            izer: "ize",
            bli: "ble",
            alli: "al",
            entli: "ent",
            eli: "e",
            ousli: "ous",
            ization: "ize",
            ation: "ate",
            ator: "ate",
            alism: "al",
            iveness: "ive",
            fulness: "ful",
            ousness: "ous",
            aliti: "al",
            iviti: "ive",
            biliti: "ble",
            logi: "log"
        }, l = {
                icate: "ic",
                ative: "",
                alize: "al",
                iciti: "ic",
                ical: "ic",
                ful: "",
                ness: ""
            };
        return function (a, m) {
            var orig = a;
            if (stemWordCache[a]) return stemWordCache[a];
            var d, c, g, b, h, e, f = a;
            e = m ? j : i;
            if (3 > a.length) return a;
            g = a.substr(0, 1);
            "y" == g && (a = g.toUpperCase() + a.substr(1));
            b = sses;
            c = plusHatS;
            b.test(a) ? (a = a.replace(b, "$1$2"), e("1a", b, a)) : c.test(a) && (a = a.replace(c, "$1$2"), e("1a", c, a));
            b = re_1a;
            c = re2_1a;
            b.test(a) ? (c = b.exec(a), b = lotsOfVowels, b.test(c[1]) && (b = /.$/, a = a.replace(b, ""), e("1b", b, a))) : c.test(a) && (c = c.exec(a),
                d = c[1], c = someVowels, c.test(d) && (a = d, e("1b", c, a), c = /(at|bl|iz)$/, h = fewVowels, d = moreVowels, c.test(a) ? (a += "e", e("1b", c, a)) : h.test(a) ? (b = /.$/, a = a.replace(b, ""), e("1b", h, a)) : d.test(a) && (a += "e", e("1b", d, a))));
            b = vowelsWithY;
            b.test(a) && (c = b.exec(a), d = c[1], a = d + "i", e("1c", b, a));
            b = re_2;
            b.test(a) && (c = b.exec(a), d = c[1], c = c[2], b = lotsOfVowels, b.test(d) && (a = d + k[c], e("2", b, a)));
            b = re_3;
            b.test(a) && (c = b.exec(a), d = c[1], c = c[2], b = lotsOfVowels, b.test(d) && (a = d + l[c], e("3", b, a)));
            b = re_4;
            c = re2_4;
            b.test(a) ? (c = b.exec(a), d = c[1],
                b = tonsOfVowels, b.test(d) && (a = d, e("4", b, a))) : c.test(a) && (c = c.exec(a), d = c[1] + c[2], c = tonsOfVowels, c.test(d) && (a = d, e("4", c, a)));
            b = re_5;
            if (b.test(a) && (c = b.exec(a), d = c[1], b = tonsOfVowels, c = tonsOfVowelsMaybe, h = moreVowels, b.test(d) || c.test(d) && !h.test(d))) a = d, e("5", b, c, h, a);
            b = re_5b;
            c = tonsOfVowels;
            b.test(a) && c.test(a) && (b = /.$/, a = a.replace(b, ""), e("5", b, c, a));
            "y" == g && (a = g.toLowerCase() + a.substr(1));
            g = {
                skis: "ski",
                skies: "sky",
                dying: "die",
                lying: "lie",
                tying: "tie",
                idly: "idl",
                gently: "gentl",
                ugly: "ugli",
                early: "earli",
                only: "onli",
                singly: "singl"
            };
            g[f] !== {}[f] && (a = g[f], e("Special Word", a)); - 1 !== "sky news howe atlas cosmos bias          andes inning outing canning herring          earring proceed exceed succeed".indexOf(f) && (a = f, e("Special Word", a));
            b = generate;
            b.test(f) && (a += "at", e("Overstemmed", a));
            b = general;
            b.test(f) && (a += "al", e("Overstemmed", a));
            b = generic;
            b.test(f) && (a += "ic", e("Overstemmed", a));
            b = generous;
            b.test(f) && (a += "ous", e("Overstemmed", a));
            b = communit;
            b.test(f) && (a += "iti", e("Overstemmed", a));
            stemWordCache[orig] =
                a;
            return a
        }
    }();
    Stemmer.clearWordCache = function () {
        stemWordCache = {}
    };
    Streak.Stemmer = Stemmer
})(Streak);
(function () {
    var root = this;
    var previousUnderscore = root._;
    var breaker = {};
    var ArrayProto = Array.prototype,
        ObjProto = Object.prototype,
        FuncProto = Function.prototype;
    var push = ArrayProto.push,
        slice = ArrayProto.slice,
        concat = ArrayProto.concat,
        toString = ObjProto.toString,
        hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeForEach = ArrayProto.forEach,
        nativeMap = ArrayProto.map,
        nativeReduce = ArrayProto.reduce,
        nativeReduceRight = ArrayProto.reduceRight,
        nativeFilter = ArrayProto.filter,
        nativeEvery = ArrayProto.every,
        nativeSome =
            ArrayProto.some,
        nativeIndexOf = ArrayProto.indexOf,
        nativeLastIndexOf = ArrayProto.lastIndexOf,
        nativeIsArray = Array.isArray,
        nativeKeys = Object.keys,
        nativeBind = FuncProto.bind;
    var _ = function (obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj
    };
    root["_underscore"] = _;
    _.VERSION = "1.4.4";
    var each = _.each = _.forEach = function (obj, iterator, context) {
        if (obj == null) return;
        if (nativeForEach && obj.forEach === nativeForEach) obj.forEach(iterator, context);
        else if (obj.length === +obj.length)
            for (var i =
                0, l = obj.length; i < l; i++) {
                if (iterator.call(context, obj[i], i, obj) === breaker) return
            } else
                for (var key in obj)
                    if (_.has(obj, key))
                        if (iterator.call(context, obj[key], key, obj) === breaker) return
    };
    _.map = _.collect = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function (value, index, list) {
            results[results.length] = iterator.call(context, value, index, list)
        });
        return results
    };
    var reduceError = "Reduce of empty array with no initial value";
    _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator)
        }
        each(obj, function (value, index, list) {
            if (!initial) {
                memo = value;
                initial = true
            } else memo = iterator.call(context, memo, value, index, list)
        });
        if (!initial) throw new TypeError(reduceError);
        return memo
    };
    _.reduceRight = _.foldr = function (obj, iterator, memo,
        context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator)
        }
        var length = obj.length;
        if (length !== +length) {
            var keys = _.keys(obj);
            length = keys.length
        }
        each(obj, function (value, index, list) {
            index = keys ? keys[--length] : --length;
            if (!initial) {
                memo = obj[index];
                initial = true
            } else memo = iterator.call(context, memo, obj[index], index, list)
        });
        if (!initial) throw new TypeError(reduceError);
        return memo
    };
    _.find = _.detect = function (obj, iterator, context) {
        var result;
        any(obj, function (value, index, list) {
            if (iterator.call(context, value, index, list)) {
                result = value;
                return true
            }
        });
        return result
    };
    _.filter = _.select = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
        each(obj, function (value, index, list) {
            if (iterator.call(context, value, index, list)) results[results.length] = value
        });
        return results
    };
    _.reject = function (obj,
        iterator, context) {
        return _.filter(obj, function (value, index, list) {
            return !iterator.call(context, value, index, list)
        }, context)
    };
    _.every = _.all = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = true;
        if (obj == null) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
        each(obj, function (value, index, list) {
            if (!(result = result && iterator.call(context, value, index, list))) return breaker
        });
        return !!result
    };
    var any = _.some = _.any = function (obj, iterator, context) {
        iterator ||
            (iterator = _.identity);
        var result = false;
        if (obj == null) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
        each(obj, function (value, index, list) {
            if (result || (result = iterator.call(context, value, index, list))) return breaker
        });
        return !!result
    };
    _.contains = _.include = function (obj, target) {
        if (obj == null) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function (value) {
            return value === target
        })
    };
    _.invoke = function (obj, method) {
        var args =
            slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
            return (isFunc ? method : value[method]).apply(value, args)
        })
    };
    _.pluck = function (obj, key) {
        return _.map(obj, function (value) {
            return value[key]
        })
    };
    _.where = function (obj, attrs, first) {
        if (_.isEmpty(attrs)) return first ? null : [];
        return _[first ? "find" : "filter"](obj, function (value) {
            for (var key in attrs)
                if (attrs[key] !== value[key]) return false;
            return true
        })
    };
    _.findWhere = function (obj, attrs) {
        return _.where(obj, attrs, true)
    };
    _.max = function (obj,
        iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) return Math.max.apply(Math, obj);
        if (!iterator && _.isEmpty(obj)) return -Infinity;
        var result = {
            computed: -Infinity,
            value: -Infinity
        };
        each(obj, function (value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed >= result.computed && (result = {
                value: value,
                computed: computed
            })
        });
        return result.value
    };
    _.min = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) return Math.min.apply(Math,
            obj);
        if (!iterator && _.isEmpty(obj)) return Infinity;
        var result = {
            computed: Infinity,
            value: Infinity
        };
        each(obj, function (value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed < result.computed && (result = {
                value: value,
                computed: computed
            })
        });
        return result.value
    };
    _.shuffle = function (obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function (value) {
            rand = _.random(index++);
            shuffled[index - 1] = shuffled[rand];
            shuffled[rand] = value
        });
        return shuffled
    };
    var lookupIterator = function (value) {
        return _.isFunction(value) ?
            value : function (obj) {
                return obj[value]
        }
    };
    _.sortBy = function (obj, value, context) {
        var iterator = lookupIterator(value);
        return _.pluck(_.map(obj, function (value, index, list) {
            return {
                value: value,
                index: index,
                criteria: iterator.call(context, value, index, list)
            }
        }).sort(function (left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
                if (a > b || a === void 0) return 1;
                if (a < b || b === void 0) return -1
            }
            return left.index < right.index ? -1 : 1
        }), "value")
    };
    var group = function (obj, value, context, behavior) {
        var result = {};
        var iterator =
            lookupIterator(value || _.identity);
        each(obj, function (value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value)
        });
        return result
    };
    _.groupBy = function (obj, value, context) {
        return group(obj, value, context, function (result, key, value) {
            (_.has(result, key) ? result[key] : result[key] = []).push(value)
        })
    };
    _.countBy = function (obj, value, context) {
        return group(obj, value, context, function (result, key) {
            if (!_.has(result, key)) result[key] = 0;
            result[key]++
        })
    };
    _.sortedIndex = function (array, obj, iterator, context) {
        iterator =
            iterator == null ? _.identity : lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0,
            high = array.length;
        while (low < high) {
            var mid = low + high >>> 1;
            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid
        }
        return low
    };
    _.toArray = function (obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (obj.length === +obj.length) return _.map(obj, _.identity);
        return _.values(obj)
    };
    _.size = function (obj) {
        if (obj == null) return 0;
        return obj.length === +obj.length ? obj.length : _.keys(obj).length
    };
    _.first = _.head =
        _.take = function (array, n, guard) {
            if (array == null) return void 0;
            return n != null && !guard ? slice.call(array, 0, n) : array[0]
    };
    _.initial = function (array, n, guard) {
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n))
    };
    _.last = function (array, n, guard) {
        if (array == null) return void 0;
        if (n != null && !guard) return slice.call(array, Math.max(array.length - n, 0));
        else return array[array.length - 1]
    };
    _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n)
    };
    _.compact = function (array) {
        return _.filter(array,
            _.identity)
    };
    var flatten = function (input, shallow, output) {
        each(input, function (value) {
            if (_.isArray(value)) shallow ? push.apply(output, value) : flatten(value, shallow, output);
            else output.push(value)
        });
        return output
    };
    _.flatten = function (array, shallow) {
        return flatten(array, shallow, [])
    };
    _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1))
    };
    _.uniq = _.unique = function (array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
            context = iterator;
            iterator = isSorted;
            isSorted = false
        }
        var initial = iterator ?
            _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function (value, index) {
            if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                seen.push(value);
                results.push(array[index])
            }
        });
        return results
    };
    _.union = function () {
        return _.uniq(concat.apply(ArrayProto, arguments))
    };
    _.intersection = function (array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function (item) {
            return _.every(rest, function (other) {
                return _.indexOf(other, item) >= 0
            })
        })
    };
    _.difference = function (array) {
        var rest =
            concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function (value) {
            return !_.contains(rest, value)
        })
    };
    _.zip = function () {
        var args = slice.call(arguments);
        var length = _.max(_.pluck(args, "length"));
        var results = new Array(length);
        for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
        return results
    };
    _.object = function (list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, l = list.length; i < l; i++)
            if (values) result[list[i]] = values[i];
            else result[list[i][0]] = list[i][1];
        return result
    };
    _.indexOf =
        function (array, item, isSorted) {
            if (array == null) return -1;
            var i = 0,
                l = array.length;
            if (isSorted)
                if (typeof isSorted == "number") i = isSorted < 0 ? Math.max(0, l + isSorted) : isSorted;
                else {
                    i = _.sortedIndex(array, item);
                    return array[i] === item ? i : -1
                }
            if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
            for (; i < l; i++)
                if (array[i] === item) return i;
            return -1
    };
    _.lastIndexOf = function (array, item, from) {
        if (array == null) return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return hasIndex ?
            array.lastIndexOf(item, from) : array.lastIndexOf(item);
        var i = hasIndex ? from : array.length;
        while (i--)
            if (array[i] === item) return i;
        return -1
    };
    _.range = function (start, stop, step) {
        if (arguments.length <= 1) {
            stop = start || 0;
            start = 0
        }
        step = arguments[2] || 1;
        var len = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(len);
        while (idx < len) {
            range[idx++] = start;
            start += step
        }
        return range
    };
    _.bind = function (func, context) {
        if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        var args = slice.call(arguments, 2);
        return function () {
            return func.apply(context, args.concat(slice.call(arguments)))
        }
    };
    _.partial = function (func) {
        var args = slice.call(arguments, 1);
        return function () {
            return func.apply(this, args.concat(slice.call(arguments)))
        }
    };
    _.bindAll = function (obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0) funcs = _.functions(obj);
        each(funcs, function (f) {
            obj[f] = _.bind(obj[f], obj)
        });
        return obj
    };
    _.memoize = function (func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function () {
            var key =
                hasher.apply(this, arguments);
            return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments)
        }
    };
    _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
            return func.apply(null, args)
        }, wait)
    };
    _.defer = function (func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)))
    };
    _.throttle = function (func, wait) {
        var context, args, timeout, result;
        var previous = 0;
        var later = function () {
            previous = new Date;
            timeout = null;
            result = func.apply(context, args)
        };
        return function () {
            var now =
                new Date;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0) {
                clearTimeout(timeout);
                timeout = null;
                previous = now;
                result = func.apply(context, args)
            } else if (!timeout) timeout = setTimeout(later, remaining);
            return result
        }
    };
    _.debounce = function (func, wait, immediate) {
        var timeout, result;
        return function () {
            var context = this,
                args = arguments;
            var later = function () {
                timeout = null;
                if (!immediate) result = func.apply(context, args)
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later,
                wait);
            if (callNow) result = func.apply(context, args);
            return result
        }
    };
    _.once = function (func) {
        var ran = false,
            memo;
        return function () {
            if (ran) return memo;
            ran = true;
            memo = func.apply(this, arguments);
            func = null;
            return memo
        }
    };
    _.wrap = function (func, wrapper) {
        return function () {
            var args = [func];
            push.apply(args, arguments);
            return wrapper.apply(this, args)
        }
    };
    _.compose = function () {
        var funcs = arguments;
        return function () {
            var args = arguments;
            for (var i = funcs.length - 1; i >= 0; i--) args = [funcs[i].apply(this, args)];
            return args[0]
        }
    };
    _.after =
        function (times, func) {
            if (times <= 0) return func();
            return function () {
                if (--times < 1) return func.apply(this, arguments)
            }
    };
    _.keys = nativeKeys || function (obj) {
        if (obj !== Object(obj)) throw new TypeError("Invalid object");
        var keys = [];
        for (var key in obj)
            if (_.has(obj, key)) keys[keys.length] = key;
        return keys
    };
    _.values = function (obj) {
        var values = [];
        for (var key in obj)
            if (_.has(obj, key)) values.push(obj[key]);
        return values
    };
    _.pairs = function (obj) {
        var pairs = [];
        for (var key in obj)
            if (_.has(obj, key)) pairs.push([key, obj[key]]);
        return pairs
    };
    _.invert = function (obj) {
        var result = {};
        for (var key in obj)
            if (_.has(obj, key)) result[obj[key]] = key;
        return result
    };
    _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj)
            if (_.isFunction(obj[key])) names.push(key);
        return names.sort()
    };
    _.extend = function (obj) {
        each(slice.call(arguments, 1), function (source) {
            if (source)
                for (var prop in source) obj[prop] = source[prop]
        });
        return obj
    };
    _.pick = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function (key) {
            if (key in
                obj) copy[key] = obj[key]
        });
        return copy
    };
    _.omit = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj)
            if (!_.contains(keys, key)) copy[key] = obj[key];
        return copy
    };
    _.defaults = function (obj) {
        each(slice.call(arguments, 1), function (source) {
            if (source)
                for (var prop in source)
                    if (obj[prop] == null) obj[prop] = source[prop]
        });
        return obj
    };
    _.clone = function (obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj)
    };
    _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj
    };
    var eq = function (a, b, aStack, bStack) {
        if (a === b) return a !== 0 || 1 / a == 1 / b;
        if (a == null || b == null) return a === b;
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
        case "[object String]":
            return a == String(b);
        case "[object Number]":
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
        case "[object Date]":
        case "[object Boolean]":
            return +a == +b;
        case "[object RegExp]":
            return a.source == b.source && a.global == b.global && a.multiline ==
                b.multiline && a.ignoreCase == b.ignoreCase
        }
        if (typeof a != "object" || typeof b != "object") return false;
        var length = aStack.length;
        while (length--)
            if (aStack[length] == a) return bStack[length] == b;
        aStack.push(a);
        bStack.push(b);
        var size = 0,
            result = true;
        if (className == "[object Array]") {
            size = a.length;
            result = size == b.length;
            if (result)
                while (size--)
                    if (!(result = eq(a[size], b[size], aStack, bStack))) break
        } else {
            var aCtor = a.constructor,
                bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) &&
                bCtor instanceof bCtor)) return false;
            for (var key in a)
                if (_.has(a, key)) {
                    size++;
                    if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break
                }
            if (result) {
                for (key in b)
                    if (_.has(b, key) && !size--) break;
                result = !size
            }
        }
        aStack.pop();
        bStack.pop();
        return result
    };
    _.isEqual = function (a, b) {
        return eq(a, b, [], [])
    };
    _.isEmpty = function (obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
        for (var key in obj)
            if (_.has(obj, key)) return false;
        return true
    };
    _.isElement = function (obj) {
        return !!(obj &&
            obj.nodeType === 1)
    };
    _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) == "[object Array]"
    };
    _.isObject = function (obj) {
        return obj === Object(obj)
    };
    each(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function (name) {
        _["is" + name] = function (obj) {
            return toString.call(obj) == "[object " + name + "]"
        }
    });
    if (!_.isArguments(arguments)) _.isArguments = function (obj) {
        return !!(obj && _.has(obj, "callee"))
    };
    if (typeof / . / !== "function") _.isFunction = function (obj) {
        return typeof obj === "function"
    };
    _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj))
    };
    _.isNaN = function (obj) {
        return _.isNumber(obj) && obj != +obj
    };
    _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) == "[object Boolean]"
    };
    _.isNull = function (obj) {
        return obj === null
    };
    _.isUndefined = function (obj) {
        return obj === void 0
    };
    _.has = function (obj, key) {
        return hasOwnProperty.call(obj, key)
    };
    _.noConflict = function () {
        root._ = previousUnderscore;
        return this
    };
    _.identity = function (value) {
        return value
    };
    _.times = function (n, iterator, context) {
        var accum = Array(n);
        for (var i =
            0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum
    };
    _.random = function (min, max) {
        if (max == null) {
            max = min;
            min = 0
        }
        return min + Math.floor(Math.random() * (max - min + 1))
    };
    var entityMap = {
        escape: {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "/": "&#x2F;"
        }
    };
    entityMap.unescape = _.invert(entityMap.escape);
    var entityRegexes = {
        escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
        unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
    };
    _.each(["escape", "unescape"], function (method) {
        _[method] =
            function (string) {
                if (string == null) return "";
                return ("" + string).replace(entityRegexes[method], function (match) {
                    return entityMap[method][match]
                })
        }
    });
    _.result = function (object, property) {
        if (object == null) return null;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value
    };
    _.mixin = function (obj) {
        each(_.functions(obj), function (name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function () {
                var args = [this._wrapped];
                push.apply(args, arguments);
                return result.call(this, func.apply(_, args))
            }
        })
    };
    var idCounter = 0;
    _.uniqueId = function (prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id
    };
    _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "\t": "t",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    _.template = function (text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = new RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join("|") + "|$", "g");
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escaper, function (match) {
                return "\\" + escapes[match]
            });
            if (escape) source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
            if (interpolate) source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            if (evaluate) source += "';\n" + evaluate + "\n__p+='";
            index = offset + match.length;
            return match
        });
        source += "';\n";
        if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        try {
            render = new Function(settings.variable || "obj", "_", source)
        } catch (e) {
            e.source = source;
            throw e;
        }
        if (data) return render(data, _);
        var template = function (data) {
            return render.call(this, data, _)
        };
        template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}";
        return template
    };
    _.chain = function (obj) {
        return _(obj).chain()
    };
    var result = function (obj) {
        return this._chain ? _(obj).chain() : obj
    };
    _.mixin(_);
    each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name == "shift" || name == "splice") && obj.length === 0) delete obj[0];
            return result.call(this, obj)
        }
    });
    each(["concat", "join", "slice"], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
            return result.call(this, method.apply(this._wrapped,
                arguments))
        }
    });
    _.extend(_.prototype, {
        chain: function () {
            this._chain = true;
            return this
        },
        value: function () {
            return this._wrapped
        }
    })
}).call(Streak);
Streak._ = Streak._underscore;
delete Streak._underscore;
(function (Streak, window) {
    var _ = Streak._;
    var Eventer = function () {
        this._eventCBs = {}, this._isReady = false, this._unReady = false, this._readyFuncs = [], this._readyFuncMap = {}, this._isLoaded = false, this._loadedFuncs = [], this._loadedFuncMap = {}, this._triggerActive = true
    };
    _.extend(Eventer.prototype, {
        isReady: function () {
            return this._isReady
        },
        unReady: function () {
            this._isReady = false;
            this._unReady = true
        },
        resetReady: function () {
            this._isReady = false;
            this._unReady = false
        },
        ready: function (cb, id) {
            if (this._unReady) return;
            if (this._isReady) cb();
            else if (id) {
                var oldCB = this._readyFuncMap[id];
                if (oldCB) this._readyFuncs[this._readyFuncs.indexOf(oldCB)] = cb;
                else this._readyFuncs.push(cb);
                this._readyFuncMap[id] = cb
            } else this._readyFuncs.push(cb)
        },
        _runReady: function () {
            this._isReady = true;
            this._unReady = false;
            for (var i = 0; this._readyFuncs[i]; i++) this._readyFuncs[i]();
            this._readyFuncs = []
        },
        isLoaded: function () {
            return this._isLoaded
        },
        onLoad: function (cb, id) {
            if (this._isLoaded) cb();
            else if (id) {
                var oldCB = this._loadedFuncMap[id];
                if (oldCB) this._loadedFuncs[this._loadedFuncs.indexOf(oldCB)] =
                    cb;
                else this._loadedFuncs.push(cb);
                this._loadedFuncMap[id] = cb
            } else this._loadedFuncs.push(cb)
        },
        _runLoad: function () {
            this._isLoaded = true;
            for (var i = 0; this._loadedFuncs[i]; i++) this._loadedFuncs[i]();
            this._loadedFuncs = []
        },
        bind: function (event, cb) {
            if (!this._eventCBs[event]) this._eventCBs[event] = [];
            this._eventCBs[event].push(cb);
            var self = this;
            return function () {
                self.unbind(event, cb)
            }
        },
        unbind: function (event, cb) {
            if (this._eventCBs[event] && this._eventCBs[event].length > 0) this._eventCBs[event].removeVal(cb)
        },
        trigger: function (event) {
            if (event ===
                "ready") this._runReady();
            if (event === "load") this._runLoad();
            if (this._triggerActive)
                if (this._eventCBs[event]) {
                    var args = _.toArray(arguments).slice(1);
                    var cbs = _.clone(this._eventCBs[event]);
                    this._eventCBs[event].length = 0;
                    for (var i = 0; i < cbs.length; i++) {
                        var cb = cbs[i];
                        var shouldAdd = true;
                        if (cb) try {
                            shouldAdd = !cb.apply(this, args)
                        } catch (err) {
                            try {
                                var msg = "Error in event";
                                msg += "\n event: " + event;
                                Streak.BentoBox.logError(msg, err)
                            } catch (newErr) {
                                console.log(err)
                            }
                        } else shouldAdd = false;
                        if (shouldAdd) this._eventCBs[event].push(cb)
                    }
                }
        },
        toggleTriggerState: function (state) {
            if (state) this._triggerActive = state;
            else this._triggerActive = !this._triggerActive
        }
    });
    Eventer.create = function (obj) {
        if (!obj) obj = {};
        var eve = new Eventer;
        _.extend(eve, obj);
        return eve
    };
    Streak.Eventer = Eventer
})(Streak, window);
(function (Streak) {
    var DependencyManagerClass = function () {
        this._mapOfFinishedFunctionKeys = {};
        this._mapOfFunctionKeysToFunctionQueues = {}
    };
    Streak._.extend(DependencyManagerClass.prototype, {
        addFunction: function (functionParameters) {
            if (this._doesAddingThisFunctionCauseACycle(functionParameters)) throw new Error("cycle this", functionParameters);
            if (this._shouldRunFunction(functionParameters)) this._runFunction(functionParameters);
            else this._queueFunctionParameters(functionParameters)
        },
        notifyFunctionFinished: function (functionKey) {
            this._mapOfFinishedFunctionKeys[functionKey] =
                true;
            this._checkDependentFunctions(functionKey)
        },
        _doesAddingThisFunctionCauseACycle: function (functionParameters, currentFunctionKeyGraph) {
            currentFunctionKeyGraph = currentFunctionKeyGraph || [];
            var functionKey = functionParameters.functionKey;
            if (!functionKey) return true;
            var dependentFunctionKeys = functionParameters.dependentFunctionKeys;
            if (!dependentFunctionKeys) return false;
            var queuedFunctions = this._mapOfFunctionKeysToFunctionQueues[functionKey];
            if (!queuedFunctions || queuedFunctions.length === 0) return false;
            if (currentFunctionKeyGraph.indexOf(functionKey) > -1) return true;
            currentFunctionKeyGraph.push(functionKey);
            for (var ii = 0; ii < queuedFunctions.length; ii++) {
                var queuedFunction = queuedFunctions[ii];
                if (this._doesAddingThisFunctionCauseACycle(queuedFunction, currentFunctionKeyGraph.slice(0))) return true
            }
            return false
        },
        _shouldRunFunction: function (functionParameters) {
            return !this._mapOfFinishedFunctionKeys[functionParameters.functionKey] && this._haveAllDependentFunctionsFinished(functionParameters)
        },
        _haveAllDependentFunctionsFinished: function (functionParameters) {
            var dependentFunctionKeys =
                functionParameters.dependentFunctionKeys;
            if (!dependentFunctionKeys) return true;
            var anyUnfinishedFunctions = false;
            for (var ii = 0; ii < dependentFunctionKeys.length; ii++) anyUnfinishedFunctions = anyUnfinishedFunctions || !this._mapOfFinishedFunctionKeys[dependentFunctionKeys[ii]];
            if (anyUnfinishedFunctions) return false;
            else return true
        },
        _runFunction: function (functionParameters) {
            if (functionParameters.functionReference) {
                this._runFunctionInNewWay(functionParameters);
                return
            }
            var functionToCall = functionParameters.functionToCall;
            var functionKey = functionParameters.functionKey;
            var functionContext = functionParameters.functionContext;
            var self = this;
            if (!functionToCall || !functionKey) return;
            try {
                var functionNotCompleteTimeout = setTimeout(function () {
                    Streak.BentoBox.logError("function timed out", functionKey)
                }, 60 * 1E3);
                functionToCall.call(functionContext, function () {
                    clearTimeout(functionNotCompleteTimeout);
                    self._mapOfFinishedFunctionKeys[functionKey] = true;
                    self._checkDependentFunctions(functionKey)
                })
            } catch (err) {
                if (functionNotCompleteTimeout) clearTimeout(functionNotCompleteTimeout);
                console.error("Dependency Manager. Error in:", functionKey, functionParameters, err.stack);
                Streak.BentoBox.logError("Dependency Manager, error in run function " + functionKey, err)
            }
        },
        _runFunctionInNewWay: function (functionParameters) {
            var self = this;
            var functionReference = functionParameters.functionReference;
            var functionKey = functionParameters.functionKey;
            var functionContext = functionParameters.functionContext;
            if (!functionReference || !functionKey) return;
            try {
                var promise = functionReference.call(functionContext);
                if (!promise) {
                    this._mapOfFinishedFunctionKeys[functionKey] = true;
                    this._checkDependentFunctions(functionKey);
                    return
                }
                var functionNotCompleteTimeout = setTimeout(function () {
                    Streak.BentoBox.logError("function timed out", functionKey)
                }, 60 * 1E3);
                promise.done(function () {
                    clearTimeout(functionNotCompleteTimeout);
                    self._mapOfFinishedFunctionKeys[functionKey] = true;
                    self._checkDependentFunctions(functionKey)
                })
            } catch (err) {
                console.error("Dependency Manager. Error in:", functionKey, functionParameters, err.stack);
                BB.logError("Dependency Manager, error in run function " +
                    functionKey, err);
                if (functionNotCompleteTimeout) clearTimeout(functionNotCompleteTimeout)
            }
        },
        _checkDependentFunctions: function (functionKey) {
            var dependentFunctionParametersQueue = this._mapOfFunctionKeysToFunctionQueues[functionKey];
            if (!dependentFunctionParametersQueue) return false;
            for (var ii = 0; ii < dependentFunctionParametersQueue.length; ii++) {
                var functionParameters = dependentFunctionParametersQueue[ii];
                if (this._shouldRunFunction(functionParameters)) this._runFunction(functionParameters)
            }
        },
        _queueFunctionParameters: function (functionParameters) {
            var dependentFunctionKeys =
                functionParameters.dependentFunctionKeys;
            if (!dependentFunctionKeys) return;
            for (var ii = 0; ii < dependentFunctionKeys.length; ii++) {
                var dependentFunctionKey = dependentFunctionKeys[ii];
                this._addFunctionParametersToRespectiveFunctionQueue(dependentFunctionKey, functionParameters)
            }
        },
        _addFunctionParametersToRespectiveFunctionQueue: function (dependentFunctionKey, functionParameters) {
            var functionParameterQueue = this._mapOfFunctionKeysToFunctionQueues[dependentFunctionKey];
            if (!functionParameterQueue) {
                functionParameterQueue = [];
                this._mapOfFunctionKeysToFunctionQueues[dependentFunctionKey] = functionParameterQueue
            }
            functionParameterQueue.push(functionParameters)
        }
    });
    Streak.DependencyManager = new DependencyManagerClass
})(Streak);
(function (window, Streak, undefined) {
    var rootjQuery, readyList, core_strundefined = typeof undefined,
        location = window.location,
        document = window.document,
        docElem = document.documentElement,
        _jQuery = window.jQuery,
        _$ = window.$,
        class2type = {}, core_deletedIds = [],
        core_version = "2.0.2",
        core_concat = core_deletedIds.concat,
        core_push = core_deletedIds.push,
        core_slice = core_deletedIds.slice,
        core_indexOf = core_deletedIds.indexOf,
        core_toString = class2type.toString,
        core_hasOwn = class2type.hasOwnProperty,
        core_trim = core_version.trim,
        jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context, rootjQuery)
        }, core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        core_rnotwhite = /\S+/g,
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
        rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,
        fcamelCase = function (all, letter) {
            return letter.toUpperCase()
        }, completed = function () {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
            jQuery.ready()
        };
    jQuery.fn = jQuery.prototype = {
        jquery: core_version,
        constructor: jQuery,
        init: function (selector, context, rootjQuery) {
            var match, elem;
            if (!selector) return this;
            else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this
            }
            if (typeof selector === "string") {
                if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) match = [null, selector, null];
                else match = rquickExpr.exec(selector); if (match && (match[1] || !context))
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] :
                            context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context))
                            for (match in context)
                                if (jQuery.isFunction(this[match])) this[match](context[match]);
                                else this.attr(match, context[match]);
                        return this
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem && elem.parentNode) {
                            this.length = 1;
                            this[0] = elem
                        }
                        this.context = document;
                        this.selector = selector;
                        return this
                    } else if (!context || context.jquery) return (context ||
                    rootjQuery).find(selector);
                else return this.constructor(context).find(selector)
            } else if (jQuery.isFunction(selector)) return rootjQuery.ready(selector);
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context
            }
            return jQuery.makeArray(selector, this)
        },
        selector: "",
        length: 0,
        toArray: function () {
            return core_slice.call(this)
        },
        get: function (num) {
            return num == null ? this.toArray() : num < 0 ? this[this.length + num] : this[num]
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(),
                elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret
        },
        each: function (callback, args) {
            return jQuery.each(this, callback, args)
        },
        ready: function (fn) {
            jQuery.ready.promise().done(fn);
            return this
        },
        slice: function () {
            return this.pushStack(core_slice.apply(this, arguments))
        },
        first: function () {
            return this.eq(0)
        },
        last: function () {
            return this.eq(-1)
        },
        eq: function (i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this,
                function (elem, i) {
                    return callback.call(elem, i, elem)
                }))
        },
        end: function () {
            return this.prevObject || this.constructor(null)
        },
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1,
            length = arguments.length,
            deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i = 2
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) target = {};
        if (length === i) {
            target =
                this;
            --i
        }
        for (; i < length; i++)
            if ((options = arguments[i]) != null)
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) continue;
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : []
                        } else clone = src && jQuery.isPlainObject(src) ? src : {};
                        target[name] = jQuery.extend(deep, clone, copy)
                    } else if (copy !== undefined) target[name] = copy
                }
            return target
    };
    jQuery.extend({
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g,
            ""),
        noConflict: function (deep) {
            if (window.$ === jQuery) window.$ = _$;
            if (deep && window.jQuery === jQuery) window.jQuery = _jQuery;
            return jQuery
        },
        isReady: false,
        readyWait: 1,
        holdReady: function (hold) {
            if (hold) jQuery.readyWait++;
            else jQuery.ready(true)
        },
        ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) return;
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) return;
            readyList.resolveWith(document, [jQuery]);
            if (jQuery.fn.trigger) jQuery(document).trigger("ready").off("ready")
        },
        isFunction: function (obj) {
            return jQuery.type(obj) ===
                "function"
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
            return obj != null && obj === obj.window
        },
        isNumeric: function (obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj)
        },
        type: function (obj) {
            if (obj == null) return String(obj);
            return typeof obj === "object" || typeof obj === "function" ? class2type[core_toString.call(obj)] || "object" : typeof obj
        },
        isPlainObject: function (obj) {
            if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) return false;
            try {
                if (obj.constructor && !core_hasOwn.call(obj.constructor.prototype,
                    "isPrototypeOf")) return false
            } catch (e) {
                return false
            }
            return true
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) return false;
            return true
        },
        error: function (msg) {
            throw new Error(msg);
        },
        parseHTML: function (data, context, keepScripts) {
            if (!data || typeof data !== "string") return null;
            if (typeof context === "boolean") {
                keepScripts = context;
                context = false
            }
            context = context || document;
            var parsed = rsingleTag.exec(data),
                scripts = !keepScripts && [];
            if (parsed) return [context.createElement(parsed[1])];
            parsed = jQuery.buildFragment([data],
                context, scripts);
            if (scripts) jQuery(scripts).remove();
            return jQuery.merge([], parsed.childNodes)
        },
        parseJSON: JSON.parse,
        parseXML: function (data) {
            var xml, tmp;
            if (!data || typeof data !== "string") return null;
            try {
                tmp = new DOMParser;
                xml = tmp.parseFromString(data, "text/xml")
            } catch (e) {
                xml = undefined
            }
            if (!xml || xml.getElementsByTagName("parsererror").length) jQuery.error("Invalid XML: " + data);
            return xml
        },
        noop: function () {},
        globalEval: function (code) {
            var script, indirect = eval;
            code = jQuery.trim(code);
            if (code)
                if (code.indexOf("use strict") ===
                    1) {
                    script = document.createElement("script");
                    script.text = code;
                    document.head.appendChild(script).parentNode.removeChild(script)
                } else indirect(code)
        },
        camelCase: function (string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase)
        },
        nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
        },
        each: function (obj, callback, args) {
            var value, i = 0,
                length = obj.length,
                isArray = isArraylike(obj);
            if (args)
                if (isArray)
                    for (; i < length; i++) {
                        value = callback.apply(obj[i],
                            args);
                        if (value === false) break
                    } else
                        for (i in obj) {
                            value = callback.apply(obj[i], args);
                            if (value === false) break
                        } else if (isArray)
                            for (; i < length; i++) {
                                value = callback.call(obj[i], i, obj[i]);
                                if (value === false) break
                            } else
                                for (i in obj) {
                                    value = callback.call(obj[i], i, obj[i]);
                                    if (value === false) break
                                }
                        return obj
        },
        trim: function (text) {
            return text == null ? "" : core_trim.call(text)
        },
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null)
                if (isArraylike(Object(arr))) jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                else core_push.call(ret,
                    arr);
            return ret
        },
        inArray: function (elem, arr, i) {
            return arr == null ? -1 : core_indexOf.call(arr, elem, i)
        },
        merge: function (first, second) {
            var l = second.length,
                i = first.length,
                j = 0;
            if (typeof l === "number")
                for (; j < l; j++) first[i++] = second[j];
            else
                while (second[j] !== undefined) first[i++] = second[j++];
            first.length = i;
            return first
        },
        grep: function (elems, callback, inv) {
            var retVal, ret = [],
                i = 0,
                length = elems.length;
            inv = !! inv;
            for (; i < length; i++) {
                retVal = !! callback(elems[i], i);
                if (inv !== retVal) ret.push(elems[i])
            }
            return ret
        },
        map: function (elems,
            callback, arg) {
            var value, i = 0,
                length = elems.length,
                isArray = isArraylike(elems),
                ret = [];
            if (isArray)
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) ret[ret.length] = value
                } else
                    for (i in elems) {
                        value = callback(elems[i], i, arg);
                        if (value != null) ret[ret.length] = value
                    }
            return core_concat.apply([], ret)
        },
        guid: 1,
        proxy: function (fn, context) {
            var tmp, args, proxy;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp
            }
            if (!jQuery.isFunction(fn)) return undefined;
            args = core_slice.call(arguments, 2);
            proxy =
                function () {
                    return fn.apply(context || this, args.concat(core_slice.call(arguments)))
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy
        },
        access: function (elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0,
                length = elems.length,
                bulk = key == null;
            if (jQuery.type(key) === "object") {
                chainable = true;
                for (i in key) jQuery.access(elems, fn, i, key[i], true, emptyGet, raw)
            } else if (value !== undefined) {
                chainable = true;
                if (!jQuery.isFunction(value)) raw = true;
                if (bulk)
                    if (raw) {
                        fn.call(elems, value);
                        fn = null
                    } else {
                        bulk = fn;
                        fn = function (elem,
                            key, value) {
                            return bulk.call(jQuery(elem), value)
                        }
                    }
                if (fn)
                    for (; i < length; i++) fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
            }
            return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet
        },
        now: Date.now,
        swap: function (elem, options, callback, args) {
            var ret, name, old = {};
            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name]
            }
            ret = callback.apply(elem, args || []);
            for (name in options) elem.style[name] = old[name];
            return ret
        }
    });
    jQuery.ready.promise = function (obj) {
        if (!readyList) {
            readyList =
                jQuery.Deferred();
            if (document.readyState === "complete") setTimeout(jQuery.ready);
            else {
                document.addEventListener("DOMContentLoaded", completed, false);
                window.addEventListener("load", completed, false)
            }
        }
        return readyList.promise(obj)
    };
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase()
    });

    function isArraylike(obj) {
        var length = obj.length,
            type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) return false;
        if (obj.nodeType ===
            1 && length) return true;
        return type === "array" || type !== "function" && (length === 0 || typeof length === "number" && length > 0 && length - 1 in obj)
    }
    rootjQuery = jQuery(document);
    (function (window, undefined) {
        var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + -new Date,
            preferredDoc = window.document,
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),
            hasDuplicate = false,
            sortOrder = function () {
                return 0
            }, strundefined = typeof undefined,
            MAX_NEGATIVE = 1 << 31,
            hasOwn = {}.hasOwnProperty,
            arr = [],
            pop = arr.pop,
            push_native = arr.push,
            push = arr.push,
            slice = arr.slice,
            indexOf = arr.indexOf || function (elem) {
                var i = 0,
                    len = this.length;
                for (; i < len; i++)
                    if (this[i] === elem) return i;
                return -1
            }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            whitespace = "[\\x20\\t\\r\\n\\f]",
            characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
            identifier = characterEncoding.replace("w", "w#"),
            attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
            pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)",
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators =
                new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
            rsibling = new RegExp(whitespace + "*[+~]"),
            rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),
            matchExpr = {
                "ID": new RegExp("^#(" + characterEncoding + ")"),
                "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
                "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                "ATTR": new RegExp("^" + attributes),
                "PSEUDO": new RegExp("^" + pseudos),
                "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
                    whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            }, rnative = /^[^{]+\{\s*\[native \w/,
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,
            rescape = /'|\\/g,
            runescape = new RegExp("\\\\([\\da-f]{1,6}" +
                whitespace + "?|(" + whitespace + ")|.)", "ig"),
            funescape = function (_, escaped, escapedWhitespace) {
                var high = "0x" + escaped - 65536;
                return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
            };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType
        } catch (e) {
            push = {
                apply: arr.length ? function (target, els) {
                    push_native.apply(target, slice.call(els))
                } : function (target, els) {
                    var j =
                        target.length,
                        i = 0;
                    while (target[j++] = els[i++]);
                    target.length = j - 1
                }
            }
        }

        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) setDocument(context);
            context = context || document;
            results = results || [];
            if (!selector || typeof selector !== "string") return results;
            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) return [];
            if (documentIsHTML && !seed) {
                if (match = rquickExpr.exec(selector))
                    if (m = match[1])
                        if (nodeType ===
                            9) {
                            elem = context.getElementById(m);
                            if (elem && elem.parentNode) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results
                                }
                            } else return results
                        } else {
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results
                            }
                        } else if (match[2]) {
                    push.apply(results, context.getElementsByTagName(selector));
                    return results
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                    push.apply(results, context.getElementsByClassName(m));
                    return results
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) nid = old.replace(rescape, "\\$&");
                        else context.setAttribute("id", nid);
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) groups[i] = nid + toSelector(groups[i]);
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",")
                    }
                    if (newSelector) try {
                        push.apply(results,
                            newContext.querySelectorAll(newSelector));
                        return results
                    } catch (qsaError) {} finally {
                        if (!old) context.removeAttribute("id")
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed)
        }

        function isNative(fn) {
            return rnative.test(fn + "")
        }

        function createCache() {
            var keys = [];

            function cache(key, value) {
                if (keys.push(key += " ") > Expr.cacheLength) delete cache[keys.shift()];
                return cache[key] = value
            }
            return cache
        }

        function markFunction(fn) {
            fn[expando] = true;
            return fn
        }

        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div)
            } catch (e) {
                return false
            } finally {
                if (div.parentNode) div.parentNode.removeChild(div);
                div = null
            }
        }

        function addHandle(attrs, handler, test) {
            attrs = attrs.split("|");
            var current, i = attrs.length,
                setHandle = test ? null : handler;
            while (i--)
                if (!(current = Expr.attrHandle[attrs[i]]) || current === handler) Expr.attrHandle[attrs[i]] = setHandle
        }

        function boolHandler(elem, name) {
            var val = elem.getAttributeNode(name);
            return val && val.specified ? val.value : elem[name] === true ? name.toLowerCase() : null
        }

        function interpolationHandler(elem,
            name) {
            return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2)
        }

        function valueHandler(elem) {
            if (elem.nodeName.toLowerCase() === "input") return elem.defaultValue
        }

        function siblingCheck(a, b) {
            var cur = b && a,
                diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) return diff;
            if (cur)
                while (cur = cur.nextSibling)
                    if (cur === b) return -1;
            return a ? 1 : -1
        }

        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" &&
                    elem.type === type
            }
        }

        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type
            }
        }

        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument),
                        i = matchIndexes.length;
                    while (i--)
                        if (seed[j = matchIndexes[i]]) seed[j] = !(matches[j] = seed[j])
                })
            })
        }
        isXML = Sizzle.isXML = function (elem) {
            var documentElement =
                elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false
        };
        support = Sizzle.support = {};
        setDocument = Sizzle.setDocument = function (node) {
            var doc = node ? node.ownerDocument || node : preferredDoc,
                parent = doc.parentWindow;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) return document;
            document = doc;
            docElem = doc.documentElement;
            documentIsHTML = !isXML(doc);
            if (parent && parent.frameElement) parent.attachEvent("onbeforeunload", function () {
                setDocument()
            });
            support.attributes =
                assert(function (div) {
                    div.innerHTML = "<a href='#'></a>";
                    addHandle("type|href|height|width", interpolationHandler, div.firstChild.getAttribute("href") === "#");
                    addHandle(booleans, boolHandler, div.getAttribute("disabled") == null);
                    div.className = "i";
                    return !div.getAttribute("className")
                });
            support.input = assert(function (div) {
                div.innerHTML = "<input>";
                div.firstChild.setAttribute("value", "");
                return div.firstChild.getAttribute("value") === ""
            });
            addHandle("value", valueHandler, support.attributes && support.input);
            support.getElementsByTagName =
                assert(function (div) {
                    div.appendChild(doc.createComment(""));
                    return !div.getElementsByTagName("*").length
                });
            support.getElementsByClassName = assert(function (div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                div.firstChild.className = "i";
                return div.getElementsByClassName("i").length === 2
            });
            support.getById = assert(function (div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length
            });
            if (support.getById) {
                Expr.find["ID"] = function (id, context) {
                    if (typeof context.getElementById !==
                        strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [m] : []
                    }
                };
                Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute("id") === attrId
                    }
                }
            } else {
                delete Expr.find["ID"];
                Expr.filter["ID"] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId
                    }
                }
            }
            Expr.find["TAG"] = support.getElementsByTagName ?
                function (tag, context) {
                    if (typeof context.getElementsByTagName !== strundefined) return context.getElementsByTagName(tag)
            } : function (tag, context) {
                var elem, tmp = [],
                    i = 0,
                    results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while (elem = results[i++])
                        if (elem.nodeType === 1) tmp.push(elem);
                    return tmp
                }
                return results
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) return context.getElementsByClassName(className)
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = isNative(doc.querySelectorAll)) {
                assert(function (div) {
                    div.innerHTML = "<select><option selected=''></option></select>";
                    if (!div.querySelectorAll("[selected]").length) rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    if (!div.querySelectorAll(":checked").length) rbuggyQSA.push(":checked")
                });
                assert(function (div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("t", "");
                    if (div.querySelectorAll("[t^='']").length) rbuggyQSA.push("[*^$]=" +
                        whitespace + "*(?:''|\"\")");
                    if (!div.querySelectorAll(":enabled").length) rbuggyQSA.push(":enabled", ":disabled");
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:")
                })
            }
            if (support.matchesSelector = isNative(matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) assert(function (div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos)
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            contains = isNative(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                    bup = b && b.parentNode;
                return a === bup || !! (bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
            } : function (a, b) {
                if (b)
                    while (b = b.parentNode)
                        if (b === a) return true;
                return false
            };
            support.sortDetached = assert(function (div1) {
                return div1.compareDocumentPosition(doc.createElement("div")) &
                    1
            });
            sortOrder = docElem.compareDocumentPosition ? function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0
                }
                var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
                if (compare) {
                    if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                        if (a === doc || contains(preferredDoc, a)) return -1;
                        if (b === doc || contains(preferredDoc, b)) return 1;
                        return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0
                    }
                    return compare & 4 ? -1 : 1
                }
                return a.compareDocumentPosition ? -1 :
                    1
            } : function (a, b) {
                var cur, i = 0,
                    aup = a.parentNode,
                    bup = b.parentNode,
                    ap = [a],
                    bp = [b];
                if (a === b) {
                    hasDuplicate = true;
                    return 0
                } else if (!aup || !bup) return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                else if (aup === bup) return siblingCheck(a, b);
                cur = a;
                while (cur = cur.parentNode) ap.unshift(cur);
                cur = b;
                while (cur = cur.parentNode) bp.unshift(cur);
                while (ap[i] === bp[i]) i++;
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
            };
            return doc
        };
        Sizzle.matches =
            function (expr, elements) {
                return Sizzle(expr, null, null, elements)
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) return ret
            } catch (e) {}
            return Sizzle(expr, document, null, [elem]).length > 0
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) setDocument(context);
            return contains(context, elem)
        };
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()],
                val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val === undefined ? support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) &&
                val.specified ? val.value : null : val
        };
        Sizzle.error = function (msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [],
                j = 0,
                i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++])
                    if (elem === results[i]) j = duplicates.push(i);
                while (j--) results.splice(duplicates[j], 1)
            }
            return results
        };
        getText = Sizzle.getText = function (elem) {
            var node, ret = "",
                i =
                    0,
                nodeType = elem.nodeType;
            if (!nodeType)
                for (; node = elem[i]; i++) ret += getText(node);
            else if (nodeType === 1 || nodeType === 9 || nodeType === 11)
                if (typeof elem.textContent === "string") return elem.textContent;
                else
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) ret += getText(elem);
                else if (nodeType === 3 || nodeType === 4) return elem.nodeValue;
            return ret
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                "ATTR": function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") match[3] = " " + match[3] + " ";
                    return match.slice(0, 4)
                },
                "CHILD": function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) Sizzle.error(match[0]);
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] +
                            match[8] || match[3] === "odd")
                    } else if (match[3]) Sizzle.error(match[0]);
                    return match
                },
                "PSEUDO": function (match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) return null;
                    if (match[3] && match[4] !== undefined) match[2] = match[4];
                    else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess)
                    }
                    return match.slice(0, 3)
                }
            },
            filter: {
                "TAG": function (nodeNameSelector) {
                    var nodeName =
                        nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function () {
                        return true
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                    }
                },
                "CLASS": function (className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") ||
                            "")
                    })
                },
                "ATTR": function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) return operator === "!=";
                        if (!operator) return true;
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length +
                            1) === check + "-" : false
                    }
                },
                "CHILD": function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                        forward = type.slice(-4) !== "last",
                        ofType = what === "of-type";
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode
                    } : function (elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir])
                                        if (ofType ?
                                            node.nodeName.toLowerCase() === name : node.nodeType === 1) return false;
                                    start = dir = type === "only" && !start && "nextSibling"
                                }
                                return true
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())
                                    if (node.nodeType === 1 && ++diff && node ===
                                        elem) {
                                        outerCache[type] = [dirruns, nodeIndex, diff];
                                        break
                                    }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) diff = cache[1];
                            else
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        if (useCache)(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
                                        if (node === elem) break
                                    } diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0
                        }
                    }
                },
                "PSEUDO": function (pseudo, argument) {
                    var args,
                        fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) return fn(argument);
                    if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                            var idx, matched = fn(seed, argument),
                                i = matched.length;
                            while (i--) {
                                idx = indexOf.call(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i])
                            }
                        }) : function (elem) {
                            return fn(elem, 0, args)
                        }
                    }
                    return fn
                }
            },
            pseudos: {
                "not": markFunction(function (selector) {
                    var input = [],
                        results = [],
                        matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []),
                            i = seed.length;
                        while (i--)
                            if (elem = unmatched[i]) seed[i] = !(matches[i] = elem)
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop()
                    }
                }),
                "has": markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0
                    }
                }),
                "contains": markFunction(function (text) {
                    return function (elem) {
                        return (elem.textContent ||
                            elem.innerText || getText(elem)).indexOf(text) > -1
                    }
                }),
                "lang": markFunction(function (lang) {
                    if (!ridentifier.test(lang || "")) Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0
                            } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false
                    }
                }),
                "target": function (elem) {
                    var hash =
                        window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id
                },
                "root": function (elem) {
                    return elem === docElem
                },
                "focus": function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !! (elem.type || elem.href || ~elem.tabIndex)
                },
                "enabled": function (elem) {
                    return elem.disabled === false
                },
                "disabled": function (elem) {
                    return elem.disabled === true
                },
                "checked": function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !! elem.checked || nodeName === "option" && !! elem.selected
                },
                "selected": function (elem) {
                    if (elem.parentNode) elem.parentNode.selectedIndex;
                    return elem.selected === true
                },
                "empty": function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling)
                        if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) return false;
                    return true
                },
                "parent": function (elem) {
                    return !Expr.pseudos["empty"](elem)
                },
                "header": function (elem) {
                    return rheader.test(elem.nodeName)
                },
                "input": function (elem) {
                    return rinputs.test(elem.nodeName)
                },
                "button": function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button"
                },
                "text": function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type)
                },
                "first": createPositionalPseudo(function () {
                    return [0]
                }),
                "last": createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1]
                }),
                "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument]
                }),
                "even": createPositionalPseudo(function (matchIndexes,
                    length) {
                    var i = 0;
                    for (; i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes
                }),
                "odd": createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes
                }),
                "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) matchIndexes.push(i);
                    return matchIndexes
                }),
                "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) matchIndexes.push(i);
                    return matchIndexes
                })
            }
        };
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) Expr.pseudos[i] = createInputPseudo(i);
        for (i in {
            submit: true,
            reset: true
        }) Expr.pseudos[i] = createButtonPseudo(i);

        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) soFar = soFar.slice(match[0].length) ||
                        soFar;
                    groups.push(tokens = [])
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length)
                }
                for (type in Expr.filter)
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length)
                    }
                if (!matched) break
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector,
                groups).slice(0)
        }

        function toSelector(tokens) {
            var i = 0,
                len = tokens.length,
                selector = "";
            for (; i < len; i++) selector += tokens[i].value;
            return selector
        }

        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir,
                checkNonElements = base && dir === "parentNode",
                doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while (elem = elem[dir])
                    if (elem.nodeType === 1 || checkNonElements) return matcher(elem, context, xml)
            } : function (elem, context, xml) {
                var data, cache, outerCache, dirkey = dirruns + " " + doneName;
                if (xml)
                    while (elem =
                        elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements)
                            if (matcher(elem, context, xml)) return true
                    } else
                        while (elem = elem[dir])
                            if (elem.nodeType === 1 || checkNonElements) {
                                outerCache = elem[expando] || (elem[expando] = {});
                                if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                    if ((data = cache[1]) === true || data === cachedruns) return data === true
                                } else {
                                    cache = outerCache[dir] = [dirkey];
                                    cache[1] = matcher(elem, context, xml) || cachedruns;
                                    if (cache[1] === true) return true
                                }
                            }
            }
        }

        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem,
                context, xml) {
                var i = matchers.length;
                while (i--)
                    if (!matchers[i](elem, context, xml)) return false;
                return true
            } : matchers[0]
        }

        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [],
                i = 0,
                len = unmatched.length,
                mapped = map != null;
            for (; i < len; i++)
                if (elem = unmatched[i])
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) map.push(i)
                    }
            return newUnmatched
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) postFilter =
                setMatcher(postFilter);
            if (postFinder && !postFinder[expando]) postFinder = setMatcher(postFinder, postSelector);
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [],
                    postMap = [],
                    preexisting = results.length,
                    elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                    matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                    matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) matcher(matcherIn,
                    matcherOut, context, xml);
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--)
                        if (elem = temp[i]) matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--)
                                if (elem = matcherOut[i]) temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml)
                        }
                        i = matcherOut.length;
                        while (i--)
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) seed[temp] = !(results[temp] =
                                elem)
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) postFinder(null, results, matcherOut, xml);
                    else push.apply(results, matcherOut)
                }
            })
        }

        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length,
                leadingRelative = Expr.relative[tokens[0].type],
                implicitRelative = leadingRelative || Expr.relative[" "],
                i = leadingRelative ? 1 : 0,
                matchContext = addCombinator(function (elem) {
                    return elem === checkContext
                }, implicitRelative, true),
                matchAnyContext = addCombinator(function (elem) {
                    return indexOf.call(checkContext, elem) > -1
                }, implicitRelative, true),
                matchers = [
                    function (elem, context, xml) {
                        return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml))
                    }
                ];
            for (; i < len; i++)
                if (matcher = Expr.relative[tokens[i].type]) matchers = [addCombinator(elementMatcher(matchers), matcher)];
                else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j =
                        ++i;
                        for (; j < len; j++)
                            if (Expr.relative[tokens[j].type]) break;
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
                    }
                    matchers.push(matcher)
                }
            return elementMatcher(matchers)
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var matcherCachedRuns = 0,
                bySet = setMatchers.length >
                    0,
                byElement = elementMatchers.length > 0,
                superMatcher = function (seed, context, xml, results, expandContext) {
                    var elem, j, matcher, setMatched = [],
                        matchedCount = 0,
                        i = "0",
                        unmatched = seed && [],
                        outermost = expandContext != null,
                        contextBackup = outermostContext,
                        elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context),
                        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1;
                    if (outermost) {
                        outermostContext = context !== document && context;
                        cachedruns = matcherCachedRuns
                    }
                    for (;
                        (elem = elems[i]) != null; i++) {
                        if (byElement &&
                            elem) {
                            j = 0;
                            while (matcher = elementMatchers[j++])
                                if (matcher(elem, context, xml)) {
                                    results.push(elem);
                                    break
                                }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                cachedruns = ++matcherCachedRuns
                            }
                        }
                        if (bySet) {
                            if (elem = !matcher && elem) matchedCount--;
                            if (seed) unmatched.push(elem)
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while (matcher = setMatchers[j++]) matcher(unmatched, setMatched, context, xml);
                        if (seed) {
                            if (matchedCount > 0)
                                while (i--)
                                    if (!(unmatched[i] || setMatched[i])) setMatched[i] = pop.call(results);
                            setMatched = condense(setMatched)
                        }
                        push.apply(results,
                            setMatched);
                        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) Sizzle.uniqueSort(results)
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup
                    }
                    return unmatched
                };
            return bySet ? markFunction(superMatcher) : superMatcher
        }
        compile = Sizzle.compile = function (selector, group) {
            var i, setMatchers = [],
                elementMatchers = [],
                cached = compilerCache[selector + " "];
            if (!cached) {
                if (!group) group = tokenize(selector);
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) setMatchers.push(cached);
                    else elementMatchers.push(cached)
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers))
            }
            return cached
        };

        function multipleContexts(selector, contexts, results) {
            var i = 0,
                len = contexts.length;
            for (; i < len; i++) Sizzle(selector, contexts[i], results);
            return results
        }

        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed)
                if (match.length === 1) {
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById &&
                        context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) return results;
                        selector = selector.slice(tokens.shift().value.length)
                    }
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];
                        if (Expr.relative[type = token.type]) break;
                        if (find = Expr.find[type])
                            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {
                                tokens.splice(i,
                                    1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results
                                }
                                break
                            }
                    }
                }
            compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
            return results
        }
        Expr.pseudos["nth"] = Expr.pseudos["eq"];

        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters;
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        setDocument();
        [0, 0].sort(sortOrder);
        support.detectDuplicates = hasDuplicate;
        jQuery.find =
            Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains
    })(window);
    var optionsCache = {};

    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {
            object[flag] = true
        });
        return object
    }
    jQuery.Callbacks = function (options) {
        options = typeof options === "string" ? optionsCache[options] || createOptions(options) :
            jQuery.extend({}, options);
        var memory, fired, firing, firingStart, firingLength, firingIndex, list = [],
            stack = !options.once && [],
            fire = function (data) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for (; list && firingIndex < firingLength; firingIndex++)
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false;
                        break
                    }
                firing = false;
                if (list)
                    if (stack) {
                        if (stack.length) fire(stack.shift())
                    } else if (memory) list = [];
                else self.disable()
            },
            self = {
                add: function () {
                    if (list) {
                        var start = list.length;
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                var type = jQuery.type(arg);
                                if (type === "function") {
                                    if (!options.unique || !self.has(arg)) list.push(arg)
                                } else if (arg && arg.length && type !== "string") add(arg)
                            })
                        })(arguments);
                        if (firing) firingLength = list.length;
                        else if (memory) {
                            firingStart = start;
                            fire(memory)
                        }
                    }
                    return this
                },
                remove: function () {
                    if (list) jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index,
                                1);
                            if (firing) {
                                if (index <= firingLength) firingLength--;
                                if (index <= firingIndex) firingIndex--
                            }
                        }
                    });
                    return this
                },
                has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : !! (list && list.length)
                },
                empty: function () {
                    list = [];
                    firingLength = 0;
                    return this
                },
                disable: function () {
                    list = stack = memory = undefined;
                    return this
                },
                disabled: function () {
                    return !list
                },
                lock: function () {
                    stack = undefined;
                    if (!memory) self.disable();
                    return this
                },
                locked: function () {
                    return !stack
                },
                fireWith: function (context, args) {
                    args = args || [];
                    args = [context, args.slice ?
                        args.slice() : args
                    ];
                    if (list && (!fired || stack))
                        if (firing) stack.push(args);
                        else fire(args);
                    return this
                },
                fire: function () {
                    self.fireWith(this, arguments);
                    return this
                },
                fired: function () {
                    return !!fired
                }
            };
        return self
    };
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                ["notify", "progress", jQuery.Callbacks("memory")]
            ],
                state = "pending",
                promise = {
                    state: function () {
                        return state
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this
                    },
                    then: function () {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var action = tuple[0],
                                    fn = jQuery.isFunction(fns[i]) && fns[i];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                    else newDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments)
                                })
                            });
                            fns = null
                        }).promise()
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise
                    }
                }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2],
                    stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) list.add(function () {
                    state = stateString
                }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this
                };
                deferred[tuple[0] + "With"] = list.fireWith
            });
            promise.promise(deferred);
            if (func) func.call(deferred,
                deferred);
            return deferred
        },
        when: function (subordinate) {
            var i = 0,
                resolveValues = core_slice.call(arguments),
                length = resolveValues.length,
                remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
                updateFunc = function (i, contexts, values) {
                    return function (value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                        if (values === progressValues) deferred.notifyWith(contexts, values);
                        else if (!--remaining) deferred.resolveWith(contexts,
                            values)
                    }
                }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++)
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    else --remaining
            }
            if (!remaining) deferred.resolveWith(resolveContexts, resolveValues);
            return deferred.promise()
        }
    });
    jQuery.support = function (support) {
        var input = document.createElement("input"),
            fragment = document.createDocumentFragment(),
            div = document.createElement("div"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
        if (!input.type) return support;
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
        support.pixelPosition = false;
        input.checked = true;
        support.noCloneChecked =
            input.cloneNode(true).checked;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
        input.setAttribute("checked", "t");
        input.setAttribute("name", "t");
        fragment.appendChild(input);
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        support.focusinBubbles = "onfocusin" in window;
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle =
            div.style.backgroundClip === "content-box";
        jQuery(function () {
            var container, marginDiv, divReset = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",
                body = document.getElementsByTagName("body")[0];
            if (!body) return;
            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
            body.appendChild(container).appendChild(div);
            div.innerHTML = "";
            div.style.cssText =
                "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%";
            jQuery.swap(body, body.style.zoom != null ? {
                zoom: 1
            } : {}, function () {
                support.boxSizing = div.offsetWidth === 4
            });
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                support.boxSizingReliable = (window.getComputedStyle(div, null) || {
                    width: "4px"
                }).width === "4px";
                marginDiv = div.appendChild(document.createElement("div"));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight)
            }
            body.removeChild(container)
        });
        return support
    }({});
    var data_user, data_priv, rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        rmultiDash = /([A-Z])/g;

    function Data() {
        Object.defineProperty(this.cache = {}, 0, {
            get: function () {
                return {}
            }
        });
        this.expando = jQuery.expando + Math.random()
    }
    Data.uid = 1;
    Data.accepts =
        function (owner) {
            return owner.nodeType ? owner.nodeType === 1 || owner.nodeType === 9 : true
    };
    Data.prototype = {
        key: function (owner) {
            if (!Data.accepts(owner)) return 0;
            var descriptor = {}, unlock = owner[this.expando];
            if (!unlock) {
                unlock = Data.uid++;
                try {
                    descriptor[this.expando] = {
                        value: unlock
                    };
                    Object.defineProperties(owner, descriptor)
                } catch (e) {
                    descriptor[this.expando] = unlock;
                    jQuery.extend(owner, descriptor)
                }
            }
            if (!this.cache[unlock]) this.cache[unlock] = {};
            return unlock
        },
        set: function (owner, data, value) {
            var prop, unlock = this.key(owner),
                cache = this.cache[unlock];
            if (typeof data === "string") cache[data] = value;
            else if (jQuery.isEmptyObject(cache)) jQuery.extend(this.cache[unlock], data);
            else
                for (prop in data) cache[prop] = data[prop];
            return cache
        },
        get: function (owner, key) {
            var cache = this.cache[this.key(owner)];
            return key === undefined ? cache : cache[key]
        },
        access: function (owner, key, value) {
            if (key === undefined || key && typeof key === "string" && value === undefined) return this.get(owner, key);
            this.set(owner, key, value);
            return value !== undefined ? value : key
        },
        remove: function (owner,
            key) {
            var i, name, camel, unlock = this.key(owner),
                cache = this.cache[unlock];
            if (key === undefined) this.cache[unlock] = {};
            else {
                if (jQuery.isArray(key)) name = key.concat(key.map(jQuery.camelCase));
                else {
                    camel = jQuery.camelCase(key);
                    if (key in cache) name = [key, camel];
                    else {
                        name = camel;
                        name = name in cache ? [name] : name.match(core_rnotwhite) || []
                    }
                }
                i = name.length;
                while (i--) delete cache[name[i]]
            }
        },
        hasData: function (owner) {
            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {})
        },
        discard: function (owner) {
            if (owner[this.expando]) delete this.cache[owner[this.expando]]
        }
    };
    data_user = new Data;
    data_priv = new Data;
    jQuery.extend({
        acceptData: Data.accepts,
        hasData: function (elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem)
        },
        data: function (elem, name, data) {
            return data_user.access(elem, name, data)
        },
        removeData: function (elem, name) {
            data_user.remove(elem, name)
        },
        _data: function (elem, name, data) {
            return data_priv.access(elem, name, data)
        },
        _removeData: function (elem, name) {
            data_priv.remove(elem, name)
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var attrs, name, elem = this[0],
                i = 0,
                data =
                    null;
            if (key === undefined) {
                if (this.length) {
                    data = data_user.get(elem);
                    if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                        attrs = elem.attributes;
                        for (; i < attrs.length; i++) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name])
                            }
                        }
                        data_priv.set(elem, "hasDataAttrs", true)
                    }
                }
                return data
            }
            if (typeof key === "object") return this.each(function () {
                data_user.set(this, key)
            });
            return jQuery.access(this, function (value) {
                var data, camelKey = jQuery.camelCase(key);
                if (elem && value === undefined) {
                    data = data_user.get(elem, key);
                    if (data !== undefined) return data;
                    data = data_user.get(elem, camelKey);
                    if (data !== undefined) return data;
                    data = dataAttr(elem, camelKey, undefined);
                    if (data !== undefined) return data;
                    return
                }
                this.each(function () {
                    var data = data_user.get(this, camelKey);
                    data_user.set(this, camelKey, value);
                    if (key.indexOf("-") !== -1 && data !== undefined) data_user.set(this, key, value)
                })
            }, null, value, arguments.length > 1, null, true)
        },
        removeData: function (key) {
            return this.each(function () {
                data_user.remove(this,
                    key)
            })
        }
    });

    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? JSON.parse(data) : data
                } catch (e) {}
                data_user.set(elem, key, data)
            } else data = undefined
        }
        return data
    }
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue =
                    data_priv.get(elem, type);
                if (data)
                    if (!queue || jQuery.isArray(data)) queue = data_priv.access(elem, type, jQuery.makeArray(data));
                    else queue.push(data);
                return queue || []
            }
        },
        dequeue: function (elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function () {
                    jQuery.dequeue(elem, type)
                };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--
            }
            if (fn) {
                if (type === "fx") queue.unshift("inprogress");
                delete hooks.stop;
                fn.call(elem, next,
                    hooks)
            }
            if (!startLength && hooks) hooks.empty.fire()
        },
        _queueHooks: function (elem, type) {
            var key = type + "queueHooks";
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function () {
                    data_priv.remove(elem, [type + "queue", key])
                })
            })
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--
            }
            if (arguments.length < setter) return jQuery.queue(this[0], type);
            return data === undefined ? this : this.each(function () {
                var queue =
                    jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") jQuery.dequeue(this, type)
            })
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type)
            })
        },
        delay: function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function (next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function () {
                    clearTimeout(timeout)
                }
            })
        },
        clearQueue: function (type) {
            return this.queue(type || "fx", [])
        },
        promise: function (type,
            obj) {
            var tmp, count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function () {
                    if (!--count) defer.resolveWith(elements, [elements])
                };
            if (typeof type !== "string") {
                obj = type;
                type = undefined
            }
            type = type || "fx";
            while (i--) {
                tmp = data_priv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve)
                }
            }
            resolve();
            return defer.promise(obj)
        }
    });
    var nodeHook, boolHook, rclass = /[\t\r\n\f]/g,
        rreturn = /\r/g,
        rfocusable = /^(?:input|select|textarea|button)$/i;
    jQuery.fn.extend({
        attr: function (name,
            value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1)
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name)
            })
        },
        prop: function (name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1)
        },
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name]
            })
        },
        addClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0,
                len = this.length,
                proceed = typeof value === "string" && value;
            if (jQuery.isFunction(value)) return this.each(function (j) {
                jQuery(this).addClass(value.call(this,
                    j, this.className))
            });
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++])
                            if (cur.indexOf(" " + clazz + " ") < 0) cur += clazz + " ";
                        elem.className = jQuery.trim(cur)
                    }
                }
            }
            return this
        },
        removeClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0,
                len = this.length,
                proceed = arguments.length === 0 || typeof value === "string" && value;
            if (jQuery.isFunction(value)) return this.each(function (j) {
                jQuery(this).removeClass(value.call(this,
                    j, this.className))
            });
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++])
                            while (cur.indexOf(" " + clazz + " ") >= 0) cur = cur.replace(" " + clazz + " ", " ");
                        elem.className = value ? jQuery.trim(cur) : ""
                    }
                }
            }
            return this
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value,
                isBool = typeof stateVal === "boolean";
            if (jQuery.isFunction(value)) return this.each(function (i) {
                jQuery(this).toggleClass(value.call(this,
                    i, this.className, stateVal), stateVal)
            });
            return this.each(function () {
                if (type === "string") {
                    var className, i = 0,
                        self = jQuery(this),
                        state = stateVal,
                        classNames = value.match(core_rnotwhite) || [];
                    while (className = classNames[i++]) {
                        state = isBool ? state : !self.hasClass(className);
                        self[state ? "addClass" : "removeClass"](className)
                    }
                } else if (type === core_strundefined || type === "boolean") {
                    if (this.className) data_priv.set(this, "__className__", this.className);
                    this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") ||
                        ""
                }
            })
        },
        hasClass: function (selector) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for (; i < l; i++)
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) return true;
            return false
        },
        val: function (value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) return ret;
                    ret = elem.value;
                    return typeof ret === "string" ?
                        ret.replace(rreturn, "") : ret == null ? "" : ret
                }
                return
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) return;
                if (isFunction) val = value.call(this, i, jQuery(this).val());
                else val = value; if (val == null) val = "";
                else if (typeof val === "number") val += "";
                else if (jQuery.isArray(val)) val = jQuery.map(val, function (value) {
                    return value == null ? "" : value + ""
                });
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val,
                    "value") === undefined) this.value = val
            })
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text
                }
            },
            select: {
                get: function (elem) {
                    var value, option, options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ? max : one ? index : 0;
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") ===
                            null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) return value;
                            values.push(value)
                        }
                    }
                    return values
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options,
                        values = jQuery.makeArray(value),
                        i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0) optionSet = true
                    }
                    if (!optionSet) elem.selectedIndex = -1;
                    return values
                }
            }
        },
        attr: function (elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) return;
            if (typeof elem.getAttribute === core_strundefined) return jQuery.prop(elem, name, value);
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)
            }
            if (value !== undefined)
                if (value === null) jQuery.removeAttr(elem, name);
                else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret;
            else {
                elem.setAttribute(name, value + "");
                return value
            } else if (hooks && "get" in
                hooks && (ret = hooks.get(elem, name)) !== null) return ret;
            else {
                ret = jQuery.find.attr(elem, name);
                return ret == null ? undefined : ret
            }
        },
        removeAttr: function (elem, value) {
            var name, propName, i = 0,
                attrNames = value && value.match(core_rnotwhite);
            if (attrNames && elem.nodeType === 1)
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) elem[propName] = false;
                    elem.removeAttribute(name)
                }
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem,
                        "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) elem.value = val;
                        return value
                    }
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function (elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) return;
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name]
            }
            if (value !== undefined) return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
            else return hooks &&
                "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name]
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) jQuery.removeAttr(elem, name);
            else elem.setAttribute(name, name);
            return name
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
        jQuery.expr.attrHandle[name] =
            function (elem, name, isXML) {
                var fn = jQuery.expr.attrHandle[name],
                    ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;
                jQuery.expr.attrHandle[name] = fn;
                return ret
        }
    });
    if (!jQuery.support.optSelected) jQuery.propHooks.selected = {
        get: function (elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) parent.parentNode.selectedIndex;
            return null
        }
    };
    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap",
        "frameBorder", "contentEditable"
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this
    });
    jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (jQuery.isArray(value)) return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0
            }
        };
        if (!jQuery.support.checkOn) jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value
        }
    });
    var rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
        return true
    }

    function returnFalse() {
        return false
    }

    function safeActiveElement() {
        try {
            return document.activeElement
        } catch (err) {}
    }
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
            if (!elemData) return;
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector
            }
            if (!handler.guid) handler.guid =
                jQuery.guid++;
            if (!(events = elemData.events)) events = elemData.events = {};
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined
                };
                eventHandle.elem = elem
            }
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) continue;
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces,
                        eventHandle) === false)
                        if (elem.addEventListener) elem.addEventListener(type, eventHandle, false)
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) handleObj.handler.guid = handler.guid
                }
                if (selector) handlers.splice(handlers.delegateCount++, 0, handleObj);
                else handlers.push(handleObj);
                jQuery.event.global[type] = true
            }
            elem = null
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) &&
                    data_priv.get(elem);
            if (!elemData || !(events = elemData.events)) return;
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    continue
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") +
                    "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) handlers.delegateCount--;
                        if (special.remove) special.remove.call(elem, handleObj)
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) ===
                        false) jQuery.removeEvent(elem, type, elemData.handle);
                    delete events[type]
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                data_priv.remove(elem, "events")
            }
        },
        trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document],
                type = core_hasOwn.call(event, "type") ? event.type : event,
                namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) return;
            if (rfocusMorph.test(type +
                jQuery.event.triggered)) return;
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort()
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) event.target = elem;
            data = data == null ? [event] :
                jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) return;
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) cur = cur.parentNode;
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur
                }
                if (tmp === (elem.ownerDocument || document)) eventPath.push(tmp.defaultView || tmp.parentWindow || window)
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type =
                    i > 1 ? bubbleType : special.bindType || type;
                handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                if (handle) handle.apply(cur, data);
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) event.preventDefault()
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented())
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem))
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                        tmp =
                            elem[ontype];
                        if (tmp) elem[ontype] = null;
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;
                        if (tmp) elem[ontype] = tmp
                    }
            return event.result
        },
        dispatch: function (event) {
            event = jQuery.event.fix(event);
            var i, j, ret, matched, handleObj, handlerQueue = [],
                args = core_slice.call(arguments),
                handlers = (data_priv.get(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) return;
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped())
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined)
                            if ((event.result =
                                ret) === false) {
                                event.preventDefault();
                                event.stopPropagation()
                            }
                    }
            }
            if (special.postDispatch) special.postDispatch.call(this, event);
            return event.result
        },
        handlers: function (event, handlers) {
            var i, matches, sel, handleObj, handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click"))
                for (; cur !== this; cur = cur.parentNode || this)
                    if (cur.disabled !== true || event.type !== "click") {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel =
                                handleObj.selector + " ";
                            if (matches[sel] === undefined) matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                            if (matches[sel]) matches.push(handleObj)
                        }
                        if (matches.length) handlerQueue.push({
                            elem: cur,
                            handlers: matches
                        })
                    }
            if (delegateCount < handlers.length) handlerQueue.push({
                elem: this,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function (event, original) {
                if (event.which == null) event.which = original.charCode != null ? original.charCode : original.keyCode;
                return event
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function (event, original) {
                var eventDoc, doc, body, button = original.button;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
                }
                if (!event.which && button !== undefined) event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                return event
            }
        },
        fix: function (event) {
            if (event[jQuery.expando]) return event;
            var i, prop, copy, type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[type];
            if (!fixHook) this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop]
            }
            if (!event.target) event.target = document;
            if (event.target.nodeType === 3) event.target = event.target.parentNode;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function () {
                    if (this !==
                        safeActiveElement() && this.focus) {
                        this.focus();
                        return false
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function () {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function () {
                    if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                        this.click();
                        return false
                    }
                },
                _default: function (event) {
                    return jQuery.nodeName(event.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined) event.originalEvent.returnValue = event.result
                }
            }
        },
        simulate: function (type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event, event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) jQuery.event.trigger(e, null, elem);
            else jQuery.event.dispatch.call(elem, e); if (e.isDefaultPrevented()) event.preventDefault()
        }
    };
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) elem.removeEventListener(type, handle, false)
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        if (src && src.type) {
            this.originalEvent =
                src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse
        } else this.type = src; if (props) jQuery.extend(this, props);
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && e.preventDefault) e.preventDefault()
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && e.stopPropagation) e.stopPropagation()
        },
        stopImmediatePropagation: function () {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation()
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix
                }
                return ret
            }
        }
    });
    if (!jQuery.support.focusinBubbles) jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function (orig, fix) {
        var attaches = 0,
            handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true)
            };
        jQuery.event.special[fix] = {
            setup: function () {
                if (attaches++ === 0) document.addEventListener(orig, handler, true)
            },
            teardown: function () {
                if (--attaches === 0) document.removeEventListener(orig,
                    handler, true)
            }
        }
    });
    jQuery.fn.extend({
        on: function (types, selector, data, fn, one) {
            var origFn, type;
            if (typeof types === "object") {
                if (typeof selector !== "string") {
                    data = data || selector;
                    selector = undefined
                }
                for (type in types) this.on(type, selector, data, types[type], one);
                return this
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined
            } else if (fn == null)
                if (typeof selector === "string") {
                    fn = data;
                    data = undefined
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined
                }
            if (fn === false) fn = returnFalse;
            else if (!fn) return this;
            if (one ===
                1) {
                origFn = fn;
                fn = function (event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments)
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
            }
            return this.each(function () {
                jQuery.event.add(this, types, fn, data, selector)
            })
        },
        one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1)
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace :
                    handleObj.origType, handleObj.selector, handleObj.handler);
                return this
            }
            if (typeof types === "object") {
                for (type in types) this.off(type, selector, types[type]);
                return this
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined
            }
            if (fn === false) fn = returnFalse;
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector)
            })
        },
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this)
            })
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type,
                data, elem, true)
        }
    });
    var isSimple = /^.[^:#\[\.,]*$/,
        rparentsprev = /^(?:parents|prev(?:Until|All))/,
        rneedsContext = jQuery.expr.match.needsContext,
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret = [],
                self = this,
                len = self.length;
            if (typeof selector !== "string") return this.pushStack(jQuery(selector).filter(function () {
                for (i = 0; i < len; i++)
                    if (jQuery.contains(self[i], this)) return true
            }));
            for (i = 0; i < len; i++) jQuery.find(selector, self[i], ret);
            ret = this.pushStack(len >
                1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret
        },
        has: function (target) {
            var targets = jQuery(target, this),
                l = targets.length;
            return this.filter(function () {
                var i = 0;
                for (; i < l; i++)
                    if (jQuery.contains(this, targets[i])) return true
            })
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true))
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false))
        },
        is: function (selector) {
            return !!winnow(this, typeof selector === "string" &&
                rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
        },
        closest: function (selectors, context) {
            var cur, i = 0,
                l = this.length,
                matched = [],
                pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
            for (; i < l; i++)
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode)
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        cur = matched.push(cur);
                        break
                    }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) :
                matched)
        },
        index: function (elem) {
            if (!elem) return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            if (typeof elem === "string") return core_indexOf.call(jQuery(elem), this[0]);
            return core_indexOf.call(this, elem.jquery ? elem[0] : elem)
        },
        add: function (selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),
                all = jQuery.merge(this.get(), set);
            return this.pushStack(jQuery.unique(all))
        },
        addBack: function (selector) {
            return this.add(selector ==
                null ? this.prevObject : this.prevObject.filter(selector))
        }
    });

    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1);
        return cur
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null
        },
        parents: function (elem) {
            return jQuery.dir(elem, "parentNode")
        },
        parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, "parentNode", until)
        },
        next: function (elem) {
            return sibling(elem, "nextSibling")
        },
        prev: function (elem) {
            return sibling(elem, "previousSibling")
        },
        nextAll: function (elem) {
            return jQuery.dir(elem, "nextSibling")
        },
        prevAll: function (elem) {
            return jQuery.dir(elem, "previousSibling")
        },
        nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until)
        },
        prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until)
        },
        siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem)
        },
        children: function (elem) {
            return jQuery.sibling(elem.firstChild)
        },
        contents: function (elem) {
            return elem.contentDocument || jQuery.merge([],
                elem.childNodes)
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") selector = until;
            if (selector && typeof selector === "string") matched = jQuery.filter(selector, matched);
            if (this.length > 1) {
                if (!guaranteedUnique[name]) jQuery.unique(matched);
                if (rparentsprev.test(name)) matched.reverse()
            }
            return this.pushStack(matched)
        }
    });
    jQuery.extend({
        filter: function (expr, elems, not) {
            var elem = elems[0];
            if (not) expr = ":not(" + expr + ")";
            return elems.length ===
                1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
                    return elem.nodeType === 1
                }))
        },
        dir: function (elem, dir, until) {
            var matched = [],
                truncate = until !== undefined;
            while ((elem = elem[dir]) && elem.nodeType !== 9)
                if (elem.nodeType === 1) {
                    if (truncate && jQuery(elem).is(until)) break;
                    matched.push(elem)
                }
            return matched
        },
        sibling: function (n, elem) {
            var matched = [];
            for (; n; n = n.nextSibling)
                if (n.nodeType === 1 && n !== elem) matched.push(n);
            return matched
        }
    });

    function winnow(elements,
        qualifier, not) {
        if (jQuery.isFunction(qualifier)) return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not
        });
        if (qualifier.nodeType) return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not
        });
        if (typeof qualifier === "string") {
            if (isSimple.test(qualifier)) return jQuery.filter(qualifier, elements, not);
            qualifier = jQuery.filter(qualifier, elements)
        }
        return jQuery.grep(elements, function (elem) {
            return core_indexOf.call(qualifier, elem) >= 0 !== not
        })
    }
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /^$|\/(?:java|ecma)script/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
        wrapMap = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>",
                "</tr></tbody></table>"
            ],
            _default: [0, "", ""]
        };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.fn.extend({
        text: function (value) {
            return jQuery.access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value))
            }, null, value, arguments.length)
        },
        append: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 ||
                    this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem)
                }
            })
        },
        prepend: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild)
                }
            })
        },
        before: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this)
            })
        },
        after: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem,
                    this.nextSibling)
            })
        },
        remove: function (selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this,
                i = 0;
            for (;
                (elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) jQuery.cleanData(getAll(elem));
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) setGlobalEval(getAll(elem, "script"));
                    elem.parentNode.removeChild(elem)
                }
            }
            return this
        },
        empty: function () {
            var elem, i = 0;
            for (;
                (elem = this[i]) != null; i++)
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent =
                        ""
                }
            return this
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
            })
        },
        html: function (value) {
            return jQuery.access(this, function (value) {
                var elem = this[0] || {}, i = 0,
                    l = this.length;
                if (value === undefined && elem.nodeType === 1) return elem.innerHTML;
                if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value
                            }
                        }
                        elem = 0
                    } catch (e) {}
                }
                if (elem) this.empty().append(value)
            }, null, value, arguments.length)
        },
        replaceWith: function () {
            var args = jQuery.map(this, function (elem) {
                return [elem.nextSibling, elem.parentNode]
            }),
                i = 0;
            this.domManip(arguments, function (elem) {
                var next = args[i++],
                    parent = args[i++];
                if (parent) {
                    if (next && next.parentNode !== parent) next =
                        this.nextSibling;
                    jQuery(this).remove();
                    parent.insertBefore(elem, next)
                }
            }, true);
            return i ? this : this.remove()
        },
        detach: function (selector) {
            return this.remove(selector, true)
        },
        domManip: function (args, callback, allowIntersection) {
            args = core_concat.apply([], args);
            var fragment, first, scripts, hasScripts, node, doc, i = 0,
                l = this.length,
                set = this,
                iNoClone = l - 1,
                value = args[0],
                isFunction = jQuery.isFunction(value);
            if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) return this.each(function (index) {
                var self =
                    set.eq(index);
                if (isFunction) args[0] = value.call(this, index, self.html());
                self.domManip(args, callback, allowIntersection)
            });
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection && this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) fragment = first;
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (; i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) jQuery.merge(scripts, getAll(node,
                                "script"))
                        }
                        callback.call(this[i], node, i)
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node))
                                if (node.src) jQuery._evalUrl(node.src);
                                else jQuery.globalEval(node.textContent.replace(rcleanScript, ""))
                        }
                    }
                }
            }
            return this
        }
    });
    jQuery.each({
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
        },
        function (name, original) {
            jQuery.fn[name] = function (selector) {
                var elems, ret = [],
                    insert = jQuery(selector),
                    last = insert.length - 1,
                    i = 0;
                for (; i <= last; i++) {
                    elems = i === last ? this : this.clone(true);
                    jQuery(insert[i])[original](elems);
                    core_push.apply(ret, elems.get())
                }
                return this.pushStack(ret)
            }
        });
    jQuery.extend({
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true),
                inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!jQuery.support.noCloneChecked && (elem.nodeType ===
                1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) fixInput(srcElements[i], destElements[i])
            }
            if (dataAndEvents)
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) cloneCopyEvent(srcElements[i], destElements[i])
                } else cloneCopyEvent(elem, clone);
            destElements = getAll(clone, "script");
            if (destElements.length > 0) setGlobalEval(destElements, !inPage &&
                getAll(elem, "script"));
            return clone
        },
        buildFragment: function (elems, context, scripts, selection) {
            var elem, tmp, tag, wrap, contains, j, i = 0,
                l = elems.length,
                fragment = context.createDocumentFragment(),
                nodes = [];
            for (; i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0)
                    if (jQuery.type(elem) === "object") jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                    else if (!rhtml.test(elem)) nodes.push(context.createTextNode(elem));
                else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));
                    tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                    j = wrap[0];
                    while (j--) tmp = tmp.firstChild;
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp = fragment.firstChild;
                    tmp.textContent = ""
                }
            }
            fragment.textContent = "";
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) continue;
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(fragment.appendChild(elem), "script");
                if (contains) setGlobalEval(tmp);
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++])
                        if (rscriptType.test(elem.type ||
                            "")) scripts.push(elem)
                }
            }
            return fragment
        },
        cleanData: function (elems) {
            var data, elem, events, type, key, j, special = jQuery.event.special,
                i = 0;
            for (;
                (elem = elems[i]) !== undefined; i++) {
                if (Data.accepts(elem)) {
                    key = elem[data_priv.expando];
                    if (key && (data = data_priv.cache[key])) {
                        events = Object.keys(data.events || {});
                        if (events.length)
                            for (j = 0;
                                (type = events[j]) !== undefined; j++)
                                if (special[type]) jQuery.event.remove(elem, type);
                                else jQuery.removeEvent(elem, type, data.handle);
                        if (data_priv.cache[key]) delete data_priv.cache[key]
                    }
                }
                delete data_user.cache[elem[data_user.expando]]
            }
        },
        _evalUrl: function (url) {
            return jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "script",
                async: false,
                global: false,
                "throws": true
            })
        }
    });

    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType === 1 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem
    }

    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem
    }

    function restoreScript(elem) {
        var match =
            rscriptTypeMasked.exec(elem.type);
        if (match) elem.type = match[1];
        else elem.removeAttribute("type");
        return elem
    }

    function setGlobalEval(elems, refElements) {
        var l = elems.length,
            i = 0;
        for (; i < l; i++) data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"))
    }

    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) return;
        if (data_priv.hasData(src)) {
            pdataOld = data_priv.access(src);
            pdataCur = data_priv.set(dest, pdataOld);
            events =
                pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events)
                    for (i = 0, l = events[type].length; i < l; i++) jQuery.event.add(dest, type, events[type][i])
            }
        }
        if (data_user.hasData(src)) {
            udataOld = data_user.access(src);
            udataCur = jQuery.extend({}, udataOld);
            data_user.set(dest, udataCur)
        }
    }

    function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
        return tag === undefined || tag && jQuery.nodeName(context,
            tag) ? jQuery.merge([context], ret) : ret
    }

    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) dest.checked = src.checked;
        else if (nodeName === "input" || nodeName === "textarea") dest.defaultValue = src.defaultValue
    }
    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;
            if (jQuery.isFunction(html)) return this.each(function (i) {
                jQuery(this).wrapAll(html.call(this, i))
            });
            if (this[0]) {
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) wrap.insertBefore(this[0]);
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstElementChild) elem = elem.firstElementChild;
                    return elem
                }).append(this)
            }
            return this
        },
        wrapInner: function (html) {
            if (jQuery.isFunction(html)) return this.each(function (i) {
                jQuery(this).wrapInner(html.call(this, i))
            });
            return this.each(function () {
                var self = jQuery(this),
                    contents = self.contents();
                if (contents.length) contents.wrapAll(html);
                else self.append(html)
            })
        },
        wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ?
                    html.call(this, i) : html)
            })
        },
        unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, "body")) jQuery(this).replaceWith(this.childNodes)
            }).end()
        }
    });
    var curCSS, iframe, rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rmargin = /^margin/,
        rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"),
        rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"),
        rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"),
        elemdisplay = {
            BODY: "block"
        }, cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        }, cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        }, cssExpand = ["Top", "Right", "Bottom", "Left"],
        cssPrefixes = ["Webkit", "O", "Moz", "ms"];

    function vendorPropName(style, name) {
        if (name in style) return name;
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) return name
        }
        return origName
    }

    function isHidden(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem)
    }

    function getStyles(elem) {
        return window.getComputedStyle(elem,
            null)
    }

    function showHide(elements, show) {
        var display, elem, hidden, values = [],
            index = 0,
            length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) continue;
            values[index] = data_priv.get(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === "none") elem.style.display = "";
                if (elem.style.display === "" && isHidden(elem)) values[index] = data_priv.access(elem, "olddisplay", css_defaultDisplay(elem.nodeName))
            } else if (!values[index]) {
                hidden = isHidden(elem);
                if (display &&
                    display !== "none" || !hidden) data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"))
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) continue;
            if (!show || elem.style.display === "none" || elem.style.display === "") elem.style.display = show ? values[index] || "" : "none"
        }
        return elements
    }
    jQuery.fn.extend({
        css: function (name, value) {
            return jQuery.access(this, function (elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i <
                        len; i++) map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    return map
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
            }, name, value, arguments.length > 1)
        },
        show: function () {
            return showHide(this, true)
        },
        hide: function () {
            return showHide(this)
        },
        toggle: function (state) {
            var bool = typeof state === "boolean";
            return this.each(function () {
                if (bool ? state : isHidden(this)) jQuery(this).show();
                else jQuery(this).hide()
            })
        }
    });
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret =
                            curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret
                    }
                }
            }
        },
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
        cssProps: {
            "float": "cssFloat"
        },
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) return;
            var ret, type, hooks, origName = jQuery.camelCase(name),
                style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number"
                }
                if (value == null || type === "number" && isNaN(value)) return;
                if (type === "number" && !jQuery.cssNumber[origName]) value += "px";
                if (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0) style[name] = "inherit";
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) style[name] =
                    value
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) return ret;
                return style[name]
            }
        },
        css: function (elem, name, extra, styles) {
            var val, num, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) val = hooks.get(elem, true, extra);
            if (val === undefined) val = curCSS(elem, name, styles);
            if (val === "normal" && name in cssNormalTransform) val =
                cssNormalTransform[name];
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val
            }
            return val
        }
    });
    curCSS = function (elem, name, _computed) {
        var width, minWidth, maxWidth, computed = _computed || getStyles(elem),
            ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined,
            style = elem.style;
        if (computed) {
            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) ret = jQuery.style(elem, name);
            if (rnumnonpx.test(ret) && rmargin.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth
            }
        }
        return ret
    };

    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
            val = 0;
        for (; i < 4; i += 2) {
            if (extra === "margin") val +=
                jQuery.css(elem, extra + cssExpand[i], true, styles);
            if (isBorderBox) {
                if (extra === "content") val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "margin") val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "padding") val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
            }
        }
        return val
    }

    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles(elem),
            isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) val = elem.style[name];
            if (rnumnonpx.test(val)) return val;
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
            val = parseFloat(val) || 0
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px"
    }

    function css_defaultDisplay(nodeName) {
        var doc =
            document,
            display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === "none" || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write("<!doctype html><html><body>");
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach()
            }
            elemdisplay[nodeName] = display
        }
        return display
    }

    function actualDisplay(name,
        doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
            display = jQuery.css(elem[0], "display");
        elem.remove();
        return display
    }
    jQuery.each(["height", "width"], function (i, name) {
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
                if (computed) return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ? jQuery.swap(elem, cssShow, function () {
                    return getWidthOrHeight(elem, name, extra)
                }) : getWidthOrHeight(elem, name, extra)
            },
            set: function (elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0)
            }
        }
    });
    jQuery(function () {
        if (!jQuery.support.reliableMarginRight) jQuery.cssHooks.marginRight = {
            get: function (elem, computed) {
                if (computed) return jQuery.swap(elem, {
                    "display": "inline-block"
                }, curCSS, [elem, "marginRight"])
            }
        };
        if (!jQuery.support.pixelPosition && jQuery.fn.position) jQuery.each(["top", "left"], function (i, prop) {
            jQuery.cssHooks[prop] = {
                get: function (elem, computed) {
                    if (computed) {
                        computed = curCSS(elem, prop);
                        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed
                    }
                }
            }
        })
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function (elem) {
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0
        };
        jQuery.expr.filters.visible = function (elem) {
            return !jQuery.expr.filters.hidden(elem)
        }
    }
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0,
                    expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
                for (; i < 4; i++) expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded
            }
        };
        if (!rmargin.test(prefix)) jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
    });
    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray())
        },
        serializeArray: function () {
            return this.map(function () {
                var elements =
                    jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type))
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    }
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF,
                        "\r\n")
                }
            }).get()
        }
    });
    jQuery.param = function (a, traditional) {
        var prefix, s = [],
            add = function (key, value) {
                value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
            };
        if (traditional === undefined) traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) jQuery.each(a, function () {
            add(this.name, this.value)
        });
        else
            for (prefix in a) buildParams(prefix, a[prefix], traditional, add);
        return s.join("&").replace(r20,
            "+")
    };

    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) add(prefix, v);
            else buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add)
        });
        else if (!traditional && jQuery.type(obj) === "object")
            for (name in obj) buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
        else add(prefix, obj)
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
        }
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        },
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn)
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn)
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector,
                data, fn)
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn)
        }
    });
    var ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(),
        ajax_rquery = /\?/,
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
        _load = jQuery.fn.load,
        prefilters = {}, transports = {},
        allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*"
            }
            var dataType, i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(func))
                while (dataType =
                    dataTypes[i++])
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func)
                    } else(structure[dataType] = structure[dataType] || []).push(func)
        }
    }

    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options,
                    originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false
                } else if (seekingTransport) return !(selected = dataTypeOrTransport)
            });
            return selected
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*")
    }

    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src)
            if (src[key] !== undefined)(flatOptions[key] ?
                target : deep || (deep = {}))[key] = src[key];
        if (deep) jQuery.extend(true, target, deep);
        return target
    }
    jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== "string" && _load) return _load.apply(this, arguments);
        var selector, type, response, self = this,
            off = url.indexOf(" ");
        if (off >= 0) {
            selector = url.slice(off);
            url = url.slice(0, off)
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined
        } else if (params && typeof params === "object") type = "POST";
        if (self.length > 0) jQuery.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: params
        }).done(function (responseText) {
            response =
                arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText)
        }).complete(callback && function (jqXHR, status) {
            self.each(callback, response || [jqXHR.responseText, status, jqXHR])
        });
        return this
    };
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn)
        }
    });
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function (target,
            settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target)
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options),
                callbackContext = s.context || s,
                globalEventContext =
                    s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0,
                strAbort = "canceled",
                jqXHR = {
                    readyState: 0,
                    getResponseHeader: function (key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) responseHeaders[match[1].toLowerCase()] = match[2]
                            }
                            match = responseHeaders[key.toLowerCase()]
                        }
                        return match ==
                            null ? null : match
                    },
                    getAllResponseHeaders: function () {
                        return state === 2 ? responseHeadersString : null
                    },
                    setRequestHeader: function (name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value
                        }
                        return this
                    },
                    overrideMimeType: function (type) {
                        if (!state) s.mimeType = type;
                        return this
                    },
                    statusCode: function (map) {
                        var code;
                        if (map)
                            if (state < 2)
                                for (code in map) statusCode[code] = [statusCode[code], map[code]];
                            else jqXHR.always(map[jqXHR.status]);
                        return this
                    },
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) transport.abort(finalText);
                        done(0, finalText);
                        return this
                    }
                };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""];
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !! (parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))))
            }
            if (s.data && s.processData && typeof s.data !== "string") s.data = jQuery.param(s.data, s.traditional);
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) return jqXHR;
            fireGlobals = s.global;
            if (fireGlobals && jQuery.active++ === 0) jQuery.event.trigger("ajaxStart");
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data
                }
                if (s.cache === false) s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + ajax_nonce++) : cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                if (jQuery.etag[cacheURL]) jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL])
            }
            if (s.data && s.hasContent &&
                s.contentType !== false || options.contentType) jqXHR.setRequestHeader("Content-Type", s.contentType);
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) jqXHR.setRequestHeader(i, s.headers[i]);
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) return jqXHR.abort();
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) jqXHR[i](s[i]);
            transport =
                inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) done(-1, "No Transport");
            else {
                jqXHR.readyState = 1;
                if (fireGlobals) globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                if (s.async && s.timeout > 0) timeoutTimer = setTimeout(function () {
                    jqXHR.abort("timeout")
                }, s.timeout);
                try {
                    state = 1;
                    transport.send(requestHeaders, done)
                } catch (e) {
                    if (state < 2) done(-1, e);
                    else throw e;
                }
            }

            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) return;
                state = 2;
                if (timeoutTimer) clearTimeout(timeoutTimer);
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) response = ajaxHandleResponses(s, jqXHR, responses);
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) jQuery.lastModified[cacheURL] = modified;
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) jQuery.etag[cacheURL] =
                            modified
                    }
                    if (status === 204 || s.type === "HEAD") statusText = "nocontent";
                    else if (status === 304) statusText = "notmodified";
                    else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) status = 0
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                else deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    if (!--jQuery.active) jQuery.event.trigger("ajaxStop")
                }
            }
            return jqXHR
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, "json")
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined,
                callback, "script")
        }
    });
    jQuery.each(["get", "post"], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            })
        }
    });

    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents,
            dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) ct = s.mimeType || jqXHR.getResponseHeader("Content-Type")
        }
        if (ct)
            for (type in contents)
                if (contents[type] &&
                    contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break
                }
        if (dataTypes[0] in responses) finalDataType = dataTypes[0];
        else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break
                }
                if (!firstDataType) firstDataType = type
            }
            finalDataType = finalDataType || firstDataType
        } if (finalDataType) {
            if (finalDataType !== dataTypes[0]) dataTypes.unshift(finalDataType);
            return responses[finalDataType]
        }
    }

    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1])
            for (conv in s.converters) converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) jqXHR[s.responseFields[current]] = response;
            if (!prev && isSuccess && s.dataFilter) response = s.dataFilter(response, s.dataType);
            prev = current;
            current = dataTypes.shift();
            if (current)
                if (current === "*") current = prev;
                else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv)
                    for (conv2 in converters) {
                        tmp =
                            conv2.split(" ");
                        if (tmp[1] === current) {
                            conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                            if (conv) {
                                if (conv === true) conv = converters[conv2];
                                else if (converters[conv2] !== true) {
                                    current = tmp[0];
                                    dataTypes.unshift(tmp[1])
                                }
                                break
                            }
                        }
                    }
                if (conv !== true)
                    if (conv && s["throws"]) response = conv(response);
                    else try {
                        response = conv(response)
                    } catch (e) {
                        return {
                            state: "parsererror",
                            error: conv ? e : "No conversion from " + prev + " to " + current
                        }
                    }
            }
        }
        return {
            state: "success",
            data: response
        }
    }
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function (text) {
                jQuery.globalEval(text);
                return text
            }
        }
    });
    jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) s.cache = false;
        if (s.crossDomain) s.type = "GET"
    });
    jQuery.ajaxTransport("script", function (s) {
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery("<script>").prop({
                        async: true,
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) complete(evt.type ===
                            "error" ? 404 : 200, evt.type)
                    });
                    document.head.appendChild(script[0])
                },
                abort: function () {
                    if (callback) callback()
                }
            }
        }
    });
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + ajax_nonce++;
            this[callback] = true;
            return callback
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data ===
                "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            else if (s.jsonp !== false) s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            s.converters["script json"] = function () {
                if (!responseContainer) jQuery.error(callbackName + " was not called");
                return responseContainer[0]
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments
            };
            jqXHR.always(function () {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName)
                }
                if (responseContainer && jQuery.isFunction(overwritten)) overwritten(responseContainer[0]);
                responseContainer = overwritten = undefined
            });
            return "script"
        }
    });
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new XMLHttpRequest
        } catch (e) {}
    };
    var xhrSupported = jQuery.ajaxSettings.xhr(),
        xhrSuccessStatus = {
            "0": 200,
            1223: 204
        }, xhrId = 0,
        xhrCallbacks = {};
    if (window.ActiveXObject) jQuery(window).on("unload", function () {
        for (var key in xhrCallbacks) xhrCallbacks[key]();
        xhrCallbacks = undefined
    });
    jQuery.support.cors = !! xhrSupported && "withCredentials" in xhrSupported;
    jQuery.support.ajax = xhrSupported = !! xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var callback;
        if (jQuery.support.cors || xhrSupported && !options.crossDomain) return {
            send: function (headers, complete) {
                var i,
                    id, xhr = options.xhr();
                xhr.open(options.type, options.url, options.async, options.username, options.password);
                if (options.xhrFields)
                    for (i in options.xhrFields) xhr[i] = options.xhrFields[i];
                if (options.mimeType && xhr.overrideMimeType) xhr.overrideMimeType(options.mimeType);
                if (!options.crossDomain && !headers["X-Requested-With"]) headers["X-Requested-With"] = "XMLHttpRequest";
                for (i in headers) xhr.setRequestHeader(i, headers[i]);
                callback = function (type) {
                    return function () {
                        if (callback) {
                            delete xhrCallbacks[id];
                            callback = xhr.onload =
                                xhr.onerror = null;
                            if (type === "abort") xhr.abort();
                            else if (type === "error") complete(xhr.status || 404, xhr.statusText);
                            else complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {
                                text: xhr.responseText
                            } : undefined, xhr.getAllResponseHeaders())
                        }
                    }
                };
                xhr.onload = callback();
                xhr.onerror = callback("error");
                callback = xhrCallbacks[id = xhrId++] = callback("abort");
                xhr.send(options.hasContent && options.data || null)
            },
            abort: function () {
                if (callback) callback()
            }
        }
    });
    var fxNow, timerId, rfxtypes =
            /^(?:toggle|show|hide)$/,
        rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"),
        rrun = /queueHooks$/,
        animationPrefilters = [defaultPrefilter],
        tweeners = {
            "*": [
                function (prop, value) {
                    var tween = this.createTween(prop, value),
                        target = tween.cur(),
                        parts = rfxnum.exec(value),
                        unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
                        start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
                        scale = 1,
                        maxIterations = 20;
                    if (start && start[3] !== unit) {
                        unit = unit || start[3];
                        parts = parts || [];
                        start = +target || 1;
                        do {
                            scale = scale || ".5";
                            start = start / scale;
                            jQuery.style(tween.elem, prop, start + unit)
                        } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations)
                    }
                    if (parts) {
                        start = tween.start = +start || +target || 0;
                        tween.unit = unit;
                        tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2]
                    }
                    return tween
                }
            ]
        };

    function createFxNow() {
        setTimeout(function () {
            fxNow = undefined
        });
        return fxNow = jQuery.now()
    }

    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]),
            index = 0,
            length = collection.length;
        for (; index < length; index++)
            if (tween = collection[index].call(animation, prop, value)) return tween
    }

    function Animation(elem, properties, options) {
        var result, stopped, index = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always(function () {
                delete tick.elem
            }),
            tick = function () {
                if (stopped) return false;
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index =
                        0,
                    length = animation.tweens.length;
                for (; index < length; index++) animation.tweens[index].run(percent);
                deferred.notifyWith(elem, [animation, percent, remaining]);
                if (percent < 1 && length) return remaining;
                else {
                    deferred.resolveWith(elem, [animation]);
                    return false
                }
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {}
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop,
                    end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween
                },
                stop: function (gotoEnd) {
                    var index = 0,
                        length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) return this;
                    stopped = true;
                    for (; index < length; index++) animation.tweens[index].run(1);
                    if (gotoEnd) deferred.resolveWith(elem, [animation, gotoEnd]);
                    else deferred.rejectWith(elem, [animation, gotoEnd]);
                    return this
                }
            }),
            props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) return result
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) animation.opts.start.call(elem, animation);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
    }

    function propFilter(props,
        specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0]
            }
            if (index !== name) {
                props[name] = value;
                delete props[index]
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value)
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing
                    }
            } else specialEasing[name] = easing
        }
    }
    jQuery.Animation =
        jQuery.extend(Animation, {
            tweener: function (props, callback) {
                if (jQuery.isFunction(props)) {
                    callback = props;
                    props = ["*"]
                } else props = props.split(" ");
                var prop, index = 0,
                    length = props.length;
                for (; index < length; index++) {
                    prop = props[index];
                    tweeners[prop] = tweeners[prop] || [];
                    tweeners[prop].unshift(callback)
                }
            },
            prefilter: function (callback, prepend) {
                if (prepend) animationPrefilters.unshift(callback);
                else animationPrefilters.push(callback)
            }
        });

    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire,
            anim = this,
            orig = {}, style = elem.style,
            hidden = elem.nodeType && isHidden(elem),
            dataShow = data_priv.get(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) oldfire()
                }
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) hooks.empty.fire()
                })
            })
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            opts.overflow = [style.overflow,
                style.overflowX, style.overflowY
            ];
            if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") style.display = "inline-block"
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2]
            })
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show"))
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) hidden =
                        true;
                    else continue;
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) hidden = dataShow.hidden
            } else dataShow = data_priv.access(elem, "fxshow", {}); if (toggle) dataShow.hidden = !hidden;
            if (hidden) jQuery(elem).show();
            else anim.done(function () {
                jQuery(elem).hide()
            });
            anim.done(function () {
                var prop;
                data_priv.remove(elem, "fxshow");
                for (prop in orig) jQuery.style(elem, prop, orig[prop])
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] :
                    0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0
                    }
                }
            }
        }
    }

    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing)
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ?
                "" : "px")
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            else this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) this.options.step.call(this.elem, this.now, this);
            if (hooks && hooks.set) hooks.set(this);
            else Tween.propHooks._default.set(this);
            return this
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) return tween.elem[tween.prop];
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) jQuery.fx.step[tween.prop](tween);
                else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] !=
                    null || jQuery.cssHooks[tween.prop])) jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                else tween.elem[tween.prop] = tween.now
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) tween.elem[tween.prop] = tween.now
        }
    };
    jQuery.each(["toggle", "show", "hide"], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name,
                true), speed, easing, callback)
        }
    });
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback)
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty || data_priv.get(this, "finish")) anim.stop(true)
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue ===
                false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd)
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined
            }
            if (clearQueue && type !== false) this.queue(type || "fx", []);
            return this.each(function () {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = data_priv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) stopQueue(data[index])
                } else
                    for (index in data)
                        if (data[index] &&
                            data[index].stop && rrun.test(index)) stopQueue(data[index]); for (index = timers.length; index--;)
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1)
                    }
                if (dequeue || !gotoEnd) jQuery.dequeue(this, type)
            })
        },
        finish: function (type) {
            if (type !== false) type = type || "fx";
            return this.each(function () {
                var index, data = data_priv.get(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length :
                        0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) hooks.stop.call(this, true);
                for (index = timers.length; index--;)
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1)
                    }
                for (index = 0; index < length; index++)
                    if (queue[index] && queue[index].finish) queue[index].finish.call(this);
                delete data.finish
            })
        }
    });

    function genFx(type, includeWidth) {
        var which, attrs = {
                height: type
            }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type
        }
        if (includeWidth) attrs.opacity = attrs.width = type;
        return attrs
    }
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback)
        }
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) opt.queue = "fx";
        opt.old = opt.complete;
        opt.complete = function () {
            if (jQuery.isFunction(opt.old)) opt.old.call(this);
            if (opt.queue) jQuery.dequeue(this, opt.queue)
        };
        return opt
    };
    jQuery.easing = {
        linear: function (p) {
            return p
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2
        }
    };
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function () {
        var timer, timers = jQuery.timers,
            i = 0;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) timers.splice(i--, 1)
        }
        if (!timers.length) jQuery.fx.stop();
        fxNow = undefined
    };
    jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer)) jQuery.fx.start()
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (!timerId) timerId =
            setInterval(jQuery.fx.tick, jQuery.fx.interval)
    };
    jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fx.step = {};
    if (jQuery.expr && jQuery.expr.filters) jQuery.expr.filters.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem
        }).length
    };
    jQuery.fn.offset = function (options) {
        if (arguments.length) return options === undefined ? this : this.each(function (i) {
            jQuery.offset.setOffset(this, options, i)
        });
        var docElem, win,
            elem = this[0],
            box = {
                top: 0,
                left: 0
            }, doc = elem && elem.ownerDocument;
        if (!doc) return;
        docElem = doc.documentElement;
        if (!jQuery.contains(docElem, elem)) return box;
        if (typeof elem.getBoundingClientRect !== core_strundefined) box = elem.getBoundingClientRect();
        win = getWindow(doc);
        return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
        }
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position =
                    jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};
            if (position === "static") elem.style.position = "relative";
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0
            } if (jQuery.isFunction(options)) options =
                options.call(elem, i, curOffset);
            if (options.top != null) props.top = options.top - curOffset.top + curTop;
            if (options.left != null) props.left = options.left - curOffset.left + curLeft;
            if ("using" in options) options.using.call(elem, props);
            else curElem.css(props)
        }
    };
    jQuery.fn.extend({
        position: function () {
            if (!this[0]) return;
            var offsetParent, offset, elem = this[0],
                parentOffset = {
                    top: 0,
                    left: 0
                };
            if (jQuery.css(elem, "position") === "fixed") offset = elem.getBoundingClientRect();
            else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0],
                    "html")) parentOffset = offsetParent.offset();
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            }
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent,
                    "position") === "static") offsetParent = offsetParent.offsetParent;
                return offsetParent || docElem
            })
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function (method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function (val) {
            return jQuery.access(this, function (elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) return win ? win[prop] : elem[method];
                if (win) win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
                else elem[method] = val
            }, method, val, arguments.length, null)
        }
    });

    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
    }
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function (name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return jQuery.access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) return elem.document.documentElement["client" +
                        name];
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra)
                }, type, chainable ? margin : undefined, chainable, null)
            }
        })
    });
    jQuery.fn.size = function () {
        return this.length
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof module === "object" && module && typeof module.exports === "object") module.exports = jQuery;
    else if (typeof define ===
        "function" && define.amd) define("jquery", [], function () {
        return jQuery
    });
    if (typeof window === "object" && typeof window.document === "object") Streak.jQuery = Streak.$ = jQuery
})(window, Streak);
(function (global, exports) {
    var $d = global.document,
        $ = global.Streak.jQuery || global.Zepto || global.ender || $d,
        $$, $b, ke = "keydown";

    function realTypeOf(v, s) {
        return v === null ? s === "null" : v === undefined ? s === "undefined" : v.is && v instanceof $ ? s === "element" : Object.prototype.toString.call(v).toLowerCase().indexOf(s) > 7
    }
    if ($ === $d) {
        $$ = function (selector, context) {
            return selector ? $.querySelector(selector, context || $) : $
        };
        $b = function (e, fn) {
            e.addEventListener(ke, fn, false)
        };
        $f = function (e, jwertyEv) {
            var ret = document.createEvent("Event"),
                i;
            ret.initEvent(ke, true, true);
            for (i in jwertyEv) ret[i] = jwertyEv[i];
            return (e || $).dispatchEvent(ret)
        }
    } else {
        $$ = function (selector, context, fn) {
            return $(selector || $d, context)
        };
        $b = function (e, fn) {
            $(e).bind(ke + ".jwerty", fn)
        };
        $f = function (e, ob) {
            $(e || $d).trigger($.Event(ke, ob))
        }
    }
    var _modProps = {
        16: "shiftKey",
        17: "ctrlKey",
        18: "altKey",
        91: "metaKey"
    };
    var _keys = {
        mods: {
            "\u00e2\u2021\u00a7": 16,
            shift: 16,
            "\u00e2\u0152\u0192": 17,
            ctrl: 17,
            "\u00e2\u0152\u00a5": 18,
            alt: 18,
            option: 18,
            "\u00e2\u0152\u02dc": 91,
            meta: 91,
            cmd: 91,
            "super": 91,
            win: 91
        },
        keys: {
            "\u00e2\u0152\u00ab": 8,
            backspace: 8,
            "\u00e2\u2021\u00a5": 9,
            "\u00e2\u2021\u2020": 9,
            tab: 9,
            "\u00e2\u2020\u00a9": 13,
            "return": 13,
            enter: 13,
            "\u00e2\u0152\u2026": 13,
            "pause": 19,
            "pause-break": 19,
            "\u00e2\u2021\u00aa": 20,
            caps: 20,
            "caps-lock": 20,
            "\u00e2\u017d\u2039": 27,
            escape: 27,
            esc: 27,
            space: 32,
            "\u00e2\u2020\u2013": 33,
            pgup: 33,
            "page-up": 33,
            "\u00e2\u2020\u02dc": 34,
            pgdown: 34,
            "page-down": 34,
            "\u00e2\u2021\u0178": 35,
            end: 35,
            "\u00e2\u2021\u017e": 36,
            home: 36,
            ins: 45,
            insert: 45,
            del: 46,
            "delete": 46,
            "\u00e2\u2020\ufffd": 37,
            left: 37,
            "arrow-left": 37,
            "\u00e2\u2020\u2018": 38,
            up: 38,
            "arrow-up": 38,
            "\u00e2\u2020\u2019": 39,
            right: 39,
            "arrow-right": 39,
            "\u00e2\u2020\u201c": 40,
            down: 40,
            "arrow-down": 40,
            "*": 106,
            star: 106,
            asterisk: 106,
            multiply: 106,
            "+": 107,
            "plus": 107,
            "-": 109,
            subtract: 109,
            "=": 187,
            "equals": 187,
            ",": 188,
            comma: 188,
            ".": 190,
            period: 190,
            "full-stop": 190,
            "/": 191,
            slash: 191,
            "forward-slash": 191,
            "`": 192,
            tick: 192,
            "back-quote": 192,
            "[": 219,
            "open-bracket": 219,
            "\\": 220,
            "back-slash": 220,
            "]": 221,
            "close-bracket": 221,
            "'": 222,
            quote: 222,
            apostraphe: 222
        }
    };
    i = 95, n = 0;
    while (++i < 106) {
        _keys.keys["num-" + n] = i;
        ++n
    }
    i = 47, n = 0;
    while (++i < 58) {
        _keys.keys[n] = i;
        ++n
    }
    i = 111, n = 1;
    while (++i < 136) {
        _keys.keys["f" + n] = i;
        ++n
    }
    var i = 64;
    while (++i < 91) _keys.keys[String.fromCharCode(i).toLowerCase()] = i;

    function JwertyCode(jwertyCode) {
        var i, c, n, z, keyCombo, optionals, jwertyCodeFragment, rangeMatches, rangeI;
        if (jwertyCode instanceof JwertyCode) return jwertyCode;
        if (!realTypeOf(jwertyCode, "array")) jwertyCode = String(jwertyCode).replace(/\s/g, "").toLowerCase().match(/(?:\+,|[^,])+/g);
        for (i = 0,
            c = jwertyCode.length; i < c; ++i) {
            if (!realTypeOf(jwertyCode[i], "array")) jwertyCode[i] = String(jwertyCode[i]).match(/(?:\+\/|[^\/])+/g);
            optionals = [], n = jwertyCode[i].length;
            while (n--) {
                var jwertyCodeFragment = jwertyCode[i][n];
                keyCombo = {
                    jwertyCombo: String(jwertyCodeFragment),
                    shiftKey: false,
                    ctrlKey: false,
                    altKey: false,
                    metaKey: false
                };
                if (!realTypeOf(jwertyCodeFragment, "array")) jwertyCodeFragment = String(jwertyCodeFragment).toLowerCase().match(/(?:(?:[^\+])+|\+\+|^\+$)/g);
                z = jwertyCodeFragment.length;
                while (z--) {
                    if (jwertyCodeFragment[z] ===
                        "++") jwertyCodeFragment[z] = "+";
                    if (jwertyCodeFragment[z] in _keys.mods)
                        if (jwertyCodeFragment.length > 1) keyCombo[_modProps[_keys.mods[jwertyCodeFragment[z]]]] = true;
                        else keyCombo.keyCode = _keys.mods[jwertyCodeFragment[z]];
                        else if (jwertyCodeFragment[z] in _keys.keys) keyCombo.keyCode = _keys.keys[jwertyCodeFragment[z]];
                    else rangeMatches = jwertyCodeFragment[z].match(/^\[([^-]+\-?[^-]*)-([^-]+\-?[^-]*)\]$/)
                }
                if (realTypeOf(keyCombo.keyCode, "undefined"))
                    if (rangeMatches && rangeMatches[1] in _keys.keys && rangeMatches[2] in
                        _keys.keys) {
                        rangeMatches[2] = _keys.keys[rangeMatches[2]];
                        rangeMatches[1] = _keys.keys[rangeMatches[1]];
                        for (rangeI = rangeMatches[1]; rangeI < rangeMatches[2]; ++rangeI) optionals.push({
                            altKey: keyCombo.altKey,
                            shiftKey: keyCombo.shiftKey,
                            metaKey: keyCombo.metaKey,
                            ctrlKey: keyCombo.ctrlKey,
                            keyCode: rangeI,
                            jwertyCombo: String(jwertyCodeFragment)
                        });
                        keyCombo.keyCode = rangeI
                    } else keyCombo.keyCode = 0;
                optionals.push(keyCombo)
            }
            this[i] = optionals
        }
        this.length = i;
        return this
    }
    var jwerty = Streak.jwerty = {
        event: function (jwertyCode, callbackFunction,
            callbackContext) {
            if (realTypeOf(callbackFunction, "boolean")) {
                var bool = callbackFunction;
                callbackFunction = function () {
                    return bool
                }
            }
            jwertyCode = new JwertyCode(jwertyCode);
            var i = 0,
                c = jwertyCode.length - 1,
                returnValue, jwertyCodeIs;
            return function (event) {
                if (jwertyCodeIs = jwerty.is(jwertyCode, event, i))
                    if (i < c) {
                        ++i;
                        return
                    } else {
                        returnValue = callbackFunction.call(callbackContext || this, event, jwertyCodeIs);
                        if (returnValue === false) event.preventDefault();
                        i = 0;
                        return
                    }
                i = jwerty.is(jwertyCode, event) ? 1 : 0
            }
        },
        is: function (jwertyCode,
            event, i) {
            jwertyCode = new JwertyCode(jwertyCode);
            i = i || 0;
            jwertyCode = jwertyCode[i];
            event = event.originalEvent || event;
            var key, n = jwertyCode.length,
                returnValue = false;
            while (n--) {
                returnValue = jwertyCode[n].jwertyCombo;
                for (var p in jwertyCode[n])
                    if (p !== "jwertyCombo" && event[p] != jwertyCode[n][p]) returnValue = false;
                if (returnValue !== false) return returnValue
            }
            return returnValue
        },
        key: function (jwertyCode, callbackFunction, callbackContext, selector, selectorContext) {
            var realSelector = realTypeOf(callbackContext, "element") ||
                realTypeOf(callbackContext, "string") ? callbackContext : selector,
                realcallbackContext = realSelector === callbackContext ? global : callbackContext,
                realSelectorContext = realSelector === callbackContext ? selector : selectorContext;
            $b(realTypeOf(realSelector, "element") ? realSelector : $$(realSelector, realSelectorContext), jwerty.event(jwertyCode, callbackFunction, realcallbackContext))
        },
        fire: function (jwertyCode, selector, selectorContext, i) {
            jwertyCode = new JwertyCode(jwertyCode);
            var realI = realTypeOf(selectorContext, "number") ?
                selectorContext : i;
            $f(realTypeOf(selector, "element") ? selector : $$(selector, selectorContext), jwertyCode[realI || 0][0])
        },
        KEYS: _keys
    }
})(this, typeof module !== "undefined" && module.exports ? module.exports : this);
(function (Streak) {
    var _ = Streak._;
    ObjectPath = {
        create: function (objString) {
            return new ObjectPath.impl(objString)
        },
        impl: function (inObjString) {
            var retObj = {}, obj = null,
                objString = inObjString;
            if (objString) try {
                obj = JSON.parse(objString)
            } catch (err) {}
            if (!obj) obj = {};
            retObj.get = function (path) {
                var parts = path.split("/");
                var prop = obj[parts[0]];
                for (var i = 1; i < parts.length; i++) {
                    if (!prop) return null;
                    prop = prop[parts[i]]
                }
                return prop
            };
            retObj.set = function (path, value) {
                var parts = path.split("/");
                if (parts.length === 1) obj[parts[0]] =
                    value;
                else if (parts.length > 1) {
                    var oprop = obj[parts[0]];
                    if (!oprop) oprop = {};
                    var prop = oprop;
                    for (var i = 1; i < parts.length - 1; i++) {
                        var newProp = prop[parts[i]];
                        if (!newProp) {
                            newProp = {};
                            prop[parts[i]] = newProp
                        }
                        prop = newProp
                    }
                    prop[_.last(parts)] = value;
                    obj[parts[0]] = oprop
                }
            };
            retObj.remove = function (path) {
                var parts = path.split("/");
                var prop = null;
                for (var i = 0; i < parts.length - 1; i++) {
                    prop = obj[prop[i]];
                    if (!prop) return
                }
                delete prop[parts.length - 1]
            };
            retObj.toString = function () {
                return JSON.stringify(obj)
            };
            retObj.object = obj;
            return retObj
        }
    };
    Streak.ObjectPath = ObjectPath
})(Streak);
(function (window, Streak) {
    var Date = Streak.Date;
    Streak.Utils = {};
    Date.prototype.getTimezoneOffsetInMilli = function () {
        return (new Date).getTimezoneOffset() * -60 * 1E3
    };
    Date.prototype.toLocalTime = function () {
        this.setTime(this.getTime() + this.getTimezoneOffsetInMilli())
    };
    Date.prototype.toGMT = function () {
        this.setTime(this.getTime() - this.getTimezoneOffsetInMilli())
    };
    Date.prototype.getGmailFormatted = function (isShort) {
        var dt = this;
        var now = new Date;
        var diff = (now.getTime() - dt.getTime()) / (1E3 * 60 * 60);
        var dv;
        if (diff < 12) dv =
            (dt.getHours() == 12 ? "12" : dt.getHours() % 12) + ":" + (dt.getMinutes() > 9 ? dt.getMinutes() : "0" + dt.getMinutes()) + (isShort ? "" : " ") + (dt.getHours() > 11 ? isShort ? "p" : "pm" : isShort ? "a" : "am");
        else {
            var parts = dt.toDateString().split(" ");
            dv = parts[1] + " " + parts[2] + (diff / 24 / 30 > 6 ? " " + dt.getFullYear() : "")
        }
        return dv
    };
    Date.addOutputFormat({
        token: "tzshort",
        format: function (d, loc, n, format) {
            var dstring = d.toString();
            if (dstring.indexOf("(") > -1) {
                var tzParts = d.toString().split("(")[1].split(" ");
                if (tzParts.length > 1) return tzParts.map(function (word) {
                    return word.at(0).capitalize()
                }).join("");
                else return tzParts[0].split(")")[0]
            }
            return ""
        }
    });
    Date.addOutputFormat({
        token: "mmshort",
        format: function (d, loc, n, format) {
            if (d.getMinutes() === 0) return "";
            else {
                var s = d.getMinutes();
                if (s < 10) s = "0" + s;
                return ":" + s
            }
        }
    });
    var dateLocale = "en";
    var dateOutputFormats = {
        en: {
            "export": "{MM}/{dd}/{year} {hh}:{mm}:{ss} {TT} {tzshort}",
            shortWithWeekday: "{Dow} {MM}/{day}/{yy} {h}:{mm}{tt}",
            shortDate: "{MM}/{dd}/{yy}",
            shortFormat: "{MM}/{dd}/{yy} {h}{mmshort}{tt}",
            longDateTime: "{Weekday} {Month} {ord}, {year} {h}:{mm}{tt}",
            longWithTimezone: "{Weekday} {Month} {ord}, {year} {h}:{mm}{tt} {tzshort}",
            "pixelTrack": "{h}:{mm}{tt} on {Month} {ord}, {year}"
        },
        other: {
            "export": "{MM}/{dd}/{year} {hh}:{mm}:{ss} {TT} {tzshort}",
            shortDate: "{dd}/{MM}/{yy}",
            shortWithWeekday: "{Dow} {day}/{MM}/{yy} {h}:{mm}{tt}",
            shortFormat: "{dd}/{MM}/{yy} {h}{mmshort}{tt}",
            longDateTime: "{Weekday} {Month} {ord}, {year} {h}:{mm}{tt}",
            longWithTimezone: "{Weekday} {Month} {ord}, {year} {h}:{mm}{tt} {tzshort}",
            "pixelTrack": "{h}:{mm}{tt} on {Month} {ord}, {year}"
        }
    };
    Date.extend({
        "setFormatLocale": function (locale) {
            dateLocale = locale
        },
        "customFormat": function (format) {
            return this.format(dateOutputFormats[dateLocale][format])
        },
        isBetweenBeginningInclusive: function (d1, d2, buffer) {
            var t = this.getTime();
            var t1 = Date.create(d1).getTime();
            var t2 = Date.create(d2).getTime();
            var lo = Math.min(t1, t2);
            var hi = Math.max(t1, t2);
            buffer = buffer || 0;
            return lo - buffer <= t && hi + buffer > t
        },
        resetTime: function () {
            this.reset()
        }
    });
    var oldCreate = Date.create;
    Date.extend({
        "ccreate": function (s) {
            if (s && s.replace) s = s.replace(/(^|\s)noon($|\s)/, "$112pm$2").replace(/(^|\s)midnight($|\s)/,
                "$112am$2");
            if (s && s.match && s.match(/^-?\d+$/)) return oldCreate(parseInt(s, 10));
            else return oldCreate(s)
        }
    }, false, false);
    Date.create = function (s) {
        if (s && s.replace) s = s.replace(/(^|\s)noon($|\s)/, "$112pm$2").replace(/(^|\s)midnight($|\s)/, "$112am$2");
        var d = new Date(s);
        if (!d.getTime()) {
            try {
                if (s && s.match && s.match(/^-?\d+$/)) d = new Date(parseInt(s, 10))
            } catch (err) {}
            if (!d || !d.getTime()) d = oldCreate(s)
        }
        return d
    };
    Array.prototype.remove = function (from, to) {
        var rest = this.slice((to || from) + 1 || this.length);
        this.length =
            from < 0 ? this.length + from : from;
        return this.push.apply(this, rest)
    };
    Array.prototype.removeVal = function (val) {
        var index = this.indexOf(val);
        if (index > -1) this.remove(index)
    };
    Array.prototype.unique = function (idfunc) {
        var hash = {};
        var out = [];
        for (var i = 0, len = this.length; i < len; i++) {
            var id = this[i].toString();
            if (idfunc) id = idfunc(this[i]);
            if (!hash[id]) {
                out.push(this[i]);
                hash[id] = 1
            }
        }
        return out
    };
    if (typeof String.prototype.capitalize !== "function") String.prototype.capitalize = function () {
        return this.charAt(0).toUpperCase() +
            this.slice(1)
    };
    String.prototype.isValidEmail = function () {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return this.match(re)
    };
    if (typeof String.prototype.startsWith != "function") String.prototype.startsWith = function (str) {
        return this.slice(0, str.length) == str
    };
    if (typeof String.prototype.endsWith != "function") String.prototype.endsWith = function (suffix) {
        return this.indexOf(suffix, this.length -
            suffix.length) !== -1
    };
    Streak.Utils.removePrefix = function (string, prefix) {
        if (string.startsWith(prefix)) return string.slice(prefix.length);
        else throw "removePrefix can only be called when string.startsWith(prefix)";
    };
    Streak.Utils.removeSuffix = function (string, suffix) {
        if (string.endsWith(suffix)) return string.slice(0, -suffix.length);
        else throw "removeSuffix can only be called when string.endsWith(suffix)";
    };
    String.prototype.sample = function (num) {
        var s = "";
        for (var i = 0, l = this.length; i < l; i++)
            if (i % num === 0) s += this[i];
        return s
    };
    if (!String.prototype.has) String.prototype.has = function (s) {
        return this.indexOf(s) > -1
    };
    if (!String.prototype.replaceAmpCodes) String.prototype.replaceAmpCodes = function () {
        return this.replace(/\&\#(\d+)\;/, function (match, group) {
            return String.fromCharCode(group)
        })
    };
    String.prototype.escapeHTML = function () {
        return this.replace(/</g, "&lt;").replace(/>/g, "&gt;")
    };

    function createGrid(rows, columns) {
        var grid = new Array(rows);
        for (var i = 0; i < rows; i++) {
            grid[i] = new Array(columns);
            for (var j = 0; j < columns; j++) grid[i][j] =
                0
        }
        return grid
    }
    String.prototype.intersectionLength = function (bString, noSpace) {
        if (!this || !bString) return 0;
        var a = this.toLowerCase();
        var b = bString.toLowerCase();
        if (noSpace) {
            a = a.replace(/\s/img, "");
            b = b.replace(/\s/img, "")
        }
        var grid = createGrid(this.length, b.length);
        var lcs = 0;
        for (var i = 0; i < a.length; i++)
            for (var j = 0; j < b.length; j++)
                if (grid[i] && grid[i].length > 0)
                    if (a[i] === b[j]) {
                        if (i === 0 || j === 0) grid[i][j] = 1;
                        else grid[i][j] = grid[i - 1][j - 1] + 1; if (lcs < grid[i][j]) lcs = grid[i][j]
                    } else grid[i][j] = 0;
        return lcs
    };
    String.prototype.intersectionRatio =
        function (b) {
            if (!b) b = "";
            if (this.length + b.length === 0) return 0;
            var length = this.intersectionLength(b);
            return length / (this.length + b.length)
    };
    if (!String.prototype.removeWhitespace) String.prototype.removeWhitespace = function () {
        return this.replace(/\s/ig, "").replace(/\xAO/ig, "")
    };
    Streak.Utils.randomString = function (length) {
        var s = "";
        for (var ii = 0; ii < length; ii++) s += String.fromCharCode(Math.round((90 - 65) * Math.random()) + 65);
        return s
    };
    Streak.Utils.toUnicodeEncoding = function (theString) {
        var unicodeString = "";
        for (var i =
            0; i < theString.length; i++) {
            var theUnicode = theString.charCodeAt(i).toString(16).toUpperCase();
            while (theUnicode.length < 4) theUnicode = "0" + theUnicode;
            theUnicode = "\\u" + theUnicode;
            unicodeString += theUnicode
        }
        return unicodeString
    };
    Streak.searchObject = function (element, query, maxDepth, caseInsensitive, exactMatch) {
        var _ = Streak._;
        var retVal = [];
        var initialNode = {
            el: element,
            path: "",
            depth: 0
        };
        var nodeList = [initialNode];
        if (caseInsensitive) query = query.toLowerCase();
        while (nodeList.length > 0) {
            var node = nodeList.pop();
            if (node.depth <=
                maxDepth) try {
                if (_.keys(node.el).length > 0)
                    for (var i = 0; i < _.keys(node.el).length; i++) {
                        var key = _.keys(node.el)[i];
                        var newNode = {
                            el: node.el[key],
                            path: node.path + "/" + key,
                            depth: node.depth + 1
                        };
                        nodeList.push(newNode)
                    }
            } catch (err) {
                var toFind = node.el + "";
                if (caseInsensitive) toFind = toFind.toLowerCase();
                if (exactMatch) {
                    if (toFind === query) retVal.push(node)
                } else if (toFind.indexOf(query) > -1) retVal.push(node)
            }
        }
        return retVal
    };
    Streak.calculateLevinshtein = function (source, target, hashName) {
        var row, col, ops;
        if (!source) source = [];
        if (!target) target = [];
        var grid = createGrid(source.length + 1, target.length + 1);
        for (row = 0; row < grid.length; row++) {
            ops = [];
            if (row > 0) ops = grid[row - 1][0].ops.concat({
                opCode: "delete",
                i: row,
                j: 0
            });
            grid[row][0] = {
                num: row,
                ops: ops
            }
        }
        for (col = 0; col < grid[0].length; col++) {
            ops = [];
            if (col > 0) ops = grid[0][col - 1].ops.concat({
                opCode: "insert",
                i: 0,
                j: col
            });
            grid[0][col] = {
                num: col,
                ops: ops
            }
        }
        for (i = 1; i < source.length + 1; i++)
            for (var j = 1; j < target.length + 1; j++) {
                var sourceVal = hashName ? source[i - 1][hashName]() : source[i - 1];
                var targetVal = hashName ?
                    target[j - 1][hashName]() : target[j - 1];
                if (sourceVal === targetVal) grid[i][j] = grid[i - 1][j - 1];
                else {
                    var deletion = grid[i - 1][j].num + 1;
                    var insertion = grid[i][j - 1].num + 1;
                    var substitution = grid[i - 1][j - 1].num + 1;
                    if (deletion < insertion && deletion < substitution) grid[i][j] = {
                        num: deletion,
                        ops: grid[i - 1][j].ops.concat({
                            opCode: "delete",
                            i: i,
                            j: j
                        })
                    };
                    else if (insertion < substitution) grid[i][j] = {
                        num: insertion,
                        ops: grid[i][j - 1].ops.concat({
                            opCode: "insert",
                            i: i,
                            j: j
                        })
                    };
                    else grid[i][j] = {
                        num: substitution,
                        ops: grid[i - 1][j - 1].ops.concat({
                            opCode: "sub",
                            i: i,
                            j: j
                        })
                    }
                }
            }
        return grid
    };
    Streak.calculateFastLevinshteinWithEqualsFunc = function (source, target, equalsFunc) {
        var ops = [],
            i;
        var sourceIndex = 0;
        var targetIndex = 0;
        var deleteChainLength = function () {
            if (equalsFunc(source[sourceIndex + 1], target[targetIndex])) return 1;
            else return -1
        };
        var insertChainLength = function () {
            if (equalsFunc(source[sourceIndex], target[targetIndex + 1])) return 1;
            else return -1
        };
        for (sourceIndex = 0; sourceIndex < source.length;) {
            if (targetIndex >= target.length) break;
            if (equalsFunc(source[sourceIndex], target[targetIndex])) {
                targetIndex++;
                sourceIndex++
            } else {
                var deleteChain = deleteChainLength();
                if (deleteChain > 0)
                    for (i = 0; i < deleteChain; i++) {
                        ops.push({
                            opCode: "delete",
                            i: sourceIndex,
                            j: targetIndex
                        });
                        sourceIndex++
                    } else {
                        var insertChain = insertChainLength();
                        if (insertChain > 0)
                            for (i = 0; i < insertChain; i++) {
                                ops.push({
                                    opCode: "insert",
                                    i: sourceIndex,
                                    j: targetIndex
                                });
                                targetIndex++
                            } else {
                                ops.push({
                                    opCode: "sub",
                                    i: sourceIndex,
                                    j: targetIndex
                                });
                                targetIndex++;
                                sourceIndex++
                            }
                    }
            }
        }
        for (; targetIndex < target.length; targetIndex++) ops.push({
            opCode: "insert",
            i: sourceIndex,
            j: targetIndex
        });
        for (; sourceIndex < source.length; sourceIndex++) ops.push({
            opCode: "delete",
            i: sourceIndex,
            j: Math.min(targetIndex, target.length - 1)
        });
        return ops
    };
    Streak.calculateSift3 = function (s1, s2) {
        if (s1 === null || s1.length === 0)
            if (s2 === null || s2.length === 0) return 0;
            else return s2.length;
        if (s2 === null || s2.length === 0) return s1.length;
        var c = 0;
        var offset1 = 0;
        var offset2 = 0;
        var lcs = 0;
        var maxOffset = 5;
        while (c + offset1 < s1.length && c + offset2 < s2.length) {
            if (s1[c + offset1] == s2[c + offset2]) lcs++;
            else {
                offset1 = offset2 = 0;
                for (var i = 0; i < maxOffset; i++) {
                    if (c +
                        i < s1.length && s1[c + i] == s2[c]) {
                        offset1 = i;
                        break
                    }
                    if (c + i < s2.length && s1[c] == s2[c + i]) {
                        offset2 = i;
                        break
                    }
                }
            }
            c++
        }
        return (s1.length + s2.length) / 2 - lcs
    };
    Streak.calculateFastLevinshteinFinal = function (source, target) {
        return Streak.calculateFastLevinshtein(source, target).length
    };
    Streak.calculateFastLevinshtein = function (source, target) {
        return Streak.calculateFastLevinshteinWithEqualsFunc(source, target, function (a, b) {
            return a === b
        })
    };
    Streak.genericEquals = function (a, b) {
        var attr;
        if (a === undefined || b === undefined && a != b) return a ==
            b;
        var seen = {};
        for (attr in a)
            if (!b.hasOwnProperty(attr) || a[attr] !== b[attr]) return false;
        for (attr in b)
            if (!a.hasOwnProperty(attr)) return false;
        return true
    };
    Streak.kmp = function (sourceStr, targetStr) {
        var source = sourceStr.split(""),
            target = targetStr.split(""),
            sourceIndex = 0,
            targetIndex = 0;
        var lookup = [-1, 0],
            position = 2,
            candidate = 0;
        while (position < target.length)
            if (target[position - 1] == target[candidate]) {
                candidate = candidate + 1;
                lookup[position] = candidate;
                position++
            } else if (candidate > 0) candidate = lookup[candidate];
        else {
            lookup[position] = 0;
            position++
        }
        while (sourceIndex + targetIndex < source.length)
            if (target[targetIndex] == source[sourceIndex + targetIndex]) {
                if (targetIndex == target.length - 1) return sourceIndex;
                targetIndex++
            } else {
                sourceIndex += targetIndex - lookup[targetIndex];
                if (lookup[targetIndex] > -1) targetIndex = lookup[targetIndex];
                else targetIndex = 0
            }
        return -1
    };
    Streak.cleanupEmailSubject = function (subject) {
        var res = subject || "";
        res = res.trim();
        if (res.substring(0, 3).match(/re:/i)) res = res.substring(3);
        else if (res.substring(0, 4).match(/fwd:/i)) res =
            res.substring(4);
        res = res.replace(/[ ]{2,}/g, " ");
        res = res.trim();
        if (res.length > 90) res = res.substring(0, 87) + "...";
        return res.toLowerCase()
    };
    Streak.Utils.stripHTMLFromString = function (html) {
        return html.replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>?/gi, "").replace(/(\s)\s+/img, "$1")
    };
    if (!JSON.compare) JSON.compare = function (obj, otherObj) {
        try {
            return JSON.stringify(obj) === JSON.stringify(otherObj)
        } catch (err) {
            return false
        }
    };
    if (!JSON.isEqual) JSON.isEqual = function (obj, otherObj) {
        return JSON.compare(obj, otherObj)
    };
    if (!JSON.parseCompare) JSON.parseCompare =
        function (obj, otherObj) {
            try {
                return JSON.compare(JSON.parse(obj), JSON.parse(otherObj))
            } catch (err) {
                return false
            }
    };
    if (!JSON.deepClone) JSON.deepClone = function (obj) {
        if (obj) return JSON.parse(JSON.stringify(obj));
        return obj
    };
    Streak.createEl = function (type, inner) {
        var d = document.createElement(type);
        if (inner) d.innerHTML = inner;
        return d
    };
    window.isNumber = function (input) {
        return input - 0 == input && input.length > 0
    };
    Streak.guid = function () {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
            var r = Math.random() *
                16 | 0,
                v = c == "x" ? r : r & 3 | 8;
            return v.toString(16)
        })
    };
    Streak.Utils.signedNumber = function (n) {
        return n > 0 ? "+" + n : n
    };
    Streak.Utils.loadScript = function (parameters) {
        var head = document.getElementsByTagName("head")[0];
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = parameters.url;
        if (parameters.callback) {
            script.onreadystatechange = parameters.callback;
            script.onload = parameters.callback
        }
        head.appendChild(script)
    }
})(window, Streak);
(function (window) {
    var StateMachine = {
        VERSION: "2.0.0",
        create: function (cfg, target) {
            var name;
            var initial = typeof cfg.initial == "string" ? {
                state: cfg.initial
            } : cfg.initial;
            var fsm = target || cfg.target || {};
            var events = cfg.events || [];
            var callbacks = cfg.callbacks || {};
            var map = {};
            var add = function (e) {
                var from = e.from instanceof Array ? e.from : [e.from];
                map[e.name] = map[e.name] || {};
                for (var n = 0; n < from.length; n++) map[e.name][from[n]] = e.to
            };
            if (initial) {
                initial.event = initial.event || "startup";
                add({
                    name: initial.event,
                    from: "none",
                    to: initial.state
                })
            }
            for (var n = 0; n < events.length; n++) add(events[n]);
            for (name in map)
                if (map.hasOwnProperty(name)) fsm[name] = StateMachine.buildEvent(name, map[name]);
            for (name in callbacks)
                if (callbacks.hasOwnProperty(name)) fsm[name] = callbacks[name];
            fsm.current = "none";
            fsm.is = function (state) {
                return this.current == state
            };
            fsm.can = function (event) {
                return !!map[event][this.current] && !this.transition
            };
            fsm.cannot = function (event) {
                return !this.can(event)
            };
            if (initial && !initial.defer) fsm[initial.event]();
            return fsm
        },
        beforeEvent: function (name,
            from, to, args) {
            var func = this["onbefore" + name];
            if (func) return func.apply(this, [name, from, to].concat(args))
        },
        afterEvent: function (name, from, to, args) {
            var func = this["onafter" + name] || this["on" + name];
            if (func) return func.apply(this, [name, from, to].concat(args))
        },
        leaveState: function (name, from, to, args) {
            var func = this["onleave" + from];
            if (func) return func.apply(this, [name, from, to].concat(args))
        },
        enterState: function (name, from, to, args) {
            var func = this["onenter" + to] || this["on" + to];
            if (func) return func.apply(this, [name,
                from, to
            ].concat(args))
        },
        changeState: function (name, from, to, args) {
            var func = this["onchangestate"];
            if (func) return func.apply(this, [name, from, to].concat(args))
        },
        buildEvent: function (name, map) {
            return function () {
                if (this.transition) {
                    console.log("event " + name + " innapropriate because previous transition did not complete");
                    return
                }
                if (this.cannot(name)) {
                    console.log("event " + name + " innapropriate in current state " + this.current);
                    return
                }
                var from = this.current;
                var to = map[from];
                var args = Array.prototype.slice.call(arguments);
                if (false === StateMachine.beforeEvent.call(this, name, from, to, args)) return;
                var self = this;
                this.transition = function () {
                    self.transition = null;
                    self.current = to;
                    StateMachine.enterState.call(self, name, from, to, args);
                    StateMachine.changeState.call(self, name, from, to, args);
                    StateMachine.afterEvent.call(self, name, from, to, args)
                };
                if (false !== StateMachine.leaveState.call(this, name, from, to, args))
                    if (this.transition) this.transition()
            }
        }
    };
    window.Streak.StateMachine = StateMachine
})(window);
(function (Streak) {
    function base64_encode(data) {
        var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
            ac = 0,
            enc = "",
            tmp_arr = [];
        if (!data) return data;
        do {
            o1 = data.charCodeAt(i++);
            o2 = data.charCodeAt(i++);
            o3 = data.charCodeAt(i++);
            bits = o1 << 16 | o2 << 8 | o3;
            h1 = bits >> 18 & 63;
            h2 = bits >> 12 & 63;
            h3 = bits >> 6 & 63;
            h4 = bits & 63;
            tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4)
        } while (i < data.length);
        enc = tmp_arr.join("");
        var r = data.length % 3;
        return (r ? enc.slice(0,
            r - 3) : enc) + "===".slice(r || 3)
    }
    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    function fast_base64_encode(data) {
        var o1, o2, o3, h1, h2, h3, h4, bits;
        var i = -1,
            enc = "";
        var bytesLeft = 0;
        if (!data) return data;
        do {
            o1 = data.charCodeAt(++i);
            o2 = data.charCodeAt(++i);
            o3 = data.charCodeAt(++i);
            bytesLeft = 0;
            if (!o3 && o3 !== 0) {
                bytesLeft = 1;
                o3 = 0
            }
            if (!o2 && o2 !== 0) {
                bytesLeft = 2;
                o2 = 0
            }
            h1 = (o1 & 252) >> 2;
            h2 = (o1 & 3) << 4 | (o2 & 240) >> 4;
            h3 = (o2 & 15) << 2 | (o3 & 192) >> 6;
            h4 = o3 & 63;
            enc += b64.charAt(h1) + b64.charAt(h2);
            if (bytesLeft < 2) enc +=
                b64.charAt(h3);
            if (bytesLeft < 1) enc += b64.charAt(h4)
        } while (i < data.length - 1);
        if (bytesLeft === 0) return enc;
        if (bytesLeft === 1) return enc + "=";
        if (bytesLeft === 2) return enc + "=="
    }
    Streak.encodeStringAsBase64 = function (str) {
        return base64_encode(str)
    };
    Streak.fastEncodeStringAsBase64 = function (str) {
        return fast_base64_encode(str)
    }
})(Streak);
(function (Streak) {
    var PROMISE_STATE = {
        FULFILLED: "FULFILLED",
        REJECTED: "REJECTED",
        PENDING: "PENDING"
    };
    var Promise = function (callback) {
        this._successCallbacks = [];
        this._failureCallbacks = [];
        this._doneCallbacks = [];
        this._state = PROMISE_STATE.PENDING;
        callback(this._resolve.bind(this), this._reject.bind(this))
    };
    Streak._.extend(Promise.prototype, {
        _resolve: function () {
            this._state = PROMISE_STATE.FULFILLED;
            this._notify(this._successCallbacks);
            this._notify(this._doneCallbacks)
        },
        _reject: function () {
            this._state = PROMISE_STATE.REJECTED;
            this._notify(this._failureCallbacks);
            this._notify(this._doneCallbacks)
        },
        _notify: function (callbackArray) {
            for (var ii = 0; ii < callbackArray.length; ii++) {
                var callback = callbackArray[ii];
                if (callback) callback()
            }
        },
        then: function (successCallback, failureCallback) {
            if (this._state === PROMISE_STATE.PENDING) {
                if (successCallback) this._successCallbacks.push(successCallback);
                if (failureCallback) this._failureCallbacks.push(failureCallback);
                return
            }
            if (this._state === PROMISE_STATE.FULFILLED)
                if (successCallback) successCallback();
            if (this._state === PROMISE_STATE.REJECTED)
                if (failureCallback) failureCallback()
        },
        done: function (callback) {
            if (this._state === PROMISE_STATE.PENDING) {
                this._doneCallbacks.push(callback);
                return
            }
            callback()
        }
    });
    Promise.whenAllDone = function (promiseArray, callback) {
        var after = Streak._.after(promiseArray.length, callback);
        for (var ii = 0; ii < promiseArray.length; ii++) promiseArray[ii].done(after)
    };
    Streak.Promise = Promise
})(Streak);
(function (Streak) {
    var _ = Streak._;
    var StreakClass = function () {};
    _.extend(StreakClass.prototype, {
        mixin: function (superclass) {
            var mixinFunctions = _.rest(arguments);
            for (var i = 0; i < mixinFunctions.length; i++) {
                var mixinFunction = mixinFunctions[i];
                var mixin = mixinFunction(superclass);
                mixin.superclass = superclass;
                superclass = this.subclass(mixin)
            }
            return superclass
        },
        subclass: function (parameters) {
            var superclass = parameters.superclass;
            if (parameters._memberVariables) {
                parameters.memberVariables = parameters._memberVariables;
                delete parameters._memberVariables
            }
            var memberVariables = parameters.memberVariables || [];
            this._validateMemberVariables(memberVariables);
            var subclassConstructor;
            if (parameters.className) {
                eval("var " + parameters.className + " = function(){superclass.apply(this, _.toArray(arguments));};");
                eval("subclassConstructor =" + parameters.className)
            } else subclassConstructor = function () {
                superclass.apply(this, _.toArray(arguments))
            };
            subclassConstructor.prototype = Object.create(superclass.prototype);
            _.extend(subclassConstructor.prototype,
                this._extractSubclassProperties(parameters));
            if (memberVariables.length) subclassConstructor.prototype._streak__memberVariables = memberVariables;
            return subclassConstructor
        },
        _validateMemberVariables: function (memberVariables) {
            for (var i = 0; i < memberVariables.length; i++) {
                var memberVariable = memberVariables[i];
                if (memberVariable.name === undefined) throw new Error("name is a required parameter to memberVariables");
                if (memberVariable.destroy === undefined) throw new Error("destroy is a required parameter to memberVariables");
                for (property in memberVariable)
                    if (["name", "destroy", "get", "set", "defaultValue"].indexOf(property) == -1) throw new Error(property + " is not a valid parameter to memberVariables");
            }
        },
        _extractSubclassProperties: function (parameters) {
            var subclassProperties = _.omit(parameters, "superclass", "memberVariables");
            this._createGettersAndSetters(subclassProperties, parameters);
            return subclassProperties
        },
        _createGettersAndSetters: function (subclassProperties, parameters) {
            var self = this;
            var memberVariables = parameters.memberVariables;
            if (memberVariables)
                for (var i = 0; i < memberVariables.length; i++) {
                    var memberVariable = memberVariables[i];
                    var name = memberVariable.name;
                    if (memberVariable.get) this._makeGetterFunction(subclassProperties, name);
                    if (memberVariable.set) this._makeSetterFunction(subclassProperties, name)
                }
        },
        _makeGetterFunction: function (subclassProperties, name) {
            var getter = this._getterName(name);
            if (subclassProperties[getter]) return;
            subclassProperties[getter] = function () {
                return this[name]
            }
        },
        _getterName: function (variableName) {
            return "get" +
                variableName.charAt(1).toUpperCase() + variableName.slice(2)
        },
        _makeSetterFunction: function (subclassProperties, name) {
            var setter = this._setterName(name);
            if (subclassProperties[setter]) return;
            subclassProperties[setter] = function (value) {
                this[name] = value
            }
        },
        _setterName: function (variableName) {
            return "set" + variableName.charAt(1).toUpperCase() + variableName.slice(2)
        }
    });
    Streak.Class = new StreakClass
})(Streak);
(function (Streak) {
    var _ = Streak._;
    var StreakObject = function () {
        this._nullifyMemberVariables();
        this._initializeDefaultValues();
        this._initialize.apply(this, _.toArray(arguments))
    };
    _.extend(StreakObject.prototype, {
        memberVariables: [],
        _nullifyMemberVariables: function (doDestroy) {
            var object = this;
            var proto;
            while (proto = Object.getPrototypeOf(object)) {
                object = proto;
                if (object._streak__memberVariables)
                    for (var i = 0; i < object._streak__memberVariables.length; i++) {
                        var memberVariable = object._streak__memberVariables[i];
                        if (doDestroy &&
                            memberVariable.destroy) {
                            var value = this[memberVariable.name];
                            if (value)
                                if (_.isArray(value)) {
                                    for (var c = 0; c < value.length; c++) {
                                        if (value[c].destroy) value[c].destroy();
                                        if (value[c].remove) value[c].remove()
                                    }
                                    value.length = 0
                                } else if (value.destroy) value.destroy();
                            else if (value.remove) value.remove();
                            else if (_.isObject(value))
                                for (key in value)
                                    if (value[key])
                                        if (value[key].destroy) value[key].destroy();
                                        else if (value[key].remove) try {
                                value[key].remove()
                            } catch (err) {}
                        }
                        this[memberVariable.name] = null
                    }
            }
        },
        _initializeDefaultValues: function () {
            var object =
                this;
            var proto;
            while (proto = Object.getPrototypeOf(object)) {
                object = proto;
                if (object._streak__memberVariables)
                    for (var i = 0; i < object._streak__memberVariables.length; i++) {
                        var memberVariable = object._streak__memberVariables[i];
                        if (memberVariable.defaultValue !== undefined) this[memberVariable.name] = memberVariable.defaultValue
                    }
            }
        },
        _initialize: function () {},
        destroy: function () {
            this._nullifyMemberVariables(true)
        }
    });
    Streak.Object = StreakObject
})(Streak);
(function (Streak) {
    var Library = Streak.Class.subclass({
        superclass: Streak.Object,
        set: function (path, object) {
            var parts = path.split(".");
            var previousObject = null;
            var currentObject = Streak;
            for (var ii = 0; ii < parts.length - 1; ii++) {
                previousObject = currentObject;
                currentObject = currentObject[parts[ii]];
                if (!currentObject) {
                    currentObject = {};
                    previousObject[parts[ii]] = currentObject
                }
            }
            currentObject[parts[parts.length - 1]] = object
        },
        get: function (path) {
            var parts = path.split(".");
            var currentObject = Streak;
            for (var ii = 0; ii < parts.length; ii++) {
                currentObject =
                    currentObject[parts[ii]];
                if (!currentObject) return null
            }
            return currentObject
        },
        getInstance: function (path) {
            var func = this.get(path);
            return new func
        }
    });
    Streak.Library = new Library
})(Streak);
(function (Streak) {
    var NotificationCenter = function () {
        this._mapOfNotificationLists = {}
    };
    Streak._.extend(NotificationCenter.prototype, {
        addFunction: function (functionParameters) {
            var notificationKey = this._getNotificationKey(functionParameters);
            if (!this._mapOfNotificationLists[notificationKey]) this._mapOfNotificationLists[notificationKey] = [];
            this._mapOfNotificationLists[notificationKey].push(functionParameters);
            return this._generateUnbindFunction(functionParameters)
        },
        notify: function (notificationParameters) {
            if (Streak._.isString(notificationParameters)) notificationParameters = {
                eventName: notificationParameters
            };
            var functionParameterList = this._getNotificationList(notificationParameters);
            if (!functionParameterList) return;
            for (var ii = 0; ii < functionParameterList.length; ii++) {
                var functionParameters = functionParameterList[ii];
                if (this._matchesParameterFilters(functionParameters.filterParameters, notificationParameters)) this._callFunction(functionParameters, notificationParameters)
            }
        },
        _getNotificationList: function (notificationParameters) {
            var notificationKey = this._getNotificationKey(notificationParameters);
            return this._mapOfNotificationLists[notificationParameters.eventName]
        },
        _getNotificationKey: function (functionParameters) {
            return functionParameters.eventName
        },
        _generateUnbindFunction: function (functionParameters) {
            var functionParameterList = this._getNotificationList(functionParameters);
            return function () {
                functionParameterList.removeVal(functionParameters)
            }
        },
        _matchesParameterFilters: function (filterParameters, notificationParameters) {
            if (!filterParameters) return true;
            for (var parameter in filterParameters) {
                var filterValue =
                    filterParameters[parameter];
                var notificationValue = notificationParameters[parameter];
                if (filterValue !== notificationValue) return false
            }
            return true
        },
        _callFunction: function (functionParameters, notificationParameters) {
            functionParameters.functionToCall.call(functionParameters.functionContext, notificationParameters)
        }
    });
    Streak.NotificationCenter = new NotificationCenter
})(Streak);
(function (Streak) {
    var _ = Streak._;
    var ViewControllerBase = function () {
        this._delegates = []
    };
    _.extend(ViewControllerBase.prototype, {
        addDelegate: function (delegate) {
            this._delegates.push(delegate)
        },
        removeAllDelegates: function () {
            this._delegates = []
        },
        _callDelegateFunction: function (functionName) {
            var args = _.rest(_.toArray(arguments));
            for (var ii = 0; ii < this._delegates.length; ii++)
                if (this._delegates[ii][functionName]) this._delegates[ii][functionName].apply(this._delegates[ii], args)
        },
        destroy: function () {
            this._delegates.length =
                0
        }
    });
    Streak.ViewControllerBase = ViewControllerBase
})(Streak);
(function ($) {
    var renderLimit = 100;
    $.fn.autoComplete = function (val) {
        return this.each(function () {
            var self = this;
            var input = $(this);
            var shadowInput = $(document.createElement("div"));
            shadowInput[0].setAttribute("class", "shadowInput");
            var shadowInputInner = $(document.createElement("div"));
            shadowInputInner[0].setAttribute("class", "shadowInputInner");
            var list = [];
            var potentials = [];
            var suggestions = $(document.createElement("ul"));
            suggestions[0].setAttribute("class", "SK AX bbAutocompleteList");
            var renderTimeout = null;
            var selectedClass = "J-N-JT";
            var savedText;
            var text;
            input.after(shadowInput);
            this.setAutoCompleteList = function (aList) {
                list = aList || [];
                suggestions.empty();
                shadowInputInner[0].innerHTML = "";
                suggestions.detach()
            };
            this.onscroll = function () {
                if (suggestions.is(":FastVisible")) setScrollPosition()
            };
            input.bind({
                "keydown": function (e) {
                    if (e.which === 16) return;
                    if (!text) text = "";
                    if (Streak.jwerty.is("right", e)) {
                        if (isCaretAtEnd() && suggestions.is(":FastVisible") && suggestions.find("li." + selectedClass).length === 0) {
                            var current =
                                getValue();
                            var top = getFirstItemData().value;
                            if (current !== top) {
                                setValue(getFirstItemData().value);
                                input.caret().goToEnd();
                                e.preventDefault();
                                e.stopPropagation();
                                e.stopImmediatePropagation();
                                savedText = getValue()
                            }
                            return
                        }
                    } else if (Streak.jwerty.is("up", e)) {
                        if (suggestions.is(":FastVisible")) keyEvent("prev", e)
                    } else if (Streak.jwerty.is("down", e))
                        if (suggestions.is(":FastVisible")) keyEvent("next", e);
                        else {
                            savedText = getValue();
                            showSuggestions()
                        } else if (Streak.jwerty.is("tab", e) || Streak.jwerty.is("shift+tab",
                        e));
                    else if (Streak.jwerty.is("escape", e))
                        if (suggestions.is(":FastVisible")) {
                            setValue(savedText);
                            hideSuggestions();
                            e.preventDefault();
                            e.stopPropagation()
                        } else input.trigger("escapePressed");
                        else if (Streak.jwerty.is("backspace/delete", e));
                },
                "input": function (e) {
                    text = getValue();
                    savedText = text;
                    if (text.length === 0) hideSuggestions();
                    else renderSuggestion(text.length)
                },
                "keyup": function (e) {
                    if (Streak.jwerty.is("escape/shift/enter/ctrl/cmd/alt/meta", e)) {
                        setListPosition();
                        return
                    }
                    if (Streak.jwerty.is("up/down",
                        e))
                        if (suggestions.is(":FastVisible")) {
                            e.preventDefault();
                            e.stopPropagation();
                            return
                        } else if (Streak.jwerty.is("down", e)) showSuggestions()
                },
                "click": function (e) {
                    if (!suggestions.is(":FastVisible")) showSuggestions()
                },
                "focus": function (e) {
                    input.after(shadowInput)
                },
                "detach": function (e) {
                    hideSuggestions()
                }
            });
            input[0].addEventListener("keydown", function (e) {
                if (e.which === 13 && !e.ctrlKey && !e.metaKey) {
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    e.preventDefault();
                    input.focus();
                    input.caret().goToEnd();
                    hideSuggestions();
                    input.trigger("enterPressed")
                }
            }, true);

            function showSuggestions() {
                text = getValue();
                var potentials = getPotentials(getValue());
                if (potentials.length > 0) {
                    renderSuggestionList(potentials);
                    setListPosition();
                    setScrollPosition()
                }
            }

            function renderSuggestion(length) {
                clearTimeout(renderTimeout);
                renderTimeout = setTimeout(function () {
                    potentials = getPotentials(text);
                    if (potentials.length === 0) {
                        hideSuggestions();
                        return
                    }
                    renderSuggestionList(potentials);
                    updateShadowSelection();
                    setListPosition()
                }, 100);
                setListPosition()
            }

            function getPotentials(text) {
                var normalizedText =
                    text.toLowerCase().removeWhitespace();
                return list.filter(function (item) {
                    return item.normalized.indexOf(normalizedText) === 0 && item.normalized.length > 0
                })
            }

            function isCaretAtEnd() {
                return input.caret().start >= getValue().length
            }

            function renderSuggestionList(potentials) {
                suggestions.empty();
                suggestions[0].style.display = "";
                for (var ii = 0; ii < Math.min(potentials.length, renderLimit); ii++) {
                    var li = renderListItem(potentials[ii]);
                    if (ii === 0) li.addClass("firstItem");
                    else if (ii === potentials.length - 1) li.addClass("lastItem");
                    suggestions.append(li)
                }
                shadowInput.after(suggestions)
            }

            function setListPosition() {
                var height = input.parent().height() + 1;
                var top = parseFloat(shadowInput.css("top"));
                var left = parseFloat(shadowInput.css("left"));
                height -= top;
                suggestions[0].style.top = height + "px";
                suggestions[0].style.width = input.parent().width() - 6 - left + "px";
                shadowInput[0].style.height = height - 1 + "px"
            }

            function setScrollPosition() {
                var newTop = input[0].scrollTop;
                shadowInputInner[0].style.top = -1 * newTop + "px"
            }

            function updateShadowSelection() {
                shadowInputInner.html(getFirstItemData().value);
                shadowInput.show()
            }

            function hideSuggestions() {
                suggestions.empty();
                suggestions.detach();
                shadowInputInner.empty()
            }

            function renderListItem(item) {
                var li = $(document.createElement("li"));
                li.addClass("J-N");
                li[0].innerHTML = item.display.escapeHTML();
                $(li).data("data", item);
                li[0].setAttribute("title", item.display);
                li.captureClick(function (e) {
                    select();
                    input.trigger("delayedSave")
                }).hover(function (e) {
                    $(this).addClass(selectedClass)
                }, function (e) {
                    $(this).removeClass(selectedClass)
                });
                return li
            }

            function getItemIndex(lis,
                li) {
                for (var i = 0; i < lis.length; i++)
                    if (lis[i] === li[0]) return i;
                return -1
            }

            function keyEvent(action, event) {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                var next;
                if (suggestions.find("li." + selectedClass).length > 0) {
                    var sel = suggestions.find("li." + selectedClass);
                    var lis = suggestions.find("li");
                    var currIndex = getItemIndex(lis, sel);
                    var nextIndex = -1;
                    var nextIndex = action == "next" ? currIndex + 1 : currIndex - 1;
                    sel.removeClass(selectedClass);
                    if (nextIndex === -1 || nextIndex > suggestions.find("li").length -
                        1) {
                        setValue(savedText);
                        shadowInput.show();
                        input.caret().goToEnd()
                    } else {
                        next = $(lis[nextIndex]);
                        next.addClass(selectedClass)
                    }
                } else {
                    if (action === "next") suggestions.find("li.firstItem").addClass(selectedClass);
                    else suggestions.find("li.lastItem").addClass(selectedClass);
                    next = suggestions.find("li." + selectedClass)
                } if (next) {
                    shadowInputInner[0].innerHTML = "";
                    setValue(next.data("data").value);
                    input.caret().goToEnd();
                    next.scrollintoview({
                        duration: 50
                    })
                }
                setListPosition()
            }

            function getFirstItemData() {
                var firstItem =
                    suggestions.find("li.firstItem");
                return firstItem.data("data")
            }

            function select() {
                suggestions.hide();
                shadowInput.hide();
                var selected = suggestions.find("li." + selectedClass);
                var d = selected.data("data");
                setValue(d.value);
                input.caret().goToEnd();
                input.trigger("autoCompleteSet")
            }

            function getValue() {
                return input.plainText()
            }

            function setValue(newVal) {
                if (!newVal) newVal = "";
                input[0].innerHTML = newVal
            }
        })
    }
})(Streak.jQuery);
(function ($) {
    $.fn.autoGrowInput = function (o) {
        return this.each(function () {
            var input = $(this),
                check = function () {
                    input.attr("size", Math.max(input.val().length, 1))
                };
            $(this).bind("keyup keydown blur update change", check)
        });
        return this
    }
})(Streak.jQuery);
(function ($) {
    var cachedData = [];
    var cachedQueries = [];
    var queryCache = [];
    var queryRank = {};
    var selectedClass = "Jd-Je";
    var CONSTANTS = {
        maxListItems: 25
    };
    $.fn.AutoSuggest = function (config) {
        var defaults = {
            data: null,
            wrapperCss: {},
            minChars: 1,
            dataFunc: $.noop,
            convertFunc: $.noop,
            stringDataFunc: $.noop,
            selectFunc: $.noop,
            compareFunc: function (query, dataItem) {},
            noResultsFoundText: null,
            loadingResultsText: null,
            getExcludedIDsFunc: $.noop,
            idProperty: "email",
            onlyValidEmailAddress: false,
            isRightAligned: true
        };
        var currentDataInList = [];
        var options = {};
        $.extend(options, defaults, config);
        return this.each(function () {
            var self = this;
            var input = $(this);
            var parent = input.parent();
            var suggestions = $('<div class="ah aiv aJS ausu-suggestionsBox"></div>');
            var overflow = $('<div class="overflowContainer"></div>');
            var loadingHTML = $('<div class="ausu-loadingIndicator" style="">Loading More...</div>');
            var existingListUL = $('<ul class="existingList"></ul>');
            var list = $("<ul></ul>");
            var timer;
            var searchVal = input.val();
            var renderedExistingIDs = [];
            mergeExisting(cachedData);
            overflow.appendTo(suggestions);
            loadingHTML.appendTo(suggestions);
            existingListUL.appendTo(overflow);
            list.appendTo(overflow);
            input.after(suggestions);
            hideLoading();
            input.autoGrowInput();
            input.on("keydown", function (event) {
                if (event.which === 40 || event.which === 38) {
                    if (Streak.jwerty.is("down", event))
                        if (searchVal.length === 0 && !existingListUL.is(":FastVisible")) {
                            list.empty();
                            renderExistingList();
                            return false
                        } else if (searchVal.length > 0 && !suggestions.is(":FastVisible")) {
                        renderExistingList(searchVal);
                        cacheSuggest(searchVal);
                        addIndexClasses();
                        event.preventDefault();
                        event.stopPropagation();
                        event.stopImmediatePropagation();
                        return false
                    }
                    if (suggestions.is(":FastVisible(noCompute)"))
                        if (event.which === 40) {
                            keyEvent("next");
                            event.preventDefault();
                            event.stopPropagation();
                            event.stopImmediatePropagation();
                            return false
                        } else {
                            keyEvent("prev");
                            event.preventDefault();
                            event.stopPropagation();
                            event.stopImmediatePropagation();
                            return false
                        }
                }
                switch (event.which) {
                case 9:
                    if (event.shiftKey) input.trigger("shiftTabPressed");
                    else {
                        if (suggestions.find("li." +
                            selectedClass).filter(":FastVisible").length > 0 || input.val().length > 0) {
                            select();
                            event.preventDefault();
                            event.stopPropagation();
                            event.stopImmediatePropagation();
                            return false
                        }
                        input.trigger("tabPressed")
                    }
                    event.preventDefault();
                    break;
                case 13:
                    if (suggestions.find("li." + selectedClass).filter(":FastVisible").length > 0 || input.val().length > 0) select();
                    else {
                        input.trigger("enterPressed");
                        event.preventDefault();
                        event.stopPropagation()
                    }
                    return false;
                    break;
                case 27:
                    event.preventDefault();
                    event.stopPropagation();
                    if (suggestions.is(":FastVisible")) suggestions.hide();
                    else input.trigger("escapePressed");
                    break
                }
            });
            input[0].addEventListener("keyup", function (e) {
                if (event.keyCode == 13) return false;
                else if (e.which === 8 && input.val().length === 0) {
                    searchVal = "";
                    suggestions.hide();
                    hideLoading()
                } else inputChanged(input.val())
            });
            input.on("bbSelect", function (event) {
                if (input.val())
                    if (input.val().isValidEmail()) select()
            });
            input.on("bbUnselect", function (event) {
                suggestions.find("li." + selectedClass).removeClass(selectedClass)
            });
            input.on("bbFocus", function (event) {
                suggestions.hide();
                list.empty()
            });
            input.on("click", function (event) {
                if (searchVal.length === 0 && !existingListUL.is(":FastVisible")) {
                    list.empty();
                    renderExistingList()
                } else if (searchVal.length > 0 && !suggestions.is(":FastVisible")) {
                    renderExistingList(searchVal);
                    cacheSuggest(searchVal);
                    addIndexClasses()
                }
            });
            var suggestTimer = null;

            function showLoading() {
                showSuggestions();
                suggestions.addClass("ausu-loading")
            }

            function hideLoading() {
                suggestions.removeClass("ausu-loading")
            }

            function inputChanged(newVal) {
                newVal = (newVal || "").toLowerCase();
                mostRecentQuery =
                    newVal;
                if (searchVal !== newVal) {
                    searchVal = newVal;
                    clearTimeout(timer);
                    showLoading();
                    renderExistingList(searchVal);
                    var isCacheExact = cacheSuggest(newVal);
                    timer = setTimeout(function () {
                        suggest(newVal)
                    }, isCacheExact ? 2E3 : 200)
                }
            }

            function suggest(dataInput) {
                if (dataInput !== searchVal || dataInput <= options.minChars) {
                    hideLoading();
                    return
                }
                if (Streak._.isNotReal(queryRank[dataInput])) queryRank[dataInput] = 0;
                queryRank[dataInput]++;
                options.dataFunc(dataInput, function (data) {
                    if (dataInput !== searchVal) return;
                    if (data) {
                        updateCache(dataInput,
                            data);
                        renderList(dataInput, queryCache[cachedQueries.indexOf(dataInput)])
                    } else if (suggestions.find("li").length === 0) suggestions.hide();
                    hideLoading()
                })
            }

            function updateCache(query, data) {
                if (Streak._.isNotReal(data) || data.length === 0) return;
                var index = cachedQueries.indexOf(query);
                if (index > -1) queryCache[index] = Streak._.uniqMerge(data.concat(queryCache[index]), function (contact) {
                    return contact.email
                });
                else {
                    index = cachedQueries.length;
                    cachedQueries.push(query);
                    queryCache[index] = data
                }
                mergeCache(data)
            }

            function mergeCache(data) {
                cachedData =
                    cachedData.concat(data);
                cachedData = Streak._.uniqMerge(cachedData, function (contact) {
                    return contact[options.idProperty]
                });
                mergeExisting(data)
            }

            function mergeExisting(data) {
                var existingList = input.data("existingList");
                if (existingList && existingList.length > 0)
                    for (var ii = 0; ii < existingList.length; ii++)
                        for (var jj = 0; jj < data.length; jj++)
                            if (existingList[ii].value[options.idProperty] === data[jj][options.idProperty]) Streak._.extend(existingList[ii].value, data[jj])
            }

            function cacheSuggest(dataInput) {
                var cachedList;
                if (dataInput !==
                    mostRecentQuery) return;
                var isExactMatch = false;
                var cacheIndex = cachedQueries[dataInput];
                if (cacheIndex > -1) {
                    isExactMatch = true;
                    cachedList = queryCache[cacheIndex]
                } else {
                    var tempQuery = dataInput;
                    for (var ii = 1; ii < dataInput.length; ii++) {
                        var filteredCache = getFilteredCachedList(tempQuery);
                        if (filteredCache.length > 0) {
                            var index = cachedQueries.indexOf(filteredCache[0]);
                            cachedList = queryCache[index];
                            break
                        } else tempQuery = tempQuery.substring(0, tempQuery.length - 1)
                    }
                }
                var filtered;
                if (cachedList) filtered = Streak._.filter(cachedList,
                    function (contact) {
                        return options.compareFunc(dataInput, contact)
                    });
                if (filtered && filtered.length > 0) {
                    showSuggestions();
                    renderList(dataInput, filtered)
                } else list.empty();
                return isExactMatch
            }

            function getFilteredCachedList(dataInput) {
                return Streak._(cachedQueries).chain().filter(function (query) {
                    return query.toLowerCase().indexOf(dataInput.toLowerCase()) === 0
                }).sortBy(function (query) {
                    return -1 * queryRank[query]
                }).sortBy(function (query) {
                    return query.length
                }).value()
            }

            function renderExistingList(query) {
                var existingList =
                    input.data("existingList");
                if (existingList && existingList.length > 0) {
                    renderedExistingIDs.length = 0;
                    existingListUL.empty();
                    var excludedIds = options.getExcludedIDsFunc();
                    var filteredExisting = existingList.filter(function (item) {
                        return options.compareFunc(query || "", item.value) && excludedIds.indexOf(getIDValue(item.value)) === -1
                    });
                    if (filteredExisting.length > 0) {
                        for (var i = 0; i < filteredExisting.length; i++) {
                            var li = renderListItem(query, filteredExisting[i].value);
                            existingListUL.append(li);
                            renderedExistingIDs.push(getIDValue(filteredExisting[i].value))
                        }
                        existingListUL.show()
                    } else existingListUL.hide();
                    showSuggestions()
                }
                addIndexClasses()
            }
            var imageRenderTimer;
            var imageRenderList = [];

            function renderList(query, data) {
                imageRenderList.length = 0;
                if (imageRenderTimer) imageRenderTimer.stop();
                suggestions.show();
                list.empty();
                if (data && data.length > 0) {
                    list.find(".ausu-no-results").remove();
                    var excludedIds = options.getExcludedIDsFunc() || [];
                    var listLength = Math.min(data.length, CONSTANTS.maxListItems);
                    for (var i = 0; i < listLength; i++) {
                        if (excludedIds.indexOf(getIDValue(data[i])) > -1 || renderedExistingIDs.indexOf(getIDValue(data[i])) > -1) continue;
                        var imageUrl = data[i].imageUrl;
                        data[i].imageUrl = null;
                        var li = renderListItem(query, data[i]);
                        list.append(li);
                        imageRenderList.push({
                            li: li,
                            imageUrl: imageUrl
                        })
                    }
                    imageRenderTimer = Streak._.repeatEvery(function () {
                        if (imageRenderList.length > 0) {
                            var next = imageRenderList.pop();
                            next.li.find(".ak")[0].style.backgroundImage = "url(" + next.imageUrl + ")"
                        } else imageRenderTimer.stop()
                    }, 300)
                }
                if (renderedExistingIDs.length === 0 && list.find("li").length === 0) list.html('<li class="ausu-no-results">' + options.noResultsFoundText +
                    "</li>");
                resetPosition();
                addIndexClasses()
            }

            function addIndexClasses() {
                suggestions.find(".firstItem").removeClass("firstItem");
                suggestions.find(".lastItem").removeClass("lastItem");
                if (existingListUL.find("li").length > 0) {
                    existingListUL.find("li:first").addClass("firstItem");
                    if (list.find("li.personPickerSuggestion").length === 0) existingListUL.find("list:last").addClass("lastItem");
                    else list.find("li.personPickerSuggestion:last").addClass("lastItem")
                } else if (list.find("li.personPickerSuggestion").length >
                    0) {
                    list.find("li:first").addClass("firstItem");
                    list.find("li:last").addClass("lastItem")
                }
                suggestions.find("." + selectedClass).removeClass(selectedClass);
                suggestions.find(".firstItem").addClass(selectedClass)
            }

            function showSuggestions() {
                suggestions.show();
                resetPosition()
            }

            function resetPosition() {
                suggestions[0].style.top = "";
                suggestions[0].style.left = "";
                suggestions.containByScreen(input, {
                    isRightAligned: options.isRightAligned
                })
            }

            function renderListItem(query, item) {
                var li = options.convertFunc(query, item);
                $(li).data("data", item);
                li[0].addEventListener("click", select, true);
                li.hover(function (e) {
                    suggestions.find("li." + selectedClass).removeClass(selectedClass);
                    $(this).addClass(selectedClass)
                }, function (e) {
                    $(this).removeClass(selectedClass)
                });
                return li
            }

            function getItemIndex(lis, li) {
                for (var i = 0; i < lis.length; i++)
                    if (lis[i] === li[0]) return i;
                return -1
            }

            function keyEvent(action) {
                if (suggestions.find("li").length < 2) return;
                if (suggestions.find("li." + selectedClass).length > 0) {
                    var sel = suggestions.find("li." + selectedClass);
                    var lis = suggestions.find("li.personPickerSuggestion");
                    var currIndex = getItemIndex(lis, sel);
                    var nextIndex = -1;
                    var nextIndex = action == "next" ? currIndex + 1 : currIndex - 1;
                    if (nextIndex === -1) next = $(lis[lis.length - 1]);
                    else if (nextIndex > suggestions.find("li").length - 1) next = $(lis[0]);
                    else next = $(lis[nextIndex]);
                    next.addClass(selectedClass);
                    sel.removeClass(selectedClass);
                    next.scrollintoview({
                        duration: 50
                    })
                } else if (action === "next") suggestions.find("li.firstItem").addClass(selectedClass);
                else suggestions.find("li.lastItem").addClass(selectedClass)
            }

            function select() {
                var useSuggestion = suggestions.is(":FastVisible") && suggestions.find("li." + selectedClass).length > 0;
                searchVal = "";
                var selected = suggestions.find("li." + selectedClass);
                var d = selected.data("data");
                if (!useSuggestion) d = options.stringDataFunc(input.val());
                input.val("");
                input.focus();
                if (d.email || !options.onlyValidEmailAddress) options.selectFunc(d);
                mostRecentQuery = null;
                list.empty();
                suggestions.hide()
            }

            function getIDValue(data) {
                if (options.onlyValidEmailAddress) return data[options.idProperty];
                else return data[options.idProperty] ||
                    data.displayName
            }
        })
    }
})(Streak.jQuery);
(function ($, window) {
    "$:nomunge";
    var undefined, aps = Array.prototype.slice,
        decode = decodeURIComponent,
        jq_param = $.param,
        jq_param_sorted, jq_param_fragment, jq_deparam, jq_deparam_fragment, jq_bbq = $.bbq = $.bbq || {}, jq_bbq_pushState, jq_bbq_getState, jq_elemUrlAttr, special = $.event.special,
        str_hashchange = "hashchange",
        str_querystring = "querystring",
        str_fragment = "fragment",
        str_elemUrlAttr = "elemUrlAttr",
        str_href = "href",
        str_src = "src",
        re_params_querystring = /^.*\?|#.*$/g,
        re_params_fragment, re_fragment, re_no_escape, ajax_crawlable,
        fragment_prefix, elemUrlAttr_cache = {};

    function is_string(arg) {
        return typeof arg === "string"
    }

    function curry(func) {
        var args = aps.call(arguments, 1);
        return function () {
            return func.apply(this, args.concat(aps.call(arguments)))
        }
    }

    function get_fragment(url) {
        return url.replace(re_fragment, "$2")
    }

    function get_querystring(url) {
        return url.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/, "$1")
    }

    function jq_param_sub(is_fragment, get_func, url, params, merge_mode) {
        var result, qs, matches, url_params, hash;
        if (params !== undefined) {
            matches =
                url.match(is_fragment ? re_fragment : /^([^#?]*)\??([^#]*)(#?.*)/);
            hash = matches[3] || "";
            if (merge_mode === 2 && is_string(params)) qs = params.replace(is_fragment ? re_params_fragment : re_params_querystring, "");
            else {
                url_params = jq_deparam(matches[2]);
                params = is_string(params) ? jq_deparam[is_fragment ? str_fragment : str_querystring](params) : params;
                qs = merge_mode === 2 ? params : merge_mode === 1 ? $.extend({}, params, url_params) : $.extend({}, url_params, params);
                qs = jq_param_sorted(qs);
                if (is_fragment) qs = qs.replace(re_no_escape, decode)
            }
            result =
                matches[1] + (is_fragment ? fragment_prefix : qs || !matches[1] ? "?" : "") + qs + hash
        } else result = get_func(url !== undefined ? url : location.href);
        return result
    }
    jq_param[str_querystring] = curry(jq_param_sub, 0, get_querystring);
    jq_param[str_fragment] = jq_param_fragment = curry(jq_param_sub, 1, get_fragment);
    jq_param.sorted = jq_param_sorted = function (a, traditional) {
        var arr = [],
            obj = {};
        $.each(jq_param(a, traditional).split("&"), function (i, v) {
            var key = v.replace(/(?:%5B|=).*$/, ""),
                key_obj = obj[key];
            if (!key_obj) {
                key_obj = obj[key] = [];
                arr.push(key)
            }
            key_obj.push(v)
        });
        return $.map(arr.sort(), function (v) {
            return obj[v]
        }).join("&")
    };
    jq_param_fragment.noEscape = function (chars) {
        chars = chars || "";
        var arr = $.map(chars.split(""), encodeURIComponent);
        re_no_escape = new RegExp(arr.join("|"), "g")
    };
    jq_param_fragment.noEscape(",/");
    jq_param_fragment.ajaxCrawlable = function (state) {
        if (state !== undefined) {
            if (state) {
                re_params_fragment = /^.*(?:#!|#)/;
                re_fragment = /^([^#]*)(?:#!|#)?(.*)$/;
                fragment_prefix = "#!"
            } else {
                re_params_fragment = /^.*#/;
                re_fragment = /^([^#]*)#?(.*)$/;
                fragment_prefix = "#"
            }
            ajax_crawlable = !! state
        }
        return ajax_crawlable
    };
    jq_param_fragment.ajaxCrawlable(0);
    $.deparam = jq_deparam = function (params, coerce) {
        var obj = {}, coerce_types = {
                "true": !0,
                "false": !1,
                "null": null
            };
        $.each(params.replace(/\+/g, " ").split("&"), function (j, v) {
            var param = v.split("="),
                key = decode(param[0]),
                val, cur = obj,
                i = 0,
                keys = key.split("]["),
                keys_last = keys.length - 1;
            if (/\[/.test(keys[0]) && /\]$/.test(keys[keys_last])) {
                keys[keys_last] = keys[keys_last].replace(/\]$/, "");
                keys = keys.shift().split("[").concat(keys);
                keys_last = keys.length - 1
            } else keys_last =
                0; if (param.length === 2) {
                val = decode(param[1]);
                if (coerce) val = val && !isNaN(val) ? +val : val === "undefined" ? undefined : coerce_types[val] !== undefined ? coerce_types[val] : val;
                if (keys_last)
                    for (; i <= keys_last; i++) {
                        key = keys[i] === "" ? cur.length : keys[i];
                        cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val
                    } else if ($.isArray(obj[key])) obj[key].push(val);
                    else if (obj[key] !== undefined) obj[key] = [obj[key], val];
                else obj[key] = val
            } else if (key) obj[key] = coerce ? undefined : ""
        });
        return obj
    };

    function jq_deparam_sub(is_fragment,
        url_or_params, coerce) {
        if (url_or_params === undefined || typeof url_or_params === "boolean") {
            coerce = url_or_params;
            url_or_params = jq_param[is_fragment ? str_fragment : str_querystring]()
        } else url_or_params = is_string(url_or_params) ? url_or_params.replace(is_fragment ? re_params_fragment : re_params_querystring, "") : url_or_params;
        return jq_deparam(url_or_params, coerce)
    }
    jq_deparam[str_querystring] = curry(jq_deparam_sub, 0);
    jq_deparam[str_fragment] = jq_deparam_fragment = curry(jq_deparam_sub, 1);
    $[str_elemUrlAttr] || ($[str_elemUrlAttr] =
        function (obj) {
            return $.extend(elemUrlAttr_cache, obj)
        })({
        a: str_href,
        base: str_href,
        iframe: str_src,
        img: str_src,
        input: str_src,
        form: "action",
        link: str_href,
        script: str_src
    });
    jq_elemUrlAttr = $[str_elemUrlAttr];

    function jq_fn_sub(mode, force_attr, params, merge_mode) {
        if (!is_string(params) && typeof params !== "object") {
            merge_mode = params;
            params = force_attr;
            force_attr = undefined
        }
        return this.each(function () {
            var that = $(this),
                attr = force_attr || jq_elemUrlAttr()[(this.nodeName || "").toLowerCase()] || "",
                url = attr && that.attr(attr) ||
                    "";
            that.attr(attr, jq_param[mode](url, params, merge_mode))
        })
    }
    $.fn[str_querystring] = curry(jq_fn_sub, str_querystring);
    $.fn[str_fragment] = curry(jq_fn_sub, str_fragment);
    jq_bbq.pushState = jq_bbq_pushState = function (params, merge_mode) {
        if (is_string(params) && /^#/.test(params) && merge_mode === undefined) merge_mode = 2;
        var has_args = params !== undefined,
            url = jq_param_fragment(location.href, has_args ? params : {}, has_args ? merge_mode : 2);
        location.href = url
    };
    jq_bbq.getState = jq_bbq_getState = function (key, coerce) {
        return key === undefined ||
            typeof key === "boolean" ? jq_deparam_fragment(key) : jq_deparam_fragment(coerce)[key]
    };
    jq_bbq.removeState = function (arr) {
        var state = {};
        if (arr !== undefined) {
            state = jq_bbq_getState();
            $.each($.isArray(arr) ? arr : arguments, function (i, v) {
                delete state[v]
            })
        }
        jq_bbq_pushState(state, 2)
    };
    special[str_hashchange] = $.extend(special[str_hashchange], {
        add: function (handleObj) {
            var old_handler;

            function new_handler(e) {
                var hash = e[str_fragment] = jq_param_fragment();
                e.getState = function (key, coerce) {
                    return key === undefined || typeof key ===
                        "boolean" ? jq_deparam(hash, key) : jq_deparam(hash, coerce)[key]
                };
                old_handler.apply(this, arguments)
            }
            if ($.isFunction(handleObj)) {
                old_handler = handleObj;
                return new_handler
            } else {
                old_handler = handleObj.handler;
                handleObj.handler = new_handler
            }
        }
    })
})(Streak.jQuery, this);
(function ($) {
    var indexMap = [];
    var exitMap = [];
    $.fn.extend({
        bodyCloseAndStop: function (theOptions) {
            var defaults = {
                closeFunction: null,
                stop: null,
                body: null,
                useCapture: true
            };
            var opts = {};
            $.extend(opts, defaults, theOptions);
            return this.each(function () {
                var self = this;
                var o = opts;
                var index = indexMap.indexOf(this);
                if (index === -1) {
                    indexMap.push(this);
                    index = indexMap.length - 1
                }
                var callbackFunction = function (e) {
                    if (o.closeFunction && (o.stop === null || $(e.target).parents().filter(self).length === 0 && $(e.target).parents().filter(o.stop).length ===
                        0 && e.target !== $(o.stop)[0])) o.closeFunction(e)
                };
                exitMap[index] = {
                    useCapture: o.useCapture,
                    callbackFunction: callbackFunction,
                    body: o.body
                };
                if (!o.useCapture) o.body.on("click", callbackFunction);
                else o.body[0].addEventListener("click", callbackFunction, true);
                o.body.on("bodyCloseAndStop", callbackFunction)
            })
        },
        unbindBodyCloseAndStop: function () {
            return this.each(function () {
                var index = indexMap.indexOf(this);
                if (index) {
                    var args = exitMap[index];
                    if (args) {
                        if (args.useCapture) args.body[0].removeEventListener("click", args.callbackFunction,
                            true);
                        else args.body.off("click", args.callbackFunction);
                        args.body.off("bodyCloseAndStop", args.callbackFunction);
                        exitMap[index] = null;
                        indexMap[index] = null
                    }
                }
            })
        }
    })
})(Streak.jQuery);
(function (a) {
    var b = 0;
    a.fn.extend({
        bubbletip: function (c, d) {
            function t() {
                if (h.positionAt.match(/^element$/i)) {
                    var a = h.positionAtElement.offset();
                    if (h.deltaDirection.match(/^up$/i)) {
                        i.top = a.top + h.offsetTop - n.outerHeight();
                        i.left = a.left + h.offsetLeft + (h.positionAtElement.outerWidth() - n.outerWidth()) / 2;
                        i.delta = h.deltaPosition
                    } else if (h.deltaDirection.match(/^down$/i)) {
                        i.top = a.top + h.positionAtElement.outerHeight() + h.offsetTop;
                        i.left = a.left + h.offsetLeft + (h.positionAtElement.outerWidth() - n.outerWidth()) / 2;
                        i.delta = -h.deltaPosition
                    } else if (h.deltaDirection.match(/^left$/i)) {
                        i.top = a.top + h.offsetTop + (h.positionAtElement.outerHeight() - n.outerHeight()) / 2;
                        i.left = a.left + h.offsetLeft - n.outerWidth();
                        i.delta = h.deltaPosition
                    } else if (h.deltaDirection.match(/^right$/i)) {
                        i.top = a.top + h.offsetTop + (h.positionAtElement.outerHeight() - n.outerHeight()) / 2;
                        i.left = a.left + h.positionAtElement.outerWidth() + h.offsetLeft;
                        i.delta = -h.deltaPosition
                    }
                } else if (h.positionAt.match(/^body$/i))
                    if (h.deltaDirection.match(/^up|left$/i)) {
                        i.top =
                            h.offsetTop;
                        i.left = h.offsetLeft;
                        i.delta = h.deltaPosition
                    } else {
                        if (h.deltaDirection.match(/^down$/i)) {
                            i.top = parseInt(h.offsetTop + n.outerHeight());
                            i.left = h.offsetLeft
                        } else {
                            i.top = h.offsetTop;
                            i.left = parseInt(h.offsetLeft + n.outerWidth())
                        }
                        i.delta = -h.deltaPosition
                    } else if (h.positionAt.match(/^mouse$/i))
                    if (h.deltaDirection.match(/^up|left$/i)) {
                        if (h.deltaDirection.match(/^up$/i)) {
                            i.top = -(h.offsetTop + n.outerHeight());
                            i.left = h.offsetLeft
                        } else if (h.deltaDirection.match(/^left$/i)) {
                            i.top = h.offsetTop;
                            i.left = -(h.offsetLeft +
                                n.outerWidth())
                        }
                        i.delta = h.deltaPosition
                    } else {
                        i.top = h.offsetTop;
                        i.left = h.offsetLeft;
                        i.delta = -h.deltaPosition
                    }
                if (h.positionAt.match(/^element|body$/i)) n.css({
                    position: "absolute",
                    top: i.top + "px",
                    left: i.left + "px"
                })
            }

            function s() {
                var b;
                l = false;
                m = true;
                if (h.positionAt.match(/^element|body$/i))
                    if (h.deltaDirection.match(/^up|down$/i)) b = {
                        top: parseInt(i.top - i.delta) + "px"
                    };
                    else b = {
                        left: parseInt(i.left - i.delta) + "px"
                    };
                    else if (h.deltaDirection.match(/^up|down$/i)) b = {
                    top: parseInt(i.mouseTop - i.delta) + "px"
                };
                else b = {
                    left: parseInt(i.mouseLeft -
                        i.delta) + "px"
                };
                b = a.extend(b, {
                    opacity: 0
                });
                n.animate(b, h.animationDuration, h.animationEasing, function () {
                    n.hide();
                    m = false;
                    if (h.postHide()) h.postHide()
                })
            }

            function r() {
                var b;
                if (l) return;
                l = true;
                if (m) n.stop(true, false);
                if (h.calculateOnShow) t();
                if (h.positionAt.match(/^element|body$/i))
                    if (h.deltaDirection.match(/^up|down$/i)) {
                        if (!m) n.css("top", parseInt(i.top + i.delta) + "px");
                        b = {
                            top: i.top + "px"
                        }
                    } else {
                        if (!m) n.css("left", parseInt(i.left + i.delta) + "px");
                        b = {
                            left: i.left + "px"
                        }
                    } else if (h.deltaDirection.match(/^up|down$/i)) {
                    if (!m) {
                        i.mouseTop =
                            e.pageY + i.top;
                        n.css({
                            top: parseInt(i.mouseTop + i.delta) + "px",
                            left: parseInt(e.pageX - n.width() / 2) + "px"
                        })
                    }
                    b = {
                        top: i.mouseTop + "px"
                    }
                } else {
                    if (!m) {
                        i.mouseLeft = e.pageX + i.left;
                        n.css({
                            left: parseInt(i.mouseLeft + i.delta) + "px",
                            top: parseInt(e.pageY - n.height() / 2) + "px"
                        })
                    }
                    b = {
                        left: i.left + "px"
                    }
                }
                m = false;
                n.show();
                b = a.extend(b, {
                    opacity: 1
                });
                n.animate(b, h.animationDuration, h.animationEasing, function () {
                    n.css("opacity", "");
                    l = true;
                    if (h.postShow) h.postShow()
                })
            }
            if (a("table.bubbletip #" + a(c).get(0).id).length > 0) return this;
            var f,
                g, h, i, j, k, l, m, n, o;
            var p, q;
            f = a(this);
            g = a(c);
            o = b++;
            h = {
                positionAt: "element",
                positionAtElement: f,
                offsetTop: 0,
                offsetLeft: 0,
                deltaPosition: 30,
                deltaDirection: "up",
                animationDuration: 250,
                animationEasing: "swing",
                bindShow: "mouseover",
                bindHide: "mouseout",
                delayShow: 0,
                delayHide: 500,
                calculateOnShow: false,
                body: "body",
                postShow: null,
                postHide: null
            };
            if (d) h = a.extend(h, d);
            i = {
                top: 0,
                left: 0,
                delta: 0,
                mouseTop: 0,
                mouseLeft: 0,
                tipHeight: 0,
                bindShow: (h.bindShow + " ").replace(/ +/g, ".bubbletip" + o),
                bindHide: (h.bindHide + " ").replace(/ +/g,
                    ".bubbletip" + o)
            };
            j = null;
            k = null;
            l = false;
            m = false;
            if (!f.data("bubbletip_tips")) f.data("bubbletip_tips", [
                [g.get(0).id, o]
            ]);
            else f.data("bubbletip_tips", a.merge(f.data("bubbletip_tips"), [
                [g.get(0).id, o]
            ])); if (!h.positionAt.match(/^element|body|mouse$/i)) h.positionAt = "element";
            if (!h.deltaDirection.match(/^up|down|left|right$/i)) h.deltaDirection = "up";
            if (h.deltaDirection.match(/^up$/i)) n = a('<table class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td class="bt-top"></td><td class="bt-topright"></td></tr><tr><td class="bt-left"></td><td class="bt-content"></td><td class="bt-right"></td></tr><tr><td class="bt-bottomleft"></td><td><table class="bt-bottom" cellspacing="0" cellpadding="0"><tr><th></th><td><div></div></td><th></th></tr></table></td><td class="bt-bottomright"></td></tr></tbody></table>');
            else if (h.deltaDirection.match(/^down$/i)) n = a('<table class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td><table class="bt-top" cellspacing="0" cellpadding="0"><tr><th></th><td><div></div></td><th></th></tr></table></td><td class="bt-topright"></td></tr><tr><td class="bt-left"></td><td class="bt-content"></td><td class="bt-right"></td></tr><tr><td class="bt-bottomleft"></td><td class="bt-bottom"></td><td class="bt-bottomright"></td></tr></tbody></table>');
            else if (h.deltaDirection.match(/^left$/i)) n = a('<table class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td class="bt-top"></td><td class="bt-topright"></td></tr><tr><td class="bt-left"></td><td class="bt-content"></td><td class="bt-right-tail"><div class="bt-right"></div><div class="bt-right-tail"></div><div class="bt-right"></div></td></tr><tr><td class="bt-bottomleft"></td><td class="bt-bottom"></td><td class="bt-bottomright"></td></tr></tbody></table>');
            else if (h.deltaDirection.match(/^right$/i)) n = a('<table class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td class="bt-top"></td><td class="bt-topright"></td></tr><tr><td class="bt-left-tail"><div class="bt-left"></div><div class="bt-left-tail"></div><div class="bt-left"></div></td><td class="bt-content"></td><td class="bt-right"></td></tr><tr><td class="bt-bottomleft"></td><td class="bt-bottom"></td><td class="bt-bottomright"></td></tr></tbody></table>');
            n.appendTo(h.body);
            if (/msie/.test(navigator.userAgent.toLowerCase()) && !/opera/.test(navigator.userAgent.toLowerCase())) a("*", n).each(function () {
                var b = a(this).css("background-image");
                if (b.match(/^url\(["']?(.*\.png)["']?\)$/i)) {
                    b = RegExp.$1;
                    a(this).css({
                        backgroundImage: "none",
                        filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=" + (a(this).css("backgroundRepeat") == "no-repeat" ? "crop" : "scale") + ", src='" + b + "')"
                    }).each(function () {
                        var b = a(this).css("position");
                        if (b != "absolute" && b != "relative") a(this).css("position",
                            "relative")
                    })
                }
            });
            a(".bt-content", n).append(g);
            g.show();
            if (h.deltaDirection.match(/^left|right$/i)) {
                i.tipHeight = parseInt(g.height() / 2);
                if (g.height() % 2 == 1) i.tipHeight++;
                i.tipHeight = i.tipHeight < 20 ? 6 : i.tipHeight - 10;
                i.tipHeight += 10;
                if (h.deltaDirection.match(/^left$/i)) a("div.bt-right", n).css("height", i.tipHeight + "px");
                else a("div.bt-left", n).css("height", i.tipHeight + "px")
            }
            n.css("opacity", 0);
            n.css({
                width: n.width(),
                height: n.height()
            });
            t();
            n.hide();
            a(window).bind("resize.bubbletip" + o, function () {
                var b = a(window).width();
                var c = a(window).height();
                if (b === p && c === q) return;
                p = b;
                q = c;
                if (k) clearTimeout(k);
                k = setTimeout(function () {
                    t()
                }, 250)
            });
            a([n.get(0), this.get(0)]).bind(i.bindShow, function () {
                if (j) clearTimeout(j);
                if (h.delayShow === 0) r();
                else j = setTimeout(function () {
                    r()
                }, h.delayShow);
                return false
            }).bind(i.bindHide, function () {
                if (!l) return;
                if (j) clearTimeout(j);
                if (h.delayHide === 0) s();
                else j = setTimeout(function () {
                    s()
                }, h.delayHide);
                return false
            });
            return this
        },
        removeBubbletip: function (b) {
            var c;
            var d = new Array;
            var e = new Array;
            var f,
                g, h;
            var i;
            c = a.makeArray(a(this).data("bubbletip_tips"));
            f = a.makeArray(b);
            for (g = 0; g < f.length; g++) d.push(a(f[g]).get(0).id);
            for (g = 0; g < c.length; g++) {
                h = null;
                if (d.length == 0 || (h = a.inArray(c[g][0], d)) >= 0) {
                    i = a("#" + c[g][0]).parents("table.bubbletip");
                    a(i).remove();
                    a(this).unbind(".bubbletip" + c[g][1]);
                    a(window).unbind(".bubbletip" + c[g][1])
                } else e.push(c[g])
            }
            a(this).data("bubbletip_tips", e);
            return this
        }
    })
})(Streak.jQuery);
(function ($) {
    $.fn.extend({
        captureClick: function (inCB) {
            var cb = inCB;
            return this.each(function () {
                var self = $(this);
                this.addEventListener("click", function (e) {
                    if (cb) cb(e);
                    e.stopPropagation();
                    return false
                }, true)
            })
        }
    })
})(Streak.jQuery);
(function (Streak) {
    var $ = Streak.jQuery;
    var cleaner = document.createElement("div");
    $.domCleanString = function (s) {
        cleaner.innerHTML = s;
        return cleaner.innerText.replaceAmpCodes()
    };
    $.cleanString = function (s) {
        return $.cleanText(s)
    };
    $.fn.cleanText = function () {
        var s = this[0].innerHTML.replace(/<br\s*\/?>|<div>/img, "\n");
        return s.replace("&nbsp;", " ").trim()
    };
    $.cleanText = function (s, replaceNewlines, lineEnding) {
        if (!s) return "";
        if (!lineEnding) lineEnding = "\n";
        var sPrime = s.replace(/<br\s*\/?>|<div>/img, lineEnding).replace("&nbsp;",
            " ");
        if (replaceNewlines) sPrime = sPrime.replace(/\n/img, " ");
        sPrime = sPrime.replaceAmpCodes();
        return sPrime.trim()
    };
    $.fn.plainText = function (text) {
        if (text) this.setPlainText(text);
        else {
            var innerText = "";
            if (this.is("textarea") || this.is("input")) innerText = this.val();
            else innerText = this[0].innerText;
            return innerText.trim("\n")
        }
    };
    var charEncodings = {
        "\t": "&nbsp;&nbsp;&nbsp;&nbsp;",
        "  ": "&nbsp; ",
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        "\n": "<br />",
        "\r": "<br />"
    };
    var space = /[\t ]/;
    var noWidthSpace = "&#8203;";
    $.fn.setPlainText =
        function (text) {
            if (this.is("textarea") || this.is("input")) this.val(text);
            else this[0].innerHTML = $.getTextHTML(text)
    };
    $.getTextHTML = function (text) {
        text = (text || "") + "";
        text = text.replace(/\r\n/g, "\n");
        var html = "";
        var lastChar = "";
        for (var i = 0; i < text.length; i++) {
            var c = text[i];
            var charCode = text.charCodeAt(i);
            if (space.test(c) && !space.test(lastChar) && space.test(text[i + 1] || "")) html += noWidthSpace;
            html += c in charEncodings ? charEncodings[c] : charCode > 127 ? "&#" + charCode + ";" : c;
            lastChar = c
        }
        return html
    }
})(Streak);
(function ($) {
    var StateMachine = Streak.StateMachine;
    var isMoving = false,
        currentCol = null,
        originalWidth = 0,
        originalX = 0,
        dragThreshold = 4;
    var stateMachine = null;
    var eventsBound = false;

    function bindEvents() {
        if (eventsBound) return;
        stateMachine = new StateMachine.create({
            initial: "start",
            events: [{
                name: "mousedown",
                from: ["start"],
                to: "possibleDrag"
            }, {
                name: "mouseup",
                from: ["possibleDrag", "start"],
                to: "start"
            }, {
                name: "dragStart",
                from: ["possibleDrag"],
                to: "drag"
            }, {
                name: "mouseup",
                from: ["drag"],
                to: "drop"
            }, {
                name: "reset",
                from: ["possibleDrag",
                    "drag", "drop", "start"
                ],
                to: "start"
            }],
            callbacks: {
                onstart: function (event, from, to) {
                    Streak.Gmail.elements.body.css({
                        "-webkit-user-select": ""
                    })
                },
                ondragStart: function () {
                    currentEl.trigger("bbDragStart")
                },
                ondrag: function (event, from, to) {
                    Streak.Gmail.elements.body.css({
                        "-webkit-user-select": "none"
                    });
                    currentEl.trigger("bbDrag")
                },
                ondrop: function (event, from, to) {
                    currentEl.trigger("bbDrop");
                    stateMachine.reset()
                }
            }
        });
        Streak.Gmail.elements.body.mousemove(function (e) {
            var pixelsMoved = e.clientX - originalX;
            if (stateMachine.is("possibleDrag")) {
                if (document.activeElement.type !==
                    "text" && Math.abs(pixelsMoved) > dragThreshold) stateMachine.dragStart()
            } else if (stateMachine.is("drag")) {
                var newWidth = Math.min(Math.max(originalWidth + pixelsMoved, 45), 2E3);
                currentEl.css({
                    minWidth: newWidth,
                    width: newWidth,
                    maxWidth: newWidth
                });
                currentEl.trigger("bbDrag")
            }
        });
        Streak.Gmail.elements.body.mouseup(function (e) {
            stateMachine.mouseup()
        });
        Streak.BentoBox.Keyboard.bindChord("escape", function (e) {
            stateMachine.reset()
        });
        eventsBound = true
    }
    $.fn.colResizable = function (opts) {
        var defaults = {
            onResize: $.noop,
            doneResize: $.noop
        };
        var options = $.extend(defaults, opts);
        return this.each(function () {
            var td = $(this),
                grip = $(document.createElement("div"));
            grip.addClass("colResize");
            td.append(grip);
            grip.on("mousedown.colResizable", function (e) {
                bindEvents();
                stateMachine.reset();
                stateMachine.mousedown();
                originalX = e.clientX;
                currentEl = td;
                originalWidth = td.width()
            });
            td.on({
                "bbDragStart.colResizable": function (e) {
                    grip.trigger("hold")
                },
                "bbDrag.colResizable": function (e) {
                    options.onResize(td.width())
                },
                "bbDrop.colResizable": function (e) {
                    grip.trigger("unhold");
                    options.doneResize()
                }
            });
            grip.easyHoverClass("bbActive")
        })
    }
})(Streak.jQuery);
(function ($) {
    var StateMachine = Streak.StateMachine;
    var currentEl = null,
        newIndex = null,
        isAfter = false,
        currentSet = null,
        originalX = null,
        widthMap = [],
        body = null;
    var CONSTANTS = {
        DRAG_THRESHOLD: 4
    };
    $.fn.columnReorder = function (opts) {
        var headerSet = this;
        var defaults = {
            body: null,
            doneReorder: $.noop
        };
        var options = $.extend(defaults, opts);
        this.each(function (currentIndex) {
            var td = $(this);
            td.on({
                "mouseenter": function (e) {
                    if (!stateMachine || stateMachine.is("start")) {
                        grip.fastShow();
                        overGrip.fastShow();
                        td.prepend(grip);
                        td.prepend(overGrip);
                        currentEl = td
                    }
                },
                "mouseleave": function (e) {
                    if (!stateMachine || stateMachine.is("start")) {
                        grip.detach();
                        overGrip.detach()
                    }
                },
                "streakReorderDragStart.columnReorder": function (e) {
                    proxy.css({
                        width: currentEl.width(),
                        left: td.offset().left,
                        top: 0
                    });
                    currentSet = headerSet;
                    body = options.body;
                    currentEl = td;
                    body.prepend(proxy)
                },
                "streakReorderDrag.columnReorder": function (e) {},
                "streakReorderDrop.columnReorder": function (e) {
                    proxy.detach();
                    insert.detach();
                    options.doneReorder(currentIndex, newIndex, isAfter)
                }
            })
        })
    };
    var stateMachine =
        null;
    var eventsBound = false;

    function bindEvents() {
        if (eventsBound) return;
        stateMachine = new StateMachine.create({
            initial: "start",
            events: [{
                name: "mousedown",
                from: ["start"],
                to: "possibleDrag"
            }, {
                name: "mouseup",
                from: ["possibleDrag", "start"],
                to: "start"
            }, {
                name: "dragStart",
                from: ["possibleDrag"],
                to: "drag"
            }, {
                name: "mouseup",
                from: ["drag"],
                to: "drop"
            }, {
                name: "reset",
                from: ["possibleDrag", "drag", "drop", "start"],
                to: "start"
            }],
            callbacks: {
                onstart: function (event, from, to) {
                    Streak.Gmail.elements.body.css({
                        "-webkit-user-select": ""
                    })
                },
                ondragStart: function () {
                    currentEl.trigger("streakReorderDragStart");
                    setupWidthMap()
                },
                ondrag: function (event, from, to) {
                    Streak.Gmail.elements.body.css({
                        "-webkit-user-select": "none"
                    });
                    currentEl.trigger("streakReorderDrag")
                },
                ondrop: function (event, from, to) {
                    currentEl.trigger("streakReorderDrop");
                    stateMachine.reset()
                }
            }
        });
        Streak.Gmail.elements.body.mousemove(function (e) {
            var pixelsMoved = e.clientX - originalX;
            if (stateMachine.is("possibleDrag")) {
                if (document.activeElement.type !== "text" && Math.abs(pixelsMoved) > CONSTANTS.DRAG_THRESHOLD) stateMachine.dragStart()
            } else if (stateMachine.is("drag")) renderDrag(pixelsMoved)
        });
        Streak.Gmail.elements.body.mouseup(function (e) {
            stateMachine.mouseup()
        });
        eventsBound = true
    }
    var grip = $('<div class="streak__reorderGrip"><div></div><div></div></div>');
    var overGrip = $('<div class="streak__reorderGripOver"></div>');
    overGrip.on("mousedown.columnReorder", function (e) {
        bindEvents();
        stateMachine.reset();
        stateMachine.mousedown();
        originalX = e.clientX
    });
    var proxy = $(document.createElement("div"));
    proxy.addClass("streak__reorderProxy");
    var insert = $(document.createElement("div"));
    insert.addClass("streak__reorderInsert");

    function setupWidthMap() {
        widthMap.length = 0;
        currentSet.each(function (el) {
            var offset = $(this).offset();
            var width = $(this).width();
            widthMap.push({
                left: offset.left,
                right: offset.left + width,
                width: width,
                el: $(this)
            })
        })
    }

    function renderDrag(pixelsMoved) {
        isAfter = false;
        var x = Math.min(Math.max(originalX + pixelsMoved, widthMap[0].left), widthMap[widthMap.length - 1].left);
        proxy.offset({
            left: x
        });
        insert.detach();
        for (var ii = 0; ii < widthMap.length; ii++)
            if (widthMap[ii].left <= x && widthMap[ii].right >= x) {
                newIndex = ii;
                if (x > (widthMap[ii].left +
                    widthMap[ii].right) / 2) {
                    isAfter = true;
                    insert.css({
                        left: widthMap[ii].el.position().left + widthMap[ii].width
                    })
                } else insert.css({
                    left: widthMap[ii].el.position().left - 5
                });
                body.prepend(insert);
                break
            }
    }
})(Streak.jQuery);
(function ($) {
    var _ = Streak._;
    var CONSTANTS = {
        BUFFER: 10
    };
    $.fn.getBoundingBox = function (useOuterWidth) {
        var el = $(this[0]);
        var offset = el.offset();
        var bb = [{
            x: offset.left,
            y: offset.top
        }, {
            x: offset.left + (useOuterWidth ? el.outerWidth() : el.width()),
            y: offset.top + el.outerHeight()
        }];
        bb.width = useOuterWidth ? el.outerWidth() : el.width();
        bb.height = el.outerHeight();
        return bb
    };
    var opsChecker = function (theOps) {
        var ops = theOps;
        return {
            can: function (checkOps) {
                var ret = false;
                if ($.isArray(checkOps)) {
                    ret = false;
                    for (var i = 0; i < checkOps.length; i++)
                        if (ops.indexOf(checkOps[i]) > -1) {
                            ret = true;
                            break
                        }
                } else ret = ops.indexOf(checkOps) > -1;
                return ret
            }
        }
    };
    var BoundingBoxContainer = function (theContainerBB, theContainedBB, theAnchorPoint) {
        var containerBB = theContainerBB;
        var containedBB = theContainedBB;
        var anchorPoint = theAnchorPoint;
        return {
            containDimension: function (axis, dimension, anchorCheck, coord) {
                coord = coord === 1 ? 1 : 0;
                var checkCoord = (coord + 1) % 2;
                var adjuster = 1;
                if (coord === 1) adjuster = -1;
                var ops = [];
                if (containedBB[coord][axis] * adjuster < containerBB[coord][axis] * adjuster) {
                    ops.push(axis + "|" + coord +
                        "=" + containerBB[coord][axis]);
                    if (containedBB[checkCoord][axis] * adjuster > containerBB[checkCoord][axis] * adjuster) ops.push(axis + "|" + checkCoord + "=" + containerBB[checkCoord][axis]);
                    else if (anchorPoint.indexOf(anchorCheck) > -1) ops.push(axis + "|" + checkCoord + "=" + containedBB[checkCoord][axis]);
                    else if ((containerBB[coord][axis] + containedBB[dimension] * adjuster) * adjuster > containerBB[checkCoord][axis] * adjuster) ops.push(axis + "|" + checkCoord + "=" + containerBB[checkCoord][axis])
                }
                return ops
            }
        }
    };
    $.fn.containElement = function (theContained,
        theAnchorPoint) {
        var container = $(this[0]);
        var contained = $(theContained);
        var anchorPoint = theAnchorPoint || "";
        var containerBB = container.getBoundingBox();
        var containedBB = contained.getBoundingBox();
        var offset = contained.offset();
        var css = {};
        var ops = [];
        var boundingBoxContainer = new BoundingBoxContainer(containerBB, containedBB, anchorPoint);
        ops = ops.concat(boundingBoxContainer.containDimension("x", "width", "right", 0));
        ops = ops.concat(boundingBoxContainer.containDimension("x", "width", "left", 1));
        ops = ops.concat(boundingBoxContainer.containDimension("y",
            "height", "bottom", 0));
        ops = ops.concat(boundingBoxContainer.containDimension("y", "height", "top", 1));
        if (ops.length === 0);
        else {
            var shrinkWidth = false;
            var shrinkHeight = false;
            ops.sort();
            for (var i = 0; i < ops.length; i++) {
                var op = ops[i];
                if (!op) continue;
                var opParts = op.split("=");
                var value = parseInt(opParts[1]);
                var axis = opParts[0].split("|")[0];
                var coord = opParts[0].split("|")[1];
                if (axis === "x")
                    if (coord === "0") {
                        offset.left = value;
                        shrinkWidth = true
                    } else if (shrinkWidth) css.width = value - offset.left + "px";
                else offset.left = offset.left -
                    (containedBB[0].x - value);
                else if (coord === "0") {
                    shrinkHeight = true;
                    offset.top = value
                } else if (shrinkHeight) css.height = value - offset.top + "px";
                else offset.top = offset.top - (containedBB[1].y - value)
            }
        }
        contained.offset(offset);
        contained.css(css)
    };
    $.fn.containByScreen = function (anchorPoint, options) {
        if (this.first().css("position") !== "fixed") return;
        options = options || {};
        var elementOffset = this.offset();
        var elementSizeBox = {
            width: this.outerWidth(),
            height: this.outerHeight()
        };
        var anchorOffset = anchorPoint.offset();
        var anchorSizeBox = {
            width: anchorPoint.outerWidth(),
            height: anchorPoint.outerHeight()
        };
        var screenBoundingBox = [{
            x: 0,
            y: 0
        }, {
            x: window.innerWidth,
            y: window.innerHeight
        }];
        var elementBoundingBox = [{
            x: elementOffset.left,
            y: elementOffset.top
        }, {
            x: elementOffset.left + elementSizeBox.width,
            y: elementOffset.top + elementSizeBox.top
        }];
        var newTop, newLeft, newBottom, newRight;
        if (options.isBottomAligned) {
            newBottom = document.body.clientHeight - anchorOffset.top;
            elementOffset.top = newBottom - elementSizeBox.height
        } else {
            newTop = anchorOffset.top;
            if (!options.isTopAligned) newTop +=
                anchorSizeBox.height;
            elementOffset.top = newTop
        } if (options.isAligned);
        else if (options.isRightAligned) {
            newRight = document.body.clientWidth - anchorOffset.left - anchorSizeBox.width;
            elementOffset.left = newRight - elementSizeBox.width
        } else {
            newLeft = anchorOffset.left;
            elementOffset.left = newLeft
        }
        var trialBoundingBox;
        if (elementOffset.top + elementSizeBox.height > screenBoundingBox[1].y) {
            trialBoundingBox = _.clone(elementBoundingBox);
            if (options.isAligned) trialBoundingBox[0].y = anchorOffset.top + anchorSizeBox.height - elementSizeBox.height;
            else trialBoundingBox[0].y = anchorOffset.top - elementSizeBox.height;
            trialBoundingBox[1].y = trialBoundingBox[0].y + elementSizeBox.height;
            if (isYBounded(screenBoundingBox, trialBoundingBox)) newTop = trialBoundingBox[0].y
        } else if (elementOffset.top < 0) {
            trialBoundingBox = _.clone(elementBoundingBox);
            if (options.isAligned) trialBoundingBox[0].y = anchorOffset.top;
            else trialBoundingBox[0].y = anchorOffset.top + anchorSizeBox.height;
            trialBoundingBox[1].y = trialBoundingBox[0].y + elementSizeBox.height;
            if (isYBounded(screenBoundingBox,
                trialBoundingBox)) newTop = trialBoundingbox[0].y
        }
        if (_.isNotReal(newTop) && options.forceFit)
            if (elementOffset.top < 0) newTop = 0;
            else if (elementOffset.top + elementSizeBox.height > screenBoundingBox[1].y) newTop = screenBoundingBox[1].y - elementSizeBox.height;
        if (elementOffset.left + elementSizeBox.width > screenBoundingBox[1].x) {
            trialBoundingBox = _.clone(elementBoundingBox);
            if (options.isAligned) trialBoundingBox[0].x = anchorOffset.left - elementSizeBox.width;
            else trialBoundingBox[0].x = anchorOffset.left - elementSizeBox.width +
                anchorSizeBox.width;
            trialBoundingBox[1].x = trialBoundingBox[0].x + elementSizeBox.width;
            if (isXBounded(screenBoundingBox, trialBoundingBox)) newLeft = trialBoundingBox[0].x
        } else if (elementOffset.left < 0) {
            trialBoundingBox = _.clone(elementBoundingBox);
            if (options.isAligned) trialBoundingBox[0].x = anchorOffset.left + anchorSizeBox.width + elementSizeBox.width;
            else trialBoundingBox[0].x = anchorOffset.left;
            trialBoundingBox[1].x = trialBoundingBox[0].x + elementSizeBox.width;
            if (isXBounded(screenBoundingBox, trialBoundingBox)) newLeft =
                trialBoundingBox[0].x
        }
        if (_.isReal(newBottom)) {
            this[0].style.bottom = newBottom + "px";
            this[0].style.top = ""
        } else if (_.isReal(newTop)) {
            this[0].style.top = newTop + "px";
            this[0].style.bottom = ""
        }
        if (_.isReal(newRight)) {
            this[0].style.right = newRight + "px";
            this[0].style.left = ""
        } else if (newLeft) {
            this[0].style.left = newLeft + "px";
            this[0].style.right = ""
        }
    };
    $.fn.containRelativeElement = function (contained, leftAdjustment, topAdjustment) {
        leftAdjustment = leftAdjustment || 0;
        topAdjustment = topAdjustment || 0;
        var offset = contained.offset();
        var containedBB = contained.getBoundingBox();
        var containerBB = this.getBoundingBox();
        if (containedBB[1].y > containerBB[1].y) offset.top = offset.top - containedBB.height - topAdjustment * 2;
        if (containedBB[1].x > containerBB[1].x) offset.left -= containedBB[1].x - containerBB[1].x;
        var containerOffset = this.offset();
        offset.left += leftAdjustment;
        offset.top += topAdjustment;
        offset.left = Math.max(offset.left, 0);
        offset.top = Math.max(offset.top, 0);
        contained.css(offset)
    };

    function isYBounded(containerBB, containedBB) {
        if (containerBB[0].y -
            CONSTANTS.BUFFER > containedBB[0].y) return false;
        if (containerBB[1].y + CONSTANTS.BUFFER < containedBB[1].y) return false;
        return true
    }

    function isXBounded(containerBB, containedBB) {
        if (containerBB[0].x - CONSTANTS.BUFFER > containedBB[0].x) return false;
        if (containerBB[1].x + CONSTANTS.BUFFER < containedBB[1].x) return false;
        return true
    }
})(Streak.jQuery);
(function ($) {
    var getComputedStyle = document.defaultView && document.defaultView.getComputedStyle,
        rupper = /([A-Z])/g,
        rdashAlpha = /-([a-z])/ig,
        fcamelCase = function (all, letter) {
            return letter.toUpperCase()
        }, getStyle = function (elem) {
            if (getComputedStyle) return getComputedStyle(elem, null);
            else if (elem.currentStyle) return elem.currentStyle
        }, rfloat = /float/i,
        rnumpx = /^-?\d+(?:px)?$/i,
        rnum = /^-?\d/;
    $.curStyles = function (el, styles) {
        if (!el) return null;
        var currentS = getStyle(el),
            oldName, val, style = el.style,
            results = {}, i = 0,
            left, rsLeft, camelCase, name;
        for (; i < styles.length; i++) {
            name = styles[i];
            oldName = name.replace(rdashAlpha, fcamelCase);
            if (rfloat.test(name)) {
                name = jQuery.support.cssFloat ? "float" : "styleFloat";
                oldName = "cssFloat"
            }
            if (getComputedStyle) {
                name = name.replace(rupper, "-$1").toLowerCase();
                val = currentS.getPropertyValue(name);
                if (name === "opacity" && val === "") val = "1";
                results[oldName] = val
            } else {
                camelCase = name.replace(rdashAlpha, fcamelCase);
                results[oldName] = currentS[name] || currentS[camelCase];
                if (!rnumpx.test(results[oldName]) &&
                    rnum.test(results[oldName])) {
                    left = style.left;
                    rsLeft = el.runtimeStyle.left;
                    el.runtimeStyle.left = el.currentStyle.left;
                    style.left = camelCase === "fontSize" ? "1em" : results[oldName] || 0;
                    results[oldName] = style.pixelLeft + "px";
                    style.left = left;
                    el.runtimeStyle.left = rsLeft
                }
            }
        }
        return results
    };
    $.fn.curStyles = function () {
        return $.curStyles(this[0], $.makeArray(arguments))
    }
})(Streak.jQuery);
(function ($) {
    $.expr[":"].Contains = function (a, i, m) {
        return (a.textContent || a.innerText || "").toLowerCase().indexOf(m[3].toLowerCase()) >= 0
    };
    $.expr[":"].FastVisible = function (a, i, m) {
        if (a.style.display === "none") return false;
        var parents = $(a).parents();
        if (parents.length === 0) return false;
        var body = false;
        for (var index = 0; index < parents.length; index++) {
            if (parents[index].style.display === "none") return false;
            if (parents[index].tagName.toLowerCase() === "body") body = true
        }
        if (!body) return false;
        if (m === "compute") return a.offsetHeight >
            0 || a.offsetWidth > 0;
        return true
    };
    $.expr[":"].DisplayVisible = function (a, i, m) {
        var $a = $(a);
        if (a.style.display === "none") return false;
        if ($a.parents("body").length === 0) return false;
        if ($a.parents(":DisplayNone").length > 0) return false;
        return true
    };
    $.expr[":"].NotDisplayNone = function (a, i, m) {
        return a.style.display !== "none"
    };
    $.expr[":"].DisplayNone = function (a, i, m) {
        return a.style.display === "none"
    };
    $.expr[":"].scroll = function (a, i, m) {
        var $a = $(a);
        var styles = $a.curStyles("overflow", "overflowX", "overflowY");
        return /(auto|scroll)/.test(styles.overflow +
            styles.overflowX + styles.overflowY)
    };
    $.expr[":"].inBody = function (a, i, m) {
        var check = a;
        while (true)
            if (!check) return false;
            else if (check.tagName && check.tagName.toLowerCase() === "body") return true;
        else check = check.parentNode
    };
    $.fn._find = $.fn.find;
    $.fn.find = function (selector) {
        return $(this.findReturnRaw(selector))
    };
    $.fn.findReturnRaw = function (selector) {
        if (this.length === 0) return $("");
        else {
            var list = [];
            for (var i = 0; i < this.length; i++) {
                var newList = [];
                if (selector.indexOf(":") > -1 || !this[i].querySelectorAll) return this._find(selector);
                else try {
                    newList = this[i].querySelectorAll(selector)
                } catch (err) {
                    return this._find(selector)
                }
                if (newList.length > 0)
                    for (var j = 0; j < newList.length; j++) list.push(newList[j])
            }
            return list
        }
    };
    $.fn.outerHTML = function () {
        return this[0].outerHTML
    };
    $.fn.fastShow = function (displaySettings) {
        displaySettings = displaySettings || "block";
        for (var ii = 0; ii < this.length; ii++) this[ii].style.display = displaySettings;
        return this
    };
    $.fn.fastHide = function () {
        for (var ii = 0; ii < this.length; ii++) this[ii].style.display = "none";
        return this
    };
    $.fn.addClass =
        function (className) {
            if (!className) return this;
            var classesToApply = className.split(" ");
            for (var ii = 0; ii < this.length; ii++) {
                var element = this[ii];
                var classes = element.getAttribute("class") || "";
                var newClasses = [];
                for (var jj = 0; jj < classesToApply.length; jj++)
                    if (classes.indexOf(classesToApply[jj]) === -1) newClasses.push(classesToApply[jj]);
                if (newClasses.length > 0) element.setAttribute("class", classes + " " + newClasses.join(" "))
            }
            return this
    };
    $.fn.removeClass = function (className) {
        if (!className) return this;
        var classesToRemove =
            className;
        if (!Array.isArray(className)) classesToRemove = className.split(" ");
        for (var ii = 0; ii < this.length; ii++) {
            var element = this[ii];
            var classes = element.getAttribute("class") || "";
            var existingClasses = classes.split(" ");
            var newClasses = [];
            for (var jj = 0; jj < existingClasses.length; jj++)
                if (classesToRemove.indexOf(existingClasses[jj]) === -1) newClasses.push(existingClasses[jj]);
            element.setAttribute("class", newClasses.join(" "))
        }
        return this
    };
    $.fn.fastOnClick = function (callback, onCapture) {
        for (var ii = 0; ii < this.length; ii++) this[ii].addEventListener("click",
            callback, onCapture)
    };
    $.fn.customBind = function (eventName, callback) {
        for (var ii = 0; ii < this.length; ii++) this[ii].addEventListener(eventName, callback)
    };
    $.fn.customTrigger = function (eventName) {
        var event = document.createEvent("Event");
        event.initEvent(eventName, true, true);
        for (var ii = 0; ii < this.length; ii++) this[0].dispatchEvent(event)
    };
    $.removeClassFromRaw = function (element, className) {
        if (!className || !element) return this;
        var classesToRemove = className;
        if (!Array.isArray(className)) classesToRemove = className.split(" ");
        var classes = element.getAttribute("class") || "";
        var existingClasses = classes.split(" ");
        var newClasses = [];
        for (var jj = 0; jj < existingClasses.length; jj++)
            if (classesToRemove.indexOf(existingClasses[jj]) === -1) newClasses.push(existingClasses[jj]);
        element.setAttribute("class", newClasses.join(" "))
    };
    $.fastAddClassToRaw = function (element, className) {
        var classes = element.getAttribute("class");
        element.setAttribute("class", classes + " " + className)
    };
    $.fn.smallHide = function () {
        this.css({
            height: 1,
            width: 1,
            visibility: "hidden",
            overflow: "hidden"
        });
        return this
    };
    $.fn.smallShow = function () {
        this.css({
            height: "",
            width: "",
            visibility: "",
            overflow: ""
        });
        return this
    };
    $.fn.filterOutInvisible = function () {
        var retElements = [];
        for (var ii = 0; ii < this.length; ii++) {
            var element = this[ii];
            if (element.style.display === "none") continue;
            var parents = $(element).fastParents();
            if (parents.length === 0) continue;
            var body = false;
            for (var index = 0; index < parents.length; index++) {
                if (!parents[index].style) break;
                if (parents[index].style.display === "none") break;
                if (parents[index].tagName.toLowerCase() ===
                    "body") body = true
            }
            if (!body) continue;
            retElements.push(element)
        }
        return $(retElements)
    };
    $.fn.isVisible = function () {
        return this.filterOutInvisible().length > 0
    };
    $.fn.fastParents = function () {
        var parents = [];
        if (this.length === 0) return $(parents);
        var node = this[0];
        for (var ii = 0; ii < 1E4; ii++) {
            var node = node.parentNode;
            if (!node) break;
            if (node.nodeName === "#document") break;
            parents.push(node)
        }
        return $(parents)
    };
    $.fn.isInBody = function () {
        var parents = this.fastParents();
        for (var ii = 0; ii < parents.length; ii++)
            if (parents[ii].nodeName.toLowerCase() ===
                "body") return true;
        return false
    };
    $.fn.isAncestor = function (potentialChild) {
        var child = potentialChild;
        if (child.length) child = child[0];
        for (var nodeIndex = 0; nodeIndex < this.length; nodeIndex++) {
            var node = child;
            for (var ii = 0; ii < 1E4; ii++) {
                if (node === this[nodeIndex]) return true;
                var node = node.parentNode;
                if (!node) break;
                if (node.nodeName === "#document") break
            }
        }
        return false
    }
})(Streak.jQuery);
(function ($) {
    $.fn.extend({
        delayedSave: function (opts) {
            var defaults = {
                saveFunction: null,
                delay: 1E3,
                enter: false,
                enterCutoff: false,
                dontPropagate: false,
                saveOnBlur: true,
                keyEvent: "keydown"
            };
            var options = {};
            $.extend(options, defaults, opts);
            return this.each(function () {
                var o = options,
                    timer, self = $(this),
                    enterTriggered = false,
                    pending = false,
                    content = self.val() || self.html(),
                    callsave = function (isEnter, isPending) {
                        clearTimeout(timer);
                        if (content != (self.val() || self.html()) || isEnter) {
                            content = self.val() || self.html();
                            if (o.saveFunction) o.saveFunction.call(self,
                                isEnter, isPending)
                        }
                    };
                self.focus(function (e) {
                    content = self.val() || self.html()
                });
                if (options.saveOnBlur) self.bind("blur", function (e) {
                    var isEnter = enterTriggered;
                    var isPending = pending;
                    enterTriggered = false;
                    pending = false;
                    if ((self.val() || self.html()) != content || isEnter) callsave(isEnter, isPending)
                });
                if (o.delay) self.on(options.keyEvent, function (e) {
                    clearTimeout(timer);
                    if (o.enter && e.which === 13) {
                        enterTriggered = true;
                        self.blur()
                    } else timer = setTimeout(function () {
                        pending = true;
                        callsave(e.which === 13);
                        pending = false
                    }, o.delay);
                    if (o.dontPropagate) e.stopPropagation()
                });
                else self.on(options.keyEvent, function (e) {
                    if (o.enter && e.which === 13) {
                        enterTriggered = true;
                        self.blur()
                    } else callsave(e.which === 13); if (o.dontPropagate) e.stopPropagation()
                });
                self.bind("delayedSave", function () {
                    callsave(false)
                })
            })
        }
    })
})(Streak.jQuery);
(function ($) {
    $.fn.extend({
        easyHoverClass: function (hoverClass, namespace, noBlur, applyEl) {
            var theHoverClass = hoverClass;
            return this.each(function () {
                var self = $(this),
                    hold = false,
                    isOver = false,
                    disabled = false;
                var hoverApplyEl = applyEl || self;
                var eventNamespace = namespace ? ".namespace" : "";
                self.on("mouseenter" + eventNamespace, function (e) {
                    if (disabled) return;
                    hoverApplyEl.addClass(theHoverClass);
                    isOver = true
                });
                self.on("mouseleave" + eventNamespace, function (e) {
                    isOver = false;
                    if (!hold) hoverApplyEl.removeClass(theHoverClass)
                });
                self.focus(function (e) {
                    hold = true;
                    hoverApplyEl.addClass(theHoverClass)
                });
                if (!noBlur) self.blur(function (e) {
                    hold = false;
                    hoverApplyEl.removeClass(theHoverClass)
                });
                self.bind({
                    "hold": function () {
                        hoverApplyEl.addClass(theHoverClass);
                        hold = true
                    },
                    "unhold": function () {
                        if (!isOver) hoverApplyEl.removeClass(theHoverClass);
                        hold = false
                    },
                    "disabled": function () {
                        disabled = true
                    },
                    "enabled": function () {
                        disabled = false
                    }
                })
            })
        },
        superEasyHoverClass: function (hoverClass) {
            for (var ii = 0; ii < this.length; ii++) {
                var el = this[ii];
                el.addEventListener("mouseover",
                    function (e) {
                        $(this).addClass(hoverClass)
                    });
                el.addEventListener("mouseout", function (e) {
                    $(this).removeClass(hoverClass)
                })
            }
        }
    })
})(Streak.jQuery);
(function ($) {
    $.fn.extend({
        easyTab: function (o) {
            var defaults = {
                prev: -1,
                next: -1,
                delay: null,
                namespace: null
            };
            var options = {};
            $.extend(options, defaults, o);
            options.namespace = options.namespace || "easyTab";
            return this.each(function () {
                var self = $(this);
                var go = function (isPrev) {
                    if ((isPrev ? options.prev : options.next) === -1) return true;
                    self.blur();
                    if (options.delay) setTimeout(function () {
                        goNow(isPrev)
                    }, 50);
                    else goNow(isPrev)
                };
                var goNow = function (isPrev) {
                    if (isPrev) {
                        if (options.prev)
                            if (options.prev.is(":visible")) options.prev.focus();
                            else setTimeout(function () {
                                options.prev.trigger("shiftTabPressed")
                            }, 10)
                    } else if (options.next)
                        if (options.next.is(":visible")) options.next.focus();
                        else setTimeout(function () {
                            options.next.trigger("tabPressed")
                        }, 10)
                };
                self.bind("keydown." + options.namespace, function (e) {
                    if (e.which == 9) {
                        if (e.shiftKey) {
                            if (go(true)) return
                        } else if (go()) return;
                        e.stopPropagation();
                        e.preventDefault()
                    }
                });
                self.bind("tabPressed." + options.namespace, function (e) {
                    go()
                });
                self.bind("shiftTabPressed." + options.namespace, function (e) {
                    go(true)
                })
            })
        }
    });
    $.tabChain = function (arr, delay, namespace) {
        if (arr && arr.length > 0)
            for (var i = 0; i < arr.length; i++) {
                var prev = (i - 1) % arr.length;
                var next = (i + 1) % arr.length;
                if (prev < 0) prev = arr.length + prev;
                if (arr[i] && arr[i] !== -1) arr[i].easyTab({
                    prev: arr[prev],
                    next: arr[next],
                    delay: delay,
                    namespace: namespace
                })
            }
    }
})(Streak.jQuery);
(function (Streak, len, createRange, duplicate) {
    var $ = Streak.jQuery;
    $.fn.caret = function (options, opt2) {
        var doc = Streak.document;
        var start, end, t = this[0];
        if (typeof options === "object" && typeof options.start === "number" && typeof options.end === "number") {
            start = options.start;
            end = options.end
        } else if (typeof options === "number" && typeof opt2 === "number") {
            start = options;
            end = opt2
        } else if (typeof options === "string")
            if ((start = t.value.indexOf(options)) > -1) end = start + options[len];
            else start = null;
            else if (Object.prototype.toString.call(options) ===
            "[object RegExp]") {
            var re = options.exec(t.value);
            if (re !== null) {
                start = re.index;
                end = start + re[0][len]
            }
        }
        if (typeof start != "undefined") {
            this[0].selectionStart = start;
            this[0].selectionEnd = end;
            this[0].focus();
            return this
        } else {
            var s = t.selectionStart,
                e = t.selectionEnd;
            if (t.tagName === "INPUT") {
                var te = t.value.substring(s, e);
                return {
                    start: s,
                    end: e,
                    text: te,
                    replace: function (st) {
                        return t.value.substring(0, s) + st + t.value.substring(e, t.value[len])
                    }
                }
            }
            return {
                start: doc.getSelection().getRangeAt().startOffset,
                end: doc.getSelection().getRangeAt().endOffset,
                goToEnd: function () {
                    var sel, range;
                    if (doc.createRange) {
                        range = doc.createRange();
                        range.selectNodeContents(t);
                        range.collapse(false);
                        sel = doc.getSelection();
                        sel.removeAllRanges();
                        sel.addRange(range)
                    }
                }
            }
        }
    };
    $.fn.insertNodeAtCaret = function (text) {
        this.focus();
        if (this.is("textarea")) {
            var ta = this[0];
            var oldStart = ta.selectionStart;
            if (ta.selectionStart < ta.selectionEnd) ta.value = ta.value.substring(0, ta.selectionStart) + ta.value.substring(ta.selectionEnd);
            ta.value = ta.value.substring(0, oldStart) + text + ta.value.substring(oldStart);
            ta.selectionStart = oldStart + text.length;
            ta.selectionEnd = oldStart + text.length
        } else {
            var sel, range, textNode;
            var editable = null;
            if (this[0].getSelection) editable = this[0];
            else if (this[0].ownerDocument && this[0].ownerDocument.getSelection) editable = this[0].ownerDocument;
            if (editable) {
                sel = editable.getSelection();
                if (sel.getRangeAt && sel.rangeCount) {
                    range = sel.getRangeAt(0);
                    range.deleteContents();
                    var el = document.createElement("div");
                    el.innerHTML = text;
                    var frag = document.createDocumentFragment(),
                        firstNode = el.firstChild,
                        node, lastNode;
                    while (node = el.firstChild) lastNode = frag.appendChild(node);
                    range.insertNode(frag);
                    if (lastNode) {
                        range = range.cloneRange();
                        range.setStartAfter(lastNode);
                        range.collapse(true);
                        sel.removeAllRanges();
                        sel.addRange(range)
                    }
                    return firstNode
                }
            }
        }
    };
    $.fn.deleteText = function (numberOfCharacters) {
        this.focus();
        if (this.is("textarea")) {
            var ta = this[0];
            var oldStart = ta.selectionStart;
            var begVal = ta.value.substring(0, ta.selectionStart - numberOfCharacters + 1);
            var endVal = ta.value.substring(ta.selectionStart);
            ta.value =
                begVal + endVal;
            ta.selectionStart = oldStart - numberOfCharacters + 1;
            ta.selectionEnd = ta.selectionStart
        } else {
            var sel, range;
            var editor = null;
            if (this[0].getSelection) editor = this[0];
            else if (this[0].ownerDocument) editor = this[0].ownerDocument;
            if (editor.getSelection) {
                sel = editor.getSelection();
                if (sel.getRangeAt && sel.rangeCount) {
                    range = sel.getRangeAt(0);
                    range.setStart(range.startContainer, range.startOffset - numberOfCharacters);
                    range.deleteContents()
                }
            }
        }
    };
    $.fn.insertTextAtNodeAndPosition = function (text, node, position) {
        if (this.is("textarea")) {
            var ta =
                this[0];
            var oldStart = ta.selectionStart;
            if (ta.selectionStart < ta.selectionEnd) ta.value = ta.value.substring(0, ta.selectionStart) + ta.value.substring(ta.selectionEnd);
            ta.value = ta.value.substring(0, oldStart) + text + ta.value.substring(oldStart);
            ta.selectionStart = oldStart + text.length;
            ta.selectionEnd = oldStart + text.length
        } else {
            var sel, range, textNode;
            var editable = null;
            if (this[0].getSelection) editable = this[0];
            else if (this[0].ownerDocument && this[0].ownerDocument.getSelection) editable = this[0].ownerDocument;
            if (editable) {
                sel =
                    editable.getSelection();
                if (node && _.isReal(position)) {
                    range = sel.getRangeAt().cloneRange();
                    sel.removeAllRanges();
                    range.selectNode(node);
                    range.collapse(position === 0);
                    sel.addRange(range);
                    sel.setPosition(position)
                }
                if (!range) {
                    range = sel.getRangeAt(0);
                    range.deleteContents()
                }
                var el = document.createElement("div");
                el.innerHTML = text;
                var frag = document.createDocumentFragment(),
                    firstNode = el.firstChild,
                    node, lastNode;
                while (node = el.firstChild) lastNode = frag.appendChild(node);
                range.insertNode(frag);
                if (lastNode) setTimeout(function () {
                    range =
                        document.createRange();
                    range.selectNodeContents(lastNode);
                    range.collapse(true);
                    sel.removeAllRanges();
                    sel.addRange(range)
                }, 10);
                return firstNode
            }
        }
    };
    $.fn.getCursorNodeAndPosition = function () {
        var sel = this[0].ownerDocument.getSelection();
        var node = sel.focusNode ? sel.focusNode : null;
        var position = node ? sel.getRangeAt().startOffset : null;
        return {
            node: node,
            position: position
        }
    };
    $.fn.selectContents = function () {
        var sel = this[0].ownerDocument.getSelection();
        var range = this[0].ownerDocument.createRange();
        range.selectNodeContents(this[0]);
        sel.removeAllRanges();
        sel.addRange(range)
    }
})(Streak, "length", "createRange", "duplicate");
(function ($) {
    var addedItemTemplate = '<div class="vR autoChosen"><span class="vN Y7BVp" email="<%= email %>"><div class="vT"><%= name %></div><div class="vM"></div></span></div>';
    $.fn.MultipleAutoSuggest = function (config) {
        var defaults = {
            data: null,
            wrapperCss: {},
            minChars: 2,
            dataFunc: function (query, cb) {},
            stringDataFunc: $.noop,
            convertFunc: function (query, data) {},
            compareFunc: function (query, dataItem) {},
            selectFunc: function (data) {},
            removeFunc: function (data) {},
            doneFunc: function (list) {},
            listChangeFunc: function (list) {},
            clickStop: null,
            clickBody: null,
            noResultsFoundText: null,
            immediateDone: false,
            idProperty: "email",
            suggestionTemplate: null,
            existingList: [],
            onlyValidEmailAddress: false
        };
        var options = {};
        $.extend(options, defaults, config);
        return this.each(function () {
            var self = this;
            var input = $(this);
            var parent = input.parent();
            parent.addClass("parent");
            parent.css(options.wrapperCss);
            parent.after('<div style="clear:both;"></div>');
            var dataList = [];
            var ids = [];
            var hasFocus = false;
            var blurTimeout = null;
            var internalSelectFunction = options.selectFunc;
            options.selectFunc = select;
            options.getExcludedIDsFunc = function () {
                return ids
            };
            input.AutoSuggest(options);
            if (options.data) $.each(options.data, function (i, v) {
                addSelection(v)
            });
            input.bind("setPeopleList", function (e) {
                parent.parent().find(".autoChosen").remove();
                dataList = [];
                ids = [];
                var peopleList = input.data("peopleList") || [];
                $.each(peopleList, function (i, v) {
                    addSelection(v)
                })
            });
            input[0].addEventListener("keydown", function (event) {
                switch (event.which) {
                case 27:
                    hasFocus = false;
                    break;
                case 8:
                    if (!input.val()) {
                        parent.parent().find(".vR:last .vM").trigger("click");
                        input.trigger("bbFocus");
                        input.trigger("bbUnselect")
                    }
                    break
                }
            }, true);
            input.focus(function () {
                hasFocus = true;
                clearTimeout(blurTimeout)
            });
            input.bind("enterPressed shiftTabPressed tabPressed", function (e) {
                offFocus()
            });
            input.blur(function () {
                hasFocus = false;
                clearTimeout(blurTimeout);
                blurTimeout = setTimeout(function () {
                    if (!hasFocus) offFocus()
                }, 150)
            });

            function select(selectedItem) {
                internalSelectFunction(selectedItem);
                addSelection(selectedItem);
                input.trigger("bbFocus")
            }

            function addSelection(data) {
                var sel = $(Streak._.template(addedItemTemplate, {
                    name: data.fullName ? data.fullName.escapeHTML() : data.email,
                    email: data.email
                }));
                var close = sel.find(".vM");
                close.click(function (e) {
                    input.focus();
                    dataList.removeVal(data);
                    ids.removeVal(getIDValue(data));
                    sel.remove();
                    if (options.removeFunc) options.removeFunc(data);
                    if (options.listChangeFunc) options.listChangeFunc(dataList);
                    e.preventDefault();
                    return false
                });
                parent.before(sel);
                dataList.push(data);
                ids.push(getIDValue(data));
                if (options.listChangeFunc) options.listChangeFunc(dataList);
                return sel
            }

            function getIDValue(data) {
                if (options.onlyValidEmailAddress) return data[options.idProperty];
                else return data[options.idProperty] || data.displayName
            }

            function offFocus() {
                if (hasFocus) hasFocus = false;
                if (options.doneFunc) options.doneFunc(dataList)
            }
        })
    }
})(Streak.jQuery);
(function ($) {
    var Date = Streak.Date;
    $.fn.will_pickdate = function (opts) {
        return this.each(function (index) {
            var self = $(this);
            if (!$.data(this, "will_pickdate")) {
                var pd = new will_pickdate(this, index, opts);
                self.data("pickdate", pd)
            }
        })
    };

    function will_pickdate(element, index, options) {
        var init_clone_val;
        this.element = $(element);
        this.options = {};
        $.extend(this.options, {
            pickerClass: "wpd",
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            months: ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ],
            dayShort: 2,
            monthShort: 3,
            startDay: 0,
            timePicker: false,
            timePickerOnly: false,
            yearPicker: true,
            militaryTime: false,
            yearsPerPage: 20,
            format: "m-d-Y",
            allowEmpty: false,
            inputOutputFormat: "U",
            animationDuration: 400,
            useFadeInOut: true,
            startView: "month",
            positionOffset: {
                x: 0,
                y: 0
            },
            useFixedPosition: true,
            minDate: null,
            maxDate: null,
            debug: false,
            toggleElements: null,
            appendTo: document.body,
            body: document.body,
            isPersistent: false,
            setInput: true,
            autoClose: true,
            onShow: $.noop,
            onClose: $.noop,
            onSelect: $.noop,
            onClear: $.noop
        }, options);
        if (this.options.toggleElements != null && this.options.toggleElements.jquery) {
            this.toggler = this.options.toggleElements.eq(index);
            $(document).keydown($.proxy(function (event) {
                if (event.which == 9) this.close(null, true)
            }, this))
        }
        this.formatMinMaxDates();
        if (this.options.timePickerOnly) {
            this.options.timePicker = true;
            this.options.startView = "time"
        }
        if (init_clone_val === this.element.val()) init_clone_val = this.format(new Date(this.unformat(init_clone_val, this.options.inputOutputFormat)),
            this.options.format);
        else if (!options.allowEmpty) init_clone_val = this.format(new Date, this.options.format);
        else init_clone_val = "";
        this.display = this.element.css("display");
        this.element.data("will_pickdate", true);
        if (this.toggler) {
            this.toggler.css("cursor", "pointer").click($.proxy(function (event) {
                this.onFocus(this.element, this.clone)
            }, this));
            this.clone.blur($.proxy(function () {
                this.element.val(this.clone.val())
            }, this))
        } else {
            var self = this;
            this.element.bind({
                "keydown": $.proxy(function (e) {
                    if (e.which == 27)
                        if (this.element.data("time")) {
                            this.choice =
                                this.dateToObject(Date.ccreate(this.element.data("time")));
                            this.select(this.choice)
                        } else {
                            this.element.val("");
                            this.close(null, true)
                        } else if (e.which == 13) {
                        if (this.element.val().length > 0) {
                            var d = Date.ccreate(this.element.val());
                            if (d.isValid()) {
                                this.choice = this.dateToObject(d);
                                this.select(this.choice, true)
                            } else {
                                this.element.val("");
                                if ($.isFunction(this.options.onClear)) this.options.onClear();
                                this.close(null, true, true)
                            }
                        } else {
                            if ($.isFunction(this.options.onClear)) this.options.onClear();
                            this.close(null, true,
                                true)
                        }
                        e.preventDefault();
                        e.stopPropagation()
                    } else if (e.which === 9) self.close(null, true)
                }, this),
                "keyup": $.proxy(function (e) {
                    var d = Date.ccreate(this.element.val());
                    if (!d.isValid()) d = Date.ccreate(this.element.val(), Streak.BentoBox.Locale.getCurrent());
                    if (d.isValid()) {
                        this.choice = this.dateToObject(d);
                        this.render(null, d)
                    }
                }, this)
            });
            if (this.options.isPersistent) this.onFocus(this.element, this.element);
            else this.element.bind({
                "onfocus": $.proxy(function (e) {
                    this.onFocus(this.element, this.element)
                }, this),
                "onblur": $.proxy(function (e) {
                    this.close(null,
                        true, false)
                }, this)
            })
        }
    }
    will_pickdate.prototype = {
        onFocus: function (original, visual_input) {
            var init_visual_date, d = visual_input.offset();
            if (init_visual_date === original.data("time")) init_visual_date = Date.ccreate(init_visual_date);
            else {
                init_visual_date = new Date;
                if (this.options.maxDate && init_visual_date.valueOf() > this.options.maxDate.valueOf()) init_visual_date = new Date(this.options.maxDate.valueOf());
                if (this.options.minDate && init_visual_date.valueOf() < this.options.minDate.valueOf()) init_visual_date = new Date(this.options.minDate.valueOf())
            }
            this.input =
                original;
            this.visual = visual_input;
            if (!this.options.isPersistent) this.show({
                left: d.left + this.options.positionOffset.x,
                top: d.top + this.visual.outerHeight() + this.options.positionOffset.y
            }, init_visual_date);
            else this.show({
                left: 0,
                top: 0
            }, init_visual_date)
        },
        dateToObject: function (d) {
            return {
                year: d.getFullYear(),
                month: d.getMonth(),
                day: d.getDate(),
                hours: d.getHours(),
                minutes: d.getMinutes(),
                seconds: d.getSeconds()
            }
        },
        dateFromObject: function (values) {
            var d = new Date,
                v;
            d.setDate(1);
            $.each(["year", "month", "day", "hours",
                "minutes", "seconds"
            ], $.proxy(function (index, value) {
                v = values[value];
                if (!(v || v === 0)) return;
                switch (value) {
                case "day":
                    d.setDate(v);
                    break;
                case "month":
                    d.setMonth(v);
                    break;
                case "year":
                    d.setFullYear(v);
                    break;
                case "hours":
                    d.setHours(v);
                    break;
                case "minutes":
                    d.setMinutes(v);
                    break;
                case "seconds":
                    d.setSeconds(v);
                    break
                }
            }, this));
            return d
        },
        show: function (position, timestamp) {
            this.formatMinMaxDates();
            if (timestamp) this.working_date = Date.ccreate(timestamp);
            else this.working_date = Date.ccreate();
            this.today = Date.ccreate();
            this.choice = this.dateToObject(this.working_date);
            this.mode = this.options.startView == "time" && !this.options.timePicker ? "month" : this.options.startView;
            this.render();
            if ($.isFunction(this.options.onShow)) this.options.onShow()
        },
        render: function (use_fx, aDate) {
            if (!this.picker) this.constructPicker();
            else {
                var o = this.oldContents;
                this.oldContents = this.newContents;
                this.newContents = o;
                this.newContents.empty()
            } if (aDate) this.working_date = aDate;
            var startDate = new Date(this.working_date.getTime());
            this.limit = {
                right: false,
                left: false
            };
            switch (this.mode) {
            case "decades":
                this.renderDecades();
                break;
            case "year":
                this.renderYear();
                break;
            case "time":
                this.renderTime();
                this.limit = {
                    right: true,
                    left: true
                };
                break;
            default:
                this.renderMonth()
            }
            this.picker.find(".previous").toggleClass("disabled", this.limit.left);
            this.picker.find(".next").toggleClass("disabled", this.limit.right);
            this.picker.find(".title").css("cursor", this.allowZoomOut() ? "pointer" : "default");
            this.working_date = startDate;
            if (this.options.useFadeInOut) this.picker.fadeIn(this.options.animationDuration);
            if (use_fx) this.fx(use_fx);
            else {
                this.oldContents.hide();
                this.newContents.css({
                    left: "0px"
                }).show()
            } if (this.options.useFixedPosition) this.picker.containByScreen(this.options.appendTo)
        },
        fx: function (effects) {
            if (effects == "right") {
                this.oldContents.css("left", 0).show();
                this.newContents.css("left", this.bodyWidth).show();
                this.slider.css("left", -this.bodyWidth)
            } else if (effects == "left") {
                this.oldContents.css("left", this.bodyWidth).show();
                this.newContents.css("left", 0).show();
                this.slider.css("left", 0)
            } else if (effects ==
                "fade") {
                this.slider.css("left", 0);
                this.oldContents.css("left", 0).fadeOut(this.options.animationDuration >> 1);
                this.newContents.css("left", 0).hide().fadeIn(this.options.animationDuration)
            }
        },
        constructPicker: function () {
            var self = this;
            $(this.options.appendTo).append(this.picker = $('<div class="' + this.options.pickerClass + '" />'));
            if (this.options.useFadeInOut) this.picker.hide();
            if (this.options.isPersistent) this.picker.css({
                position: "relative"
            });
            var h, title_cont, b;
            this.picker.append(h = $('<div class="header"/>'));
            h.append(title_cont = $('<div class="title"/>').captureClick($.proxy(this.zoomOut, this)));
            h.append($('<div class="previous">&larr;</div>').captureClick(function () {
                setTimeout(function () {
                    self.previous()
                }, 20)
            }));
            h.append($('<div class="next">&rarr;</div>').captureClick(function () {
                setTimeout(function () {
                    self.next()
                }, 20)
            }));
            h.append($('<div class="closeButton">x</div>').captureClick($.proxy(this.close, this)));
            title_cont.append($('<span class="titleText"/>'));
            this.picker.append(b = $('<div class="body"/>'));
            this.bodyHeight = 193;
            this.bodyWidth = 208;
            b.append(this.slider = $('<div style="position:absolute;top:0;left:0;width:' + 2 * this.bodyWidth + "px;height:" + 2 * this.bodyHeight + 'px" />'));
            this.slider.append(this.oldContents = $('<div style="position:absolute;top:0;left:' + this.bodyWidth + "px;width:" + this.bodyWidth + "px;height:" + this.bodyHeight + 'px" />'));
            this.slider.append(this.newContents = $('<div style="position:absolute;top:0;left:0;width:' + this.bodyWidth + "px;height:" + this.bodyHeight + 'px" />'));
            if (this.options.autoClose) this.picker.bodyCloseAndStop({
                body: $(this.options.body),
                stop: $(this.options.appendTo)[0],
                closeFunction: function () {
                    self.close(null, true)
                }
            });
            if (this.options.useFixedPosition) this.picker[0].style.position = "fixed"
        },
        renderDecades: function () {
            while (this.working_date.getFullYear() % this.options.yearsPerPage > 0) this.working_date.setFullYear(this.working_date.getFullYear() - 1);
            this.renderTitle(this.working_date.getFullYear() + "-" + (this.working_date.getFullYear() + this.options.yearsPerPage - 1));
            var i, y, e, available = false,
                container;
            this.newContents.append(container = $('<div class="years"/>'));
            if (this.options.minDate && this.working_date.getFullYear() <= this.options.minDate.getFullYear()) this.limit.left = true;
            for (i = 0; i < this.options.yearsPerPage; i++) {
                y = this.working_date.getFullYear();
                container.append(e = $('<div class="year year' + i + (y == this.today.getFullYear() ? " today" : "") + (y == this.choice.year ? " selected" : "") + '">' + y + "</>"));
                if (this.limited("year")) {
                    e.addClass("unavailable");
                    if (available) this.limit.right = true;
                    else this.limit.left = true
                } else {
                    available = true;
                    e.click({
                        year: y
                    }, $.proxy(function (event) {
                        this.working_date.setFullYear(event.data.year);
                        this.mode = "year";
                        this.render("fade")
                    }, this))
                }
                this.working_date.setFullYear(this.working_date.getFullYear() + 1)
            }
            if (!available || this.options.maxDate && this.working_date.getFullYear() >= this.options.maxDate.getFullYear()) this.limit.right = true
        },
        renderYear: function () {
            var month = this.today.getMonth(),
                this_year = this.working_date.getFullYear() == this.today.getFullYear(),
                selected_year = this.working_date.getFullYear() == this.choice.year,
                available = false,
                container, i, e;
            this.renderTitle(this.working_date.getFullYear());
            this.working_date.setMonth(0);
            this.newContents.append(container = $('<div class="months"/>'));
            for (i = 0; i <= 11; i++) {
                container.append(e = $('<div class="month month' + (i + 1) + (i == month && this_year ? " today" : "") + (i == this.choice.month && selected_year ? " selected" : "") + '">' + (this.options.monthShort ? this.options.months[i].substring(0, this.options.monthShort) : this.options.months[i]) + "</div>"));
                if (this.limited("month")) {
                    e.addClass("unavailable");
                    if (available) this.limit.right = true;
                    else this.limit.left = true
                } else {
                    available =
                        true;
                    e.click({
                        month: i
                    }, $.proxy(function (event) {
                        this.working_date.setDate(1);
                        this.working_date.setMonth(event.data.month);
                        this.mode = "month";
                        this.render("fade")
                    }, this))
                }
                this.working_date.setMonth(i)
            }
            if (!available) this.limit.right = true
        },
        renderTime: function () {
            var container;
            this.newContents.append(container = $('<div class="time"/>'));
            if (this.options.timePickerOnly) this.renderTitle("Select a time");
            else this.renderTitle(this.format(this.working_date, "j M, Y"));
            container.append($('<input type="text" class="hour"' +
                (this.options.militaryTime ? ' style="left:30px"' : "") + ' maxlength="2" value="' + this.leadZero(this.options.militaryTime ? this.working_date.getHours() : this.working_date.getHours() > 12 ? this.working_date.getHours() - 12 : this.working_date.getHours()) + '"/>'));
            container.append($('<input type="text" class="minutes"' + (this.options.militaryTime ? ' style="left:110px"' : "") + ' maxlength="2" value="' + this.leadZero(this.working_date.getMinutes()) + '"/>'));
            container.append($('<div class="separator"' + (this.options.militaryTime ?
                ' style="left:91px"' : "") + ">:</div>"));
            if (!this.options.militaryTime) container.append($('<select class="ampn">' + '<option value="PM">PM</option>' + '<option value="AM">AM</option>' + "</select>"));
            container.append($('<input type="submit" value="OK" class="ok"/>').click($.proxy(function (event) {
                event.stopPropagation();
                this.select($.extend(this.dateToObject(this.working_date), {
                    hours: parseInt(this.picker.find(".hour").val(), 10) + (!this.options.militaryTime && this.picker.find(".ampm").val() == "PM" ? 12 : 0),
                    minutes: parseInt(this.picker.find(".minutes").val(),
                        10)
                }))
            }, this)))
        },
        renderMonth: function () {
            if (!this.today) this.today = Date.create();
            var month = this.working_date.getMonth(),
                container = $('<div class="days"/>'),
                titles = $('<div class="titles"/>'),
                available = false,
                t = this.today.toDateString(),
                currentChoice = this.dateFromObject(this.choice).toDateString(),
                d, i, classes, e, weekContainer;
            this.renderTitle(this.options.months[month] + " " + this.working_date.getFullYear());
            this.working_date.setDate(1);
            for (i = 0; i < 1E3; i++) {
                if (this.working_date.getDay() === this.options.startDay) break;
                this.working_date.setDate(this.working_date.getDate() - 1)
            }
            this.newContents.append(container.append(titles));
            for (d = this.options.startDay; d < this.options.startDay + 7; d++) titles.append($('<div class="title day day' + d % 7 + '">' + this.options.days[d % 7].substring(0, this.options.dayShort) + "</div>"));
            for (i = 0; i < 42; i++) {
                classes = ["day", "day" + this.working_date.getDay()];
                if (this.working_date.toDateString() == t) classes.push("today");
                if (this.working_date.toDateString() == currentChoice) classes.push("selected");
                if (this.working_date.getMonth() !=
                    month) classes.push("otherMonth");
                if (i % 7 === 0) container.append(weekContainer = $('<div class="week week' + Math.floor(i / 7) + '"/>'));
                weekContainer.append(e = $('<div class="' + classes.join(" ") + '">' + this.working_date.getDate() + "</div>"));
                if (this.limited("date")) {
                    e.addClass("unavailable");
                    if (available) this.limit.right = true;
                    else if (this.working_date.getMonth() == month) this.limit.left = true
                } else {
                    available = true;
                    e.click({
                            day: this.working_date.getDate(),
                            month: this.working_date.getMonth(),
                            year: this.working_date.getFullYear()
                        },
                        $.proxy(function (event) {
                            if (this.options.timePicker) {
                                this.working_date.setDate(event.data.day);
                                this.working_date.setMonth(event.data.month);
                                this.mode = "time";
                                this.render("fade")
                            } else {
                                event.stopPropagation();
                                this.select(event.data)
                            }
                        }, this))
                }
                this.working_date.setDate(this.working_date.getDate() + 1)
            }
            if (!available) this.limit.right = true
        },
        renderTitle: function (text) {
            if (this.allowZoomOut()) this.picker.find(".title").removeClass("disabled");
            else this.picker.find(".title").addClass("disabled");
            this.picker.find(".titleText").text(text)
        },
        limited: function (type) {
            var cs = !! this.options.minDate,
                ce = !! this.options.maxDate;
            if (!(cs && ce)) return false;
            switch (type) {
            case "year":
                return cs && this.working_date.getFullYear() < this.options.minDate.getFullYear() || ce && this.working_date.getFullYear() > this.options.maxDate.getFullYear();
            case "month":
                var ms = parseInt("" + this.working_date.getFullYear() + this.leadZero(this.working_date.getMonth()), 10);
                return cs && ms < parseInt("" + this.options.minDate.getFullYear() + this.leadZero(this.options.minDate.getMonth()), 10) ||
                    ce && ms > parseInt("" + this.options.maxDate.getFullYear() + this.leadZero(this.options.maxDate.getMonth()), 10);
            case "date":
                return cs && this.working_date < this.options.minDate || ce && this.working_date > this.options.maxDate
            }
        },
        allowZoomOut: function () {
            if (this.mode == "time" && this.options.timePickerOnly) return false;
            if (this.mode == "decades") return false;
            return !(this.mode == "year" && !this.options.yearPicker)
        },
        zoomOut: function () {
            if (!this.allowZoomOut()) return;
            switch (this.mode) {
            case "year":
                this.mode = "decades";
                break;
            case "time":
                this.mode =
                    "month";
                break;
            default:
                this.mode = "year"
            }
            this.render("fade")
        },
        previous: function () {
            switch (this.mode) {
            case "decades":
                this.working_date.setFullYear(this.working_date.getFullYear() - this.options.yearsPerPage);
                break;
            case "year":
                this.working_date.setFullYear(this.working_date.getFullYear() - 1);
                break;
            case "month":
                this.working_date.setMonth(this.working_date.getMonth() - 1)
            }
            if (this.mode != "time") this.render("left")
        },
        next: function () {
            switch (this.mode) {
            case "decades":
                this.working_date.setFullYear(this.working_date.getFullYear() +
                    this.options.yearsPerPage);
                break;
            case "year":
                this.working_date.setFullYear(this.working_date.getFullYear() + 1);
                break;
            case "month":
                this.working_date.setMonth(this.working_date.getMonth() + 1)
            }
            if (this.mode != "time") this.render("right")
        },
        close: function (e, force, isEnter) {
            var self = this;
            if (!this.picker || this.closing || this.options.isPersistent) return;
            if (force || e && e.target !== this.picker && this.picker.has(e.target).size() === 0 && e.target !== this.visual)
                if (this.options.useFadeInOut) {
                    this.closing = true;
                    this.picker.fadeOut(this.options.animationDuration >>
                        1, function () {
                            self.destroy(isEnter)
                        })
                } else this.destroy(isEnter)
        },
        destroy: function (isEnter) {
            this.picker.remove();
            this.picker = null;
            this.closing = false;
            if ($.isFunction(this.options.onClose)) this.options.onClose(isEnter)
        },
        select: function (values, isEnter) {
            this.working_date = this.dateFromObject($.extend(this.choice, values));
            if (!this.options.timePicker) {
                var dDate = new Date(this.working_date.getFullYear(), this.working_date.getMonth(), this.working_date.getDate(), 12, 0, 0);
                dDate.toLocalTime();
                this.working_date.setTime(dDate.getTime())
            }
            if (this.options.setInput &&
                this.input) this.input.val(this.format(this.working_date, this.options.inputOutputFormat));
            if (this.visual) this.visual.val(this.format(this.working_date, this.options.format));
            if ($.isFunction(this.options.onSelect)) this.options.onSelect(this.working_date);
            this.close(null, true, isEnter)
        },
        formatMinMaxDates: function () {
            if (this.options.maxDate && this.options.maxDate.format) {
                this.options.maxDate = this.unformat(this.options.maxDate.date, this.options.maxDate.format);
                this.options.maxDate.setHours(23);
                this.options.maxDate.setMinutes(59);
                this.options.maxDate.setSeconds(59)
            }
        },
        leadZero: function (v) {
            return v < 10 ? "0" + v : v
        },
        format: function (t, format) {
            var f = "",
                h = t.getHours(),
                m = t.getMonth();
            for (var i = 0; i < format.length; i++) switch (format.charAt(i)) {
            case "\\":
                i++;
                f += format.charAt(i);
                break;
            case "y":
                f += (100 + t.getYear() + "").substring(1);
                break;
            case "Y":
                f += t.getFullYear();
                break;
            case "m":
                f += this.leadZero(m + 1);
                break;
            case "n":
                f += m + 1;
                break;
            case "M":
                f += this.options.months[m].substring(0, this.options.monthShort);
                break;
            case "F":
                f += this.options.months[m];
                break;
            case "d":
                f += this.leadZero(t.getDate());
                break;
            case "j":
                f += t.getDate();
                break;
            case "D":
                f += this.options.days[t.getDay()].substring(0, this.options.dayShort);
                break;
            case "l":
                f += this.options.days[t.getDay()];
                break;
            case "G":
                f += h;
                break;
            case "H":
                f += this.leadZero(h);
                break;
            case "g":
                f += h % 12 ? h % 12 : 12;
                break;
            case "h":
                f += this.leadZero(h % 12 ? h % 12 : 12);
                break;
            case "a":
                f += h > 11 ? "pm" : "am";
                break;
            case "A":
                f += h > 11 ? "PM" : "AM";
                break;
            case "i":
                f += this.leadZero(t.getMinutes());
                break;
            case "s":
                f += this.leadZero(t.getSeconds());
                break;
            case "U":
                f +=
                    Math.floor(t.valueOf() / 1E3);
                break;
            default:
                f += format.charAt(i)
            }
            return f
        },
        unformat: function (t, format) {
            var d = new Date,
                a = {}, c, m, v;
            t = t.toString();
            for (var i = 0; i < format.length; i++) {
                c = format.charAt(i);
                switch (c) {
                case "\\":
                    r = null;
                    i++;
                    break;
                case "y":
                    r = "[0-9]{2}";
                    break;
                case "Y":
                    r = "[0-9]{4}";
                    break;
                case "m":
                    r = "0[1-9]|1[012]";
                    break;
                case "n":
                    r = "[1-9]|1[012]";
                    break;
                case "M":
                    r = "[A-Za-z]{" + this.options.monthShort + "}";
                    break;
                case "F":
                    r = "[A-Za-z]+";
                    break;
                case "d":
                    r = "0[1-9]|[12][0-9]|3[01]";
                    break;
                case "j":
                    r = "[1-9]|[12][0-9]|3[01]";
                    break;
                case "D":
                    r = "[A-Za-z]{" + this.options.dayShort + "}";
                    break;
                case "l":
                    r = "[A-Za-z]+";
                    break;
                case "G":
                case "H":
                case "g":
                case "h":
                    r = "[0-9]{1,2}";
                    break;
                case "a":
                    r = "(am|pm)";
                    break;
                case "A":
                    r = "(AM|PM)";
                    break;
                case "i":
                case "s":
                    r = "[012345][0-9]";
                    break;
                case "U":
                    r = "-?[0-9]+$";
                    break;
                default:
                    r = null
                }
                if (r) {
                    m = t.match("^" + r);
                    if (m) {
                        a[c] = m[0];
                        t = t.substring(a[c].length)
                    } else {
                        if (this.options.debug) alert("Fatal Error in will_pickdate\n\nUnexpected format at: '" + t + "' expected format character '" + c + "' (pattern '" + r + "')");
                        return d
                    }
                } else t = t.substring(1)
            }
            for (c in a) {
                v = a[c];
                switch (c) {
                case "y":
                    d.setFullYear(v < 30 ? 2E3 + parseInt(v, 10) : 1900 + parseInt(v, 10));
                    break;
                case "Y":
                    d.setFullYear(v);
                    break;
                case "m":
                case "n":
                    d.setMonth(v - 1);
                    break;
                case "M":
                    v = this.options.months.filter(function (index) {
                        return this.substring(0, this.options.monthShort) == v
                    })[0];
                case "F":
                    d.setMonth(options.months.indexOf(v));
                    break;
                case "d":
                case "j":
                    d.setDate(v);
                    break;
                case "G":
                case "H":
                    d.setHours(v);
                    break;
                case "g":
                case "h":
                    if (a["a"] == "pm" || a["A"] == "PM") d.setHours(v ==
                        12 ? 0 : parseInt(v, 10) + 12);
                    else d.setHours(v);
                    break;
                case "i":
                    d.setMinutes(v);
                    break;
                case "s":
                    d.setSeconds(v);
                    break;
                case "U":
                    d = new Date(parseInt(v, 10) * 1E3)
                }
            }
            return d
        }
    }
})(Streak.jQuery);
(function (Streak) {
    var $ = Streak.jQuery,
        Date = Streak.Date;

    function prettyDate(time, justDate) {
        var date = new Date(time),
            diff = ((new Date).getTime() - date.getTime()) / 1E3,
            day_diff = Math.floor(diff / 86400),
            year_diff = Math.abs((new Date).getYear() - date.getYear());
        if (isNaN(day_diff) || (day_diff < 0 || day_diff >= 31) && !justDate) return "";
        if (justDate) {
            var parts = date.toDateString().split(" ");
            return year_diff === 0 && parts[1] + " " + parts[2] || parts[1] + " " + parts[2] + " " + parts[3]
        } else return day_diff === 0 && (diff < 60 && "just now" || diff <
            120 && "1 minute ago" || diff < 3600 && Math.floor(diff / 60) + " minutes ago" || diff < 7200 && "1 hour ago" || diff < 86400 && Math.floor(diff / 3600) + " hours ago") || day_diff == 1 && "Yesterday" || day_diff < 7 && day_diff + " days ago" || day_diff < 31 && Math.ceil(day_diff / 7) + " weeks ago"
    }
    $.fn.prettyDate = function (justDate) {
        return this.each(function () {
            var date = prettyDate(this.title, justDate);
            if (date) Streak.jQuery(this).text(date)
        })
    };
    Date.prototype.prettyDate = function (justDate) {
        return prettyDate(this, justDate)
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery;
    $.fn.selectAllOnClick = function () {
        return this.each(function () {
            $(this).click(function (e) {
                var sel = Streak.document.getSelection();
                sel.removeAllRanges();
                sel.selectAllChildren(this)
            }.bind(this))
        })
    }
})(Streak);
(function ($) {
    var converter = {
        vertical: {
            x: false,
            y: true
        },
        horizontal: {
            x: true,
            y: false
        },
        both: {
            x: true,
            y: true
        },
        x: {
            x: true,
            y: false
        },
        y: {
            x: false,
            y: true
        }
    };
    var settings = {
        duration: "fast",
        direction: "both",
        toTop: false
    };
    var rootrx = /^(?:html)$/i;
    var borders = function (domElement, styles) {
        styles = styles || (document.defaultView && document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(domElement, null) : domElement.currentStyle);
        var px = document.defaultView && document.defaultView.getComputedStyle ? true : false;
        var b = {
            top: parseFloat(px ? styles.borderTopWidth : $.css(domElement, "borderTopWidth")) || 0,
            left: parseFloat(px ? styles.borderLeftWidth : $.css(domElement, "borderLeftWidth")) || 0,
            bottom: parseFloat(px ? styles.borderBottomWidth : $.css(domElement, "borderBottomWidth")) || 0,
            right: parseFloat(px ? styles.borderRightWidth : $.css(domElement, "borderRightWidth")) || 0
        };
        return {
            top: b.top,
            left: b.left,
            bottom: b.bottom,
            right: b.right,
            vertical: b.top + b.bottom,
            horizontal: b.left + b.right
        }
    };
    var dimensions = function ($element) {
        var win = $(window);
        var isRoot = rootrx.test($element[0].nodeName);
        return {
            border: isRoot ? {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            } : borders($element[0]),
            scroll: {
                top: (isRoot ? win : $element).scrollTop(),
                left: (isRoot ? win : $element).scrollLeft()
            },
            scrollbar: {
                right: isRoot ? 0 : $element.innerWidth() - $element[0].clientWidth,
                bottom: isRoot ? 0 : $element.innerHeight() - $element[0].clientHeight
            },
            rect: function () {
                var r = $element[0].getBoundingClientRect();
                return {
                    top: isRoot ? 0 : r.top,
                    left: isRoot ? 0 : r.left,
                    bottom: isRoot ? $element[0].clientHeight : r.bottom,
                    right: isRoot ?
                        $element[0].clientWidth : r.right,
                    height: $element[0].clientHeight
                }
            }()
        }
    };
    $.fn.extend({
        scrollintoview: function (options) {
            options = $.extend({}, settings, options);
            options.direction = converter[typeof options.direction === "string" && options.direction.toLowerCase()] || converter.both;
            var dirStr = "";
            if (options.direction.x === true) dirStr = "horizontal";
            if (options.direction.y === true) dirStr = dirStr ? "both" : "vertical";
            var el = this.eq(0);
            if (!el.isVisible()) {
                if ($.isFunction(options.complete)) options.complete();
                return
            }
            var scroller =
                options.scroller || el.closest(":scrollable(" + dirStr + ")");
            if (scroller.length > 0) {
                scroller = scroller.eq(0);
                var animOptions = {};
                var dim = {
                    s: dimensions(scroller)
                };
                var rel = {};
                if (options.rectangle) {
                    options.rectangle.left += dim.s.rect.left;
                    options.rectangle.right += dim.s.rect.left;
                    dim.e = {
                        rect: options.rectangle
                    };
                    var relBottom = options.rectangle.bottom - dim.s.scroll.top;
                    if (options.rectangle.top < dim.s.scroll.top || options.toTop) animOptions.scrollTop = options.rectangle.top;
                    else if (relBottom > dim.s.rect.height) animOptions.scrollTop =
                        dim.s.scroll.top + (relBottom - dim.s.rect.height)
                } else {
                    dim.e = dimensions(el);
                    rel.top = dim.e.rect.top - (dim.s.rect.top + dim.s.border.top);
                    rel.bottom = dim.s.rect.bottom - dim.s.border.bottom - dim.s.scrollbar.bottom - dim.e.rect.bottom;
                    if (options.direction.y === true)
                        if (rel.top < 0) animOptions.scrollTop = dim.s.scroll.top + rel.top;
                        else if (rel.top > 0 && rel.bottom < 0 || options.toTop) animOptions.scrollTop = dim.s.scroll.top + Math.min(rel.top, -rel.bottom) + (options.toTop ? dim.s.rect.bottom - dim.s.rect.top + (dim.e.rect.top - dim.e.rect.bottom) :
                        0)
                }
                rel.left = dim.e.rect.left - (dim.s.rect.left + dim.s.border.left);
                rel.right = dim.s.rect.right - dim.s.border.right - dim.s.scrollbar.right - dim.e.rect.right;
                if (options.direction.x === true)
                    if (rel.left < 0) animOptions.scrollLeft = dim.s.scroll.left + rel.left;
                    else if (rel.left > 0 && rel.right < 0) animOptions.scrollLeft = dim.s.scroll.left + Math.min(rel.left, -rel.right);
                if (!$.isEmptyObject(animOptions)) {
                    if (rootrx.test(scroller[0].nodeName)) scroller = $("html,body");
                    scroller.animate(animOptions, options.duration).eq(0).queue(function (next) {
                        $.isFunction(options.complete) &&
                            options.complete.call(scroller[0]);
                        next()
                    })
                } else $.isFunction(options.complete) && options.complete.call(scroller[0])
            }
            return this
        }
    });
    var scrollValue = {
        auto: true,
        scroll: true,
        visible: false,
        hidden: false
    };
    $.extend($.expr[":"], {
        scrollable: function (element, index, meta, stack) {
            var direction = converter[typeof meta[3] === "string" && meta[3].toLowerCase()] || converter.both;
            var styles = document.defaultView && document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(element, null) : element.currentStyle;
            var overflow = {
                x: scrollValue[styles.overflowX.toLowerCase()] || false,
                y: scrollValue[styles.overflowY.toLowerCase()] || false,
                isRoot: rootrx.test(element.nodeName)
            };
            if (!overflow.x && !overflow.y && !overflow.isRoot) return false;
            var size = {
                height: {
                    scroll: element.scrollHeight,
                    client: element.clientHeight
                },
                width: {
                    scroll: element.scrollWidth,
                    client: element.clientWidth
                },
                scrollableX: function () {
                    return (overflow.x || overflow.isRoot) && this.width.scroll > this.width.client
                },
                scrollableY: function () {
                    return (overflow.y || overflow.isRoot) && this.height.scroll >
                        this.height.client
                }
            };
            return direction.y && size.scrollableY() || direction.x && size.scrollableX()
        }
    })
})(Streak.jQuery);
(function ($) {
    var w = [];
    $.modal = function (data, options) {
        return $.modal.impl.init(data, options)
    };
    var allModalsBlocked = false;
    $.modal.block = function () {
        allModalsBlocked = true
    };
    $.modal.unblock = function () {
        allModalsBlocked = false
    };
    $.modal.close = function () {
        $.modal.impl.close()
    };
    $.modal.focus = function (pos) {
        $.modal.impl.focus(pos)
    };
    $.modal.setContainerDimensions = function () {
        $.modal.impl.setContainerDimensions()
    };
    $.modal.setPosition = function () {
        $.modal.impl.setPosition()
    };
    $.modal.update = function (height, width) {
        $.modal.impl.update(height,
            width)
    };
    $.fn.modal = function (options) {
        return $.modal.impl.init(this, options)
    };
    $.modal.defaults = {
        appendTo: "body",
        focus: true,
        opacity: 50,
        overlayId: "simplemodal-overlay",
        overlayCss: {},
        containerId: "simplemodal-container",
        containerCss: {},
        dataId: "simplemodal-data",
        dataCss: {},
        minHeight: null,
        minWidth: null,
        maxHeight: null,
        maxWidth: null,
        autoResize: false,
        autoPosition: true,
        zIndex: 1E3,
        close: true,
        closeHTML: '<a class="modalCloseImg" title="Close"></a>',
        closeClass: "simplemodal-close",
        escClose: true,
        overlayClose: false,
        position: null,
        persist: false,
        modal: true,
        onOpen: null,
        onShow: null,
        onClose: null
    };
    $.modal.impl = {
        d: {},
        dStack: [],
        currentData: null,
        currentOptions: null,
        overlayStack: [],
        init: function (data, options) {
            if (allModalsBlocked && !options.force) return;
            var s = this;
            if (s.d.data) s.close(!options.dontStack);
            s.currentData = data;
            s.currentOptions = options;
            s.o = $.extend({}, $.modal.defaults, options);
            s.zIndex = s.o.zIndex;
            s.occb = false;
            if (typeof data === "object") {
                data = data instanceof $ ? data : $(data);
                s.d.placeholder = false;
                if (data.parent().parent().size() >
                    0) {
                    data.before($("<span></span>").attr("id", "simplemodal-placeholder").css({
                        display: "none"
                    }));
                    s.d.placeholder = true;
                    s.display = data.css("display");
                    if (!s.o.persist) s.d.orig = data.clone(true)
                }
            } else if (typeof data === "string" || typeof data === "number") data = $("<div></div>").html(data);
            else {
                alert("SimpleModal Error: Unsupported data type: " + typeof data);
                return s
            }
            s.create(data);
            data = null;
            s.open();
            if ($.isFunction(s.o.onShow)) s.o.onShow.apply(s, [s.d]);
            return s
        },
        create: function (data) {
            var s = this;
            w = s.getDimensions();
            s.d.overlay = $("<div></div>").attr("id", s.o.overlayId).addClass("simplemodal-overlay").css($.extend(s.o.overlayCss, {
                display: "none",
                opacity: s.o.opacity / 100,
                position: "fixed",
                zIndex: s.o.zIndex + 1
            })).appendTo(s.o.appendTo);
            s.d.container = $("<div></div>").attr("id", s.o.containerId).addClass("simplemodal-container").css({
                display: "none",
                position: "fixed",
                zIndex: s.o.zIndex + 2
            }).append(s.o.close && s.o.closeHTML ? $(s.o.closeHTML).addClass(s.o.closeClass) : "").appendTo(s.o.appendTo);
            s.d.wrap = $("<div></div>").attr("tabIndex", -1).addClass("simplemodal-wrap").appendTo(s.d.container);
            s.d.innerWrap = $("<div></div>").addClass("simplemodal-innerWrap").appendTo(s.d.wrap);
            s.d.data = data.attr("id", data.attr("id") || s.o.dataId).addClass("simplemodal-data").css($.extend(s.o.dataCss, {
                display: "none"
            })).appendTo(s.o.appendTo);
            data = null;
            s.d.data.appendTo(s.d.innerWrap)
        },
        bindEvents: function () {
            var s = this;
            $("." + s.o.closeClass).bind("click.simplemodal", function (e) {
                e.preventDefault();
                s.close()
            });
            if (s.o.modal && s.o.close && s.o.overlayClose) s.d.overlay.bind("click.simplemodal",
                function (e) {
                    e.preventDefault();
                    s.close()
                });
            $(document).bind("keydown.simplemodal", function (e) {
                if (s.o.modal && e.keyCode === 9) s.watchTab(e);
                else if (s.o.close && s.o.escClose && e.keyCode === 27) {
                    e.preventDefault();
                    s.close()
                }
            })
        },
        unbindEvents: function () {
            $("." + this.o.closeClass).unbind("click.simplemodal");
            $(document).unbind("keydown.simplemodal");
            $(window).unbind("resize.simplemodal");
            this.d.overlay.unbind("click.simplemodal")
        },
        focus: function (pos) {
            var s = this,
                p = pos && $.inArray(pos, ["first", "last"]) !== -1 ? pos : "first";
            var input = $(":input:enabled:FastVisible(noCompute):" + p, s.d.wrap);
            setTimeout(function () {
                input.length > 0 ? input.focus() : s.d.wrap.focus()
            }, 10)
        },
        getDimensions: function () {
            var el = $(window);
            var h = el.height();
            return [h, el.width()]
        },
        getVal: function (v, d) {
            return v ? typeof v === "number" ? v : v === "auto" ? 0 : v.indexOf("%") > 0 ? parseInt(v.replace(/%/, "")) / 100 * (d === "h" ? w[0] : w[1]) : parseInt(v.replace(/px/, "")) : null
        },
        update: function (height, width) {
            var s = this;
            if (!s.d.data) return false;
            s.d.origHeight = s.getVal(height, "h");
            s.d.origWidth =
                s.getVal(width, "w");
            s.d.data.hide();
            height && s.d.container.css("height", height);
            width && s.d.container.css("width", width);
            s.setContainerDimensions();
            s.d.data.show();
            s.o.focus && s.focus();
            s.unbindEvents();
            s.bindEvents()
        },
        setContainerDimensions: function () {
            var s = this;
            var ch = s.d.origHeight ? s.d.origHeight : s.getVal(s.d.container.css("height"), "h"),
                cw = s.d.origWidth ? s.d.origWidth : s.getVal(s.d.container.css("width"), "w"),
                dh = s.d.data.outerHeight(true),
                dw = s.d.data.outerWidth(true);
            s.d.origHeight = s.d.origHeight ||
                ch;
            s.d.origWidth = s.d.origWidth || cw;
            var mxoh = s.o.maxHeight ? s.getVal(s.o.maxHeight, "h") : null,
                mxow = s.o.maxWidth ? s.getVal(s.o.maxWidth, "w") : null,
                mh = mxoh && mxoh < w[0] ? mxoh : w[0],
                mw = mxow && mxow < w[1] ? mxow : w[1];
            var moh = s.o.minHeight ? s.getVal(s.o.minHeight, "h") : "auto";
            if (!ch)
                if (!dh) ch = moh;
                else if (dh > mh) ch = mh;
            else if (s.o.minHeight && moh !== "auto" && dh < moh) ch = moh;
            else ch = dh;
            else ch = s.o.autoResize && ch > mh ? mh : ch < moh ? moh : ch;
            var mow = s.o.minWidth ? s.getVal(s.o.minWidth, "w") : "auto";
            if (!cw)
                if (!dw) cw = mow;
                else if (dw > mw) cw = mw;
            else if (s.o.minWidth && mow !== "auto" && dw < mow) cw = mow;
            else cw = dw;
            else cw = s.o.autoResize && cw > mw ? mw : cw < mow ? mow : cw;
            s.d.container.css({
                height: ch,
                width: cw
            });
            s.d.wrap.css({
                overflow: dh > ch || dw > cw ? "auto" : "visible"
            });
            s.o.autoPosition && s.setPosition()
        },
        setPosition: function () {
            var s = this,
                top, left, hc = w[0] / 2 - s.d.container.outerHeight(true) / 2,
                vc = w[1] / 2 - s.d.container.outerWidth(true) / 2;
            if (s.o.position && Object.prototype.toString.call(s.o.position) === "[object Array]") {
                top = s.o.position[0] || hc;
                left = s.o.position[1] || vc
            } else {
                top =
                    hc;
                left = vc
            }
            s.d.container.css({
                left: left,
                top: top
            })
        },
        watchTab: function (e) {
            var s = this;
            if ($(e.target).parents(".simplemodal-container").length > 0) {
                s.inputs = $(":input:enabled:FastVisible(noCompute):first, :input:enabled:FastVisible(noCompute):last", s.d.data[0]);
                if (!e.shiftKey && e.target === s.inputs[s.inputs.length - 1] || e.shiftKey && e.target === s.inputs[0] || s.inputs.length === 0) {
                    e.preventDefault();
                    var pos = e.shiftKey ? "last" : "first";
                    s.focus(pos)
                }
            } else {
                e.preventDefault();
                s.focus()
            }
        },
        open: function () {
            var s = this;
            s.d.iframe &&
                s.d.iframe.show();
            if ($.isFunction(s.o.onOpen)) s.o.onOpen.apply(s, [s.d]);
            else {
                s.d.overlay.show();
                s.d.container.show();
                s.d.data.show()
            }
            s.o.focus && s.focus();
            s.bindEvents()
        },
        close: function (isStacked) {
            var s = this;
            if (!s.d.data) return false;
            s.unbindEvents();
            if (s.d.placeholder) {
                var ph = $("#simplemodal-placeholder");
                if (s.o.persist) ph.replaceWith(s.d.data.removeClass("simplemodal-data").css("display", s.display));
                else {
                    s.d.data.hide().detach();
                    ph.replaceWith(s.d.orig)
                }
            } else s.d.data.hide().detach();
            s.d.container.hide().remove();
            s.d.iframe && s.d.iframe.hide().remove();
            var overlay = s.d.overlay;
            if (isStacked) {
                s.d = {};
                s.dStack.push({
                    data: s.currentData,
                    options: s.currentOptions
                })
            } else {
                if ($.isFunction(s.o.onClose))
                    if (s.o.onClose.apply(s, [s.d])) return;
                s.d = {};
                if (s.dStack.length > 0) {
                    var d = s.dStack.pop();
                    s.init(d.data, d.options)
                }
            }
            overlay.hide().remove()
        }
    }
})(Streak.jQuery);
(function ($) {
    $.fn.bbmodal = function (options) {
        var defaults = {
            focus: false,
            overlayCss: {
                backgroundColor: "white",
                opacity: "0.75"
            },
            overlayClose: true,
            escClose: true,
            persist: true
        };
        var o = $.extend({}, defaults, options);
        var self = this;
        return this.each(function () {
            self.modal(o)
        })
    }
})(Streak.jQuery);
(function (Streak) {
    var $ = Streak.jQuery;
    $.fn.simulateKeyboardPress = function (code) {
        var el = $(this[0]);
        var pos = el.offset();
        var document = Streak.document;
        var evt = document.createEvent("KeyboardEvent");
        evt.initKeyboardEvent("keydown", true, true, null, false, false, false, false, code, code);
        el[0].dispatchEvent(evt);
        evt = document.createEvent("KeyboardEvent");
        evt.initKeyboardEvent("keypress", true, true, null, false, false, false, false, code, code);
        el[0].dispatchEvent(evt);
        evt = document.createEvent("KeyboardEvent");
        evt.initKeyboardEvent("keyup",
            true, true, null, false, false, false, false, code, code);
        el[0].dispatchEvent(evt)
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery;
    $.fn.simulateRawClick = function () {
        var document = Streak.document;
        return this.each(function () {
            var el = $(this);
            var pos = el.offset();
            var evt = document.createEvent("MouseEvents");
            evt.initMouseEvent("mousedown", true, true, window, 0, pos.left, pos.top, 0, 0, false, false, false, false, 0, null);
            el[0].dispatchEvent(evt);
            evt = document.createEvent("MouseEvents");
            evt.initMouseEvent("mouseup", true, true, window, 0, pos.left, pos.top, 0, 0, false, false, false, false, 0, null);
            el[0].dispatchEvent(evt);
            evt = document.createEvent("MouseEvents");
            evt.initMouseEvent("click", true, true, window, 0, pos.left, pos.top, 0, 0, false, false, false, false, 0, null);
            el[0].dispatchEvent(evt)
        })
    };
    $.fn.simulateHover = function () {
        var document = Streak.document;
        return this.each(function () {
            var el = $(this);
            var pos = el.offset();
            var evt = document.createEvent("MouseEvents");
            evt.initMouseEvent("mouseover", true, true, window, 0, pos.left, pos.top, 0, 0, false, false, false, false, 0, null);
            el[0].dispatchEvent(evt)
        })
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery;
    $(function () {
        var calculator = {
            primaryStyles: ["fontFamily", "fontSize", "fontWeight", "fontVariant", "fontStyle", "paddingLeft", "paddingTop", "paddingBottom", "paddingRight", "marginLeft", "marginTop", "marginBottom", "marginRight", "borderLeftColor", "borderTopColor", "borderBottomColor", "borderRightColor", "borderLeftStyle", "borderTopStyle", "borderBottomStyle", "borderRightStyle", "borderLeftWidth", "borderTopWidth", "borderBottomWidth", "borderRightWidth", "line-height", "outline"],
            specificStyle: {
                "word-wrap": "break-word",
                "overflow-x": "hidden",
                "overflow-y": "auto"
            },
            simulator: function (doc) {
                if ($(doc.body).find("#streak_textarea_simulator").length === 0) $('<div id="streak_textarea_simulator"/>').css({
                    position: "absolute",
                    top: 0,
                    left: 0,
                    visibility: "hidden"
                }).appendTo(doc.body);
                return $(doc.body).find("#streak_textarea_simulator")
            },
            toHtml: function (text) {
                return $.getTextHTML(text)
            },
            getCaretPosition: function () {
                var cal = calculator,
                    self = this,
                    element = self[0],
                    elementOffset = self.offset(),
                    document =
                        element.ownerDocument;
                cal.simulator(document).empty();
                $.each(cal.primaryStyles, function (index, styleName) {
                    self.cloneStyle(cal.simulator(document), styleName, document)
                });
                cal.simulator(document).css($.extend({
                    "width": self.width(),
                    "height": self.height()
                }, cal.specificStyle));
                var value = self.val(),
                    cursorPosition = self.getCursorPosition();
                var beforeText = value.substring(0, cursorPosition),
                    afterText = value.substring(cursorPosition);
                var before = $('<span class="before"/ style="display:inline-block;">').html(cal.toHtml(beforeText)),
                    focus = $('<span class="focus">&nbsp;</span>'),
                    after = $('<span class="after"/>').html(cal.toHtml(afterText));
                before.append(focus);
                cal.simulator(document).append(before).append(after);
                var focusOffset = focus.offset(),
                    simulatorOffset = cal.simulator(document).offset();
                elementOffset = self.offset();
                offset = {
                    top: focusOffset.top - simulatorOffset.top - element.scrollTop + parseInt(self.getComputedStyle("fontSize", document), 10) + elementOffset.top,
                    left: focus[0].offsetLeft - cal.simulator(document)[0].offsetLeft - element.scrollLeft +
                        elementOffset.left
                };
                cal.simulator(document).empty();
                return offset
            }
        };
        $.fn.extend({
            getComputedStyle: function (styleName, document) {
                if (this.length === 0) return;
                var thiz = this[0];
                var result = this.css(styleName);
                result = result || document.defaultView.getComputedStyle(thiz, null)[styleName];
                return result
            },
            cloneStyle: function (target, styleName, document) {
                var styleVal = this.getComputedStyle(styleName, document);
                if ( !! styleVal) $(target).css(styleName, styleVal)
            },
            cloneAllStyle: function (target, style, document) {
                var thiz = this[0];
                for (var styleName in thiz.style) {
                    var val = thiz.style[styleName];
                    typeof val === "string" || typeof val === "number" ? this.cloneStyle(target, styleName, document) : NaN
                }
            },
            getCursorPosition: function (document) {
                var thiz = this[0],
                    result = 0;
                if ("selectionStart" in thiz) result = thiz.selectionStart;
                else if ("selection" in document) {
                    var range = document.selection.createRange();
                    var bodyRange = document.body.createTextRange();
                    bodyRange.moveToElementText(thiz);
                    for (; bodyRange.compareEndPoints("StartToStart", range) < 0; result++) bodyRange.moveStart("character",
                        1);
                    for (var i = 0; i <= result; i++)
                        if (thiz.value.charAt(i) == "\n") result++;
                    var enterCount = thiz.value.split("\n").length - 1;
                    result -= enterCount;
                    return result
                }
                return result
            },
            getCaretPosition: calculator.getCaretPosition
        })
    })
})(Streak);
(function (Streak) {
    var _ = Streak._;
    var ReadyListener = function () {};
    _.extend(ReadyListener.prototype, {
        readyObjects: [],
        waitingForReady: 0,
        inRegisterMode: true,
        reset: function () {
            this.readyObjects.length = 0;
            this.waitingForReady = 0;
            this.inRegisterMode = true;
            this.resetReady()
        },
        register: function (readyObject) {
            var self = this;
            this.readyObjects.push(readyObject);
            this.waitingForReady += 1;
            readyObject.ready(function () {
                self.waitingForReady -= 1;
                if (self.waitingForReady < 1 && !self.inRegisterMode) {
                    self.waitingForReady = 0;
                    self.trigger("ready")
                }
            })
        },
        doneRegistering: function () {
            this.inRegisterMode = false;
            if (this.waitingForReady === 0) this.trigger("ready")
        }
    });
    ReadyListener.create = function () {
        return Streak.Eventer.create(new ReadyListener)
    };
    Streak.ReadyListener = ReadyListener
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    $.fn.trackable = function (eventName, prop) {
        return this.each(function () {
            var self = $(this);
            self.on("click", function (e) {
                Streak.BentoBox.Tracker.trackStreakActive(prop, {
                    eventName: eventName
                })
            })
        })
    }
})(Streak);
(function (Streak) {
    var _ = Streak._;
    _.mixin({
        groupByMultiple: function (list, iterator) {
            var objs = _.toArray(arguments).slice(2);
            _.each(list, function (item) {
                _.wrap(iterator, function (func) {
                    var res = func(item);
                    for (var i = 0, l = objs.length; i < l; i++) {
                        if (!objs[i][res[i]]) objs[i][res[i]] = [];
                        objs[i][res[i]].push(item)
                    }
                })
            })
        },
        isDefined: function (arg) {
            return !_.isUndefined(arg)
        },
        isNotNull: function (arg) {
            return !_.isNull(arg)
        },
        isReal: function (arg) {
            return !_.isNotReal(arg)
        },
        isReachable: function (base, _string) {
            var list = _string.split(".");
            var listLength = list.length;
            var returnValue = {
                value: null,
                failedStep: null
            };
            var currBase = base;
            for (var ii = 0; ii < listLength; ii++) {
                var currEntry = list[ii];
                if (_.isReal(currBase[currEntry])) returnValue.value = currBase[currEntry];
                else return {
                    value: null,
                    failedStep: currEntry
                };
                currBase = currBase[currEntry]
            }
            return returnValue
        },
        isNotReal: function (arg) {
            return arg == null
        },
        isNumeric: function (n) {
            return !isNaN(parseFloat(n)) && isFinite(n)
        },
        groupByPlus: function (obj, iterator) {
            var result = {};
            _.each(obj, function (value, index) {
                var keys =
                    iterator(value, index);
                _.each(keys, function (key) {
                    (result[key] || (result[key] = [])).push(value)
                })
            });
            return result
        },
        includePlus: function (obj, target, tester) {
            if (!tester || obj == null) return _.include(obj, target);
            var found = false;
            _.any(obj, function (value) {
                if (found = tester(value, target)) return true
            });
            return found
        },
        intersectionPlus: function (array, other, tester) {
            return _.filter(array, function (value) {
                return _.any(other, function (otherValue) {
                    return tester(value, otherValue)
                })
            })
        },
        differencePlus: function (array, other, tester) {
            return _.filter(array,
                function (value) {
                    return _.all(other, function (otherValue) {
                        return !tester(value, otherValue)
                    })
                })
        },
        unionPlus: function (array, other, tester) {
            return _.unique(array.concat(other), tester)
        },
        withoutPlus: function (array, element, tester) {
            return _.differencePlus(array, [element], tester)
        },
        indexTheory: function (array, obj, comparator) {
            array.push(obj);
            array.sort(comparator);
            var index = array.indexOf(obj);
            array.removeVal(obj);
            return index
        },
        pluckPlus: function (array, iterator) {
            return _.map(array, function (val) {
                return iterator.call(array,
                    val)
            })
        },
        isArrayDifferent: function (array, other) {
            if (array.length != other.length) return true;
            for (var i = 0; i < array.length; i++)
                if (array[i] != other[i]) return true;
            return false
        },
        sortedPluck: function (array, options) {
            var grouped = _(array).chain().filter(function (val) {
                return _.isReal(val)
            }).pluckPlus(function (val) {
                return options.pluck(val)
            }).flatten().map(function (val) {
                if (options.map) return options.map(val);
                else return val
            }).filter(function (val) {
                if (options.filter) return options.filter(val);
                else return val
            }).groupBy(function (val) {
                return val
            }).value();
            return _(grouped).chain().keys().sortBy(function (key) {
                return this[key].length
            }, grouped).value()
        },
        filter: function (array, iterator) {
            var arr = [];
            _.each(array, function (val) {
                if (iterator(val)) arr.push(val)
            });
            return arr
        },
        onceAfter: function (number, func) {
            var once = _.once(func);
            return _.after(number, once)
        },
        chainedApply: function (array, func, params, doneFunc, errFunc) {
            var chain = function (item) {
                func.apply(null, [item].concat(params).concat([
                    function () {
                        if (array.length > 0) chain(array.pop());
                        else if (doneFunc) doneFunc()
                    }
                ]).concat([
                    function () {
                        if (errFunc) errFunc(array.length)
                    }
                ]))
            };
            chain(array.pop())
        },
        chainedCallbacks: function (callbackArray, doneFunction) {
            var call = function () {
                if (callbackArray.length === 0) {
                    if (doneFunction) doneFunction()
                } else {
                    var func = callbackArray.pop();
                    func(call)
                }
            };
            call()
        },
        firstIfPresent: function (arrays) {
            return _.chain(arrays).map(_.first).compact().value()
        },
        restIfPresent: function (arrays) {
            return _.flatten(_.map(arrays, _.rest))
        },
        firstFromLast: function (arr, numLastElements) {
            var l = arr.length;
            return arr.slice(0, l - numLastElements)
        },
        repeatEvery: function (func, delay, delayedStart) {
            var interval;
            var active = true;
            var delayedRun = function () {
                interval = setTimeout(function () {
                    if (active) {
                        func();
                        delayedRun()
                    }
                }, delay)
            };
            if (!delayedStart) setTimeout(func, 1);
            delayedRun();
            return {
                stop: function () {
                    active = false;
                    clearTimeout(interval)
                },
                start: function () {
                    if (!active) {
                        active = true;
                        if (!delayedStart) func();
                        delayedRun()
                    }
                },
                isActive: function () {
                    return active
                },
                destroy: function () {
                    active = false;
                    clearTimeout(interval)
                },
                func: func
            }
        },
        checkAndThenRun: function (checkFunction, runFunction, delay, finalDelay) {
            var timer = _.repeatEvery(function () {
                if (checkFunction()) {
                    timer.stop();
                    runFunction()
                }
            }, delay);
            if (finalDelay) setTimeout(function () {
                if (timer.isActive()) {
                    timer.stop();
                    runFunction()
                }
            }, finalDelay);
            return timer
        },
        delayed: function (delayedFunction, delay) {
            var timer = null;
            return function () {
                clearTimeout(timer);
                timer = setTimeout(delayedFunction, delay)
            }
        },
        uniqMerge: function (array, uniqFunc, mergeFunc) {
            var _map = {};
            var _newArray = [];
            if (_.isNotReal(mergeFunc)) mergeFunc = function (a, b) {
                return _.extend({}, a, b)
            };
            for (var ii = 0; ii < array.length; ii++) {
                var uniqVal = uniqFunc(array[ii]);
                if (_.isNotReal(_map[uniqVal])) {
                    _newArray.push(array[ii]);
                    _map[uniqVal] = array[ii].length - 1
                } else _newArray[_map[uniqVal]] = mergeFunc(array[ii], _newArray[_map[uniqVal]])
            }
            return _newArray
        },
        indexOfPlus: function (array, iterator) {
            if (_.isNotReal(array) || !_.isArray(array) || array.length === 0) return -1;
            for (var ii = 0; ii < array.length; ii++)
                if (iterator(array[ii])) return ii;
            return -1
        },
        normalizeString: function (s, stripWhitespace) {
            var div = document.createElement("div");
            div.innerHTML = s;
            var ret = div.textContent;
            if (stripWhitespace) ret = ret.replace(/\s/ig, "").replace(/\xAO/ig, "");
            ret.toLowerCase();
            return ret
        },
        mutate: function (operation, array) {
            if (!array) return;
            var args = _.toArray(arguments);
            var newArray = _[operation].apply(null, args.splice(1));
            array.length = 0;
            for (var ii = 0; ii < newArray.length; ii++) array.push(newArray[ii])
        },
        appendToArray: function (firstArray, secondArray) {
            secondArray.forEach(function (v) {
                firstArray.push(v)
            })
        },
        sortNumerical: function (array) {
            return array.sort(function (a, b) {
                return b - a
            })
        }
    })
})(Streak);
(function (Streak) {
    var self = this;
    self.URL = self.URL || self.webkitURL;
    self.requestFileSystem = self.requestFileSystem || self.webkitRequestFileSystem;
    self.resolveLocalFileSystemURL = self.resolveLocalFileSystemURL || self.webkitResolveLocalFileSystemURL;
    navigator.temporaryStorage = navigator.temporaryStorage || navigator.webkitTemporaryStorage;
    navigator.persistentStorage = navigator.persistentStorage || navigator.webkitPersistentStorage;
    self.BlobBuilder = self.BlobBuilder || self.MozBlobBuilder || self.WebKitBlobBuilder;
    var Util = {
        toArray: function (list) {
            return Array.prototype.slice.call(list || [], 0)
        },
        strToDataURL: function (str, contentType, opt_isBinary) {
            var isBinary = opt_isBinary != undefined ? opt_isBinary : true;
            if (isBinary) return "data:" + contentType + ";base64," + self.btoa(str);
            else return "data:" + contentType + "," + str
        },
        strToObjectURL: function (binStr, opt_contentType) {
            var ui8a = new Uint8Array(binStr.length);
            for (var i = 0; i < ui8a.length; ++i) ui8a[i] = binStr.charCodeAt(i);
            var blob = new Blob([ui8a], opt_contentType ? {
                type: opt_contentType
            } : {});
            return self.URL.createObjectURL(blob)
        },
        fileToObjectURL: function (blob) {
            return self.URL.createObjectURL(blob)
        },
        fileToArrayBuffer: function (blob, callback, opt_errorCallback) {
            var reader = new FileReader;
            reader.onload = function (e) {
                callback(e.target.result)
            };
            reader.onerror = function (e) {
                if (opt_errorCallback) opt_errorCallback(e)
            };
            reader.readAsArrayBuffer(blob)
        },
        dataURLToBlob: function (dataURL) {
            var BASE64_MARKER = ";base64,";
            if (dataURL.indexOf(BASE64_MARKER) == -1) {
                var parts = dataURL.split(",");
                var contentType = parts[0].split(":")[1];
                var raw = parts[1];
                return new Blob([raw], {
                    type: contentType
                })
            }
            var parts = dataURL.split(BASE64_MARKER);
            var contentType = parts[0].split(":")[1];
            var raw = window.atob(parts[1]);
            var rawLength = raw.length;
            var uInt8Array = new Uint8Array(rawLength);
            for (var i = 0; i < rawLength; ++i) uInt8Array[i] = raw.charCodeAt(i);
            return new Blob([uInt8Array], {
                type: contentType
            })
        },
        arrayBufferToBlob: function (buffer, opt_contentType) {
            var uInt8Array = new Uint8Array(buffer);
            return new Blob([uInt8Array], opt_contentType ? {
                type: opt_contentType
            } : {})
        },
        arrayBufferToBinaryString: function (buffer,
            callback, opt_errorCallback) {
            var reader = new FileReader;
            reader.onload = function (e) {
                callback(e.target.result)
            };
            reader.onerror = function (e) {
                if (opt_errorCallback) opt_errorCallback(e)
            };
            var uInt8Array = new Uint8Array(buffer);
            reader.readAsBinaryString(new Blob([uInt8Array]))
        },
        arrayToBinaryString: function (bytes) {
            if (typeof bytes != typeof[]) return null;
            var i = bytes.length;
            var bstr = new Array(i);
            while (i--) bstr[i] = String.fromCharCode(bytes[i]);
            return bstr.join("")
        },
        getFileExtension: function (filename) {
            var idx = filename.lastIndexOf(".");
            return idx != -1 ? filename.substring(idx) : ""
        }
    };
    var MyFileError = function (obj) {
        this.prototype = FileError.prototype;
        this.code = obj.code;
        this.name = obj.name
    };
    var Filer = new function () {
            var FS_INIT_ERROR_MSG = "Filesystem has not been initialized.";
            var NOT_IMPLEMENTED_MSG = "Not implemented.";
            var NOT_A_DIRECTORY = "Path was not a directory.";
            var INCORRECT_ARGS = "These method arguments are not supported.";
            var FS_URL_SCHEME = "filesystem:";
            var DEFAULT_FS_SIZE = 1024 * 1024;
            var fs_ = null;
            var cwd_ = null;
            var isOpen_ = false;
            var isFsURL_ =
                function (path) {
                    return path.indexOf(FS_URL_SCHEME) == 0
            };
            var pathToFsURL_ = function (path) {
                if (!isFsURL_(path))
                    if (path[0] == "/") path = fs_.root.toURL() + path.substring(1);
                    else if (path.indexOf("./") == 0 || path.indexOf("../") == 0)
                    if (path == "../" && cwd_ != fs_.root) path = cwd_.toURL() + "/" + path;
                    else path = cwd_.toURL() + path;
                    else path = cwd_.toURL() + "/" + path;
                return path
            };
            var getEntry_ = function (callback, var_args) {
                var srcStr = arguments[1];
                var destStr = arguments[2];
                var onError = function (e) {
                    if (e.code == FileError.NOT_FOUND_ERR)
                        if (destStr) throw new Error('"' +
                            srcStr + '" or "' + destStr + '" does not exist.');
                        else throw new Error('"' + srcStr + '" does not exist.');
                        else throw new Error("Problem getting Entry for one or more paths.");
                };
                var src = pathToFsURL_(srcStr);
                if (arguments.length == 3) {
                    var dest = pathToFsURL_(destStr);
                    self.resolveLocalFileSystemURL(src, function (srcEntry) {
                        self.resolveLocalFileSystemURL(dest, function (destEntry) {
                            callback(srcEntry, destEntry)
                        }, onError)
                    }, onError)
                } else self.resolveLocalFileSystemURL(src, callback, onError)
            };
            var copyOrMove_ = function (src, dest,
                opt_newName, opt_successCallback, opt_errorHandler, opt_deleteOrig) {
                var self = this;
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                if (typeof src != typeof dest) throw new Error(INCORRECT_ARGS);
                var newName = opt_newName || null;
                var deleteOrig = opt_deleteOrig != undefined ? opt_deleteOrig : false;
                if ((src.isFile || dest.isDirectory) && dest.isDirectory)
                    if (deleteOrig) src.moveTo(dest, newName, opt_successCallback, opt_errorHandler);
                    else src.copyTo(dest, newName, opt_successCallback, opt_errorHandler);
                    else getEntry_(function (srcEntry,
                        destDir) {
                        if (!destDir.isDirectory) {
                            var e = new Error('Oops! "' + destDir.name + " is not a directory!");
                            if (opt_errorHandler) opt_errorHandler(e);
                            else throw e;
                            return
                        }
                        if (deleteOrig) srcEntry.moveTo(destDir, newName, opt_successCallback, opt_errorHandler);
                        else srcEntry.copyTo(destDir, newName, opt_successCallback, opt_errorHandler)
                    }, src, dest)
            };

            function Filer(fs) {
                fs_ = fs || null;
                if (fs_) {
                    cwd_ = fs_.root;
                    isOpen_ = true
                }
            }
            Filer.DEFAULT_FS_SIZE = DEFAULT_FS_SIZE;
            Filer.version = "0.4.3";
            Filer.prototype = {
                get fs() {
                    return fs_
                }, get isOpen() {
                    return isOpen_
                },
                get cwd() {
                    return cwd_
                }
            };
            Filer.prototype.pathToFilesystemURL = function (path) {
                return pathToFsURL_(path)
            };
            Filer.prototype.init = function (opt_initObj, opt_successCallback, opt_errorHandler) {
                if (!self.requestFileSystem) throw new MyFileError({
                    code: FileError.BROWSER_NOT_SUPPORTED,
                    name: "BROWSER_NOT_SUPPORTED"
                });
                var initObj = opt_initObj ? opt_initObj : {};
                var size = initObj.size || DEFAULT_FS_SIZE;
                this.type = self.TEMPORARY;
                if ("persistent" in initObj && initObj.persistent) this.type = self.PERSISTENT;
                var init = function (fs) {
                    this.size =
                        size;
                    fs_ = fs;
                    cwd_ = fs_.root;
                    isOpen_ = true;
                    opt_successCallback && opt_successCallback(fs)
                };
                if (this.type == self.PERSISTENT && !! navigator.persistentStorage) navigator.persistentStorage.requestQuota(size, function (grantedBytes) {
                    self.requestFileSystem(this.type, grantedBytes, init.bind(this), opt_errorHandler)
                }.bind(this), opt_errorHandler);
                else self.requestFileSystem(this.type, size, init.bind(this), opt_errorHandler)
            };
            Filer.prototype.ls = function (dirEntryOrPath, successCallback, opt_errorHandler) {
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                var callback = function (dirEntry) {
                    cwd_ = dirEntry;
                    var entries_ = [];
                    var reader = cwd_.createReader();
                    var readEntries = function () {
                        reader.readEntries(function (results) {
                            if (!results.length) {
                                entries_.sort(function (a, b) {
                                    return a.name < b.name ? -1 : b.name < a.name ? 1 : 0
                                });
                                successCallback(entries_)
                            } else {
                                entries_ = entries_.concat(Util.toArray(results));
                                readEntries()
                            }
                        }, opt_errorHandler)
                    };
                    readEntries()
                };
                if (dirEntryOrPath.isDirectory) callback(dirEntryOrPath);
                else if (isFsURL_(dirEntryOrPath)) getEntry_(callback, dirEntryOrPath);
                else cwd_.getDirectory(dirEntryOrPath, {}, callback, opt_errorHandler)
            };
            Filer.prototype.mkdir = function (path, opt_exclusive, opt_successCallback, opt_errorHandler) {
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                var exclusive = opt_exclusive != null ? opt_exclusive : false;
                var folderParts = path.split("/");
                var createDir = function (rootDir, folders) {
                    if (folders[0] == "." || folders[0] == "") folders = folders.slice(1);
                    rootDir.getDirectory(folders[0], {
                        create: true,
                        exclusive: exclusive
                    }, function (dirEntry) {
                        if (dirEntry.isDirectory)
                            if (folders.length &&
                                folderParts.length != 1) createDir(dirEntry, folders.slice(1));
                            else {
                                if (opt_successCallback) opt_successCallback(dirEntry)
                            } else {
                                var e = new Error(path + " is not a directory");
                                if (opt_errorHandler) opt_errorHandler(e);
                                else throw e;
                            }
                    }, function (e) {
                        if (e.code == FileError.INVALID_MODIFICATION_ERR) {
                            e.message = "'" + path + "' already exists";
                            if (opt_errorHandler) opt_errorHandler(e);
                            else throw e;
                        }
                    })
                };
                createDir(cwd_, folderParts)
            };
            Filer.prototype.open = function (entryOrPath, successCallback, opt_errorHandler) {
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                if (entryOrPath.isFile) entryOrPath.file(successCallback, opt_errorHandler);
                else getEntry_(function (fileEntry) {
                    fileEntry.file(successCallback, opt_errorHandler)
                }, pathToFsURL_(entryOrPath))
            };
            Filer.prototype.create = function (path, opt_exclusive, successCallback, opt_errorHandler) {
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                var exclusive = opt_exclusive != null ? opt_exclusive : true;
                cwd_.getFile(path, {
                    create: true,
                    exclusive: exclusive
                }, successCallback, function (e) {
                    if (e.code == FileError.INVALID_MODIFICATION_ERR) e.message =
                        "'" + path + "' already exists";
                    if (opt_errorHandler) opt_errorHandler(e);
                    else throw e;
                })
            };
            Filer.prototype.mv = function (src, dest, opt_newName, opt_successCallback, opt_errorHandler) {
                copyOrMove_.bind(this, src, dest, opt_newName, opt_successCallback, opt_errorHandler, true)()
            };
            Filer.prototype.rm = function (entryOrPath, successCallback, opt_errorHandler) {
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                var removeIt = function (entry) {
                    if (entry.isFile) entry.remove(successCallback, opt_errorHandler);
                    else if (entry.isDirectory) entry.removeRecursively(successCallback,
                        opt_errorHandler)
                };
                if (entryOrPath.isFile || entryOrPath.isDirectory) removeIt(entryOrPath);
                else getEntry_(removeIt, entryOrPath)
            };
            Filer.prototype.cd = function (dirEntryOrPath, opt_successCallback, opt_errorHandler) {
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                if (dirEntryOrPath.isDirectory) {
                    cwd_ = dirEntryOrPath;
                    opt_successCallback && opt_successCallback(cwd_)
                } else {
                    var dirEntryOrPath = pathToFsURL_(dirEntryOrPath);
                    getEntry_(function (dirEntry) {
                        if (dirEntry.isDirectory) {
                            cwd_ = dirEntry;
                            opt_successCallback && opt_successCallback(cwd_)
                        } else {
                            var e =
                                new Error(NOT_A_DIRECTORY);
                            if (opt_errorHandler) opt_errorHandler(e);
                            else throw e;
                        }
                    }, dirEntryOrPath)
                }
            };
            Filer.prototype.cp = function (src, dest, opt_newName, opt_successCallback, opt_errorHandler) {
                copyOrMove_.bind(this, src, dest, opt_newName, opt_successCallback, opt_errorHandler)()
            };
            Filer.prototype.write = function (entryOrPath, dataObj, opt_successCallback, opt_errorHandler) {
                if (!fs_) throw new Error(FS_INIT_ERROR_MSG);
                var writeFile_ = function (fileEntry) {
                    fileEntry.createWriter(function (fileWriter) {
                        fileWriter.onerror =
                            opt_errorHandler;
                        if (dataObj.append) {
                            fileWriter.onwriteend = function (e) {
                                if (opt_successCallback) opt_successCallback(fileEntry, this)
                            };
                            fileWriter.seek(fileWriter.length)
                        } else {
                            var truncated = false;
                            fileWriter.onwriteend = function (e) {
                                if (!truncated) {
                                    truncated = true;
                                    this.truncate(this.position);
                                    return
                                }
                                if (opt_successCallback) opt_successCallback(fileEntry, this)
                            }
                        } if (dataObj.data.__proto__ == ArrayBuffer.prototype) dataObj.data = new Uint8Array(dataObj.data);
                        var blob = new Blob([dataObj.data], dataObj.type ? {
                            type: dataObj.type
                        } : {});
                        fileWriter.write(blob)
                    }, opt_errorHandler)
                };
                if (entryOrPath.isFile) writeFile_(entryOrPath);
                else if (isFsURL_(entryOrPath)) getEntry_(writeFile_, entryOrPath);
                else cwd_.getFile(entryOrPath, {
                    create: true,
                    exclusive: false
                }, writeFile_, opt_errorHandler)
            };
            Filer.prototype.df = function (successCallback, opt_errorHandler) {
                var queryCallback = function (byteUsed, byteCap) {
                    successCallback(byteUsed, byteCap - byteUsed, byteCap)
                };
                if (!(navigator.temporaryStorage.queryUsageAndQuota && navigator.persistentStorage.queryUsageAndQuota)) throw new Error(NOT_IMPLEMENTED_MSG);
                if (self.TEMPORARY == this.type) navigator.temporaryStorage.queryUsageAndQuota(queryCallback, opt_errorHandler);
                else if (self.PERSISTENT == this.type) navigator.persistentStorage.queryUsageAndQuota(queryCallback, opt_errorHandler)
            };
            return Filer
        };
    Streak.Filer = Filer
}).call(this, Streak);
(function (Streak) {
    var NotificationCenter = function () {
        this._mapOfNotificationLists = {}
    };
    Streak._.extend(NotificationCenter.prototype, {
        addFunction: function (functionParameters) {
            var notificationKey = this._getNotificationKey(functionParameters);
            if (!this._mapOfNotificationLists[notificationKey]) this._mapOfNotificationLists[notificationKey] = [];
            this._mapOfNotificationLists[notificationKey].push(functionParameters);
            return this._generateUnbindFunction(functionParameters)
        },
        notify: function (notificationParameters) {
            if (Streak._.isString(notificationParameters)) notificationParameters = {
                eventName: notificationParameters
            };
            var functionParameterList = this._getNotificationList(notificationParameters);
            if (!functionParameterList) return;
            for (var ii = 0; ii < functionParameterList.length; ii++) {
                var functionParameters = functionParameterList[ii];
                if (this._matchesParameterFilters(functionParameters.filterParameters, notificationParameters)) this._callFunction(functionParameters, notificationParameters)
            }
        },
        _getNotificationList: function (notificationParameters) {
            var notificationKey = this._getNotificationKey(notificationParameters);
            return this._mapOfNotificationLists[notificationParameters.eventName]
        },
        _getNotificationKey: function (functionParameters) {
            return functionParameters.eventName
        },
        _generateUnbindFunction: function (functionParameters) {
            var functionParameterList = this._getNotificationList(functionParameters);
            return function () {
                functionParameterList.removeVal(functionParameters)
            }
        },
        _matchesParameterFilters: function (filterParameters, notificationParameters) {
            if (!filterParameters) return true;
            for (var parameter in filterParameters) {
                var filterValue =
                    filterParameters[parameter];
                var notificationValue = notificationParameters[parameter];
                if (filterValue !== notificationValue) return false
            }
            return true
        },
        _callFunction: function (functionParameters, notificationParameters) {
            functionParameters.functionToCall.call(functionParameters.functionContext, notificationParameters)
        }
    });
    Streak.NotificationCenter = new NotificationCenter
})(Streak);
(function (Streak, window) {
    var Date = Streak.Date;
    var _ = Streak._;
    var MAX_BACKOFF = 32E3;
    var RequesterBase = {
        flags: {},
        maxAttempts: 5,
        processParams: function (params, noEmail) {
            if (!noEmail) params.email = Streak.userEmail;
            if (Streak.ai) {
                params.ai = true;
                params.email = Streak.ai
            } else if (Streak.originalEmail) params.originalEmail = Streak.originalEmail;
            if (RequesterBase.flags.chaos) params.chaos = true;
            if (RequesterBase.flags.forceErrorCode) params.forceErrorCode = Requester.flags.forceErrorCode;
            var msgUrl = params.msgUrl;
            delete params.msgUrl;
            var method = params.msgMethod;
            delete params.msgMethod;
            switch (method) {
            case "GET":
                msgUrl += "?" + this.encodeData(params);
                break;
            case "PUT":
            case "POST":
                params.data = this.encodeData(params);
                break;
            default:
                msgUrl += "?" + this.encodeData(params)
            }
            params.server = params.server || Streak.server;
            params.msgUrl = params.server + msgUrl;
            params.msgMethod = method
        },
        handleSuccessfulResponse: function (xhr, cb, noParse) {
            Streak.BentoBox.Logger.log("requester success response");
            s = xhr.responseText;
            d = s;
            if (s && !noParse) try {
                d = JSON.parse(s.replace("%26",
                    "&").replace("%25", "%"))
            } catch (err) {
                d = null;
                this.logError(xhr, params)
            }
            if (cb) cb(d, xhr)
        },
        logError: function (xhr, params) {
            if (!xhr) return;
            var d, s = xhr.responseText;
            var msg;
            if (xhr.status === 500) {
                msg = "500 error from server";
                msg += "\n stack trace: " + s
            } else {
                msg = "Error from server";
                if (s) try {
                    d = JSON.parse(s.replace("%26", "&").replace("%25", "%"))
                } catch (err) {
                    d = null
                }
                if (d && d.error) msg = d.error;
                msg += "\n status: " + xhr.status
            }
            msg += "\n msgUrl: " + params.msgUrl;
            msg += "\n params: " + JSON.stringify(params);
            msg += "\n response: " +
                s;
            Streak.BentoBox.logError(msg)
        },
        encodeData: function (data) {
            var dstring = "";
            if (data)
                for (var m in data) {
                    var val = data[m];
                    if (_.isArray(val)) val = JSON.stringify(val);
                    dstring += "&" + m + "=" + encodeURIComponent(val)
                }
            return dstring.substring(1)
        }
    };
    Streak.RequesterBase = RequesterBase
})(Streak);
(function (Streak, window) {
    var Date = Streak.Date;
    var _ = Streak._;
    var MAX_BACKOFF = 32E3;
    var Requester = {
        flags: {},
        maxAttempts: 5,
        error: function (message, cb, errCb, id) {
            var params = {
                error: message
            };
            params.msgMethod = "POST";
            params.msgUrl = "/ajaxcalls/logClientError";
            this.makeCall(params, cb, errCb, id, false, 1, true)
        },
        get: function (params, cb, errCb, id, attempt, noTeardown) {
            var self = this;
            if (!attempt) attempt = 1;
            if (!params) params = {};
            if (!params.msgMethod) params.msgMethod = "POST";
            if (!params.msgUrl) params.msgUrl = "/ajaxcalls/getEntities";
            this.makeCall(Streak._.clone(params), cb, function (res, xhr) {
                if (errCb)
                    if (errCb(res, xhr)) return true;
                if (!noTeardown) {
                    self.logError(xhr, params);
                    Streak.BentoBox.trigger("criticalError")
                }
                return true
            }, id)
        },
        getFileNoEmail: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.msgMethod = "GET";
            this.makeCall(params, cb, errCb, id, null, null, null, true)
        },
        getFile: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.msgMethod = "GET";
            this.makeCall(params, cb, errCb, id)
        },
        getStringNoEmail: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.msgMethod = "GET";
            this.makeCall(params, cb, errCb, id, true, null, null, true)
        },
        getString: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.msgMethod = "GET";
            this.makeCall(params, cb, errCb, id, true)
        },
        create: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.msgMethod = "POST";
            params.msgUrl = "/ajaxcalls/createEntity";
            this.makeCall(params, cb, errCb, id)
        },
        update: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.msgMethod = "POST";
            params.msgUrl = "/ajaxcalls/updateEntity";
            Streak.BentoBox.Logger.log("requester update");
            this.makeCall(params, cb, errCb, id)
        },
        del: function (params, cb, errCb, id) {
            if (!params) return;
            params.msgMethod = "POST";
            params.msgUrl = "/ajaxcalls/deleteEntity";
            this.makeCall(params, cb, errCb, id)
        },
        search: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.msgMethod = "POST";
            params.msgUrl = "/ajaxcalls/search";
            this.makeCall(params, cb, errCb, id)
        },
        makeCall: function (params, cb, errCb, id, noParse, attempt, noReattempt, noEmail, currentBackoff) {
            var self = this;
            if (!attempt) attempt = 1;
            if (!id) id = (new Date).getTime() * Math.random();
            if (attempt === 1) {
                params.clientVersion = Streak.clientVersion;
                params.extVersion = Streak.extVersion;
                if (!noEmail) params.email = Streak.userEmail;
                if (Streak.ai) {
                    params.ai = true;
                    params.email = Streak.ai
                } else if (Streak.originalEmail) params.originalEmail = Streak.originalEmail;
                if (Requester.flags.chaos) params.chaos = true;
                if (Requester.flags.forceErrorCode) params.forceErrorCode = Requester.flags.forceErrorCode;
                if (params.msgMethod === "GET") params.msgUrl += "?" + this.encodeData(params);
                else params.data = this.encodeData(params);
                params.server = params.server || Streak.server;
                params.msgUrl = params.server + params.msgUrl
            }
            if (params.email && params.email.indexOf("wiki-pr") > -1) self.maxAttempts = 2;
            var handler = function (xhr) {
                var s, d;
                if (xhr === null) return;
                if (xhr.readyState === 4)
                    if (xhr.status >= 200 && xhr.status <= 299) {
                        Streak.BentoBox.Logger.log("requester success response");
                        Messenger.unobserve("serverCallReturn", id);
                        s = xhr.responseText;
                        d = s;
                        if (s && !noParse) try {
                            d = JSON.parse(s.replace("%26", "&").replace("%25", "%"))
                        } catch (err) {
                            d = null;
                            self.logError(xhr,
                                params)
                        }
                        if (cb) cb(d, xhr)
                    } else if (!noReattempt) {
                    Streak.BentoBox.Logger.log("requester error response", xhr);
                    if (xhr.status === 0 || xhr.status === 500 || xhr.status === 503)
                        if (attempt < self.maxAttempts) {
                            attempt += 1;
                            currentBackoff = Math.min((currentBackoff || 500) * 2, MAX_BACKOFF);
                            setTimeout(function () {
                                self.makeCall(params, cb, errCb, id, noParse, attempt, noReattempt, noEmail, currentBackoff)
                            }, currentBackoff);
                            return
                        } else if (xhr.status !== 503) {
                        var msg = "Crap, status " + xhr.status;
                        msg += "\n url: " + params.msgUrl;
                        try {
                            msg += "\n params: " +
                                JSON.stringify(params)
                        } catch (err) {}
                        if (errCb)
                            if (errCb(xhr, params)) return;
                        Streak.BentoBox.logError(msg);
                        return
                    }
                    s = xhr.responseText;
                    d = s;
                    if (s) try {
                        d = JSON.parse(s.replace("%26", "&").replace("%25", "%"))
                    } catch (err) {
                        d = null
                    }
                    if (d && d.error === "clientVersionNotSupported") {
                        Messenger.unobserve("serverCallReturn", id);
                        Streak.BentoBox.trigger("newClientVersion");
                        return
                    }
                    if (d && d.error === "extVersionNotSupported") {
                        Messenger.unobserve("serverCallReturn", id);
                        Streak.BentoBox.trigger("newExtVersion");
                        return
                    }
                    if (errCb)
                        if (errCb(d,
                            xhr)) {
                            Messenger.unobserve("serverCallReturn", id);
                            return
                        }
                    Messenger.unobserve("serverCallReturn", id);
                    if (xhr.status !== 0) self.logError(xhr, params)
                }
            };
            if (Streak.BentoBox && Streak.BentoBox.Logger) Streak.BentoBox.Logger.log("call attempts:", attempt);
            if (attempt === 1) {
                handler.runOnce = false;
                Messenger.observe("serverCallReturn", handler, id)
            }
            if (!params.data) params.data = {};
            params.data.clientVersion = Streak.clientVersion;
            params.data.extVersion = Streak.extVersion;
            Messenger.sendMessage("serverCall", params, null, null, id)
        },
        logError: function (xhr, params) {
            if (!xhr) return;
            var d, s = xhr.responseText;
            var msg;
            if (xhr.status === 500) {
                msg = "500 error from server";
                msg += "\n stack trace: " + s
            } else {
                msg = "Error from server";
                if (s) try {
                    d = JSON.parse(s.replace("%26", "&").replace("%25", "%"))
                } catch (err) {
                    d = null
                }
                if (d && d.error) msg = d.error;
                msg += "\n status: " + xhr.status
            }
            msg += "\n msgUrl: " + params.msgUrl;
            msg += "\n params: " + JSON.stringify(params);
            msg += "\n response: " + s;
            Streak.BentoBox.logError(msg)
        },
        encodeData: function (data) {
            var dstring = "";
            if (data)
                for (var m in data) {
                    var val =
                        data[m];
                    if (_.isArray(val)) val = JSON.stringify(val);
                    dstring += "&" + m + "=" + encodeURIComponent(val)
                }
            return dstring.substring(1)
        },
        gmailGet: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.server = location.origin;
            params.msgUrl = location.pathname;
            params.msgMethod = "GET";
            params.ik = GLOBALS[9];
            this.makeCall(params, cb, errCb, id, true)
        },
        gmailPost: function (params, cb, errCb, id) {
            if (!params) params = {};
            params.server = location.origin;
            params.msgUrl = location.pathname;
            params.msgMethod = "POST";
            params.ik = GLOBALS[9];
            this.makeCall(params,
                cb, errCb, id, true)
        },
        gmailGetList: function (list, cb, errCb, id, num) {
            var parts = list.split("/");
            if (!num) num = 100;
            var lastPart = _.last(parts);
            var start = 0;
            if (lastPart.match(/p\d+/)) {
                var currentPage = parseInt(lastPart.replace(/p/, ""), 10);
                start = (currentPage - 1) * num
            }
            var opts = {
                ui: 2,
                view: "tl",
                start: start,
                num: num,
                rt: "c",
                pcd: "1",
                mb: "0"
            };

            function processAdvancedSearchParameters(prefix) {
                var searchParts = parts[1].split("&");
                for (var i = 0; i < searchParts.length; i++) {
                    var subParts = searchParts[i].split("=");
                    opts[prefix + "_" + subParts[0]] =
                        decodeURIComponent(subParts[1])
                }
            }
            if (parts.length > 0)
                if (parts[0] === "label") {
                    opts.search = "cat";
                    opts.cat = parts[1]
                } else if (parts[0] === "search") {
                opts.search = "query";
                opts.q = parts[1];
                opts.qs = "true"
            } else if (parts[0] === "advanced-search") {
                processAdvancedSearchParameters("as");
                opts.search = "adv"
            } else if (parts[0] === "create-filter") {
                processAdvancedSearchParameters("cf1");
                opts.search = "cf"
            } else {
                opts.search = parts[0];
                opts.apps = parts[0];
                if (parts.length > 1) opts.q = parts[1]
            }
            this.gmailPost(opts, cb, errCb, id)
        },
        gmailGetSentMail: function (cb,
            errCb, id) {
            this.gmailGet({
                view: "tl",
                start: "0",
                num: "100",
                rt: "c",
                search: "sent"
            }, cb, errCb, id)
        },
        gmailGetCurrentList: function (successCallback, errorCallback) {
            this.gmailGetList(location.hash.substring(1).split("?")[0], successCallback, errorCallback, null, Streak.Gmail.getVisibleThreadRows().length)
        },
        gmailGetThread: function (encodedThreadId, successCallback, errorCallback) {
            var opts = {
                view: "cv",
                th: encodedThreadId,
                rt: "c",
                pcd: "1",
                mb: "0",
                search: "inbox"
            };
            this.gmailGet(opts, successCallback, errorCallback)
        },
        getContactDetails: function (email,
            cb, errCb) {
            this.getStringNoEmail({
                server: "https://mail.google.com",
                msgUrl: "/mail/c/u/0/data/contactstore",
                ac: false,
                cr: true,
                ct: true,
                emls: email,
                ev: true,
                f: "g2",
                gp: false,
                hl: "en",
                id: "personal",
                out: "js",
                type: 4
            }, function (res) {
                var cleaned = res.first(res.lastIndexOf("}")).substring(res.indexOf("{"));
                var parts = cleaned.match(/,\\"(\D+?\s?\w*?)\\"/igm);
                if (cb) {
                    var resObj = {
                        email: email
                    };
                    if (parts && parts.length > 3) {
                        resObj.fullName = parts[0].replace(/,\\\"(.*?)\\.*/igm, "$1");
                        resObj.familyName = parts[1].replace(/,\\\"(.*?)\\.*/igm,
                            "$1");
                        resObj.givenName = parts[2].replace(/,\\\"(.*?)\\.*/igm, "$1")
                    }
                    cb(resObj)
                }
            }, errCb)
        }
    };
    Streak.Requester = Requester
})(Streak, window);
(function (Streak, window) {
    var Date = Streak.Date;
    var RequesterBase = Streak.RequesterBase;
    var CONSTANTS = {
        MAX_BACKOFF: 32E4,
        API_PREFIX: "/api/v1/"
    };
    var APIRequester = {
        put: function (params, cb, errCb, id) {
            this.create(params, cb, errCb, id)
        },
        create: function (params, cb, errCb, id) {
            params.msgMethod = "PUT";
            params.msgUrl = CONSTANTS.API_PREFIX + params.msgUrl;
            this.makeCall(params, cb, errCb, id)
        },
        get: function (params, cb, errCb, id) {
            params.msgUrl = CONSTANTS.API_PREFIX + params.msgUrl;
            params.msgMethod = "GET";
            this.makeCall(params, cb, errCb,
                id)
        },
        getUrl: function (url, callback, errorCallback) {
            this.get({
                msgUrl: url
            }, callback, errorCallback)
        },
        post: function (params, cb, errCb, id) {
            params.msgUrl = CONSTANTS.API_PREFIX + params.msgUrl;
            params.msgMethod = "POST";
            this.makeCall(params, cb, errCb, id)
        },
        update: function (params, cb, errCb, id) {
            params.msgMethod = "POST";
            params.msgUrl = CONSTANTS.API_PREFIX + params.msgUrl;
            this.makeCall(params, cb, errCb, id)
        },
        "delete": function (params, cb, errCb, id) {
            params.msgMethod = "DELETE";
            params.msgUrl = CONSTANTS.API_PREFIX + params.msgUrl;
            this.makeCall(params,
                cb, errCb, id)
        },
        makeCall: function (params, cb, errCb, id, noParse, attempt, noReattempt, noEmail, currentBackoff) {
            var self = this;
            if (!attempt) attempt = 1;
            if (!id) id = (new Date).getTime() * Math.random();
            if (attempt === 1) RequesterBase.processParams(params, noEmail);
            var handler = function () {
                var s, d;
                if (xhr.readyState === 4)
                    if (xhr.status >= 200 && xhr.status <= 299) RequesterBase.handleSuccessfulResponse(xhr, cb, noParse);
                    else if (!noReattempt) {
                    Streak.BentoBox.Logger.log("requester error response", xhr);
                    if (xhr.status === 0 || xhr.status === 500 ||
                        xhr.status === 503)
                        if (attempt < RequesterBase.maxAttempts) {
                            attempt += 1;
                            currentBackoff = Math.min((currentBackoff || 500) * 2, CONSTANTS.MAX_BACKOFF);
                            setTimeout(function () {
                                self.makeCall(params, cb, errCb, id, noParse, attempt, noReattempt, noEmail, currentBackoff)
                            }, currentBackoff);
                            return
                        } else if (xhr.status !== 503) {
                        var msg = "Crap, status " + xhr.status;
                        msg += "\n url: " + params.msgUrl;
                        try {
                            msg += "\n params: " + JSON.stringify(params)
                        } catch (err) {}
                        if (errCb)
                            if (errCb(xhr, params)) return;
                        Streak.BentoBox.logError(msg);
                        return
                    }
                    s = xhr.responseText;
                    d = s;
                    if (s) try {
                        d = JSON.parse(s.replace("%26", "&").replace("%25", "%"))
                    } catch (err) {
                        d = null
                    }
                    if (d && d.error === "clientVersionNotSupported") {
                        Streak.BentoBox.trigger("newClientVersion");
                        return
                    }
                    if (d && d.error === "extVersionNotSupported") {
                        Streak.BentoBox.trigger("newExtVersion");
                        return
                    }
                    if (errCb)
                        if (errCb(d, xhr)) return;
                    if (xhr.status !== 0) RequesterBase.logError(xhr, params)
                }
            };
            if (Streak.BentoBox && Streak.BentoBox.Logger) Streak.BentoBox.Logger.log("call attempts:", attempt);
            var xhr = new XMLHttpRequest;
            xhr.withCredentials =
                true;
            xhr.onreadystatechange = handler;
            xhr.open(params.msgMethod, params.msgUrl, true);
            xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xhr.setRequestHeader("X-Streak-Web-Client", "true");
            xhr.setRequestHeader("X-Streak-Web-Client-Version", Streak.clientVersion);
            xhr.setRequestHeader("X-Streak-Web-Extension-Version", Streak.extVersion);
            xhr.send(params.data)
        }
    };
    Streak.APIRequester = APIRequester
})(Streak, window);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester;
    Streak.Locale = {
        supported: ["en"],
        initial: "en",
        map: null,
        init: function (callback) {
            var self = this;
            Requester.getFileNoEmail({
                msgUrl: "/i18n/locale",
                server: Streak.combinedServer || Streak.server,
                locale: this.getCurrent()
            }, function (res) {
                self.map = res;
                if (callback) callback()
            }, function (res) {
                Streak.BentoBox.logError("language file wasn't loaded")
            });
            Date.prototype.setFormatLocale(this.getGmail() === "en" ? "en" : "other")
        },
        getGmail: function () {
            return GLOBALS[4].split(".")[1]
        },
        getCurrent: function () {
            if (localStorage["bb_locale"]) return localStorage["bb_locale"];
            return this.getGmail()
        },
        getClone: function () {
            return Streak.$.extend(true, {}, this)
        },
        override: function (fileName, cb) {
            var self = this;
            Requester.getFile({
                msgUrl: fileName
            }, function (res) {
                _.extend(self.map, res);
                if (cb) cb()
            }, function (res) {
                if (cb) cb()
            })
        },
        setMode: function (mode) {
            var self = this;
            mode = "__" + mode;
            var changes = [];
            Streak._.each(self.map, function (value, key) {
                var positionOfModeInkey = key.indexOf(mode);
                if (positionOfModeInkey > 0) {
                    var baseKey =
                        key.substring(0, positionOfModeInkey);
                    changes.push({
                        "baseKey": baseKey,
                        "value": self.map[key]
                    })
                }
            });
            var changeLength = changes.length;
            for (var ii = 0; ii < changeLength; ii++) {
                var change = changes[ii];
                self.map[change.baseKey] = change.value
            }
        },
        setCurrent: function (locale) {
            if (locale === this.getGmail()) localStorage.removeItem("bb_locale");
            else localStorage["bb_locale"] = locale
        },
        getStrings: function (keys, hash) {
            self = this;
            return _.map(keys, function (key) {
                return self.getString(key, hash)
            })
        },
        getString: function (key, hash) {
            if (hash) {
                var value =
                    this.map[key];
                var texts = value.split(/<[^>]+>/);
                var keys = value.match(/<[^>]+>/g);
                var outText = null;
                if (keys && keys.length > 0) {
                    keys = keys.map(function (a) {
                        return a.substring(1, a.length - 1)
                    });
                    var output = [];
                    for (i = 0; i < keys.length; i++) {
                        output.push(texts[i]);
                        output.push(_.isReal(hash[keys[i]]) ? hash[keys[i]] : "<" + keys[i] + ">")
                    }
                    output.push(texts[texts.length - 1]);
                    outText = output.join("")
                } else outText = value; if (hash.pluralize && hash.pluralize.length > 0) {
                    var numMatch = outText.match(/\[.*?\]/g);
                    if (numMatch && numMatch.length >
                        0)
                        for (var i = 0; i < numMatch.length; i++) {
                            var match = numMatch[i];
                            var innerMatch = match.match(/\[(.*?)\]/)[1];
                            var parts = innerMatch.split("|");
                            var num = hash.pluralize[i];
                            var replace = null;
                            for (var j = 0; j < parts.length; j++) {
                                var innerParts = parts[j].split(":");
                                if (innerParts.length === 1) replace = innerParts[0];
                                else {
                                    var numSpec = innerParts[0];
                                    if (numSpec.match(/^\d+$/)) {
                                        if (parseFloat(numSpec) === num) {
                                            replace = innerParts[1];
                                            break
                                        }
                                    } else if (numSpec.match(/^((n|\d+)\s*(\<|\=|\>)+\s*(n|\d+)\s*(AND|OR)?\s*)+/)) {
                                        var compiledSpec =
                                            numSpec.replace(/AND/img, " && ").replace(/OR/img, " || ").replace(/n/img, "num");
                                        var result;
                                        eval("result = " + compiledSpec);
                                        if (result) {
                                            replace = innerParts[1];
                                            break
                                        }
                                    } else if (numSpec.length === 1) {
                                        replace = numSpec;
                                        break
                                    }
                                }
                            }
                            if (_.isReal(replace)) outText = outText.replace(match, replace)
                        }
                }
                return outText
            } else return this.map[key] || key
        },
        localize: function (s) {
            var self = this;
            return s.replace(/<%%([\s\S]+?)%>/g, function (match, code) {
                return self.getString(code.trim())
            })
        },
        convertLocaleCodeToName: function (code) {
            return this.map["supportedLocales"][code]
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "localeLoaded",
        functionToCall: Streak.Locale.init,
        functionContext: Streak.Locale,
        dependentFunctionKeys: ["bentoBoxServerSet"]
    })
})(Streak);
(function (Streak, window) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Requester = Streak.Requester;
    var HTML = {
        loaded: null,
        init: function (callback) {
            var self = this;
            Requester.getStringNoEmail({
                msgUrl: Streak.getCombined("html", false),
                server: Streak.combinedServer || Streak.server
            }, function (res) {
                self.loaded = $(document.createElement("div"));
                self.loaded[0].innerHTML = res;
                if (callback) callback()
            }, function (res) {})
        },
        get: function (id, isElement) {
            var d = this.loaded.find("#" + id);
            if (d.length === 0) {
                console.log("can't find " + id);
                return id
            } else {
                var s =
                    Streak.Locale.localize(d[0].innerHTML.unescapeHTML()).trim();
                if (isElement) return $($.parseHTML(s));
                else return _.template(s)
            }
        },
        getString: function (id) {
            var d = this.loaded.find("#" + id);
            if (d.length === 0) {
                console.log("can't find " + id);
                return id
            } else return Streak.Locale.localize(d[0].innerHTML.unescapeHTML()).trim()
        },
        getStringWithSelector: function (selector) {
            var d = this.loaded.find(selector);
            if (d.length === 0) return "";
            return Streak.Locale.localize(d[0].innerHTML.unescapeHTML()).trim()
        },
        getElement: function (id) {
            var self =
                this;
            return self.get(id, true)
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "htmlLoaded",
        functionToCall: HTML.init,
        functionContext: HTML,
        dependentFunctionKeys: ["localeLoaded"]
    });
    Streak.HTML = HTML
})(Streak, window);
(function (h, m) {
    var e = h.jQuery,
        i = h._,
        q = h.Date,
        f = new h.Eventer;
    i.extend(f, {
        Constants: {
            Compose: "compose",
            Inbox: "inbox",
            SectionQuery: "section_query",
            All: "all",
            Important: "imp",
            Conversation: "conversation",
            Contacts: "contacts",
            Contact: "contact",
            Sent: "sent",
            Starred: "starred",
            Drafts: "drafts",
            Label: "label",
            Search: "search",
            AdvancedSearch: "advanced-search",
            Trash: "trash",
            Spam: "spam",
            Apps: "apps",
            Box: "box",
            Pipeline: "pipeline",
            NewPipeline: "newpipeline",
            Pipelines: "pipelines",
            PipelineReports: "pipelinereports",
            GmailThread: "thread",
            Circle: "circle",
            Settings: "settings",
            ListViews: [],
            BentoBoxViews: [],
            DeepLinkLoading: "loading"
        },
        debug: !1,
        elements: {},
        hash: {
            parts: null,
            query: null
        },
        view: null,
        lastView: "",
        wasLastViewConversation: !1,
        currentVisibleModal: "",
        label: null,
        conversation: null,
        timer: null,
        dontLoad: !1,
        hashChangeLastID: 1,
        rowThreadIconIndex: 0,
        cachedVerticalList: null,
        emailBodyModifierCallback: null,
        elementsInComposeArea: [],
        ajaxInterceptorSources: [],
        init: function (a) {
            var b = this;
            f.debug && console.log("Initializing Gmailr API");
            this.xhrWatcher.init(this);
            b.Constants.ListViews = [b.Constants.Inbox, b.Constants.SectionQuery, b.Constants.Important, b.Constants.All, b.Constants.Sent, b.Constants.Starred, b.Constants.Drafts, b.Constants.Label, b.Constants.Search, b.Constants.AdvancedSearch, b.Constants.Spam, b.Constants.Trash, b.Constants.Apps, b.Constants.Circle];
            b.Constants.ContactViews = [b.Constants.Contacts, b.Constants.Contact];
            b.Constants.BentoBoxViews = [b.Constants.Pipeline, b.Constants.Box, b.Constants.NewPipeline, b.Constants.Pipelines, b.Constants.GmailThread, b.Constants.PipelineReports,
                b.Constants.DeepLinkLoading
            ];
            b.delayed_loader = setInterval(function () {
                b.bootstrap();
                b.isReadyToLoad ? (clearInterval(b.delayed_loader), b.parse(), a && a(), b.trigger("load"), h.NotificationCenter.notify({
                    eventName: "gmailLoaded"
                }), b.trigger("ready")) : b.dontLoad && clearInterval(b.delayed_loader)
            }, 1E3); - 1 === b.Constants.ContactViews.indexOf(location.hash.substring(1).split("/")[0].toLowerCase()) && setTimeout(function () {
                !b.isReadyToLoad && !b.dontLoad && h.BentoBox.logError("something wrong with Gmail")
            }, 24E4)
        },
        teardown: function () {
            this.unReady();
            clearInterval(this.timer)
        },
        reup: function () {
            this.trigger("ready");
            this.setupGmailTimer()
        },
        destroy: function () {
            this.unbindWatchers();
            this.xhrWatcher.destroy()
        },
        $: function (a) {
            return this.elements.body.find(a)
        },
        insertCss: function (a) {
            var b = e('<link rel="stylesheet" type="text/css">');
            b.attr("href", a);
            this.elements.canvas.find("head").first().append(b)
        },
        showNotice: function (a, b, c) {
            c || (c = -1);
            this.elements.notice.data("priority") && this.elements.notice.data("priority") > c || (this.elements.notice.css({
                    visibility: "visible"
                }),
                this.elements.notice.message.html(a), this.elements.notice.data("priority", c || -1), b && this.hideNotice(b, c))
        },
        hideNotice: function (a, b) {
            b || (b = -1);
            var c = this;
            (this.elements.notice.data("priority") || -1) > b || (clearTimeout(this.elements.notice.hideTimer), a ? this.elements.notice.hideTimer = setTimeout(function () {
                c.elements.notice.css({
                    visibility: "hidden"
                });
                c.elements.notice.message.empty();
                c.elements.notice.data("priority", -1)
            }, a) : (this.elements.notice.css({
                    visibility: "hidden"
                }), this.elements.notice.message.empty(),
                c.elements.notice.data("priority", -1)))
        },
        observe: function (a, b, c, d) {
            c && (b.uniq = c);
            b.uniq || (b.uniq = "" + (new q).getTime() + Math.random());
            d || (d = 100);
            b.priority || (b.priority = d);
            this.ob_queues[a] || (this.ob_queues[a] = []);
            d = i.indexOfPlus(this.ob_queues[a], function (a) {
                return a.uniq === c
            }); - 1 < d ? this.ob_queues[a][d] = b : this.ob_queues[a].push(b);
            this.ob_queues[a] = i.sortBy(this.ob_queues[a], function (a) {
                return a.priority
            })
        },
        unobserve: function (a, b) {
            this.ob_queues[a] = i.filter(this.ob_queues[a], function (a) {
                return a.uniq !=
                    b
            })
        },
        bootstrap: function () {
            var a = document.getElementById("loading"),
                b = document.getElementById("canvas_frame");
            a && "none" === a.style.display && (b = b ? b.contentDocument : document);
            b && 0 < document.getElementsByTagName("body").length && (this.elements.canvas = e(b), this.elements.body = this.elements.canvas.find("body").first(), a = this.$("div[role=main]"), this.elements.main = a.closest(".ar4"), a && 0 < a.length && this.elements.main && 0 < this.elements.main.length ? (this.isReadyToLoad = !0, h.document = b) : -1 < location.search.indexOf("view=cm") &&
                (this.dontLoad = !0))
        },
        bindWatchers: function (a) {
            var b = this;
            e(m).bind("hashchange.gmail", function (a) {
                b.waitingToLoad || (b.hashChangeLastID += 1, b.detectViewChange(a, 1, b.hashChangeLastID))
            });
            this.getCurrentMain(!0);
            this.setupGmailTimer();
            this.detectListToggle();
            this.setupAnimationWatcher();
            this.detectPreviewPaneChange();
            this.detectChatMessages();
            this.detectThreadLoaded();
            this.detectConversationMessageStateChange();
            this.detectNewInboxEmail();
            this.setupCacheBusters();
            this.setupComposeHolderResizeEvents();
            a && a()
        },
        unbindWatchers: function () {
            e(m).unbind(".gmail");
            this.pauseTimer();
            h.document.removeEventListener("animationstart", this.animationWatcher.watchFunc);
            h.document.removeEventListener("MSAnimationStart", this.animationWatcher.watchFunc);
            h.document.removeEventListener("webkitAnimationStart", this.animationWatcher.watchFunc)
        },
        parse: function () {
            this.elements.topbar = this.$("div#gb");
            this.elements.topbar.find(".gbvg");
            this.elements.topbar.leftLinks = this.elements.topbar.find("ol.gbtc:first");
            this.elements.topbar.rightLinks =
                this.elements.topbar.find("ol.gbtc:last");
            this.elements.notice = this.$("div.nn:nth-child(2) .b8");
            this.elements.notice.message = this.elements.notice.find(".vh");
            this.elements.logo = this.$("div.nn:first");
            this.elements.search = this.$("div.nn:nth-child(2) table[role=search]");
            this.elements.leftbar = this.$("div.oy8Mbf div[role=navigation]").parents("div.oy8Mbf");
            this.elements.leftbar.links = this.elements.leftbar.find("div[role=navigation] [title]:first").parents(".n3");
            this.elements.main = this.$("div[role=main]:first").closest(".ar4");
            this.elements.mainParent = this.$("div[role=main]:first").parent()
        },
        setEmailBodyModifierCallback: function (a) {
            this.emailBodyModifierCallback = a
        },
        addAjaxInterceptorSource: function (a) {
            this.ajaxInterceptorSources.push(a)
        },
        removeAjaxInterceptorSource: function (a) {
            this.ajaxInterceptorSources.removeVal(a)
        },
        getRelevantAjaxInterceptorSource: function (a) {
            for (var b = 0; b < this.ajaxInterceptorSources.length; b++) {
                var c = this.ajaxInterceptorSources[b];
                if (c.isRequestRelevant(a)) return c
            }
            return null
        },
        xhrWatcher: {
            xhrParams: null,
            initialized: null,
            init: function (a) {
                if (!this.initialized) {
                    this.initialized = !0;
                    var b = top.document.getElementById("js_frame").contentDocument.defaultView;
                    b.XMLHttpRequest.prototype.__streak_Gmail_open = b.XMLHttpRequest.prototype.open;
                    b.XMLHttpRequest.prototype.open = function (b, d, n, g, f) {
                        var r = this.__streak_Gmail_open.apply(this, arguments);
                        try {
                            this.xhrParams = {
                                method: b.toString(),
                                url: d.toString()
                            };
                            var j = e.deparam(d);
                            this.uParams = j;
                            var k = this,
                                o = this.onreadystatechange,
                                l;
                            j.search && "tl" == j.view && (j.q && a.executeObQueues("search",
                                j.q), l = function () {
                                o();
                                4 == k.readyState && 200 == k.status && a.executeObQueues("ajaxListRefresh", {
                                    search: j.search,
                                    viewData: k.responseText
                                })
                            });
                            "sd" == j.act && (a.executeObQueues("draftSaving", j.q), l = function () {
                                if (k.readyState == 4 && k.status == 200) {
                                    a.executeObQueues("draftSavedPre", k.responseText);
                                    o();
                                    var b = null;
                                    try {
                                        for (var c = a.cleanGmailResponseText(k.responseText), d = h.searchObject(c, "a", 100, true, true)[0].path, d = d.split("/"), d = i(d).chain().rest(1).initial().value(), e = 0; e < d.length; e++) c = c[d[e]];
                                        b = c[3][0]
                                    } catch (n) {
                                        console.warn("draft saving error",
                                            n)
                                    }
                                    a.executeObQueues("draftSaved", k.responseText, b)
                                } else o()
                            });
                            "sm" === j.act && (l = function () {
                                if (k.readyState === 4 && k.status === 200) {
                                    o();
                                    try {
                                        a.executeObQueues("emailSent", {
                                            request: e.deparam(this.xhrParams.body),
                                            response: k.responseText
                                        })
                                    } catch (b) {}
                                } else o()
                            });
                            "cv" === j.view && j.th && 0 < j.th.length && j.msgs && 0 < j.msgs.length && (l = o);
                            var m = a.getRelevantAjaxInterceptorSource(j);
                            if (!m) return l && (k.onreadystatechange = l), r;
                            var q = m.getAjaxInterceptor(),
                                p;
                            k.onreadystatechange = function () {
                                try {
                                    var a = i.once(l);
                                    clearTimeout(p);
                                    p = setTimeout(a, 2E4);
                                    q.requestStatusUpdated(k).then(function () {
                                        clearTimeout(p);
                                        a()
                                    }, function () {
                                        clearTimeout(p)
                                    })
                                } catch (b) {
                                    console.error(b)
                                }
                            }
                        } catch (s) {
                            console.error(s)
                        }
                        return r
                    };
                    b.XMLHttpRequest.prototype.__streak_Gmail_send = b.XMLHttpRequest.prototype.send;
                    b.XMLHttpRequest.prototype.send = function (a) {
                        var b = this.__streak_Gmail_send.apply(this, arguments);
                        this.xhrParams && (this.xhrParams.body = a, f.detectXHREvents(this.xhrParams));
                        return b
                    };
                    top._Gmail_iframeFn || (top._Gmail_iframeFn = top.GG_iframeFn, this.iframeData = {}, this.iframeCachedData = [], this.iframeCachedData.push({
                        responseDataId: 1,
                        url: top.location.href,
                        responseData: top.VIEW_DATA
                    }), top.GG_iframeFn = function (b, d) {
                        var n = top._Gmail_iframeFn.apply(this, arguments);
                        try {
                            var g = b && b.location ? b.location.href : null;
                            if (g && d && -1 != g.indexOf("act=") && !a.iframeData[g]) {
                                var h = "",
                                    i = b.frameElement.parentNode;
                                i && 0 < e(i).find("form").length && (h = e(i).find("form").first().serialize());
                                a.iframeData[g] = !0;
                                f.detectXHREvents({
                                    body: h,
                                    url: g
                                })
                            }
                        } catch (j) {
                            try {
                                f.debug && console.log("DEBUG error in GG_iframeFn: " +
                                    j)
                            } catch (k) {}
                        }
                        return n
                    })
                }
            },
            destroy: function () {
                var a = top.document.getElementById("js_frame").contentDocument.defaultView;
                a.XMLHttpRequest.prototype.open = a.XMLHttpRequest.prototype.__streak_Gmail_open;
                a.XMLHttpRequest.prototype.send = a.XMLHttpRequest.prototype.__streak_Gmail_send
            }
        },
        cleanGmailResponseText: function (a) {
            var b = a.substring(a.indexOf("[")).replace(/\];var\s.*/img, ""),
                b = "[" + b.replace(/\r|\n/img, "").replace(/,(,|\]|\})/img, ",null$1").replace(/\]\d+\[/img, "],[") + "]",
                c;
            try {
                b = b.replace(/,(,|\]|\})/img,
                    ",null$1"), c = eval("(function(){return " + b + ";})()")
            } catch (d) {
                BB.logError("error parsing clean response \n viewData:" + a, d)
            }
            return c
        },
        setupTimer: function (a) {
            clearTimeout(this.timer);
            delete this.timer;
            this.timer = setTimeout(this.timerFunction, a || 500)
        },
        timerFunction: function (a) {
            f.view = f.getLiveView();
            f.isGmailView() && f.getCurrentMain(!0);
            f.executeObQueues("gmailTimer");
            f.setupTimer(a)
        },
        setupGmailTimer: function (a) {
            this.pauseTimer();
            this.timerFunction(a)
        },
        pauseTimer: function () {
            clearTimeout(this.timer);
            delete this.timer
        },
        resumeTimer: function () {
            this.setupGmailTimer()
        },
        addTimerObserver: function (a, b, c) {
            var d = a;
            b && (d = i.throttle(function () {
                a()
            }, b));
            this.observe("gmailTimer", function () {
                d()
            }, c)
        },
        setupCacheBusters: function () {
            var a = this;
            f.observe("viewChanged", function () {
                a.cachedVerticalList = null
            });
            f.observe("newInboxEmails", function () {
                a.cachedVerticalList = null
            })
        },
        detectListToggle: function () {
            var a = this;
            f.observe("viewChanged", function () {
                if (a.isListView())
                    for (var b = a.getCurrentMain().find("h3.Wr"), c = 0; c < b.length; c++) {
                        var d =
                            e(b[c]);
                        d.data("toggleTracked") || (d.click(function () {
                            var b = !1;
                            0 < e(this).closest(".ae4").find(".Cp").children().length && (b = !0);
                            a.executeObQueues("listToggle", b)
                        }), d.data("toggleTracked", !0))
                    }
            })
        },
        detectPreviewPaneChange: function () {
            var a = this;
            this.currentPreviewPaneSettings = this.getFreshPreviewPaneSettings();
            var b = i.throttle(function () {
                a.isListView() && a.getFreshPreviewPaneSettings()
            }, 500);
            f.observe("gmailTimer", function () {
                b()
            });
            f.observe("viewChanged", function () {
                if (a.isListView() && a.isHorizontalSplitPreviewPane() &&
                    0 === a.getCurrentMain().find(".age").filterOutInvisible().filter(":first").height()) {
                    var b = a.getLeftbarLinks().find(".ain").filter(":not(.pipeline)");
                    if (0 < b.length) {
                        var d = b.siblings();
                        e(d[0]).find(".nU").click();
                        b.find(".nU").click()
                    }
                }
            })
        },
        detectChatMessages: function () {
            var a = this;
            h.DomWatcher.watchForNewSelector(".dw .km", function (b) {
                a.executeObQueues("newChatMessage", e(b))
            })
        },
        detectThreadLoaded: function () {
            var a = this;
            h.DomWatcher.watchForNewSelector(".Bu .nH.if", function (b) {
                a.isPreviewPane() || a.isInConversation() ?
                    a.executeObQueues("conversationThreadLoadedEvent", e(b)) : a.bind("viewChanged", function () {
                        a.executeObQueues("conversationThreadLoadedEvent", e(b));
                        return !0
                    })
            })
        },
        detectConversationMessageStateChange: function () {
            var a = this,
                b = i.delayed(function () {
                    a.executeObQueues("conversationMessageStateChanged")
                }, 100);
            h.DomWatcher.watchForNewSelector("[role=main] .h7 > div", b);
            h.DomWatcher.watchForNewSelector("[role=main] .kv > div", b)
        },
        detectNewInboxEmail: function () {
            var a = this,
                b = i.delayed(function () {
                        a.executeObQueues("newInboxEmails")
                    },
                    100);
            h.DomWatcher.watchForNewSelector(".ae4 .Cp tr.zA [role=checkbox]", function (c) {
                b();
                "vertical" !== a.getPreviewPaneSettings() && a.executeObQueues("newInboxEmail", a.convertHTMLRowToObject(e(c).parents("tr")))
            })
        },
        setupAnimationWatcher: function () {
            var a = this;
            this.animationWatcher = h.Eventer.create({
                watchFunc: function (b) {
                    a.animationWatcher.trigger(b.animationName, b)
                }
            });
            h.document.addEventListener("animationstart", this.animationWatcher.watchFunc, !1);
            h.document.addEventListener("MSAnimationStart", this.animationWatcher.watchFunc, !1);
            h.document.addEventListener("webkitAnimationStart", this.animationWatcher.watchFunc, !1)
        },
        addAnimationWatcher: function (a, b) {
            i.isString(a) && (a = [a]);
            if (a && 0 < a.length)
                for (var c = 0; c < a.length; c++) this.animationWatcher.bind(a[c], b)
        },
        ob_queues: {
            archive: [],
            "delete": [],
            spam: [],
            reply: [],
            compose: [],
            viewChanged: [],
            ajaxListRefresh: [],
            search: []
        },
        detectXHREvents: function (a) {
            try {
                var b = /[?&]act=([^&]+)/.exec(a.url);
                if (b && b[1]) {
                    var c = decodeURIComponent(b[1]);
                    e.deparam(a.url);
                    if (0 < a.body.length) var d = e.deparam(a.body);
                    switch (c) {
                    case "sm":
                        this.executeObQueues("compose", d);
                        break;
                    case "dr":
                        this.executeObQueues("emailDiscarded", d.m)
                    }
                }
            } catch (n) {
                f.debug && console.log("Error in detectXHREvents: " + n)
            }
        },
        pageREGEX: /p\d+/,
        getLiveView: function () {
            return this.view = this.getStoredView(this.hash.parts)
        },
        getStoredView: function (a) {
            return a && 0 < a.length ? a[0] : this.Constants.Inbox
        },
        checkAndTriggerInitialConversationView: function () {
            var a = e(".Bu .nH.if");
            0 < a.length && this.executeObQueues("conversationThreadLoadedEvent", a)
        },
        waitingToLoad: !1,
        urlChangeChecker: null,
        setURL: function (a) {
            this.waitingToLoad = !0;
            var b = this.currentMain,
                c = this;
            this.urlChangeChecker && this.urlChangeChecker.destroy();
            this.urlChangeChecker = i.repeatEvery(function () {
                var d = c.getCurrentMain();
                b[0] !== d[0] && (c.waitingToLoad = !1, c.urlChangeChecker.destroy(), c.urlChangeChecker = null, c.hashChangeLastID += 1, c.detectViewChange({
                    fragment: a
                }, 1, c.hashChangeLastID))
            }, 300, !0);
            location.hash = "#" + a
        },
        detectViewChange: function (a, b, c) {
            if (!this.waitingToLoad && (b || (b = 1), c || (c = 1), c === this.hashChangeLastID)) {
                var d =
                    this;
                if (this.getCurrentMain(!0)) {
                    this.view = null;
                    this.hash.parts = [];
                    this.hash.query = null;
                    this.hash.partsString = "";
                    if (a.fragment) {
                        var e = a.fragment,
                            g = e.indexOf("?"); - 1 < g && (this.hash.query = e.substring(g + 1), e = e.substring(0, g));
                        g = e.split("/");
                        this.hash.parts = g;
                        this.hash.partsString = e;
                        this.conversation = null;
                        this.view = g[0];
                        this.label = (this.view == this.Constants.Label || this.view == this.Constants.Search || this.view == this.Constants.Apps) && 1 < g.length ? g[1] : null;
                        if (this.isCompose()) this.view === this.Constants.Drafts &&
                            1 < g.length && (this.conversation = i.last(g));
                        else if (this.isInConversation()) this.conversation = i.last(g);
                        else if (!this.isInContacts()) {
                            if ((e = i.last(g)) && 16 === e.length && 30 > b) {
                                this.isGmailView() && h.BentoBox.UI.setGmailView();
                                setTimeout(function () {
                                    d.detectViewChange(a, b + 1, c)
                                }, 300);
                                return
                            }
                            this.conversation = null
                        }
                    }
                    d.view || (d.view = d.Constants.Inbox);
                    this.isListView() && (this.rowThreadIconIndex = this.getCurrentMain().find("[gh=tl]").filter(":first").find("table colgroup col.yg").filter(":first").index());
                    d.executeObQueues("viewChanged",
                        d.conversation ? d.Constants.Conversation : d.view);
                    d.trigger("viewChanged")
                }
            }
        },
        validateAndCorrectURLHash: function () {
            if (!this.hash.parts || !this.isURLHashValid()) {
                this.hash.parts = [];
                this.hash.query = null;
                this.hash.partsString = "";
                var a = location.hash.substring(1),
                    b = a.indexOf("?"); - 1 < b && (this.hash.query = a.substring(b + 1), a = a.substring(0, b));
                this.hash.parts = a.split("/");
                this.hash.partsString = a
            }
        },
        isURLHashValid: function () {
            var a = location.hash;
            if (0 < a.length) {
                var b = a.indexOf("?"); - 1 < b && (a = a.substring(b))
            }
            return this.hash.partsString ===
                a
        },
        isInConversation: function () {
            this.validateAndCorrectURLHash();
            this.getCurrentMain(!0);
            var a = this.hash.parts;
            return 1 < a.length && 16 === i.last(a).length || 1 === a.length && a[0] === this.Constants.Sent ? 0 < this.getCurrentMain().find(".gA.gt").filterOutInvisible().length && 0 < this.getConversationSubjectHeader().length : !1
        },
        isInSentConversation: function () {
            return this.isInConversation() && 1 === this.hash.parts.length
        },
        isInContacts: function () {
            return this.view === this.Constants.Contacts || this.view === this.Constants.Contact
        },
        getConversationSubjectHeader: function () {
            return this.getCurrentMain().find(".ha")
        },
        getConversation: function () {
            return this.getCurrentMain().find(".if")
        },
        readyListeners: {},
        executeObQueues: function (a, b) {
            if (this.isReady()) {
                var c = this,
                    d = Array.prototype.slice.call(arguments, 1);
                if (c.ob_queues[a]) {
                    c.readyListeners[a] || (c.readyListeners[a] = h.ReadyListener.create());
                    readyListener = c.readyListeners[a];
                    readyListener.reset();
                    for (var e = 0; e < c.ob_queues[a].length; e++) try {
                        var g = c.ob_queues[a][e].apply(c, d);
                        g && g.ready &&
                            readyListener.register(g)
                    } catch (f) {
                        console.log(f.stack || f)
                    }
                    readyListener.ready(function () {
                        c.trigger("finishedExecuting_" + a);
                        return !0
                    });
                    readyListener.doneRegistering()
                }
            }
        },
        getConversationId: function () {
            return this.hash.parts && 0 < this.hash.parts.length ? i.last(this.hash.parts) : null
        },
        getCurrentMain: function (a) {
            if (a || !this.currentMain) {
                a: {
                    this.elements.main || (this.elements.main = this.$("div[role=main]:first").closest(".ar4"));
                    this.elements.mainParent || (this.elements.mainParent = this.$("div[role=main]:first").parent());
                    if (0 < this.elements.mainParent.length)
                        for (var a = this.elements.mainParent[0].children, b = 0; b < a.length; b++) {
                            var c = a[b];
                            if ("main" === c.getAttribute("role") && "none" !== c.style.display) {
                                a = e(c);
                                break a
                            }
                        }
                    a = e(document.createElement("div"))
                }
                this.currentMain = a
            }
            return this.currentMain
        },
        Settings: {
            getEndingMenuMarker: function () {
                return f.getCurrentMainContainer().find(".aeH .f2 .fY .dJ").first()
            },
            getContentBodyBlockContainer: function () {
                return f.getCurrentMainContainer().find(".AO .nH.f2.hCyPr")
            },
            getContentBodyBlock: function () {
                return f.getCurrentMainContainer().find(".AO .nH.f2.hCyPr>.nH")
            },
            getStreakSettings: function () {
                return f.getCurrentMainContainer().find(".AO .nH.f2.hCyPr>.streakSettings")
            },
            getSettingTabs: function () {
                return f.getCurrentMainContainer().find(".nH.fY>.fZ")
            }
        },
        getGearButton: function () {
            return f.getCurrentMainContainer().find(".aos").parent().filter("[role=button]")
        },
        getGearButtonMenu: function () {
            return e("[role=menu]").filter(":FastVisible")
        },
        getSettingsMenuItem: function () {
            return this.getGearButtonMenu().find(".aMS")
        },
        getCurrentMainContainer: function () {
            return this.elements.main
        },
        getCurrentMoreButton: function () {
            var a = e(f.$("div[gh=tm]")[0]),
                a = a.find("[gh=mtb] div[role=button]"),
                a = a.filterOutInvisible(),
                a = a.filter(":not(.Bq)");
            return a = a.filter(":last")
        },
        getRightSide: function () {
            if (this.isCompose()) return this.isRapportiveInstalled() ? this.getCurrentMain().find("#rapportive-sidebar") : this.isXobniInstalled() ? this.$("#xobni_frame").parent() : this.getCurrentMain().find(".bb_right");
            if (this.isXobniInstalled()) return this.$("#xobni_frame").parent();
            this.isRapportiveInstalled();
            return this.getCurrentMain().find("table.Bs .Bu").filter(":last")
        },
        getLeftBar: function () {
            if (!this.elements.leftbar || !this.elements.leftbar.isVisible()) {
                var a = this.$("div.oy8Mbf div[role=navigation]"),
                    a = a.filter(":FastVisible(noCompute)");
                this.elements.leftbar = a.parents("div.oy8Mbf")
            }
            return this.elements.leftbar
        },
        getLeftbarLinks: function () {
            if (!this.getLeftBar().links || !this.getLeftBar().links.isVisible()) {
                var a = this.getLeftBar().find("div[role=navigation] [title]");
                this.getLeftBar().links = e(a[0]).parents(".n3")
            }
            return this.getLeftBar().links
        },
        getInboxLink: function () {
            var a =
                this.getLeftbarLinks().find(".aim a[href*=#inbox]");
            if (0 < a.length) return a.closest(".aim")
        },
        getSentMailLink: function () {
            var a = this.getLeftbarLinks().find(".aim a[href*=#sent]");
            if (0 < a.length) return a.closest(".aim")
        },
        getComposeButton: function () {
            return this.$("[gh=cm]")
        },
        isListView: function () {
            return this.isPreviewPane() ? -1 < this.Constants.ListViews.indexOf(this.view) && e("[gh=tl]").isVisible() : -1 < this.Constants.ListViews.indexOf(this.view) && !this.isConversation() && !this.isCompose()
        },
        isConversation: function () {
            return this.isInConversation()
        },
        isGmailView: function () {
            return -1 < i.values(this.Constants.ListViews).indexOf(this.view)
        },
        isContacts: function () {
            return this.view == this.Constants.Contacts
        },
        isSearch: function () {
            return (this.view == this.Constants.Search || this.view == this.Constants.Apps) && !this.isConversation()
        },
        isCompose: function () {
            return this.view == this.Constants.Compose || this.view == this.Constants.Drafts && 0 === this.getCurrentMoreButton().length
        },
        isDrafts: function () {
            return this.view == this.Constants.Drafts
        },
        getMainList: function () {
            for (var a =
                this.getCurrentMain().find("[gh=tl]"), b = 0; b < a.length; b++)
                if (1 === e(a[b]).parents("[role=main]").length) return e(a[b]);
            return null
        },
        getListRows: function (a) {
            for (var b = [], a = a.find("tr.zA"), c = 0; c < a.length; c++) b.push(this.convertHTMLRowToObject(e(a[c]), c));
            return b
        },
        convertHTMLRowToObject: function (a, b) {
            var c = {
                type: this.getPreviewPaneSettings(),
                node: a,
                rowIndex: b,
                rowNode: a,
                getList: function () {
                    return list
                },
                checked: 0 < a.find("input[type=checkbox]:checked, div[role=checkbox][aria-checked=true]").length
            };
            c.subjectLink =
                c.rowNode.find("[role=link]");
            c.checkbox = c.rowNode.find("input[type=checkbox], div[role=checkbox]").parent();
            "horizontal" === c.type && (c.checked = c.checked || c.rowNode.hasClass("aps"), c.previewed = c.rowNode.hasClass("aps"));
            0 < a.find("td.apU").length && (c.starHolder = a.find("td.apU"));
            c.labelContainer = c.rowNode.find(".xT");
            c.attachmentsContainer = c.rowNode.find(".yf");
            c.date = c.rowNode.find("td:last");
            try {
                c.isUnread = -1 < c.subjectLink.find(".y6 span").filter(":first")[0].innerHTML.indexOf("<b>")
            } catch (d) {}
            return c
        },
        getVerticalListRows: function (a) {
            var b = [],
                c = [],
                d = a.find("tr.zA"),
                h = 0,
                g = function () {
                    if (0 < c.length) {
                        var d = {
                            type: "vertical",
                            node: c,
                            rowIndex: h++,
                            rowNode: c[0],
                            getList: function () {
                                return a
                            }
                        };
                        d.previewed = d.rowNode.hasClass("aps");
                        d.checked = d.previewed || 0 < d.rowNode.find("input[type=checkbox]:checked, div[role=checkbox][aria-checked=true]").length;
                        for (var g = 0; g < c.length; g++) {
                            var f = e(c[g]);
                            0 < f.find(".apu").length && (d.labelContainer = f.find(".apu"));
                            0 < f.find("[role=link]").length && (d.subjectLink = f.find("[role=link]"));
                            0 < f.find("td.apU").length && (d.starHolder = f.find("td.apU"))
                        }
                        d.isUnread = -1 < d.subjectLink.find(".y6 span").filter(":first")[0].innerHTML.indexOf("<b>");
                        d.date = d.rowNode.find(".apt");
                        b.push(d);
                        c = []
                    }
                };
            if (this.cachedVerticalList)
                for (d = 0; d < this.cachedVerticalList.length; d++) g = this.cachedVerticalList[d].rowNode, this.cachedVerticalList[d].previewed = g.hasClass("aps"), this.cachedVerticalList[d].checked = this.cachedVerticalList[d].previewed || 0 < g.find("input[type=checkbox]:checked, div[role=checkbox][aria-checked=true]").length,
            this.cachedVerticalList[d].type = "vertical";
            else {
                for (var f = 0; f < d.length; f++) {
                    var i = e(d[f]);
                    0 < i.find("[role=checkbox]").length && g();
                    c.push(i)
                }
                g();
                this.cachedVerticalList = b
            }
            return this.cachedVerticalList
        },
        getVisibleThreadRows: function (a) {
            a = this.getCurrentMain(a).find("[gh=tl]");
            if (0 === a.length) return [];
            if (this.isListView()) {
                for (var b = [], c = 0; c < a.length; c++) var d = e(a[c]),
                b = a[c].getAttribute("class").has("aia") ? 0 < d.find(".nn").length ? b.concat(this.getVerticalListRows(d)) : b.concat(this.getListRows(d, "horizontal")) :
                    b.concat(this.getListRows(d));
                return b
            }
            return []
        },
        getCheckboxesForCheckedRows: function () {
            return this.getCurrentMain().find("[gh=tl] .aDM .x7 td.aid")
        },
        getSelectedThreadRows: function () {
            return this.getVisibleThreadRows().filter(function (a) {
                return a.checked
            })
        },
        getPreviewedRow: function () {
            var a = this.getVisibleThreadRows().filter(function (a) {
                return a.previewed
            });
            if (0 < a.length) return a[0]
        },
        getActiveViewLink: function () {
            return this.getLeftbarLinks().find(".nZ")
        },
        getToolbarButtons: function () {
            return this.getCurrentMainContainer().find("[role=navigation] div[role=button]").filterOutInvisible()
        },
        getListToolbarContainer: function () {
            return this.$("[gh=tm]")
        },
        getSendButton: function () {
            return e(this.getToolbarButtons()[0])
        },
        getSaveButton: function () {
            return e(this.getToolbarButtons()[1])
        },
        getDiscardButton: function () {
            return e(this.getToolbarButtons()[2])
        },
        getDiscardDraftsButton: function () {
            return e(this.$("div[gh=tm]").find("div[gh=mtb] div[role=button]")[1])
        },
        getGooglePlusNameContainer: function () {
            return e("#gbsfw").parent().parent().children("div").first()
        },
        getProfilePictureLink: function () {
            return e("[guidedhelpid=gbacsw]")
        },
        getProfilePictureLinkContainer: function () {
            return this.getProfilePictureLink().parent().parent()
        },
        getThemeLoaded: function () {
            try {
                var a = JSON.stringify(GLOBALS),
                    b = a.indexOf("sx_skcs");
                if (-1 < b) {
                    var c = a.substring(b - 2, a.indexOf("]", b) + 1);
                    return JSON.parse(c)[1]
                }
            } catch (d) {}
            return "unknown"
        },
        getEnabledLabs: function () {
            try {
                var a = i.filter(GLOBALS[17][6][1], function (a) {
                    if (-1 < a[0].indexOf("lab") && "1" == a[1]) return !0
                });
                return i.pluckPlus(a, function (a) {
                    return a[0]
                })
            } catch (b) {}
            return ""
        },
        isOldUI: function () {
            try {
                var a =
                    JSON.stringify(GLOBALS),
                    b = a.indexOf("sx_sd");
                if (-1 < b) {
                    var c = a.substring(b - 2, a.indexOf("]", b) + 1);
                    return "classic" == JSON.parse(c)[1]
                }
            } catch (d) {}
            return !1
        },
        isGooglePlusEnabled: function () {
            return 0 < this.$("#gbi4i").length
        },
        getPreviewPaneSettings: function () {
            return this.currentPreviewPaneSettings
        },
        getFreshPreviewPaneSettings: function () {
            var a = "classic";
            this.getPreviewPaneLoaded() && (this.isVerticalSplitPreviewPane() ? a = "vertical" : this.isHorizontalSplitPreviewPane() && (a = "horizontal"));
            this.currentPreviewPaneSettings !=
                a && (this.currentPreviewPaneSettings = a, this.executeObQueues("previewPaneChanged", a));
            return a
        },
        getPreviewPaneLoaded: function () {
            var a = this.getMainList();
            return !a ? !1 : a[0].getAttribute("class").has("aia")
        },
        getSearchContainer: function () {
            this.elements.searchContainer || (this.elements.searchContainer = this.$("[gh=sb]"));
            return this.elements.searchContainer
        },
        getSearchInput: function () {
            this.elements.search.input || (this.elements.search.input = this.$("[gh=sb] input"), 1 < this.elements.search.input && (this.elements.search.input =
                this.elements.search.input.filter("#gbqfq")));
            return this.elements.search.input
        },
        getSearchButton: function () {
            return this.getSearchContainer().closest("form").find("button")
        },
        getSearchAutoComplete: function () {
            this.elements.search.autoComplete = this.$(".U5");
            if (!this.elements.search.autoComplete || 0 === this.elements.search.autoComplete.length) this.elements.search.autoComplete = this.$(".gstl_0.gssb_c, #gbw .gscs_a");
            return this.elements.search.autoComplete
        },
        getKeyboardHelp: function () {
            return this.$(".wa")
        },
        getReplyButtons: function (a) {
            for (var a = a.find("[role=navigation]"), b = [], c = [], d = [], f = 0; f < a.length; f++) {
                var g = e(a[f]).find("div[role=button]");
                b.push(g.filter(".nS"));
                c.push(g.filter(".nQ"));
                d.push(g.filter(".lX"))
            }
            return {
                send: b,
                save: c,
                discard: d
            }
        },
        getEditableArea: function (a) {
            var b = a.find("iframe.editable"),
                a = 0 < b.length ? e(b[0].contentDocument).find("body.editable") : null,
                b = f.getCurrentMain().find("form .At textarea");
            if ((b = 0 < b.length ? e(b[0]) : null) && b.isVisible()) return b;
            if (a) return a
        },
        getCurrentOpenEmailMessages: function () {
            for (var a =
                this.getCurrentMain().find(".Bk"), b = [], c = 0; c < a.length; c++) {
                var d = e(a[c]).parent();
                d.hasClass("h7") && b.push(d)
            }
            return e(b)
        },
        isPreviewPane: function () {
            return "classic" !== this.currentPreviewPaneSettings
        },
        isVerticalSplitPreviewPane: function () {
            return this.getPreviewPaneLoaded() ? 0 < this.getMainList().find(".nn").length : !1
        },
        isHorizontalSplitPreviewPane: function () {
            return this.getPreviewPaneLoaded() ? 0 === this.getMainList().find(".nn").length : !1
        },
        isTabbedInbox: function () {
            return 0 < e(".aKh").length
        },
        isRapportiveInstalled: function () {
            return "undefined" !==
                typeof rapportive
        },
        getRapportive: function () {
            return this.getCurrentMain().find("#rapportive-sidebar")
        },
        isXobniInstalled: function () {
            return "undefined" !== typeof xobni
        },
        isGmailRightSide: function () {
            return !(this.isRapportiveInstalled() || this.isXobniInstalled())
        },
        addToRightSide: function (a) {
            if (this.isGmailRightSide()) {
                this.getRightSide();
                this.getRightSide().find(".anT").prepend(a);
                var b = this.getRightSide().find(".adC");
                b.css({
                    position: ""
                });
                a.isVisible() || b.prepend(a);
                a.isVisible() || this.getRightSide().find("div.Bt").after(a)
            } else this.getRightSide().prepend(a)
        },
        setupComposeHolderResizeEvents: function () {
            function a() {
                for (var a = 0; a < b.elementsInComposeArea.length; a++) {
                    var d = b.elementsInComposeArea[a];
                    d.show();
                    5 > d.offset().left && d.hide()
                }
            }
            var b = this;
            e(m).resize(function () {
                for (var a = e(document).height() + "px", d = [], f = 0; f < b.elementsInComposeArea.length; f++) {
                    var g = b.elementsInComposeArea[f];
                    0 < g.find(".streak__inComposeArea").length && (g[0].style.height = a, d.push(g))
                }
                b.elementsInComposeArea = d
            });
            h.NotificationCenter.addFunction({
                eventName: "newComposeWindow",
                functionToCall: a
            });
            h.NotificationCenter.addFunction({
                eventName: "composeWindowRemoved",
                functionToCall: a
            })
        },
        addToComposeArea: function (a, b) {
            var c = e(document.createElement("div"));
            c[0].style.width = b + "px";
            c[0].style.height = e(document).height() + "px";
            c[0].setAttribute("class", "nH nn streak__composeItemWrapper");
            var d = e(document.createElement("div"));
            d[0].setAttribute("class", "Hd no");
            c.append(d);
            d.append(a);
            a.addClass("streak__inComposeArea");
            e(".dw .no > div.nn:first").before(c);
            this.elementsInComposeArea.push(c);
            return c
        },
        removeFromComposeArea: function (a) {
            this.elementsInComposeArea.removeVal(a);
            a.detach()
        },
        readdToComposeArea: function (a) {
            e(".dw .no > div.nn:first").before(a);
            this.elementsInComposeArea.push(a)
        },
        hideComposeLayer: function () {
            e(".dw").hide();
            e(".Wk").hide()
        },
        unhideComposeLayer: function () {
            e(".dw").show();
            e(".Wk").show()
        },
        triggerListRefresh: function () {
            this.$("[gh=mtb] [act=20]").simulateRawClick()
        },
        widgets: {
            getDeleteIcon: function () {
                var a = e(document.createElement("div"));
                a.addClass("ar9 G8oNDd tk3N6e-I-J3 J-J5-Ji");
                a[0].setAttribute("style", "vertical-align: middle; padding-top:2px; width: 16px;");
                return a
            },
            getSettingsIcon: function () {
                var a = e(document.createElement("div"));
                a.addClass("aos");
                return a
            },
            getLabelTag: function (a, b, c) {
                var d = e(document.createElement("div"));
                d.addClass("ar as");
                d[0].innerHTML = i.template('<div class="at" style="background-color: <%= groupcolor %>; border-color: <%= groupcolor %>;"><div class="au" style="border-color:<%= groupcolor %>"><div class="av" style="color: <%= textcolor %>"><%= text %></div> </div></div>', {
                    text: a,
                    groupcolor: b,
                    textcolor: c
                });
                return d
            },
            getCheckbox: function (a, b, c) {
                var d = e(h.createEl("div"));
                d.addClass("gmailCheckbox");
                var f = e(h.createEl("div"));
                f.addClass("oZ-jc T-Jo J-J5-Ji");
                var g = e(h.createEl("div"));
                g.addClass("T-Jo-auh");
                var i = h.createEl("span", a);
                d.append(f);
                f.append(g);
                a && 0 < a.length && d.append(i);
                f.easyHoverClass("T-Jo-JW");
                b && (f.addClass("T-Jo-Jp"), d.prop("checked", !0));
                c || d.click(function (a) {
                    f.toggleClass("T-Jo-Jp");
                    d.prop("checked", f.hasClass("T-Jo-Jp"));
                    d.trigger("change");
                    a.stopPropagation()
                });
                d.setChecked = function (a) {
                    f.toggleClass("T-Jo-Jp", a);
                    d.prop("checked", f.hasClass("T-Jo-Jp"))
                };
                d.isChecked = function () {
                    return d.prop("checked") === true
                };
                return d
            },
            getLabelActionTag: function (a) {
                var b = {};
                e.extend(b, {
                    backgroundColor: "rgb(221, 221, 221)",
                    textColor: "rgb(102, 102, 102)",
                    labelText: null,
                    labelHelpText: null,
                    labelCallback: e.noop,
                    xHelpText: null,
                    xCallback: e.noop
                }, a);
                var c = e(document.createElement("span"));
                c.addClass("J-J5-Ji");
                c[0].innerHTML = i.template('<table cellpadding="0" class="cf hX"><tbody><tr class="hR"><td class="hU hM" style="background-color: <%= backgroundColor %>; color: <%= textColor %>;"><div class="hN" title="<%= labelHelpText %>" role="button"><%= labelText %></div></td><td class="hV hM bb_labelActionTag" style="background-color: <%= backgroundColor %>; color: <%= textColor %>;"><span class="hO" title="<%= xHelpText %>" role="button">x</span></td></tr></tbody></table>',
                    b);
                c.find(".bb_labelActionTag").hover(function () {
                    e(this);
                    e(this).css({
                        backgroundColor: b.textColor,
                        color: b.backgroundColor
                    })
                }, function () {
                    e(this);
                    e(this).css({
                        backgroundColor: b.backgroundColor,
                        color: b.textColor
                    })
                });
                c.reset = function () {
                    c.find(".hM").css({
                        backgroundColor: b.backgroundColor,
                        color: b.textColor
                    })
                };
                c.find(".hU").click(b.labelCallback);
                c.find(".hV").click(b.xCallback);
                return c
            },
            getInlineNotice: function (a, b) {
                var c = e('<div class="ya yb"></div>');
                c[0].innerHTML = a;
                i.isArray(b) && i.each(b, function (a) {
                    var b =
                        e('<span class="x8" role="link"></span>');
                    b[0].innerHTML = a.text;
                    b.click(function (b) {
                        a.callback && (a.callback(b), b.stopPropagation())
                    });
                    c.append(b)
                });
                return c
            }
        }
    });
    h.DependencyManager.addFunction({
        functionKey: "gmailLoaded",
        functionToCall: f.init,
        functionContext: f
    });
    h.DependencyManager.addFunction({
        functionKey: "gmail.bindWatchers",
        functionToCall: f.bindWatchers,
        functionContext: f,
        dependentFunctionKeys: ["gmailLoaded"]
    });
    h.Gmail = f
})(Streak, window);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        Gmail = Streak.Gmail;
    var GmailComposeWindowMasterController = function () {
        this._composeWindows = [];
        this._composeWindowContainer = null;
        this._numberOfContainerChildren = null;
        this._attachmentMap = {};
        this._potentiallyDiscardedOrSentComposeWindows = [];
        this._detectNewComposeWindows();
        this._detectChangeInComposeWindows();
        this._detectDraftSaving();
        this._detectEmailSent();
        this._detectThreadSent();
        this._detectEmailDiscarded();
        this._detectMinimizedWindows();
        this._detectAttachmentAdded()
    };
    GmailComposeWindowMasterController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(GmailComposeWindowMasterController.prototype, {
        getComposeWindows: function () {
            return this._composeWindows
        },
        _detectNewComposeWindows: function () {
            var self = this;
            Gmail.addAnimationWatcher("streakComposeNodeInserted", function (event) {
                if (event.target && event.target.querySelectorAll(".gU.Up").length === 0) return;
                self._processNewComposeWindow($(event.target))
            })
        },
        _processNewComposeWindow: function (composeWindowJQueryElement) {
            if (this._haveWeAlreadySeenThisComposeWindow(composeWindowJQueryElement)) return;
            if (this._composeWindowContainer === null) this._getContainerAndMarkPermanentChildren(composeWindowJQueryElement);
            composeWindowJQueryElement.addClass("streakGmailCompose");
            var composeWindowController = new Gmail.GmailComposeWindowViewController;
            composeWindowController.setJQueryNode(composeWindowJQueryElement);
            this._composeWindows.push(composeWindowController);
            this._numberOfContainerChildren = this._composeWindowContainer.children().length;
            var readyChecker = _.repeatEvery(function () {
                if (composeWindowController.isReady()) {
                    readyChecker.stop();
                    Streak.NotificationCenter.notify({
                        eventName: "newComposeWindow",
                        composeWindowController: composeWindowController
                    })
                }
            }, 150, false)
        },
        _getContainerAndMarkPermanentChildren: function (composeWindowJQueryElement) {
            this._composeWindowContainer = composeWindowJQueryElement.closest(".no").parent().parent();
            this._composeWindowContainer.children().addClass("streakGmailComposeChildren")
        },
        _haveWeAlreadySeenThisComposeWindow: function (composeWindowJQueryElement) {
            for (var ii = 0; ii < this._composeWindows.length; ii++)
                if (this._composeWindows[ii].getElement()[0] ===
                    composeWindowJQueryElement[0]) return true;
            return false
        },
        _detectChangeInComposeWindows: function () {
            var self = this;
            Gmail.addAnimationWatcher(["streakComposeTriggerEven", "streakComposeTriggerOdd"], function () {
                if (self._composeWindowContainer.children().length < self._numberOfContainerChildren) self._findAndHandleRemovedComposeWindows()
            })
        },
        _findAndHandleRemovedComposeWindows: function () {
            if (!this._composeWindowContainer) return;
            var existingWindows = this._composeWindows.slice(0);
            this._composeWindows.length = 0;
            var composeWindowRemoved =
                false;
            for (var i = 0; i < existingWindows.length; i++) {
                var composeWindowController = existingWindows[i];
                if (composeWindowController.isAttachedToBody()) this._composeWindows.push(composeWindowController);
                else {
                    this._addToPotentiallyDiscardedOrSentComposeWindows(composeWindowController);
                    composeWindowRemoved = true
                }
            }
            if (composeWindowRemoved) Streak.NotificationCenter.notify({
                eventName: "composeWindowRemoved"
            });
            this._numberOfContainerChildren = this._composeWindowContainer.children().length
        },
        _addToPotentiallyDiscardedOrSentComposeWindows: function (composeWindowController) {
            composeWindowController.notify("potentiallyDiscardedOrSent");
            this._potentiallyDiscardedOrSentComposeWindows.push(composeWindowController);
            if (this._potentiallyDiscardedOrSentComposeWindows.length > 5) {
                var composeWindowController = this._potentiallyDiscardedOrSentComposeWindows.shift();
                composeWindowController.destroy()
            }
        },
        _detectDraftSaving: function () {
            var self = this;
            Gmail.observe("draftSaved", function (response, draftId) {
                self._findComposeWindowWithDraftIdAndNotify(draftId, "draftSaved")
            })
        },
        _detectEmailSent: function () {
            var self = this;
            Gmail.observe("compose", function (emailObject) {
                self._findComposeWindowWithDraftIdAndNotify(emailObject.draft,
                    "emailSent")
            })
        },
        _detectThreadSent: function () {
            var self = this;
            Gmail.bind("newSentEmail", function (thread) {
                self._findSentComposeWindowAndNotify(thread)
            })
        },
        _detectEmailDiscarded: function () {
            var self = this;
            Gmail.observe("emailDiscarded", function (draftId) {
                self._findDiscardedComposeWindowAndNotify(draftId)
            })
        },
        _findComposeWindowWithDraftIdAndNotify: function (draftId, eventName) {
            var composeWindowList = this._composeWindows;
            for (var ii = 0; ii < composeWindowList.length; ii++)
                if (composeWindowList[ii].getDraftId() === draftId) {
                    Streak.NotificationCenter.notify({
                        eventName: eventName,
                        composeid: composeWindowList[ii].getComposeid()
                    });
                    break
                }
        },
        _findDiscardedComposeWindowAndNotify: function (draftId) {
            var discardedComposeid = null;
            var composeWindowControllerToDestroy = null;
            var composeWindowController;
            for (var ii = 0; ii < this._potentiallyDiscardedOrSentComposeWindows.length; ii++) {
                composeWindowController = this._potentiallyDiscardedOrSentComposeWindows[ii];
                if (composeWindowController.getDraftId() === draftId) {
                    discardedComposeid = composeWindowController.getComposeid();
                    this._potentiallyDiscardedOrSentComposeWindows.removeVal(composeWindowController);
                    composeWindowControllerToDestroy = composeWindowController;
                    break
                }
            }
            if (!discardedComposeid)
                for (var ii = 0; ii < this._composeWindows.length; ii++) {
                    composeWindowController = this._composeWindows[ii];
                    if (composeWindowController.getDraftId() === draftId) {
                        discardedComposeid = composeWindowController.getComposeid();
                        this._composeWindows.removeVal(composeWindowController);
                        composeWindowControllerToDestroy = composeWindowController;
                        break
                    }
                }
            if (discardedComposeid) Streak.NotificationCenter.notify({
                eventName: "emailDiscarded",
                composeid: discardedComposeid
            });
            if (composeWindowControllerToDestroy) composeWindowControllerToDestroy.destroy()
        },
        _findSentComposeWindowAndNotify: function (thread) {
            var composeid = thread.get("composeid");
            var sentComposeid = null;
            var composeWindowControllerToDestroy = null;
            var composeWindowController;
            for (var ii = 0; ii < this._potentiallyDiscardedOrSentComposeWindows.length; ii++) {
                composeWindowController = this._potentiallyDiscardedOrSentComposeWindows[ii];
                if (composeWindowController.getComposeid() === composeid) {
                    sentComposeid = composeWindowController.getComposeid();
                    this._potentiallyDiscardedOrSentComposeWindows.removeVal(composeWindowController);
                    composeWindowControllerToDestroy = composeWindowController;
                    break
                }
            }
            if (!sentComposeid)
                for (var ii = 0; ii < this._composeWindows.length; ii++) {
                    composeWindowController = this._composeWindows[ii];
                    if (composeWindowController.getComposeid() === composeid) {
                        sentComposeid = composeWindowController.getComposeid();
                        this._composeWindows.removeVal(composeWindowController);
                        composeWindowControllerToDestroy = composeWindowController;
                        break
                    }
                }
            if (sentComposeid) Streak.NotificationCenter.notify({
                eventName: "threadResponse",
                composeid: sentComposeid,
                thread: thread
            });
            if (composeWindowControllerToDestroy) composeWindowControllerToDestroy.destroy()
        },
        _detectMinimizedWindows: function () {
            var minimizedComposeWindows = [];
            var self = this;
            Gmail.addTimerObserver(function () {
                self._findAndHandleRemovedComposeWindows();
                for (var ii = 0; ii < self._composeWindows.length; ii++) {
                    var composeWindowController = self._composeWindows[ii];
                    if (composeWindowController.isMinimized()) {
                        if (minimizedComposeWindows.indexOf(composeWindowController.getComposeid()) === -1) {
                            minimizedComposeWindows.push(composeWindowController.getComposeid());
                            composeWindowController.notifyMinimized()
                        }
                    } else if (minimizedComposeWindows.indexOf(composeWindowController.getComposeid()) > -1) {
                        minimizedComposeWindows.removeVal(composeWindowController.getComposeid());
                        composeWindowController.notifyRestored()
                    }
                }
            }, 500)
        },
        _detectAttachmentAdded: function () {
            var self = this;
            Gmail.addTimerObserver(function () {
                var oldAttachmentMap = _.clone(self._attachmentMap);
                for (var ii = 0; ii < self._composeWindows.length; ii++) {
                    var composeId = self._composeWindows[ii].getComposeid();
                    var numberOfAttachments =
                        self._composeWindows[ii].getAttachmentDOMElements().length;
                    self._attachmentMap[composeId] = numberOfAttachments;
                    if (oldAttachmentMap[composeId] < numberOfAttachments) {
                        Streak.NotificationCenter.notify({
                            eventName: "newAttachmentAdded",
                            composeId: composeId
                        });
                        self._composeWindows[ii].notify("newAttachmentAdded")
                    }
                }
            }, 500)
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "gmailComposeWindowMasterControllerInitialized",
        functionToCall: function (callback) {
            Gmail.GmailComposeWindowMasterController = new GmailComposeWindowMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailLoaded"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.jQuery,
        jwerty = Streak.jwerty,
        Gmail = Streak.Gmail;
    var GmailComposeWindowViewController = function () {
        Streak.ViewControllerBase.call(this);
        this._jQueryNode = null;
        this._container = null;
        this._storedDraftId = null;
        this._composeid = null;
        this._viewControllers = [];
        this._unbinders = [];
        this._toolbarBeforeFormattingViewControllers = [];
        this._sendButtonAreaViewControllers = [];
        this._tabUnbinders = [];
        this._eventListeners = [];
        this._internalSidebar = null;
        this._externalSidebar = null;
        this._externalSidebarCSSRule =
            null;
        this._additionalAreas = {};
        this._characterSequenceController = null;
        this._setupTimeout = null;
        this._lastSubjectPosition = null;
        this._elementOfLastFocus = null
    };
    GmailComposeWindowViewController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(GmailComposeWindowViewController.prototype, {
        setJQueryNode: function (jQueryNode) {
            this._jQueryNode = jQueryNode;
            this._container = jQueryNode.closest(".no").parent();
            this._setComposeid();
            this._bindToComposeEvents();
            this._setupKeyboardEvents();
            this._bindToEmailContentChanges()
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        isReady: function () {
            return this.getEditor().length > 0 && this.getSendButton().length > 0
        },
        getMinimizeButton: function () {
            return $(this._jQueryNode.find(".Hm > img")[0])
        },
        getPopOutButton: function () {
            return $(this._jQueryNode.find(".Hm > img")[1])
        },
        getCloseButton: function () {
            return $(this._jQueryNode.find(".Hm > img")[2])
        },
        getEditor: function () {
            if (!this._jQueryNode) return;
            return this._jQueryNode.find(".Ap [g_editable=true]")
        },
        getComposeBodyHTML: function () {
            var editor =
                this.getEditor();
            if (!editor || editor.length === 0) return "";
            var bodyHTML = editor[0].innerHTML;
            if (bodyHTML.indexOf('"gmail_extra') > -1) bodyHTML = bodyHTML.replace(/\r|\n/, "").replace(/\<div class\=\"gmail_extra\">.*/img, "");
            return bodyHTML
        },
        getSubjectInput: function () {
            return this._jQueryNode.find("input[name=subjectbox]")
        },
        getSubject: function () {
            return this.getSubjectInput().val()
        },
        getHiddenDraftValue: function () {
            return this._getFormFieldValue("uet")
        },
        getSendButton: function () {
            return this._jQueryNode.find(".IZ").find(".Up > div > [role=button]")
        },
        getDiscardButton: function () {
            return this._jQueryNode.find(".gU.az5 .oh")
        },
        getToContacts: function () {
            var people = [];
            var spans = this._jQueryNode.find("span.vN[email]");
            for (var i = 0; i < spans.length; i++) {
                var obj = {
                    emailAddress: spans[i].getAttribute("email")
                };
                if (spans[i].innerText !== obj.emailAddress) obj.name = spans[i].innerText;
                people.push(obj)
            }
            return people
        },
        getElement: function () {
            return this._jQueryNode
        },
        isAttachedToBody: function () {
            return this._jQueryNode.is(":inBody")
        },
        getDraftId: function () {
            var draftId = this._getFormFieldValue("draft");
            if (!draftId || draftId === "undefined") draftId = this._storedDraftId;
            return draftId
        },
        getComposeid: function () {
            return this._composeid
        },
        getExtraRecipientsContainer: function () {
            return this._jQueryNode.find(".aA6 > span > span, .ow > span > span").first()
        },
        getAttachmentDOMElements: function () {
            return this._jQueryNode.find(".dL")
        },
        getStatusTextArea: function () {
            return this._jQueryNode.find(".aWQ")
        },
        hasAttachments: function () {
            return this.getAttachmentDOMElements().length > 0
        },
        isMinimized: function () {
            return this._jQueryNode.children().filter("[style*=none]:not(.streak__compose_externalSidebar_wrapper)").length >
                0
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        minimize: function () {
            this.getMinimizeButton().simulateRawClick()
        },
        popOut: function () {
            this.getPopOutButton().simulateRawClick()
        },
        close: function () {
            this.getCloseButton().simulateRawClick()
        },
        send: function () {
            this.getSendButton().simulateRawClick()
        },
        discard: function () {
            this.getDiscardButton().simulateRawClick()
        },
        clearAttachments: function () {
            this.getAttachmentDOMElements().find("[role=button], [role=link]").simulateRawClick()
        },
        destroy: function () {
            clearTimeout(this._setupTimeout);
            for (var ii = 0; ii < this._viewControllers.length; ii++) this._viewControllers[ii].destroy();
            for (var ii = 0; ii < this._unbinders.length; ii++)
                if (_.isFunction(this._unbinders[ii])) this._unbinders[ii]();
            for (var ii = 0; ii < this._tabUnbinders.length; ii++)
                if (_.isFunction(this._tabUnbinders[ii])) this._tabUnbinders[ii]();
            this._viewControllers.length = 0;
            this._sendButtonAreaViewControllers.length = 0;
            this._toolbarBeforeFormattingViewControllers.length = 0;
            this._unbinders.length = 0;
            this._tabUnbinders.length = 0;
            this._characterSequenceController.destroy();
            this._characterSequenceController = null;
            if (this._additionalAreas) {
                for (var key in this._additionalAreas) {
                    var area = this._additionalAreas[key];
                    if (area) area.remove();
                    this._additionalAreas[key] = null
                }
                this._additionalAreas = null
            }
            for (var ii = 0; ii < this._eventListeners.length; ii++) this._removeEventListener(this._eventListeners[ii]);
            this._jQueryNode = null;
            this._container = null;
            Streak.ViewControllerBase.prototype.destroy.call(this)
        },
        hide: function () {
            this._jQueryNode.hide()
        },
        unhide: function () {
            this._jQueryNode.show()
        },
        isDestroyed: function () {
            return this._jQueryNode === null
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        addViewControllers: function (viewControllers) {
            _.mutate("union", this._viewControllers, viewControllers);
            _.mutate("union", this._delegates, viewControllers);
            if (!this.isReady()) {
                var self = this;
                clearTimeout(this._setupTimeout);
                this._setupTimeout = setTimeout(function () {
                    self.addViewControllers([])
                }, 100);
                return
            }
            for (var ii = 0; ii < viewControllers.length; ii++) viewControllers[ii].initialize(this);
            this._callDelegateFunction("allModificationsInitialized");
            var formattingAreaOffsetLeft = this._getFormattingAreaOffsetLeft();
            for (var ii = 0; ii < viewControllers.length; ii++) {
                this._processModifierViewController(viewControllers[ii]);
                this._processListenerViewController(viewControllers[ii])
            }
            this._updateInsertMoreAreaLeft(formattingAreaOffsetLeft)
        },
        _processModifierViewController: function (modifierViewController) {
            if (!modifierViewController) return;
            if (!modifierViewController.shouldProcessModification || !modifierViewController.shouldProcessModification()) return;
            modifierViewController.aboutToProcessModification();
            switch (modifierViewController.getModificationType()) {
            case "ADD_ELEMENT":
                this._handleAddElementModifier(modifierViewController);
                modifierViewController.justAdded();
                break
            }
        },
        _handleAddElementModifier: function (modifierViewController) {
            switch (modifierViewController.getModificationArea()) {
            case "BOTTOM_TOOLBAR":
                this._addElementToBottomToolbar(modifierViewController);
                break;
            case "BOTTOM":
                this._addElementToBottom(modifierViewController);
                break;
            case "INTERNAL_SIDEBAR":
                this._addInternalSidebar(modifierViewController);
                break;
            case "EXTRA_RECIPIENTS":
                this._addElementToExtraRecipients(modifierViewController);
                break;
            case "RECIPIENTS_OVERLAY":
                this._addElementAsRecipientsOverlay(modifierViewController);
                break;
            case "EXTERNAL_SIDEBAR":
                this._addExternalSidebar(modifierViewController);
                break
            }
        },
        reloadModification: function (modifierViewController) {
            if (!modifierViewController) return;
            var formattingAreaOffsetLeft = this._getFormattingAreaOffsetLeft();
            this._undoModification(modifierViewController);
            this._processModifierViewController(modifierViewController);
            this._updateInsertMoreAreaLeft(formattingAreaOffsetLeft)
        },
        _undoModification: function (modifierViewController) {
            switch (modifierViewController.getModificationType()) {
            case "ADD_ELEMENT":
                this._handleUndoAddElement(modifierViewController);
                break
            }
        },
        _handleUndoAddElement: function (modifierViewController) {
            switch (modifierViewController.getModificationArea()) {
            case "BOTTOM":
                this._detachElementFromBottom(modifierViewController);
                break;
            case "BOTTOM_TOOLBAR":
                this._detachElementFromBottomToolbar(modifierViewController);
                break;
            case "INTERNAL_SIDEBAR":
                this._removeInternalSidebar(modifierViewController);
                break;
            case "EXTERNAL_SIDEBAR":
                this._removeExternalSidebar(modifierViewController);
                break;
            case "EXTRA_RECIPIENTS":
                this._detachElementFromExtraRecipients(modifierViewController);
                break;
            case "RECIPIENTS_OVERLAY":
                this._detachElementAsRecipientsOverlay(modifierViewController);
                break
            }
        },
        _addElementToSendButtonArea: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            this.getSendButton().after(element);
            this._sendButtonAreaViewControllers.push(modifierViewController)
        },
        _addElementToBottom: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (element.parents().filter(this._getToolbarArea()[0]).length > 0) return;
            this._getToolbarArea().append(element);
            if (!modifierViewController.shouldModificationAdjustHeight || !modifierViewController.shouldModificationAdjustHeight()) return;
            var elementHeight = element.height();
            var toolbarHeight = this._getToolbarArea().height();
            this._getToolbarArea().height(toolbarHeight +
                elementHeight);
            element.height(elementHeight)
        },
        _detachElementFromBottom: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            if (!element.is(":inBody")) return;
            if (modifierViewController.shouldModificationAdjustHeight && modifierViewController.shouldModificationAdjustHeight()) {
                var elementHeight = element.height();
                var toolbarHeight = this._getToolbarArea().height();
                this._getToolbarArea().height(toolbarHeight - elementHeight)
            }
            element.detach()
        },
        _addElementToBottomToolbar: function (modifierViewController) {
            switch (modifierViewController.getModificationPlacement()) {
            case "BEFORE_FORMATTING":
                this._addElementToBottomToolbarBeforeFormatting(modifierViewController);
                break;
            case "SEND_BUTTON":
                this._addElementToSendButtonArea(modifierViewController);
                break;
            case "STATUS_AREA":
                this._addElementToStatusArea(modifierViewController);
                break
            }
            this._resetBottomToolbarTabOrder()
        },
        _detachElementFromBottomToolbar: function (modifierViewController) {
            if (modifierViewController.getModificationPlacement() === "STATUS_AREA") {
                this._detachElementFromStatusArea(modifierViewController);
                return
            }
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            if (!element.is(":inBody")) return;
            var formattingAreaOffsetLeft = this._getFormattingAreaOffsetLeft();
            element.detach();
            this._updateInsertMoreAreaLeft(formattingAreaOffsetLeft);
            this._toolbarBeforeFormattingViewControllers.removeVal(modifierViewController);
            this._resetBottomToolbarTabOrder()
        },
        _addElementToExtraRecipients: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            var receipientContainer = this.getExtraRecipientsContainer();
            receipientContainer.prepend(element)
        },
        _detachElementFromExtraRecipients: function (modifierViewController) {
            var element =
                modifierViewController.getModificationElement();
            if (!element) return;
            element.detach()
        },
        _addInternalSidebar: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            this._addPadding();
            this._jQueryNode.find(".I5").append(element);
            var borderColor = this._jQueryNode.find(".aoD").css("border-bottom-color");
            element.css({
                borderLeft: "1px solid " + borderColor,
                borderBottom: "1px solid " + borderColor
            });
            this._internalSidebar = modifierViewController;
            this._resetBottomToolbarTabOrder();
            this._internalSidebar.getFirstTabFocusElement().focus()
        },
        _removeInternalSidebar: function () {
            if (!this._internalSidebar) return;
            this._internalSidebar.getModificationElement().remove();
            this._internalSidebar = null;
            this._removePadding()
        },
        _addExternalSidebar: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            this._externalSidebar = $(document.createElement("div"));
            this._externalSidebar.addClass("streak__compose_externalSidebar_wrapper");
            var header =
                $(document.createElement("div"));
            header.addClass("streak__compose_externalSidebar_header");
            this._externalSidebar.append(header);
            var body = $(document.createElement("div"));
            body.addClass("streak__compose_externalSidebar_body");
            this._externalSidebar.append(body);
            var footer = $(document.createElement("div"));
            footer.addClass("streak__compose_externalSidebar_footer aDh");
            this._externalSidebar.append(footer);
            header.append(modifierViewController.getModificationTitle());
            body.append(element);
            this._jQueryNode.append(this._externalSidebar);
            this._externalSidebarCSSRule = Streak.CSSStyleManipulator.addRule(".aSs > div { width: 50% !important; margin-left: 30%; }", 0)
        },
        _removeExternalSidebar: function () {
            if (!this._externalSidebar) return;
            this._externalSidebar.remove();
            this._externalSidebarCSSRule.stylesheet.removeRule(this._externalSidebarCSSRule.rule)
        },
        _addElementAsRecipientsOverlay: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            this._jQueryNode.find("form > div").first().css({
                height: modifierViewController.getModificationHeight()
            });
            this._jQueryNode.find(".aoD.hl").css({
                height: modifierViewController.getModificationHeight()
            });
            this._jQueryNode.find(".nH .aaZ").append(element)
        },
        _detachElementAsRecipientsOverlay: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            this._jQueryNode.find("form > div").first().css("height", "");
            this._jQueryNode.find(".aoD.hl").css("height", "");
            element.detach()
        },
        _resetBottomToolbarTabOrder: function () {
            var self = this;
            for (var ii = 0; ii < this._tabUnbinders.length; ii++) this._tabUnbinders[ii]();
            var tabOrderViewControllers = this._sendButtonAreaViewControllers.concat(_.chain(this._toolbarBeforeFormattingViewControllers).filter(function (modifierViewController) {
                return modifierViewController.shouldModifyTabOrder && modifierViewController.shouldModifyTabOrder()
            }).sortBy(function (modifierViewController) {
                return modifierViewController.getModificationPriority()
            }).value());
            if (tabOrderViewControllers.length === 0) return;
            var firstElement = tabOrderViewControllers[0].getModificationElement();
            var lastElement;
            for (var ii = 0; ii < tabOrderViewControllers.length; ii++) {
                lastElement = tabOrderViewControllers[ii].getModificationElement();
                lastElement[0].setAttribute("tabindex", 1)
            }
            var sendButton = this.getSendButton();
            this._tabUnbinders.push(Streak.BentoBox.Keyboard.bindChordToEl({
                el: sendButton,
                chord: "tab",
                noBubble: true,
                noDefault: true,
                useCapture: true,
                cb: function (e) {
                    firstElement.focus();
                    e.preventDefault();
                    e.stopPropagation()
                }
            }));
            this._tabUnbinders.push(Streak.BentoBox.Keyboard.bindChordToEl({
                el: lastElement,
                chord: "tab",
                useCapture: true,
                noBubble: true,
                cb: function (e) {
                    if (e.shiftKey) return;
                    if (self._internalSidebar) {
                        self._internalSidebar.getFirstTabFocusElement().focus();
                        e.preventDefault();
                        return
                    }
                    self._jQueryNode.find(".fX").show();
                    var link = self._jQueryNode.find(".gQ[role=link]").filter(":NotDisplayNone").filter(":first");
                    if (link.length > 0) {
                        link.focus();
                        e.preventDefault()
                    }
                }
            }));
            if (this._internalSidebar) {
                var focusElement = this._internalSidebar.getLastTabFocusElement();
                this._tabUnbinders.push(Streak.BentoBox.Keyboard.bindChordToEl({
                    el: focusElement,
                    chord: "tab",
                    useCapture: true,
                    noBubble: true,
                    cb: function (e) {
                        if (e.shiftKey) return;
                        self.getSendButton().focus();
                        e.preventDefault()
                    }
                }));
                focusElement.bind("tabPressed", function () {
                    self.getSendButton().focus()
                })
            }
        },
        addTextAtCurrentCursorPosition: function (text) {
            if (!this._elementOfLastFocus) this._elementOfLastFocus = "EDITOR";
            if (this._elementOfLastFocus === "EDITOR") this.getEditor().insertNodeAtCaret(text);
            else if (this._elementOfLastFocus === "SUBJECT") {
                var position = 0;
                if (_.isReal(this._lastSubjectPosition)) position =
                    this._lastSubjectPosition;
                var subject = this.getSubject();
                subject = subject.insert(text, this._lastSubjectPosition);
                this.setSubject(subject)
            }
            this._callDelegateFunction("emailBodyChanged", this.getComposeBodyHTML());
            this._callDelegateFunction("subjectChanged", this.getSubject())
        },
        replaceLastNCharacters: function (numberOfCharacters, replacementText) {
            this.getEditor().deleteText(numberOfCharacters);
            this.addTextAtCurrentCursorPosition(replacementText)
        },
        addElementAtCursorPosition: function (element) {
            Gmail.elements.body.append(element);
            var caretPosition = this._getCaretPosition();
            var fontSize = this.getEditor().css("font-size");
            var topAdjustment = parseInt(fontSize, 10) * 1.5;
            element.css({
                top: caretPosition.top + topAdjustment,
                left: caretPosition.left,
                position: "fixed"
            });
            this.getEditor().containRelativeElement(element, 0, topAdjustment)
        },
        notify: function (notificationEventName) {
            this._callDelegateFunction.apply(this, [notificationEventName].concat(_.toArray(arguments).slice(1)))
        },
        notifyMinimized: function () {
            if (this._externalSidebar) this._externalSidebar.hide()
        },
        notifyRestored: function () {
            if (this._externalSidebar) this._externalSidebar.show()
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        setToAddresses: function (addresses) {
            if (typeof addresses === "string") addresses = [addresses];
            this._jQueryNode.find(".vO").html(addresses.join(","))
        },
        setSubject: function (newSubject) {
            this.getSubjectInput().val(newSubject);
            this._getFormField("subjectbox").val(newSubject);
            this._callDelegateFunction("subjectChanged", this.getSubject())
        },
        setEmailBody: function (html) {
            this._getFormField("body").val(html);
            this.getEditor()[0].innerHTML = html
        },
        removeSelectorFromBody: function (selector) {
            this.getEditor().find(selector).remove()
        },
        addHTMLToBodyBeforeQuotedText: function (html) {
            if (this._isThereQuotedText()) this._addHTMLBeforeQuotedText(html);
            else this.addHTMLAtEndOfBody(html)
        },
        addHTMLAtEndOfBody: function (html) {
            var bodyText = this.getComposeBodyHTML();
            bodyText += html;
            this.setEmailBody(bodyText)
        },
        disableEditing: function () {
            this.getEditor().attr("contenteditable", false);
            this.getSubjectInput().attr("disabled", true)
        },
        enableEditing: function () {
            this.getEditor().attr("contenteditable", true);
            this.getSubjectInput().removeAttr("disabled")
        },
        _addHTMLBeforeQuotedText: function (html) {
            this.getEditor().find(".gmail_extra").first().before(html)
        },
        _isThereQuotedText: function () {
            return this.getEditor().find(".gmail_extra").length > 0
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        _getFormField: function (fieldName) {
            return this._jQueryNode.find("input[type=hidden][name=" + fieldName + "]")
        },
        _getFormFieldValue: function (fieldName) {
            var fieldElement =
                this._getFormField(fieldName);
            if (fieldElement.length === 0) return "";
            else if (fieldElement.length === 1) return fieldElement.val();
            else {
                var ret = [];
                for (var i = 0; i < fieldElement.length; i++) ret.push($(fieldElement[i]).val());
                return ret
            }
        },
        _getFormattingArea: function () {
            return this._jQueryNode.find(".oc")
        },
        _getInsertMoreArea: function () {
            return this._jQueryNode.find(".eq")
        },
        _getToolbarArea: function () {
            return this._jQueryNode.find(".aDh:not(.streak__compose_externalSidebar_footer)")
        },
        _setComposeid: function () {
            this._composeid =
                this._getFormFieldValue("composeid")
        },
        _getFormattingAreaOffsetLeft: function () {
            var formattingArea = this._getFormattingArea();
            if (!formattingArea) return 0;
            var offset = formattingArea.offset();
            if (!offset) return 0;
            return offset.left
        },
        _getCaretPosition: function () {
            var storedRange = this._getCurrentEditorSelectionRange();
            var node = $(this.getEditor().insertNodeAtCaret("<span>&nbsp;</span>"));
            var offset = node.offset();
            node.remove();
            this.getEditor().focus();
            this.getEditor()[0].ownerDocument.getSelection().removeAllRanges();
            this.getEditor()[0].ownerDocument.getSelection().addRange(storedRange);
            return offset
        },
        _getCurrentEditorSelectionRange: function () {
            return this.getEditor()[0].ownerDocument.getSelection().getRangeAt(0).cloneRange()
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        _bindToComposeEvents: function () {
            this._bindToDraftSaving();
            this._bindToSendButton();
            this._bindToDiscardButton();
            this._bindToEmailSent();
            this._bindToThreadSent()
        },
        _bindToDraftSaving: function () {
            var unbinder = Streak.NotificationCenter.addFunction({
                eventName: "draftSaved",
                filterParameters: {
                    composeid: this.getComposeid()
                },
                functionToCall: this._draftSaved,
                functionContext: this
            });
            this._unbinders.push(unbinder)
        },
        _draftSaved: function () {
            this._storedDraftId = this.getDraftId();
            this._callDelegateFunction("draftSaved");
            this._callDelegateFunction("emailBodyChanged", this.getComposeBodyHTML())
        },
        _bindToSendButton: function () {
            var self = this;
            var sendButton = this.getSendButton();
            this._addEventListener(sendButton[0], "mousedown", function (e) {
                self._handlePresend(e)
            }, true);
            this._addEventListener(this._jQueryNode[0],
                "keydown", function (e) {
                    if (e.srcElement !== sendButton[0]) return;
                    if (Streak.jwerty.is("space/enter", e)) self._handlePresend(e)
                }, true);
            this._unbinders.push(Streak.BentoBox.Keyboard.bindChordToEl({
                el: this._jQueryNode,
                chord: "ctrl+enter/cmd+enter",
                useCapture: true,
                cb: function (e) {
                    self._handlePresend(e)
                }
            }))
        },
        _handlePresend: function (event) {
            this._callDelegateFunction("emailBodyChanged", this.getComposeBodyHTML());
            var shouldNotSend = false;
            for (var ii = 0; ii < this._viewControllers.length; ii++)
                if (this._viewControllers[ii] &&
                    this._viewControllers[ii].shouldNotSend) shouldNotSend = shouldNotSend || this._viewControllers[ii].shouldNotSend();
            if (shouldNotSend) {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                this._callDelegateFunction("sendCancelled");
                Streak.BentoBox.Tracker.trackGmail({
                    eventName: "sending rejected"
                })
            } else {
                this._callDelegateFunction("aboutToSend");
                Streak.BentoBox.Tracker.trackGmail({
                    eventName: "email sending"
                })
            }
        },
        _bindToEmailSent: function () {
            var unbinder = Streak.NotificationCenter.addFunction({
                eventName: "emailSent",
                filterParameters: {
                    composeid: this.getComposeid()
                },
                functionToCall: this._handleEmailSent,
                functionContext: this
            });
            this._unbinders.push(unbinder)
        },
        _handleEmailSent: function () {
            this._callDelegateFunction("emailSent")
        },
        _bindToThreadSent: function () {
            var unbinder = Streak.NotificationCenter.addFunction({
                eventName: "threadResponse",
                filterParameters: {
                    composeid: this.getComposeid()
                },
                functionToCall: this._handleThreadResponse,
                functionContext: this
            });
            this._unbinders.push(unbinder)
        },
        _handleThreadResponse: function (functionParameters) {
            this._callDelegateFunction("threadResponse",
                functionParameters.thread)
        },
        _bindToDiscard: function () {
            var unbinder = Streak.NotificationCenter.addFunction({
                eventName: "emailDiscarded",
                filterParameters: {
                    composeid: this.getComposeid()
                },
                functionToCall: this._handleEmailDiscarded,
                functionContext: this
            });
            this._unbinders.push(unbinder)
        },
        _handleEmailDiscarded: function () {
            this._callDelegateFunction("discarded")
        },
        _bindToDiscardButton: function () {
            var self = this;
            var discardButton = this.getDiscardButton();
            this._addEventListener(discardButton[0], "mousedown", function (e) {
                    self._handlePrediscard(e)
                },
                true);
            this._addEventListener(this._jQueryNode[0], "keydown", function (e) {
                if (e.srcElement !== discardButton[0]) return;
                if (Streak.jwerty.is("space/enter", e)) self._handlePrediscard(e)
            }, true)
        },
        _handlePrediscard: function (event) {
            var shouldNotDiscard = false;
            for (var ii = 0; ii < this._viewControllers.length; ii++)
                if (this._viewControllers[ii] && this._viewControllers[ii].shouldNotDiscard) shouldNotDiscard = shouldNotDiscard || this._viewControllers[ii].shouldNotDiscard();
            if (shouldNotDiscard) {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                this._callDelegateFunction("discardCancelled")
            } else this._callDelegateFunction("aboutToDiscard")
        },
        _addEventListener: function (element, event, handler, capture) {
            element.addEventListener(event, handler, capture);
            this._eventListeners.push([element, event, handler, capture])
        },
        _removeEventListener: function (eventListenerParameters) {
            eventListenerParameters[0].removeEventListener(eventListenerParameters[1], eventListenerParameters[2], eventListenerParameters[3])
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        _processListenerViewController: function (viewController) {
            switch (viewController.getListenerType()) {
            case "CHARACTER_SEQUENCE":
                this._addCharacterSequenceViewController(viewController);
                break;
            case "CHORD":
                this._addChordListenerViewController(viewController);
                break
            }
        },
        _addCharacterSequenceViewController: function (viewController) {
            this._characterSequenceController.addDataSource(viewController.getCharacterSequenceListener())
        },
        _setupKeyboardEvents: function () {
            this._bindKeyPressEvents();
            this._setupCharacterSequenceController()
        },
        _bindKeyPressEvents: function () {
            var self = this;
            if (this.getEditor().length === 0) {
                setTimeout(function () {
                    self._bindKeyPressEvents()
                }, 100);
                return
            }
            this._addEventListener(this.getEditor()[0], "keydown", function (e) {
                self._callDelegateFunction("keydown", e)
            }, true);
            this._addEventListener(this.getEditor()[0], "keypress", function (e) {
                self._callDelegateFunction("keypress", e)
            }, true);
            this._addEventListener(this.getEditor()[0], "keyup", function (e) {
                self._callDelegateFunction("keyup", e)
            }, true);
            this._addEventListener(this.getEditor()[0],
                "blur", function (e) {
                    setTimeout(function () {
                        if (self.getEditor() && !self.getEditor().is(":focus")) self._callDelegateFunction("editorBlur")
                    }, 100)
                }, true);
            this._addEventListener(this._jQueryNode[0], "keydown", function (e) {
                if (Streak.jwerty.is("escape", e)) self._callDelegateFunction("escapePressed", e);
                self._callDelegateFunction("composeKeydown", e)
            }, true)
        },
        _setupCharacterSequenceController: function () {
            this._characterSequenceController = new Streak.BentoBox.Controllers.CharacterSequenceController;
            this.addDelegate(this._characterSequenceController)
        },
        _addChordListenerViewController: function (listenerViewController) {
            var chord = listenerViewController.getListenerChord();
            this._unbinders.push(Streak.BentoBox.Keyboard.bindChordToEl({
                el: this.getEditor(),
                chord: chord,
                noBubble: true,
                noDefault: true,
                useCapture: true,
                cb: function (e) {
                    listenerViewController.callListenerCallback()
                }
            }))
        },
        _bindToEmailContentChanges: function () {
            var self = this;
            if (this.getEditor().length === 0) {
                setTimeout(function () {
                    self._bindToEmailContentChanges()
                }, 100);
                return
            }
            this._addEventListener(this.getSubjectInput()[0],
                "input", function (e) {
                    self._lastSubjectPosition = self.getSubjectInput()[0].selectionEnd;
                    self._callDelegateFunction("subjectChanged", self.getSubject())
                });
            var emailBodyChanged = _.debounce(function () {
                self._callDelegateFunction("emailBodyChanged", self.getComposeBodyHTML())
            }, 300, false);
            this._addEventListener(this.getEditor()[0], "input", emailBodyChanged);
            this._addEventListener(this.getSubjectInput()[0], "focus", function (e) {
                self._elementOfLastFocus = "SUBJECT"
            });
            this._addEventListener(this.getEditor()[0], "focus",
                function (e) {
                    self._elementOfLastFocus = "EDITOR"
                })
        }
    });
    _.extend(GmailComposeWindowViewController.prototype, {
        _addPadding: function () {
            this._jQueryNode.find("form").css("padding-right", "200px");
            this._jQueryNode.find(".GQ").css("padding-right", "200px")
        },
        _removePadding: function () {
            this._jQueryNode.find("form").css("padding-right", "");
            this._jQueryNode.find(".GQ").css("paddingright", "")
        },
        _addElementToBottomToolbarBeforeFormatting: function (modifierViewController) {
            var priority = modifierViewController.getModificationPriority();
            var element = modifierViewController.getModificationElement();
            if (!this._additionalAreas.toolbarBeforeFormatting) this._additionalAreas.toolbarBeforeFormatting = this._addAdditionalToolbarArea("beforeFormatting");
            var afterElement = null;
            for (var ii = 0; ii < this._toolbarBeforeFormattingViewControllers.length; ii++)
                if (priority > this._toolbarBeforeFormattingViewControllers[ii].getModificationPriority()) afterElement = this._toolbarBeforeFormattingViewControllers[ii].getModificationElement();
            if (!afterElement) this._additionalAreas.toolbarBeforeFormatting.prepend(element);
            else afterElement.after(element);
            this._toolbarBeforeFormattingViewControllers.push(modifierViewController)
        },
        _addAdditionalToolbarArea: function (placement) {
            var td = $(document.createElement("td"));
            td[0].setAttribute("class", "streakArea gU");
            this._getFormattingArea().before(td);
            var separator = document.createElement("td");
            separator.setAttribute("class", "gU");
            separator.innerHTML = '<div class="Uz"></div>';
            td.after(separator);
            td.closest("table").find("colgroup").prepend("<col></col><col></col>");
            return td
        },
        _updateInsertMoreAreaLeft: function (oldFormattingAreaOffsetLeft) {
            var newFormattingAreaOffsetLeft = this._getFormattingAreaOffsetLeft();
            var insertMoreAreaLeft = parseInt(this._getInsertMoreArea().css("left"), 10);
            var diff = newFormattingAreaOffsetLeft - oldFormattingAreaOffsetLeft;
            this._getInsertMoreArea().css("left", insertMoreAreaLeft + diff + "px")
        },
        _addElementToStatusArea: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            var statusTextArea = this.getStatusTextArea();
            statusTextArea.find(".aWR").hide();
            statusTextArea.find(".wM").css("display", "block");
            var statusText = $('<span class="oG streak__statusText"><span class="streak__statusText_separator">| </span></span>');
            statusText.append(element);
            statusTextArea.prepend(statusText);
            statusTextArea.find(".streak__statusText_separator").hide();
            this._additionalAreas.statusText = statusText
        },
        _detachElementFromStatusArea: function (modifierViewController) {
            var element = modifierViewController.getModificationElement();
            if (!element) return;
            element.detach();
            this._additionalAreas.statusText.remove();
            this._additionalAreas.statusText = null;
            var statusTextArea = this.getStatusTextArea();
            statusTextArea.find(".aWR").show();
            statusTextArea.find(".wM").css("display", "")
        }
    });
    Streak.Gmail.GmailComposeWindowViewController = GmailComposeWindowViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailComposeWindowRequester = function () {
        this._currentCallback = null;
        this._unbinder = null
    };
    _.extend(GmailComposeWindowRequester.prototype, {
        requestNewComposeWindow: function (callback) {
            this._currentCallback = callback;
            this._setupComposeListener();
            this._openNewCompose()
        },
        _setupComposeListener: function () {
            this._unbinder =
                NotificationCenter.addFunction({
                    eventName: "newComposeWindow",
                    functionToCall: this._newComposeWindow,
                    functionContext: this
                })
        },
        _openNewCompose: function () {
            Gmail.getComposeButton().simulateRawClick()
        },
        _newComposeWindow: function (functionParameters) {
            if (this._currentCallback) this._currentCallback(functionParameters.composeWindowController);
            this._unbinder()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "gmailComposeWindowRequesterInitialized",
        functionToCall: function (callback) {
            Gmail.GmailComposeWindowRequester =
                new GmailComposeWindowRequester;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailComposeManager = function () {
        this._dataSources = [];
        this._pendingComposeWindows = [];
        this._readyToLoad = false;
        this._setupListener()
    };
    _.extend(GmailComposeManager.prototype, {
        _setupListener: function () {
            NotificationCenter.addFunction({
                eventName: "newComposeWindow",
                functionToCall: this._newComposeWindow,
                functionContext: this
            })
        },
        _newComposeWindow: function (notificationParameters) {
            if (!this._readyToLoad) {
                this._pendingComposeWindows.push(notificationParameters);
                return
            }
            var composeWindowController = notificationParameters.composeWindowController;
            var viewControllers = _.chain(this._dataSources).map(function (dataSource) {
                return dataSource.getViewControllers()
            }).flatten().compact().value();
            composeWindowController.addViewControllers(viewControllers)
        },
        markReadyToLoad: function (callback) {
            this._readyToLoad = true;
            for (var ii =
                0; ii < this._pendingComposeWindows.length; ii++) this._newComposeWindow(this._pendingComposeWindows[ii]);
            this._pendingComposeWindows.length = 0;
            if (callback) callback()
        },
        registerModifierModule: function (options) {
            if (this._dataSources.indexOf(options) > -1) return;
            this._dataSources.push(options)
        }
    });
    Gmail.GmailComposeManager = new GmailComposeManager;
    Streak.DependencyManager.addFunction({
        functionKey: "gmailComposeManager.markReadyToLoad",
        functionToCall: Gmail.GmailComposeManager.markReadyToLoad,
        functionContext: Gmail.GmailComposeManager,
        dependentFunctionKeys: ["bentoBox.triggerFirstGmailViewChange"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        Gmail = Streak.Gmail;
    var GmailReplyAreaMasterController = function () {
        this._replyAreas = [];
        this._numberOfReplyAreas = 0;
        this._detectNewReplyAreas();
        this._detectReplyAreasClosed();
        this._detectViewChanged()
    };
    GmailReplyAreaMasterController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(GmailReplyAreaMasterController.prototype, {
        _detectNewReplyAreas: function () {
            var self = this;
            Gmail.addAnimationWatcher("streakReplyOpen", function (event) {
                self._processNewReplyArea($(event.target))
            })
        },
        _processNewReplyArea: function (replyAreaJQueryElement) {
            if (this._haveWeAlreadySeenThisArea(replyAreaJQueryElement)) return;
            replyAreaJQueryElement.addClass("streakReplyArea");
            var replyAreaController = new Gmail.GmailReplyAreaViewController;
            replyAreaController.setJQueryNode(replyAreaJQueryElement);
            this._replyAreas.push(replyAreaController);
            this._numberOfReplyAreas = Gmail.getCurrentMain().find("div.adB").length;
            Streak.NotificationCenter.notify({
                eventName: "newReplyArea",
                replyAreaController: replyAreaController
            })
        },
        _haveWeAlreadySeenThisArea: function (replyAreaJQueryElement) {
            for (var ii = 0; ii < this._replyAreas.length; ii++)
                if (this._replyAreas[ii].getElement()[0] === replyAreaJQueryElement[0]) return true;
            return false
        },
        _detectReplyAreasClosed: function () {
            var self = this;
            Gmail.addAnimationWatcher("streakReplyClosed", function (event) {
                var newFoundNumber = Gmail.getCurrentMain().find("div.adB").length;
                if (newFoundNumber === self._numberOfReplyAreas) return;
                var lostElement = event.target;
                var currentReplyAreas = self._replyAreas.slice(0);
                self._replyAreas.length = 0;
                for (var ii = 0; ii < currentReplyAreas.length; ii++)
                    if (currentReplyAreas[ii].getElement()[0] === lostElement) {
                        currentReplyAreas[ii].destroy();
                        break
                    } else self._replyAreas.push(currentReplyAreas[ii]);
                self._numberOfReplyAreas = newFoundNumber
            })
        },
        _detectViewChanged: function () {
            for (var ii = 0; ii < this._replyAreas.length; ii++) this._replyAreas[ii].destroy();
            this._replyAreas.length = 0
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "gmailReplyAreaMasterControllerInitialized",
        functionToCall: function (callback) {
            Gmail.GmailReplyAreaMasterController =
                new GmailReplyAreaMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailReplyAreaViewController = Streak.Class.subclass({
        superclass: Gmail.GmailComposeWindowViewController,
        setJQueryNode: function (jQueryNode) {
            this._jQueryNode = jQueryNode;
            this._setComposeid();
            this._bindToComposeEvents();
            this._setupKeyboardEvents();
            this._bindToEmailContentChanges();
            this._bindToStatusChanges()
        },
        setSubject: function () {},
        addTextAtCurrentCursorPosition: function (text) {
            this.getEditor().insertNodeAtCaret(text);
            this._callDelegateFunction("emailBodyChanged", this.getComposeBodyHTML())
        },
        getSendAndArchiveButton: function () {
            var siblings = this.getSendButton().siblings();
            if (siblings.length === 0) return;
            return siblings.first().find("[role=button]")
        },
        _bindToSendButton: function () {
            Gmail.GmailComposeWindowViewController.prototype._bindToSendButton.call(this);
            var self = this;
            var sendButton =
                this.getSendAndArchiveButton();
            if (!sendButton || sendButton.length === 0) return;
            this._addEventListener(sendButton[0], "mousedown", function (e) {
                self._handlePresend(e)
            }, true);
            this._addEventListener(this._jQueryNode[0], "keydown", function (e) {
                if (e.srcElement !== sendButton[0]) return;
                if (Streak.jwerty.is("space/enter", e)) self._handlePresend(e)
            }, true);
            this._unbinders.push(Streak.BentoBox.Keyboard.bindChordToEl({
                el: this._jQueryNode,
                chord: "ctrl+enter/cmd+enter",
                useCapture: true,
                cb: function (e) {
                    self._handlePresend(e)
                }
            }))
        },
        _addElementToBottom: function (modifierViewController) {
            Gmail.GmailComposeWindowViewController.prototype._addElementToBottom.call(this, modifierViewController);
            var element = modifierViewController.getModificationElement();
            if (!modifierViewController.shouldModificationAdjustHeight || !modifierViewController.shouldModificationAdjustHeight()) return;
            this._getToolbarArea().closest("td.HE")[0].style.paddingTop = "40px";
            this._getToolbarArea().closest(".aDj")[0].style.paddingBottom = "40px"
        },
        _detachElementFromBottom: function (modifierViewController) {
            var element =
                modifierViewController.getModificationElement();
            if (!element) return;
            if (!element.is(":inBody")) return;
            if (modifierViewController.shouldModificationAdjustHeight && modifierViewController.shouldModificationAdjustHeight()) {
                this._getToolbarArea().closest("td.HE")[0].style.paddingTop = "";
                this._getToolbarArea().closest(".aDj")[0].style.paddingBottom = ""
            }
            Gmail.GmailComposeWindowViewController.prototype._detachElementFromBottom.call(this, modifierViewController)
        },
        _bindToStatusChanges: function () {
            var self = this;
            this._unbinders.push(Streak.DomWatcher.notifyAttributeChanged(this._jQueryNode.find(".wM")[0],
                "class", function () {
                    if (self._jQueryNode.find(".wM").length) self._extraAttachmentsHide();
                    else self._extraAttachmentsShow()
                }));
            this._unbinders.push(Streak.DomWatcher.notifyAttributeChanged(this._jQueryNode.find('.aWQ .oG[id^=":"]')[0], "class", function () {
                if (self._jQueryNode.find('.aWQ .oG.aOy[id^=":"]').length) self._savingTextShow();
                else self._savingTextHide()
            }))
        },
        _extraAttachmentsShow: function () {
            if (!this._additionalAreas.statusText) return;
            this._additionalAreas.statusText.hide()
        },
        _extraAttachmentsHide: function () {
            if (!this._additionalAreas.statusText) return;
            var self = this;
            setTimeout(function () {
                self._additionalAreas.statusText.show()
            }, 100)
        },
        _savingTextShow: function () {
            if (!this._additionalAreas.statusText) return;
            this._additionalAreas.statusText.find(".streak__statusText_separator").show()
        },
        _savingTextHide: function () {
            if (!this._additionalAreas.statusText) return;
            this._additionalAreas.statusText.find(".streak__statusText_separator").hide()
        },
        isReply: function () {
            return true
        }
    });
    Library.set("Gmail.GmailReplyAreaViewController", GmailReplyAreaViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailReplyManager = function () {
        this._dataSources = [];
        this._pendingReplyAreas = [];
        this._readyToLoad = false;
        this._setupListener()
    };
    _.extend(GmailReplyManager.prototype, {
        _setupListener: function () {
            NotificationCenter.addFunction({
                eventName: "newReplyArea",
                functionToCall: this._newReplyArea,
                functionContext: this
            })
        },
        _newReplyArea: function (notificationParameters) {
            if (!this._readyToLoad) {
                this._pendingReplyAreas.push(notificationParameters);
                return
            }
            var replyAreaController = notificationParameters.replyAreaController;
            var viewControllers = _.chain(this._dataSources).map(function (dataSource) {
                return dataSource.getViewControllers()
            }).flatten().compact().value();
            replyAreaController.addViewControllers(viewControllers)
        },
        markReadyToLoad: function (callback) {
            this._readyToLoad = true;
            for (var ii = 0; ii < this._pendingReplyAreas.length; ii++) this._newReplyArea(this._pendingReplyAreas[ii]);
            this._pendingReplyAreas.length = 0;
            if (callback) callback()
        },
        registerModifierModule: function (options) {
            if (this._dataSources.indexOf(options) > -1) return;
            this._dataSources.push(options)
        }
    });
    Gmail.GmailReplyManager = new GmailReplyManager;
    Streak.DependencyManager.addFunction({
        functionKey: "gmailReplyManager.markReadyToLoad",
        functionToCall: Gmail.GmailReplyManager.markReadyToLoad,
        functionContext: Gmail.GmailReplyManager,
        dependentFunctionKeys: ["bentoBox.triggerFirstGmailViewChange"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var GmailConversationGeometryModel = function (options) {
        this._messageBlocks = [];
        this._generateBlockArray()
    };
    GmailConversationGeometryModel.BLOCK_TYPES = {
        COLLAPSED: "COLLAPSED",
        CONDENSED: "CONDENSED",
        EXPANDED: "EXPANDED"
    };
    _.extend(GmailConversationGeometryModel.prototype, {
        _generateBlockArray: function () {
            var rowEls =
                this._getRowEls();
            if (rowEls.length === 0) return;
            this._containerTop = rowEls[0].closest("td").offset().top;
            var condensedArray = [];
            for (var ii = 0; ii < rowEls.length + 1; ii++) {
                var rowEl = rowEls[ii];
                if (rowEl)
                    if (rowEl.is(CONSTANTS.BLOCK_DIV_CLASSES.CONDENSED)) condensedArray.push(rowEl);
                    else {
                        if (condensedArray.length > 0) {
                            this._messageBlocks.push(this._generateRowInfo(condensedArray, GmailConversationGeometryModel.BLOCK_TYPES.CONDENSED));
                            condensedArray.length = 0
                        }
                        if (rowEl.is(CONSTANTS.BLOCK_DIV_CLASSES.COLLAPSED)) this._messageBlocks.push(this._generateRowInfo(rowEl,
                            GmailConversationGeometryModel.BLOCK_TYPES.COLLAPSED));
                        else if (rowEl.is(CONSTANTS.BLOCK_DIV_CLASSES.EXPANDED)) this._messageBlocks.push(this._generateRowInfo(rowEl, GmailConversationGeometryModel.BLOCK_TYPES.EXPANDED))
                    } else if (condensedArray.length > 0) this._messageBlocks.push(this._generateRowInfo(condensedArray, GmailConversationGeometryModel.BLOCK_TYPES.CONDENSED))
            }
        },
        _getRowEls: function () {
            var innerBlockDivs = Gmail.getCurrentMain().find(".Bk");
            var parentBlocks = [];
            for (var ii = 0; ii < innerBlockDivs.length; ii++) parentBlocks.push($(innerBlockDivs[ii]).parent());
            return parentBlocks
        },
        _generateRowInfo: function (rowEl, type) {
            var self = this;
            var block = {};
            block.el = rowEl;
            block.type = type;
            if (type === GmailConversationGeometryModel.BLOCK_TYPES.CONDENSED) block.geometry = self._calculateCondensedRowGeometry(rowEl);
            else {
                block.geometry = self._calculateRowGeometry(rowEl);
                block.sender = self._extractSender(rowEl);
                block.body = self._extractMessageBody(rowEl)
            }
            return block
        },
        _calculateRowGeometry: function (rowEl) {
            var geometry = {};
            geometry.width = rowEl.width();
            geometry.height = rowEl.find(".ads").filterOutInvisible().outerHeight();
            geometry.top = rowEl.offset().top - this._containerTop;
            geometry.left = rowEl.offset().left;
            geometry.middle = geometry.top + geometry.height / 2;
            geometry.bottom = geometry.top + geometry.height;
            return geometry
        },
        _calculateCondensedRowGeometry: function (rowEls) {
            var geometry = {};
            var firstEl = rowEls[0];
            var lastEl = _.last(rowEls);
            geometry.top = firstEl.offset().top - this._containerTop;
            geometry.bottom = lastEl.offset().top + lastEl.outerHeight() - this._containerTop;
            geometry.left = firstEl.offset().left;
            geometry.width = firstEl.width();
            geometry.height = geometry.bottom - geometry.top;
            geometry.middle = geometry.top + geometry.height / 2;
            return geometry
        },
        _extractSender: function (rowEl) {
            var self = this;
            var senderEl = rowEl.find(".gF.gK span");
            var email = senderEl.attr("email");
            var name = senderEl.attr("name");
            return {
                "email": email.toLowerCase(),
                "name": name
            }
        },
        _extractMessageBody: function (rowEl) {
            return rowEl.find(".adP")
        },
        getMessageBlocks: function () {
            return this._messageBlocks
        },
        dsfsfdsfs13212fs: function () {}
    });
    var CONSTANTS = {
        BLOCK_DIV_CLASSES: {
            COLLAPSED: ".kv",
            CONDENSED: ".kx, .kQ",
            EXPANDED: ".h7"
        }
    };
    Gmail.GmailConversationGeometryModel = GmailConversationGeometryModel
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var GmailConversationWatchController = function () {
        var self = this;
        if (!self.initialized) {
            self.initialized = true;
            self._delegates = [];
            self._convoStateChangeBindId = Math.random();
            Gmail.observe("conversationMessageStateChanged", function () {
                self._callDelegatesForGmailMessagesChange()
            }, self._convoStateChangeBindId)
        }
    };
    _.extend(GmailConversationWatchController.prototype, {
        addDelegate: function (delegate) {
            var self =
                this;
            self._delegates.push(delegate);
            self._ifOnConversationCallNewDelegate(delegate)
        },
        _callDelegatesForGmailMessagesChange: function () {
            var self = this;
            var gmailMessagesModel = new Gmail.GmailConversationGeometryModel;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.gmailThreadRowsChanged)) delegate.gmailThreadRowsChanged(gmailMessagesModel)
            })
        },
        _ifOnConversationCallNewDelegate: function (delegate) {
            var activeThread = Streak.BentoBox.Threads.getActiveThread();
            if (activeThread) {
                var gmailMessagesModel =
                    new Gmail.GmailConversationGeometryModel;
                if (_.isReal(delegate.gmailThreadRowsChanged)) delegate.gmailThreadRowsChanged(gmailMessagesModel)
            }
        },
        destroy: function () {
            Gmail.unobserve("conversationMessageStateChanged", this._convoStateChangeBindId);
            this._delegates.length = 0;
            this._delegates = null
        }
    });
    Gmail.GmailConversationWatchController = GmailConversationWatchController
})(Streak);
(function (Streak, window) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Eventer = Streak.Eventer,
        ComposeWindow = {};
    ComposeWindow.createComposeWindow = function (compose) {
        compose.container = compose.closest(".no").parent();
        compose.container.addClass("streakGmailCompose");
        compose.minimize = $(compose.find(".Hm > img")[0]);
        compose.popOut = $(compose.find(".Hm > img")[1]);
        compose.close = $(compose.find(".Hm > img")[2]);
        compose.editor = compose.find(".Ap [contenteditable=true]");
        compose.sendButton = compose.find(".IZ").find(".Up > div > [role=button]");
        compose.insertMoreArea = compose.find(".eq");
        compose.formattingArea = compose.find(".oc");
        compose.discardButton = compose.find(".gU.az5 .oh");
        compose.statusTextArea = compose.find(".aWQ");
        compose.toolbar = compose.find(".aDh");
        compose.isNew = true;
        var isPixelTracked = false;
        var isMailMerge = false;
        var initialHeight = compose.toolbar.height();
        compose.getAddresses = function () {
            var people = [];
            var spans = compose.find("span.vN[email]");
            for (var i = 0; i < spans.length; i++) {
                var obj = {
                    emailAddress: spans[i].getAttribute("email")
                };
                if (spans[i].innerText !==
                    obj.emailAddress) obj.name = spans[i].innerText;
                people.push(obj)
            }
            return people
        };
        compose.closeWindow = function () {
            compose.find(".Hm .Ha").simulateRawClick()
        };
        compose.discard = function () {
            compose.discardButton.simulateRawClick()
        };
        compose.setTracked = function (tracked) {
            isPixelTracked = tracked
        };
        compose.isTracked = function () {
            return isPixelTracked
        };
        compose.setAddresses = function (addresses) {
            if (typeof addresses === "string") addresses = [addresses];
            compose.find(".vO").html(addresses.join(","))
        };
        compose.getSubject = function () {
            return compose.find("input[name=subjectbox]").val()
        };
        compose.getSubjectEl = function () {
            return compose.find("input[name=subjectbox]")
        };
        compose.setSubject = function (newSubject) {
            compose.find("input[name=subjectbox]").val(newSubject)
        };
        compose.getSendButton = function () {
            return compose.find(".T-I.J-J5-Ji.aoO.T-I-atl.L3")
        };
        compose.getBody = function () {
            return compose.find("input[name=body]").val()
        };
        compose.getInnerHTMLBody = function () {
            return compose.getEditor()[0].innerHTML
        };
        compose.setBody = function (body) {
            compose.find("input[name=body]").val(body);
            compose.getEditor()[0].innerHTML =
                body
        };
        compose.getEditor = function () {
            compose.editor = compose.find(".Ap [contenteditable=true]");
            return compose.editor
        };
        compose.addStreakArea = function (el) {
            if (compose.find(".streakArea").length === 0) {
                var td = $(Streak.createEl("td"));
                td.addClass("streakArea gU");
                compose.formattingArea.before(td);
                td.after('<td class="gU"><div class="Uz"></div></td>');
                compose.streakArea = td;
                td.closest("table").find("colgroup").prepend("<col></col><col></col>")
            }
        };
        compose.addToStreakArea = function (el, prepend) {
            var oldLeft = compose.formattingArea.offset().left;
            if (!compose.streakArea) compose.addStreakArea();
            if (prepend) compose.streakArea.prepend(el);
            else compose.streakArea.append(el);
            var newLeft = compose.formattingArea.offset().left;
            var oldInsertLeft = parseInt(compose.insertMoreArea.css("left"), 10);
            compose.insertMoreArea.css("left", oldInsertLeft + (newLeft - oldLeft) + "px")
        };
        compose.getFieldValue = function (field) {
            var iField = compose.find("input[type=hidden][name=" + field + "]");
            if (iField.length === 0) return "";
            else if (iField.length === 1) return iField.val();
            else {
                var ret = [];
                for (var i = 0; i < iField.length; i++) ret.push($(iField[i]).val());
                return ret
            }
        };
        compose.getInsertLeft = function () {
            return compose.formattingArea.offset().left
        };
        compose.updateInsertLeft = function (oldLeft) {
            var diff = compose.formattingArea.offset().left - oldLeft;
            var oldInsertLeft = parseInt(compose.insertMoreArea.css("left"), 10);
            compose.insertMoreArea.css("left", oldInsertLeft + diff + "px")
        };
        compose.isReply = function () {
            return compose.is("streakReplyArea")
        };
        var snippetsUsed = [];
        compose.registerSnippetUsed = function (snippet) {
            snippetsUsed.push(snippet)
        };
        compose.getUsedSnippets = function () {
            return snippetsUsed
        };
        compose.setIsMailMerge = function (value) {
            isMailMerge = value
        };
        compose.isMailMerge = function () {
            return isMailMerge
        };
        compose.addStatusText = function (text) {
            compose.statusTextArea.find(".aWR").hide();
            compose.find(".wM").css("display", "block");
            var statusTextElement = $('<span class="oG streak__statusText">' + text + "</span>");
            compose.statusTextArea.prepend(statusTextElement);
            compose.bind("extraAttachmentsShow", function () {
                statusTextElement.hide()
            });
            compose.bind("extraAttachmentsHide",
                function () {
                    setTimeout(function () {
                        statusTextElement.show()
                    }, 100)
                });
            compose.bind("savingTextShow", function () {
                statusTextElement.text("| " + text)
            });
            compose.bind("savingTextHide", function () {
                statusTextElement.text(text)
            })
        };
        return compose
    };
    Streak.Gmail.ComposeWindow = ComposeWindow
})(Streak, window);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ThreadResponseProcessor = Streak.Class.subclass({
        className: "ThreadResponseProcessor",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        deserialize: function (threadResponseString) {
            var VIEW_DATA =
                threadResponseString.substring(threadResponseString.indexOf("[")).replace(/\];var\s.*/img, "");
            VIEW_DATA = "[" + VIEW_DATA.replace(/\r|\n/img, "").replace(/,(,|\]|\})/img, ",null$1").replace(/\]\d+\[/img, "],[") + "]";
            var vData;
            try {
                VIEW_DATA = VIEW_DATA.replace(/,(,|\]|\})/img, ",null$1");
                vData = eval("(function(){return " + VIEW_DATA + ";})()")
            } catch (err) {}
            return vData
        },
        serialize: function (threadResponseArray, dontIncludeNumbers) {
            if (!threadResponseArray) return "";
            var response = ")]}'\n\n";
            for (var ii = 0; ii < threadResponseArray.length; ii++) {
                var arraySection =
                    threadResponseArray[ii];
                var arraySectionString = this.serializeArray(arraySection, dontIncludeNumbers);
                if (dontIncludeNumbers) {
                    response += arraySectionString;
                    continue
                }
                var length = arraySectionString.length + 1;
                response += length + "\n" + arraySectionString
            }
            if (dontIncludeNumbers) {
                var lines = response.split(/\r|\n/);
                var firstLines = _.initial(lines, 3);
                var lastLines = _.last(lines, 3);
                response = firstLines.join("\n");
                response += "\n" + lastLines[0] + lastLines[1].replace(/\"/g, "'")
            }
            return response
        },
        serializeArray: function (array, extraUnicodeEncoding) {
            var isThread =
                _isThreadArray(array);
            var response = "[";
            for (var ii = 0; ii < array.length; ii++) {
                var item = array[ii];
                var addition = "";
                if (_.isArray(item)) addition = this.serializeArray(item, extraUnicodeEncoding);
                else if (_.isNotReal(item)) addition = "";
                else if (false && extraUnicodeEncoding && isThread && (ii === 9 || ii === 10)) {
                    addition = JSON.stringify(item);
                    addition = Streak.Utils.toUnicodeEncoding(item)
                } else {
                    addition = JSON.stringify(item);
                    addition = addition.replace(/\</igm, "\\u003c").replace(/\=/igm, "\\u003d").replace(/\>/igm, "\\u003e").replace(/\&/igm,
                        "\\u0026")
                } if (ii > 0) response += ",";
                response += addition
            }
            response += "]\n";
            return response
        },
        replaceThreadsInResponse: function (originalResponse, threads, urlParameters) {
            threads = threads.reverse();
            _addThreadIdToSubjectSpan(threads);
            var doesResponseUseFormatWithSectionNumbers = _doesResponseUseFormatWithSectionNumbers(originalResponse);
            var originalResponseArray = this.deserialize(originalResponse);
            var modifiedResponseArray = _newReplaceThreads(originalResponseArray, threads);
            var modifiedResponse = this.serialize(modifiedResponseArray, !doesResponseUseFormatWithSectionNumbers);
            return modifiedResponse
        },
        test: function (threadResponseString) {
            var array = this.deserialize(threadResponseString);
            return this.serialize(array)
        }
    });

    function _addThreadIdToSubjectSpan(threads) {
        for (var ii = 0; ii < threads.length; ii++) threads[ii][7] = threads[ii][7].replace("<span", '<span streakthreadid="' + threads[ii][0] + '"')
    }

    function _newReplaceThreads(originalResponseArray, replacementThreads) {
        var threadsUsed = 0;
        var originalThreads = _extractThreadArraysFromResponseArray(originalResponseArray);
        for (var ii = 0; ii < originalThreads.length; ii++) {
            var originalThread = originalThreads[ii];
            if (threadsUsed >= replacementThreads.length) {
                originalThread[7] = originalThread[7].replace("<span", '<span streakhiderow="true"');
                continue
            }
            var replacementThread = replacementThreads[threadsUsed];
            for (var jj = 0; jj < replacementThread.length; jj++) originalThread[jj] = replacementThread[jj];
            threadsUsed++
        }
        return originalResponseArray
    }

    function _extractThreadArraysFromResponseArray(threadResponseArray) {
        var threads = [];
        for (var ii = 0; ii <
            threadResponseArray.length; ii++) {
            var arrayElement = threadResponseArray[ii];
            if (_isThreadArray(arrayElement)) threads.push(arrayElement);
            else if (_.isArray(arrayElement)) {
                var newThreadArray = _extractThreadArraysFromResponseArray(arrayElement);
                if (_.isReal(newThreadArray)) threads = threads.concat(newThreadArray)
            }
        }
        if (threads.length > 0) return threads
    }

    function _isThreadArray(array) {
        return _.isArray(array) && array.length === 34 && array[0].length === 16
    }

    function _doesResponseUseFormatWithSectionNumbers(responseString) {
        var lines =
            responseString.split(/\n|\r/);
        return !!lines[2].match(/^\d/)
    }
    Gmail.ThreadResponseProcessor = new ThreadResponseProcessor
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailThreadRequester = Streak.Class.subclass({
        className: "GmailThreadRequester",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        getGmailThreadsForRFCMessageIds: function (rfcMessageIds, doneCallback) {
            if (!rfcMessageIds) doneCallback();
            if (rfcMessageIds.length === 0) doneCallback();
            var messageGroups = _divideMessageIdsIntoGroups(rfcMessageIds);
            var responses = new Array(messageGroups.length);
            for (ii = 0; ii < messageGroups.length; ii++) _makeGmailSearchRequestForMessageGroup(ii, messageGroups[ii], responses, doneCallback)
        }
    });
    var CONSTANTS = {
        GROUP_SIZE: 10
    };

    function _divideMessageIdsIntoGroups(rfcMessageIds) {
        var groups = [];
        if (!rfcMessageIds) return groups;
        var currentGroup;
        for (var ii = 0; ii < rfcMessageIds.length; ii++) {
            if (ii % CONSTANTS.GROUP_SIZE === 0) {
                if (currentGroup) groups.push(currentGroup);
                currentGroup = []
            }
            currentGroup.push(rfcMessageIds[ii])
        }
        if (currentGroup) groups.push(currentGroup);
        return groups
    }

    function _makeGmailSearchRequestForMessageGroup(index, messageGroup, responses, doneCallback) {
        var searchString = _createSearchString(messageGroup);
        Streak.Requester.gmailGetList(searchString, function (response) {
            try {
                _handleGmailSearchResponse(index, response, responses, doneCallback)
            } catch (err) {
                responses[index] = [];
                _validateGmailSearchResponsesThenDoneCallback(responses, doneCallback)
            }
        }, function () {
            _handleGmailSearchError(index)
        })
    }

    function _handleGmailSearchResponse(index, threadResponse, responses, doneCallback) {
        var threadArray = Gmail.ThreadResponseProcessor.deserialize(threadResponse);
        responses[index] = [];
        _extractThreads(threadArray, responses[index]);
        _validateGmailSearchResponsesThenDoneCallback(responses, doneCallback)
    }

    function _handleGmailSearchError(index, responses, doneCallback) {
        responses[index] = [];
        _validateGmailSearchResponsesThenDoneCallback(responses, doneCallback)
    }

    function _createSearchString(rfcMessageIds) {
        var searchString =
            "";
        for (var ii = 0; ii < rfcMessageIds.length; ii++) {
            if (ii > 0) searchString += " OR ";
            searchString += "rfc822msgid:" + rfcMessageIds[ii]
        }
        return "apps/" + searchString
    }

    function _extractThreads(threadArray, returnArray) {
        if (!_.isArray(threadArray)) return;
        if (threadArray[0] === "tb") {
            returnArray.push(threadArray[2]);
            return
        }
        for (var ii = 0; ii < threadArray.length; ii++) _extractThreads(threadArray[ii], returnArray)
    }

    function _validateGmailSearchResponsesThenDoneCallback(responses, doneCallback) {
        if (!_areRequestsAllFinished(responses)) return;
        var threads = _flattenThreadResponses(responses);
        doneCallback(threads)
    }

    function _areRequestsAllFinished(responses) {
        for (var ii = 0; ii < responses.length; ii++) {
            var request = responses[ii];
            if (!request) return false
        }
        return true
    }

    function _flattenThreadResponses(responses) {
        var threads = [];
        for (var ii = 0; ii < responses.length; ii++) threads = threads.concat(responses[ii][0]);
        return threads
    }
    Gmail.GmailThreadRequester = new GmailThreadRequester
})(Streak);
(function (Streak, window) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester;
    var MAX_BACKOFF = 32E3;
    var rawObjectMap = {};

    function getModelStore(params) {
        var parts = params.split("|");
        var key = parts[0];
        var Key = key.first().toUpperCase() + key.substr(1);
        var type = null;
        if (parts.length > 1) type = parts[1];
        var varString = "var " + key + "=[];";
        var setString = "function set" + Key + "(guid, value){" + key + "[rawObjectMap[guid]] = value;}";
        var getString = "";
        if (!type) getString = "function get" + Key + "(guid){return " + key + "[rawObjectMap[guid]];}";
        else if (type === "array") getString = "function get" + Key + "(guid){var index = rawObjectMap[guid];if(!" + key + "[index]){" + key + "[index]=[];} return " + key + "[index];}";
        else if (type === "object") getString = "function get" + Key + "(guid){var index = rawObjectMap[guid];if(!" + key + "[index]){" + key + "[index]={};} return " + key + "[index];}";
        return varString + setString + getString
    }

    function getFunctionModelKey(modelKey) {
        var parts = modelKey.split("|");
        var key = parts[0];
        var Key = key.first().toUpperCase() + key.substr(1);
        return Key
    }
    var modelKeys = ["obj", "currentEditOps|array", "eventCBs|object", "allEventCBs|array", "triggersActive", "transactionEventQueue|array", "syncOps|array", "requestPending", "lastSyncOp", "updatedServerObject", "serverObject", "currentBackoff", "pendingCallbacks|array", "timeLastSynced", "deletedGuids", "displayName"];
    for (var ii = 0; ii < modelKeys.length; ii++) eval(getModelStore(modelKeys[ii]));
    var getTriggersActive = function (guid) {
        var ret = triggersActive[rawObjectMap[guid]];
        if (ret !== false) return true;
        return false
    };
    var getUpdatedServerObject =
        function (guid, force) {
            var obj = updatedServerObject[rawObjectMap[guid]];
            if (!obj && force) return getServerObject(guid, true);
            return obj
    };
    var getServerObject = function (guid, forceCreate) {
        var obj = serverObject[rawObjectMap[guid]];
        if (!obj && forceCreate) serverObject[rawObjectMap[guid]] = JSON.deepClone(getObj(guid));
        return serverObject[rawObjectMap[guid]]
    };
    var getTimeLastSynced = function (guid) {
        var tls = timeLastSynced[rawObjectMap[guid]];
        if (!tls && tls !== 0) return -1;
        return tls
    };
    var isDeletedGuid = function (guid) {
        var ret =
            deletedGuids[rawObjectMap[guid]];
        if (ret) return ret;
        return false
    };
    var setDeletedGuid = function (guid, value) {
        if (value === false) deletedGuids[rawObjectMap[guid]] = false;
        else deletedGuids[rawObjectMap[guid]] = true
    };
    var setDisplayName = function (guid, value) {
        value = value || "";
        if (value.escapeHTML) displayName[rawObjectMap[guid]] = value.escapeHTML();
        else displayName[rawObjectMap[guid]] = value
    };
    var Model = function (inObj) {
        Streak.Object.call(this);
        var modelObj = inObj || {};
        var index = obj.length;
        this.guid = Date.now() + "" + Math.random();
        rawObjectMap[this.guid] = index;
        setObj(this.guid, modelObj);
        if (this.processObj) setObj(this.guid, this.processObj(getObj(this.guid)));
        var self = this;
        this.delayedModifiedNotification = _.debounce(function () {
            self.trigger("modified")
        }, 100, false)
    };
    Model.prototype = Object.create(Streak.Object.prototype);
    _.extend(Model.prototype, {
        getObj: function () {
            return getObj(this.guid)
        },
        getSyncGuid: function () {
            if (this.syncParent) return this.syncParent.guid;
            return this.guid
        },
        set: function (property, value, force) {
            if (property === this.keyName && !force)
                if (this.key() && !value) return;
            if (!getServerObject(this.guid)) setServerObject(this.guid, JSON.deepClone(this.getObj()));
            getCurrentEditOps(this.guid).push({
                property: property,
                value: value
            });
            var previousValue = getObj(this.guid)[property];
            getObj(this.guid)[property] = value;
            if (this.nameProperty === property) setDisplayName(this.guid, value);
            this.trigger("set", property);
            this.trigger("change", null, property, previousValue);
            this.delayedModifiedNotification()
        },
        get: function (property) {
            var propValue = getObj(this.guid)[property];
            if (propValue === 0) return propValue;
            return propValue || ""
        },
        update: function (obj2, suppressAllEvents) {
            var updateStatus = {
                updated: []
            };
            if (suppressAllEvents) this.setTriggersActive(false);
            else this.startTransaction(); if (this.processObj) obj2 = this.processObj(obj2);
            if (this.key() !== obj2[this.keyName]) this.set(this.keyName, obj2[this.keyName]);
            if (!JSON.isEqual(getObj(this.guid), obj2)) {
                var keys = _.keys(obj2);
                for (var i = 0; i < keys.length; i++) {
                    var aKey = keys[i];
                    if (this.updateMap && this.updateMap[aKey]) {
                        if (this.updateMap[aKey].call(this,
                            obj2)) updateStatus.updated.push(aKey)
                    } else {
                        var isDiff = !JSON.isEqual(getObj(this.guid)[aKey], obj2[aKey]);
                        if (isDiff) {
                            this.set(aKey, obj2[aKey]);
                            updateStatus.updated.push(aKey)
                        }
                    }
                }
            }
            if (suppressAllEvents) {
                this.clearTransactionEventQueue();
                this.setTriggersActive(true)
            } else this.endTransaction();
            return updateStatus
        },
        bind: function (event, property, cb, uniq, inFront) {
            if (cb === null) return;
            if (uniq) cb.uniq = uniq;
            if (!property) property = "_";
            else if (_.isArray(property))
                for (var i = 0; i < property.length; i++) this.bind(event, property[i],
                    cb, uniq);
            var eventCB = getEventCBs(this.guid);
            if (!eventCB[event]) eventCB[event] = {};
            if (!eventCB[event][property]) eventCB[event][property] = [];
            var cbList = eventCB[event][property];
            if (cb.uniq) {
                var index = _.indexOfPlus(cbList, function (callback) {
                    return callback && callback.uniq && callback.uniq === uniq
                });
                if (index > -1) cbList[index] = cb;
                else if (inFront) cbList.unshift(cb);
                else cbList.push(cb)
            } else cbList.push(cb);
            var self = this;
            return function () {
                self.unbind(event, property, uniq, cb)
            }
        },
        bindToAllEvents: function (callback) {
            getAllEventCBs(this.guid).push(callback)
        },
        unbind: function (event, property, uniq, cb) {
            if (!property) property = "_";
            else if (_.isArray(property))
                for (var i = 0; i < property.length; i++) this.unbind(event, property[i], uniq, cb);
            var eventCB = getEventCBs(this.guid);
            if (eventCB[event] && eventCB[event][property]) {
                var index = -1;
                if (uniq && eventCB[event][property].uniqMap) {
                    index = eventCB[event][property].uniqMap[uniq];
                    delete eventCB[event][property].uniqMap[uniq]
                } else index = eventCB[event][property].indexOf(cb);
                eventCB[event][property][index] = null;
                eventCB[event][property] =
                    _.compact(eventCB[event][property])
            }
        },
        unbindAll: function (uniq) {
            if (!uniq) return;
            for (var event in getEventCBs(this.guid)) {
                var eventMap = getEventCBs(this.guid)[event];
                for (var property in eventMap) {
                    var propertyCBs = eventMap[property];
                    var newCBs = [];
                    for (var i = 0; i < propertyCBs.length; i++)
                        if (propertyCBs[i] && propertyCBs[i].uniq !== uniq) newCBs.push(propertyCBs[i]);
                    eventMap[property] = newCBs
                }
            }
        },
        trigger: function (event, property) {
            var i;
            if (!getTriggersActive(this.guid)) {
                getTransactionEventQueue(this.guid).push(arguments);
                return
            }
            if (!property) property = "_";
            var functionArguments = _.toArray(arguments);
            var eventCB = getEventCBs(this.guid);
            if (eventCB[event]) {
                var cbs = eventCB[event][property];
                if (cbs && cbs.length > 0) {
                    var uniqMap = cbs.uniqMap;
                    cbs = _.clone(cbs);
                    eventCB[event][property].length = 0;
                    for (i = 0; i < cbs.length; i++) {
                        var cb = cbs[i];
                        var shouldAdd = true;
                        if (cb) try {
                            shouldAdd = !cb.apply(null, [this].concat(_.rest(functionArguments, 1)))
                        } catch (err) {
                            var msg = "Event model trigger error";
                            try {
                                msg += "\narguments: " + JSON.stringify(functionArguments);
                                msg += "\nmodel: " + JSON.stringify(getObj(this.guid))
                            } catch (err2) {
                                msg += "\nmodel: error serializing"
                            }
                            Streak.BentoBox.logError(msg, err)
                        } else shouldAdd = false;
                        if (shouldAdd) eventCB[event][property].push(cb)
                    }
                }
            }
            var allEventCBs = getAllEventCBs(this.guid);
            for (i = 0; i < allEventCBs.length; i++) try {
                if (allEventCBs[i]) allEventCBs[i].apply(null, _.toArray(arguments))
            } catch (err) {
                var msg = "Trigger all error";
                try {
                    msg += "\narguments: " + JSON.stringify(functionArguments);
                    msg += "\nmodel: " + JSON.stringify(getObj(this.guid))
                } catch (err2) {
                    msg +=
                        "\nmodel: error serializing"
                }
                Streak.BentoBox.logError(msg, err)
            }
        },
        startTransaction: function () {
            getTransactionEventQueue(this.guid).length = 0;
            this.setTriggersActive(false)
        },
        endTransaction: function () {
            this.setTriggersActive(true);
            var eventQueue = _.uniq(getTransactionEventQueue(this.guid), false, function (event) {
                return JSON.stringify(event)
            });
            for (var i = 0; i < eventQueue.length; i++) this.trigger.apply(this, _.toArray(eventQueue[i]))
        },
        setTriggersActive: function (isActive) {
            triggersActive[rawObjectMap[this.guid]] = isActive
        },
        clearTransactionEventQueue: function () {
            getTransactionEventQueue(this.guid).length = 0
        },
        processParam: function (param) {
            if (this.modifyProperties)
                for (var i = 0; i < this.modifyProperties.length; i++) {
                    var prop = this.modifyProperties[i];
                    param[prop] = this.get(prop)
                }
        },
        getCurrentBackoff: function () {
            return getCurrentBackoff(this.getSyncGuid())
        },
        setCurrentBackoff: function (value) {
            setCurrentBackoff(this.getSyncGuid())
        },
        getRequestPending: function () {
            if (this.syncParent) return this.syncParent.getRequestPending() || getRequestPending(this.guid);
            return getRequestPending(this.guid)
        },
        setRequestPending: function (value) {
            setRequestPending(this.guid, value)
        },
        isSyncPending: function () {
            return this.getSyncOps().length > 0
        },
        isFullySynced: function () {
            var ret = !this.getRequestPending() && !this.isSyncPending();
            if (!this.notSynced) ret = ret && this.isSavedOnServer();
            return ret
        },
        getSyncOps: function () {
            return getSyncOps(this.getSyncGuid())
        },
        getLastSyncOp: function () {
            return getLastSyncOp(this.getSyncGuid())
        },
        setLastSyncOp: function (value) {
            setLastSyncOp(this.getSyncGuid(),
                value)
        },
        syncLog: function () {
            return;
            var inArgs = _.toArray(arguments);
            var args = ["%csync: ", _.last(inArgs), "| name: " + this.displayName(), "| guid:", this.guid, "| syncGuid:", this.getSyncGuid(), "| ops:", this.getSyncOps()].concat(_.initial(inArgs))
        },
        addSyncedCallback: function (callback) {
            this.addSyncOperation({
                type: "CALLBACK",
                callback: callback,
                arguments: _.rest(_.toArray(arguments), 1)
            })
        },
        addSyncOperation: function (syncOp) {
            this.syncLog("addSyncOperation", syncOp, "orange");
            var theSyncOp = syncOp;
            var runImmediate = this.getSyncOps().length ===
                0 && !this.getRequestPending();
            if (this.syncParent) theSyncOp = {
                type: "CHILD_SYNC_OPERATION",
                context: this,
                syncOp: syncOp
            };
            this.getSyncOps().push(theSyncOp);
            if (runImmediate)
                if (this.syncParent) this.syncParent.performNextSyncOperation();
                else this.performNextSyncOperation()
        },
        getServerObject: function () {
            return getServerObject(this.guid)
        },
        getUpdatedServerObject: function (force) {
            return getUpdatedServerObject(this.guid, force)
        },
        performNextSyncOperation: function (isError) {
            var syncObj = this;
            if (this.syncParent) syncObj =
                this.syncParent;
            if (!syncObj.isSyncPending()) {
                syncObj.setRequestPending(false);
                syncObj.completeResponseChain(isError);
                return
            }
            syncObj.setRequestPending(true);
            syncObj.setLastSyncOp(syncObj.getSyncOps().shift());
            var lSyncOp = syncObj.getLastSyncOp();
            this.syncLog("performNextSyncOperation", lSyncOp, "green");
            if (lSyncOp.type === "CHILD_SYNC_OPERATION") {
                lSyncOp.context.setRequestPending(true);
                syncObj.fullySyncedCallback(function () {
                    lSyncOp.context.setRequestPending(false);
                    lSyncOp.context.completeResponseChain()
                });
                syncObj.performChildSyncOperation(lSyncOp, isError);
                return
            } else syncObj.executeSyncOperation(lSyncOp, isError)
        },
        performChildSyncOperation: function (lSyncOp) {
            this.executeSyncOperation.call(lSyncOp.context, lSyncOp.syncOp)
        },
        executeSyncOperation: function (lSyncOp) {
            if (lSyncOp.editOps) {
                setUpdatedServerObject(this.guid, JSON.deepClone(getServerObject(this.guid, true)));
                for (var i = 0; i < lSyncOp.editOps.length; i++) getUpdatedServerObject(this.guid)[lSyncOp.editOps[i].property] = lSyncOp.editOps[i].value
            }
            if (_.isReal(this.syncOpMap) &&
                _.isReal(this.syncOpMap[lSyncOp.type])) {
                this.syncOpMap[lSyncOp.type].call(this);
                return
            }
            switch (lSyncOp.type) {
            case "SAVE":
            case "REFRESH":
            case "DELETE":
                if (this.notSynced) {
                    this.performNextSyncOperation();
                    return
                }
                break
            }
            switch (lSyncOp.type) {
            case "SAVE":
                this.executeSave(1, lSyncOp.params.dontCreate, lSyncOp.params.fromCreate, lSyncOp.params.force);
                break;
            case "REFRESH":
                this.executeRefresh();
                break;
            case "DELETE":
                this.executeDelete();
                break;
            case "SYNCED":
                this.performNextSyncOperation();
                break;
            case "CALLBACK":
                lSyncOp.callback.apply(this,
                    lSyncOp.arguments);
                break
            }
        },
        handleSuccessfulResponse: function (res, xhr, fromDelete) {
            this.setCurrentBackoff(1E3);
            if (!fromDelete) _.extend(getServerObject(this.guid, true), JSON.deepClone(res));
            this.performNextSyncOperation()
        },
        handleErrorResponse: function (response, xhr) {
            var self = this;
            switch (xhr.status) {
            case 0:
                this.getSyncOps().unshift(this.getLastSyncOp());
                this.setCurrentBackoff(Math.min(this.getCurrentBackoff() * 2, MAX_BACKOFF));
                setTimeout(this.performNextSyncOperation.bind(this), this.getCurrentBackoff());
                return true;
                break;
            case 400:
                this.performNextSyncOperation(true, response, xhr);
                break;
            case 401:
                this.getSyncOps().length = 0;
                this.performNextSyncOperation(true, response, xhr);
                Streak.NotificationCenter.notify("unauthorizedRequest");
                return true;
                break;
            case 404:
                this.getSyncOps().length = 0;
                this.performNextSyncOperation(true, response, xhr);
                this.trigger("delete");
                break;
            case 405:
                this.performNextSyncOperation(true, response, xhr);
                break;
            case 409:
                if (this.handle409Conflict) this.handle409Conflict(response);
                this.performNextSyncOperation();
                return true;
                break;
            case 500:
                this.getSyncOps().unshift(this.getLastSyncOp());
                this.setCurrentBackoff(Math.min(this.getCurrentBackoff() * 2, MAX_BACKOFF));
                setTimeout(this.performNextSyncOperation.bind(this), this.getCurrentBackoff());
                return true;
                break;
            case 503:
                this.performNextSyncOperation(true, response, xhr);
                break;
            default:
                return this.performNextSyncOperation(true, response, xhr)
            }
        },
        completeResponseChain: function (isError, response, xhr) {
            this.syncLog("completeResponseChain", "purple");
            if (!this.notSynced)
                if (getServerObject(this.guid)) {
                    this.update(getServerObject(this.guid));
                    setServerObject(this.guid, null);
                    setUpdatedServerObject(this.guid, null)
                }
            getCurrentEditOps(this.guid).length = 0;
            setTimeLastSynced(this.guid, Date.now());
            var callbacks = _.clone(getPendingCallbacks(this.guid));
            getPendingCallbacks(this.guid).length = 0;
            var suppressError = false;
            for (var i = 0; i < callbacks.length; i++)
                if (isError) {
                    if (_.isFunction(callbacks[i].errCb)) suppressError = suppressError || callbacks[i].errCb(response, xhr)
                } else if (_.isFunction(callbacks[i].cb)) callbacks[i].cb();
            if (this.syncParent) this.syncParent.performNextSyncOperation();
            return suppressError
        },
        fullySyncedCallback: function (cb) {
            getPendingCallbacks(this.guid).push({
                cb: cb,
                errCb: cb
            });
            this.addSyncOperation({
                type: "SYNCED"
            })
        },
        save: function (cb, tries, dontCreate, errCb, fromCreate) {
            getPendingCallbacks(this.guid).push({
                cb: cb,
                errCb: errCb
            });
            this.addSyncOperation({
                type: "SAVE",
                editOps: _.clone(getCurrentEditOps(this.guid)),
                params: {
                    dontCreate: dontCreate,
                    fromCreate: fromCreate
                }
            });
            getCurrentEditOps(this.guid).length = 0
        },
        forceSave: function (cb, errCb) {
            getPendingCallbacks(this.guid).push({
                cb: cb,
                errCb: errCb
            });
            this.addSyncOperation({
                type: "SAVE",
                editOps: _.clone(getCurrentEditOps(this.guid)),
                params: {
                    dontCreate: true,
                    fromCreate: false,
                    force: true
                }
            });
            getCurrentEditOps(this.guid).length = 0
        },
        executeSave: function (tries, dontCreate, fromCreate, force) {
            if (!tries) tries = 1;
            var param = null;
            if (tries === 1) {
                if (!getUpdatedServerObject(this.guid)) setUpdatedServerObject(this.guid, JSON.deepClone(this.getObj()));
                if (this.isDeleted()) {
                    setDeletedGuid(this.guid, false);
                    this.set(this.keyName, null, true);
                    getUpdatedServerObject(this.guid)[this.keyName] =
                        null
                }
                if (this.preSaveFunction && !this.preSaveFunction(getUpdatedServerObject(this.guid, true))) {
                    this.trigger("saveRejected");
                    this.performNextSyncOperation(true);
                    return
                }
            }
            if (getUpdatedServerObject(this.guid)[this.keyName]) {
                param = {
                    entityType: this.entityType
                };
                if (force) param.forceSave = true;
                this.processParam(param);
                if (tries === 1) this.trigger("preUpdate");
                this.saveUpdate(param, tries, fromCreate)
            } else if (!dontCreate) {
                param = {
                    entityType: this.entityType
                };
                var checkProps = this.requiredCreate || this.createProperties;
                for (var i = 0; i < this.createProperties.length; i++) {
                    var prop = this.createProperties[i];
                    var updatedSO = getUpdatedServerObject(this.guid, true);
                    if (prop == "json") param[prop] = JSON.stringify(updatedSO);
                    else {
                        if (updatedSO[prop] === null && checkProps.indexOf(prop) > -1) {
                            this.completeResponseChain(true, param);
                            return
                        }
                        if (updatedSO[prop] !== null && typeof updatedSO[prop] !== "undefined") param[prop] = updatedSO[prop]
                    }
                }
                if (tries === 1) this.trigger("preCreate");
                this.saveCreate(param, tries)
            } else;
        },
        saveUpdate: function (param, tries, fromCreate) {
            var self =
                this;
            if (tries === 1) {
                getPendingCallbacks(this.guid).unshift({
                    cb: function () {
                        self.trigger("save")
                    },
                    errCb: function (response, xhr) {
                        var msg = "Error updating model";
                        msg += "\n type: " + self.entityType;
                        msg += "\n key: " + self.key();
                        msg += "\n json: " + JSON.stringify(getObj(self.guid));
                        Streak.BentoBox.logAjaxError(msg, null, xhr);
                        Streak.Gmail.showNotice("Error occurred saving changes", 5E3)
                    }
                });
                getPendingCallbacks(this.guid).unshift({
                    errCb: function (params, xhr) {
                        var msg = "Error updating model";
                        msg += "\n type: " + self.entityType;
                        msg += "\n key: " + self.key();
                        msg += "\n json: " + JSON.stringify(self.obj);
                        Streak.BentoBox.logAjaxError(msg, null, xhr);
                        Streak.Gmail.showNotice("Error occurred saving changes", 5E3)
                    }
                })
            }
            param.json = JSON.stringify(getUpdatedServerObject(this.guid, true));
            this.executeUpdateRequest(param)
        },
        executeUpdateRequest: function (param) {
            Requester.update(param, _.bind(this.handleSuccessfulResponse, this), _.bind(this.handleErrorResponse, this))
        },
        saveCreate: function (param, tries) {
            var self = this;
            if (tries === 1) {
                getPendingCallbacks(this.guid).push({
                    cb: function () {
                        self.trigger("create")
                    }
                });
                getPendingCallbacks(this.guid).unshift({
                    errCb: function (response, xhr) {
                        var msg = "Error creating object";
                        msg += "\n obj: " + JSON.stringify(getObj(self.guid));
                        Streak.BentoBox.logAjaxError(msg, null, xhr);
                        Streak.Gmail.showNotice("Creating failed", 5E3);
                        self.trigger("errorCreate")
                    }
                })
            }
            this.executeCreateRequest(param)
        },
        executeCreateRequest: function (param) {
            Requester.create(param, _.bind(this.handleSuccessfulResponse, this), _.bind(this.handleErrorResponse, this))
        },
        del: function (cb, errCb) {
            if (!this.canDelete()) {
                if (cb) cb();
                return
            }
            if (this.preDeleteFunction && !this.preDeleteFunction()) {
                if (errCb) errCb();
                if (cb) cb();
                return
            }
            getPendingCallbacks(this.guid).push({
                cb: cb,
                errCb: errCb
            });
            setDeletedGuid(this.guid);
            this.trigger("delete");
            this.addSyncOperation({
                type: "DELETE"
            })
        },
        executeDelete: function () {
            var self = this;
            var param = {
                entityType: this.entityType,
                json: JSON.stringify(getServerObject(this.guid, true))
            };
            this.processParam(param);
            var oldServerObject = getServerObject(this.guid, true);
            getPendingCallbacks(this.guid).unshift({
                errCb: function (response,
                    xhr) {
                    setServerObject(self.guid, oldServerObject);
                    var msg = "Error deleting object";
                    Streak.BentoBox.logAjaxError(msg, null, xhr);
                    Streak.Gmail.showNotice("Delete failed, please try again", 5E3);
                    self.trigger("undelete");
                    Streak.BentoBox.Tracker.track("delete failed")
                }
            });
            if (this.preExecuteDeleteFunction && !this.preExecuteDeleteFunction(oldServerObject)) {
                this.trigger("deleteRejected");
                this.performNextSyncOperation(true);
                return
            }
            this.executeDeleteRequest(param)
        },
        executeDeleteRequest: function (param) {
            Requester.del(param,
                _.bind(function () {
                    getServerObject(this.guid)[this.keyName] = "";
                    this.handleSuccessfulResponse(getServerObject(this.guid), null, true)
                }, this), _.bind(this.handleErrorResponse, this))
        },
        canDelete: function () {
            return !this.isDeleted()
        },
        isDeleted: function () {
            return isDeletedGuid(this.guid)
        },
        setDeletedStatus: function (value) {
            setDeletedGuid(this.guid, value)
        },
        refresh: function (cb) {
            if (this.isDeleted()) {
                if (cb) cb();
                return
            }
            getPendingCallbacks(this.guid).push({
                cb: cb,
                errCb: cb
            });
            if (this.isFullySynced() || this.alwaysRefresh &&
                this.alwaysRefresh()) this.addSyncOperation({
                type: "REFRESH"
            })
        },
        executeRefresh: function () {
            if (!this.key() && !(this.alwaysRefresh && this.alwaysRefresh())) {
                this.handleSuccessfulResponse(getServerObject(this.guid, true));
                return
            }
            var params = {
                entityType: this.entityType
            };
            params[this.keyName] = this.get(this.keyName);
            this.executeRefreshRequest(params)
        },
        executeRefreshRequest: function (params) {
            Requester.get(params, _.bind(this.handleSuccessfulResponse, this), _.bind(this.handleErrorResponse, this))
        },
        collectionUpdate: function (obj) {
            this.setDeletedStatus(false);
            var shouldUpdate = this.isFullySynced() && Date.now() > getTimeLastSynced(this.guid);
            if (shouldUpdate) {
                setServerObject(this.guid, obj);
                this.update(getServerObject(this.guid))
            }
        },
        syncedSet: function (property, value) {
            if (this.isFullySynced() && Date.now() > getTimeLastSynced(this.guid)) {
                this.set(property, value);
                return true
            }
        },
        getTimeLastSynced: function () {
            return getTimeLastSynced(this.guid)
        },
        setTimeLastSynced: function () {
            setTimeLastSynced(this.guid, Date.now())
        },
        isSavedOnServer: function () {
            return this.key().length > 0 && this.key().indexOf("__new__") === -1 && !this.isDeleted()
        },
        link: function () {
            return this.typeName + "/" + this.key()
        },
        key: function () {
            return this.get(this.keyName)
        },
        displayName: function () {
            var displayName = getDisplayName(this.guid);
            if (_.isNotReal(displayName)) {
                setDisplayName(this.guid, this.get(this.nameProperty));
                displayName = getDisplayName(this.guid)
            }
            return displayName
        },
        onCreate: function (callback) {
            if (this.isSavedOnServer()) callback();
            else this.bind("create", null, callback)
        },
        destroy: function () {
            for (var ii = 0; ii < modelKeys.length; ii++) {
                var Key = getFunctionModelKey(modelKeys[ii]);
                eval("set" + Key + "(" + this.guid + ", null);")
            }
        },
        staticEventCBs: {},
        staticBind: function (entityType, event, cb) {
            if (!this.staticEventCBs[entityType]) this.staticEventCBs[entityType] = {
                "create": [],
                "delete": []
            };
            if (!this.staticEventCBs[entityType[event]]) this.staticEventCBs[entityType][event] = [];
            this.staticEventCBs[entityType][event].push(cb)
        },
        staticTrigger: function (entityType, event) {
            if (this.staticEventCBs[entityType])
                if (this.staticEventCBs[entityType][event])
                    for (var i = 0, l = this.staticEventCBs[entityType][event].length; i <
                        l; i++) this.staticEventCBs[entityType][event][i](this)
        }
    });
    Streak.Model = Model
})(Streak, window);
(function (Streak, window) {
    var _ = Streak._,
        Date = Streak.Date,
        Model = Streak.Model,
        APIRequester = Streak.APIRequester;
    var APIModel = function (obj) {
        Model.call(this, obj)
    };
    APIModel.prototype = Object.create(Model.prototype);
    _.extend(APIModel.prototype, {
        executeRefreshRequest: function (params) {
            this.executeRequest({}, "get")
        },
        executeUpdateRequest: function (params) {
            this.executeRequest(params, "update")
        },
        executeCreateRequest: function (params) {
            this.executeRequest(params, "create")
        },
        executeDeleteRequest: function (params) {
            this.executeRequest({},
                "delete", this.getServerObject())
        },
        executeRequest: function (params, methodCall, inObjectToUse) {
            var self = this;
            var objectToUse = inObjectToUse || this.getUpdatedServerObject(true);
            params.msgUrl = _.template(this.apiURLs[methodCall])(objectToUse);
            APIRequester[methodCall](params, function (res, xhr, fromDelete) {
                self.handleSuccessfulResponse(res, xhr, fromDelete)
            }, function (response, xhr) {
                self.handleErrorResponse(response, xhr)
            })
        }
    });
    Streak.APIModel = APIModel
})(Streak);
(function (Streak, window) {
    var _ = Streak._,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester;
    var Collection = Streak.iframe.contentWindow.Array;
    var CONSTANTS = {
        LIMIT: 1E3,
        BRANCH_FACTOR: 3,
        USE_FILE_STORE: false
    };
    _.extend(Collection.prototype, {
        purge: function (from, to) {
            var rest = this.slice((to || from) + 1 || this.length);
            this.length = from < 0 ? this.length + from : from;
            return this.push.apply(this, rest)
        },
        purgeVal: function (val) {
            var index = this.indexOf(val);
            if (index > -1) {
                this.purge(index);
                return true
            }
            return false
        },
        unique: function (idfunc) {
            var hash = {};
            var out = [];
            for (var i = 0, len = this.length; i < len; i++) {
                var id = this[i].toString();
                if (idfunc) id = idfunc(this[i]);
                if (!hash[id]) {
                    out.push(this[i]);
                    hash[id] = 1
                }
            }
            return out
        },
        init: function (options, initializedCallback) {
            this.entityType = options.entityType;
            this.keyName = options.keyName;
            this.keyValue = options.keyValue;
            this.parent = options.parent;
            this.key = options.key;
            this.onlyUnique = options.onlyUnique;
            this.eventsActive = true;
            this.modelsAdded = {};
            this.makeModel = options.makeModel;
            this.apiURL = options.apiURL;
            this.refreshTimeout =
                null;
            this.eventCBs = {
                "add": [],
                "remove": [],
                "change": [],
                "collectionChange": []
            };
            this.eventsHappenedInTransaction = false;
            this.isInTransaction = false;
            this._isBeingRefreshed = false;
            this.isStored = options.isStored;
            if (this.useFileStore()) this.readAndLoadFromFile(initializedCallback);
            else if (initializedCallback) setTimeout(initializedCallback, 1);
            this._currentRefreshStage = 0;
            this._currentRefreshResults = [];
            this._currentRefreshCallbacks = [];
            this._isCurrentlyUpdatingFromRefresh = false;
            this._delayedRefresh = _.debounce(this._executeRefresh.bind(this),
                100)
        },
        useFileStore: function () {
            return this.isStored && CONSTANTS.USE_FILE_STORE
        },
        readAndLoadFromFile: function (initializedCallback) {
            var self = this;
            Streak.FileStore.load(this.getFileStorePath(), function (storedData) {
                self.processStoredData(storedData);
                if (initializedCallback) initializedCallback( !! storedData)
            })
        },
        getFileStorePath: function () {
            return "collections/" + this.getCollectionID() + ".array"
        },
        getCollectionID: function () {
            var id = this.entityType;
            if (this.keyName) id += "/" + this.keyName;
            if (this.keyValue) id += "/" + this.keyValue;
            return id
        },
        processStoredData: function (storedData) {
            if (!storedData) return;
            if (storedData.length > 0)
                for (var ii = 0; ii < storedData.length; ii++) this.add(storedData[ii])
        },
        setTriggersActive: function (isActive) {
            this.eventsActive = isActive
        },
        beginTransaction: function () {
            this.setTriggersActive(false);
            this.eventsHappenedInTransaction = false;
            this.isInTransaction = true
        },
        endTransaction: function () {
            this.setTriggersActive(true);
            this.isInTransaction = false;
            if (this.eventsHappenedInTransaction) {
                this.trigger("eventsHappenedInTransaction");
                this.eventsHappenedInTransaction = false
            }
        },
        bind: function (event, cb, uniq) {
            if (uniq) cb.uniq = uniq;
            if (!this.eventCBs[event]) this.eventCBs[event] = [];
            if (cb.uniq)
                for (var i = 0; i < this.eventCBs[event].length; i++) {
                    var existingCB = this.eventCBs[event][i];
                    if (existingCB && existingCB.uniq === cb.uniq) return
                }
            this.eventCBs[event].push(cb);
            var self = this;
            return function () {
                self.eventCBs[event].removeVal(cb)
            }
        },
        unbindAll: function (event, uniq) {
            if (!this.eventCBs[event]) return;
            var newCBs = [];
            for (var i = 0; i < this.eventCBs[event].length; i++) {
                var existingCB =
                    this.eventCBs[event][i];
                if (existingCB && existingCB.uniq !== uniq) newCBs.push(existingCB)
            }
            this.eventCBs[event] = newCBs
        },
        trigger: function (event) {
            if (!this.eventCBs[event]) return;
            if (this.eventsActive) {
                var args = _.toArray(arguments).slice(1);
                var callbacks = [];
                var newCallbacks = [];
                for (var ii = 0; ii < this.eventCBs[event].length; ii++) callbacks.push(this.eventCBs[event][ii]);
                for (var i = 0; i < callbacks.length; i++) try {
                    if (!callbacks[i].apply(null, args)) newCallbacks.push(callbacks[i])
                } catch (err) {
                    newCallbacks.push(callbacks[i]);
                    Streak.BentoBox.logError("collection trigger error", err)
                }
                this.eventCBs[event] = newCallbacks
            }
            if (this.isInTransaction) this.eventsHappenedInTransaction = true
        },
        add: function (obj) {
            var m = this.makeModel(obj);
            this.addModel(m);
            return m
        },
        addAndSave: function (obj, cb, errCb) {
            var m = this.makeModel(obj);
            this.addModel(m);
            var self = this;
            m.save(cb, undefined, undefined, function () {
                self.remove(m);
                if (errCb) errCb()
            });
            return m
        },
        addModel: function (aModel, supress) {
            var self = this;
            var m = aModel;
            var shouldPush = true;
            if (this.onlyUnique)
                if (m.key &&
                    m.key()) {
                    var obj = self.modelsAdded[m.key()];
                    shouldPush = !obj
                } else shouldPush = this.indexOf(m) === -1;
            if (shouldPush) {
                this.push(m);
                if (m.key && m.key()) self.modelsAdded[m.key()] = m;
                this.trigger("add", m);
                if (!supress) {
                    this.trigger("change", m);
                    this.trigger("collectionChange", m)
                }
                if (this.onlyUnique) {
                    var oldKey = m.key();
                    m.bind("set", this.keyName, function () {
                        if (oldKey) {
                            delete self.modelsAdded[oldKey];
                            oldKey = null
                        }
                        if (m.key()) {
                            var oldModel = self.modelsAdded[m.key()];
                            if (oldModel) self.remove(oldModel);
                            self.modelsAdded[m.key()] =
                                m;
                            oldKey = m.key()
                        }
                    }, this.keyValue)
                }
                m.bind("save", null, function () {
                    self.trigger("change")
                }, this.keyValue);
                m.bind("delete", null, function () {
                    self.remove(m)
                }, this.keyValue);
                m.bind("undelete", null, function () {
                    self.refresh()
                }, this.keyValue);
                m.bind("change", null, function () {
                    var newArgs = _.chain(arguments).toArray().rest(2).value();
                    self.trigger.apply(self, ["modelChange", m].concat(newArgs))
                }, this.keyValue);
                m.bind("set", m.keyName, function () {
                    if (m.key && m.key()) self.modelsAdded[m.key()] = m
                }, this.keyValue);
                m.bindToAllEvents(function () {
                    self.trigger.apply(self,
                        _.toArray(arguments).concat([m]))
                })
            }
        },
        get: function (key) {
            if (_.isReal(key)) return this.modelsAdded[key]
        },
        remove: function (obj, supress) {
            if (!this.purgeVal(obj)) return;
            if (obj.key && obj.key() && this.modelsAdded[obj.key()]) this.modelsAdded[obj.key()] = null;
            obj.unbindAll(this.keyValue);
            this.trigger("remove", obj);
            obj.trigger("remove");
            if (!supress) {
                this.trigger("change");
                this.trigger("collectionChange")
            }
        },
        refresh: function (callback, forceChange) {
            var self = this;
            if (callback) this._currentRefreshCallbacks.push(callback);
            if (this._isBeingRefreshed) return;
            this._isBeingRefreshed = true;
            this._delayedRefresh()
        },
        _executeRefresh: function () {
            if (this.parent) {
                this.parent.refresh(this._executeRefreshList.bind(this));
                return
            }
            this._executeRefreshList()
        },
        _executeRefreshList: function () {
            this._currentRefreshStage = -1;
            this._refreshAtNextStage()
        },
        _verifyRefreshResponses: function () {
            var startIndex = this._getRefreshResultStartIndex();
            var endIndex = this._getRefreshResultEndIndex();
            var hasError = false;
            var hasEntryLessThanLimit = false;
            var hasEmptyResultEntry =
                false;
            for (var ii = startIndex; ii <= endIndex; ii++) {
                var resultEntry = this._currentRefreshResults[ii];
                if (_.isNotReal(resultEntry)) {
                    hasEmptyResultEntry = true;
                    break
                }
                if (resultEntry === -1) hasError = true;
                if (resultEntry.length < CONSTANTS.LIMIT) hasEntryLessThanLimit = true
            }
            if (hasEmptyResultEntry) return;
            if (hasError) {
                this._finishRefresh();
                return
            }
            if (!hasEntryLessThanLimit) {
                this._refreshAtNextStage();
                return
            }
            this._refreshConsolidateResults()
        },
        _getRefreshResultStartIndex: function () {
            var total = 0;
            for (var ii = 0; ii < this._currentRefreshStage; ii++) total +=
                Math.pow(CONSTANTS.BRANCH_FACTOR, ii);
            return total
        },
        _getRefreshResultEndIndex: function () {
            var total = 0;
            for (var ii = 0; ii < this._currentRefreshStage + 1; ii++) total += Math.pow(CONSTANTS.BRANCH_FACTOR, ii);
            return total - 1
        },
        _refreshAtNextStage: function () {
            this._currentRefreshStage += 1;
            var startIndex = this._getRefreshResultStartIndex();
            var endIndex = this._getRefreshResultEndIndex();
            this._currentRefreshResults.length = endIndex + 1;
            for (var page = startIndex; page <= endIndex; page++) this._refreshRequestListPage(page)
        },
        _refreshRequestListPage: function (page) {
            var self =
                this;
            var params = {
                limit: CONSTANTS.LIMIT,
                page: page
            };
            params.limit = CONSTANTS.LIMIT;
            params.page = page;
            if (this.refreshParameters) _.extend(params, this.refreshParameters);
            params.msgUrl = this.apiURL;
            APIRequester.get(params, function (res) {
                self._currentRefreshResults[page] = res;
                self._verifyRefreshResponses()
            }, function (errorResponse, xhr) {
                self._currentRefreshResults[page] = -1;
                self._verifyRefreshResponses()
            })
        },
        _refreshConsolidateResults: function () {
            var result = [];
            for (var ii = 0; ii < this._currentRefreshResults.length; ii++) result =
                result.concat(this._currentRefreshResults[ii]);
            this._isCurrentlyUpdatingFromRefresh = true;
            try {
                this.handleRefreshList(result)
            } catch (err) {}
            this._isCurrentlyUpdatingFromRefresh = false;
            this._finishRefresh()
        },
        _finishRefresh: function () {
            var callbacks = _.clone(this._currentRefreshCallbacks);
            for (var ii = 0; ii < callbacks.length; ii++) callbacks[ii]();
            this._currentRefreshCallbacks.length = 0;
            this._isBeingRefreshed = false;
            this.trigger("refreshed")
        },
        handleRefreshList: function (res) {
            var self = this;
            res = res || [];
            if (this.useFileStore()) Streak.FileStore.store(this.getFileStorePath(),
                res);
            var key = self.key;
            var changed = false;
            var added = [];
            var deleted = [];
            var newMap = {};
            var i = 0;
            for (i = 0; i < res.length; i++) {
                var obj = res[i];
                var m = this.modelsAdded[obj[key]];
                if (m) {
                    if (m.collectionUpdate) m.collectionUpdate(obj)
                } else {
                    m = this.makeModel(obj);
                    added.push(m)
                }
                newMap[m.key()] = m
            }
            for (i = 0; i < self.length; i++) {
                var model = self[i];
                if (newMap[model.key()]);
                else if (model.isFullySynced()) deleted.push(model)
            }
            if (added.length > 0 || deleted.length > 0) changed = true;
            for (i = 0; i < deleted.length; i++) this.remove(deleted[i], true);
            for (i = 0; i < added.length; i++) this.addModel(added[i], true);
            if (changed) {
                this.trigger("change");
                this.trigger("collectionChange")
            }
        },
        getByKey: function (key) {
            return this.modelsAdded[key]
        },
        isBeingRefreshed: function () {
            return this._isBeingRefreshed
        },
        isCurrentlyUpdatingFromRefresh: function () {
            return this._isCurrentlyUpdatingFromRefresh
        }
    });
    Streak.Collection = Collection
})(Streak, window);
(function (Streak, window) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        HTML = Streak.HTML,
        Model = Streak.Model,
        Collection = Streak.Collection,
        Eventer = Streak.Eventer;
    Messenger.storeData("clientVersion", Streak.clientVersion);
    var cssFile = Streak.getCombined("css", true);
    Streak.DependencyManager.notifyFunctionFinished("bentoBoxServerSet");
    var BentoBox = new Eventer;
    _.extend(BentoBox, {
        currentTime: null,
        Controllers: {},
        Services: {},
        Models: {},
        Modules: {},
        Widgets: {},
        isError: false,
        maxGetUserAttempts: 2,
        Constants: {
            SERVER: null,
            EMAIL_BLACK_LIST: ["gmail.com", "facebook.com", "aol.com", "yahoo.com", "hotmail.com", "att.net", "googlemail.com"],
            COLOR_LIST: ["RGB(99,99,48)", "IndianRed", "Salmon", "CornflowerBlue", "DodgerBlue", "LightSlateGray", "LightSteelBlue", "RGB(90,105,134)", "RGB(235,112,0)", "RGB(179,109,0)", "RGB(171,139,0)"]
        },
        user: null,
        userSettings: null,
        userEmail: null,
        _isReady: false,
        _readyFuncs: [],
        _isLoggedOutReady: false,
        _loggedOutReadyFuncs: [],
        _isLoaded: false,
        _isDataInitialized: false,
        _loadedFuncs: [],
        _isDisconnected: false,
        _isTornDown: false,
        init: function (callback) {
            this.userEmail = Streak.userEmail;
            var self = this;
            this.bind("criticalError", function () {
                self.criticalError()
            });
            this.bind("newClientVersion", function () {
                self.newClientVersion()
            });
            this.bind("newExtVersion", function () {
                self.newExtVersion()
            });
            this.bind("noThirdPartyCookie", function () {
                self.noThirdPartyCookie()
            });
            Streak.NotificationCenter.addFunction({
                eventName: "unauthorizedRequest",
                functionToCall: this.unauthorizedRequest,
                functionContext: this
            });
            Streak.NotificationCenter.addFunction({
                eventName: "reauthorized",
                functionToCall: this.reauthorized,
                functionContext: this
            });
            if (callback) callback()
        },
        unauthorizedRequest: function () {
            if (this._isDisconnected) return;
            this._isDisconnected = true;
            this.teardown();
            this.Modules.TopNav.gotLoggedOut()
        },
        reauthorized: function () {
            this._isDisconnected = false;
            this.reup()
        },
        isLoggedIn: function () {
            return this.getUser() && this.getUser().get("isOauthComplete")
        },
        criticalError: function () {
            if (this._isDisconnected) return;
            this._isDisconnected =
                true;
            if (this._isReady) {
                this.teardown();
                this.establishConnection()
            } else this.teardown()
        },
        newClientVersion: function () {
            this.teardown();
            this.Modules.TopNav.showClientUpdateNeeded();
            this.Modules.TopNav.openMenu()
        },
        newExtVersion: function () {
            this.teardown();
            this.Modules.TopNav.showExtensionUpdateNeeded();
            this.Modules.TopNav.openMenu()
        },
        establishConnection: function (attempt, delay) {
            var self = this;
            if (!attempt) attempt = 1;
            if (attempt === 1) Gmail.showNotice("Error communicating with Streak servers, retrying now...");
            this.connectionTest(function () {
                self._isDisconnected = false;
                Gmail.hideNotice();
                self.reup()
            }, function () {
                attempt += 1;
                if (!delay) delay = 2E3;
                else delay = Math.min(delay * 2, 6E4);
                Gmail.showNotice("Streak: retrying in " + delay / 1E3 + " seconds");
                setTimeout(function () {
                    self.establishConnection(attempt, delay)
                }, delay)
            })
        },
        connectionTest: function (pass, fail) {
            var self = this;
            APIRequester.get({
                msgUrl: "users/me"
            }, function (res, xhr) {
                if (res && res.isOauthComplete) pass();
                else self.reset()
            }, function (res, xhr) {
                if (res && res.error === "user not logged in") self.reset();
                else fail();
                return true
            }, null, 10, true)
        },
        reset: function () {
            Gmail.hideNotice();
            this.reup();
            this.trigger("logged_out")
        },
        teardown: function () {
            var self = this;
            if (self._isTornDown) return;
            self._isTornDown = true;
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["teardown"];
            Streak.DependencyManager.addFunction({
                functionKey: "teardown",
                functionToCall: function (callback) {
                    self.UI.teardown();
                    for (var module in self.Modules)
                        if (self.Modules[module].teardown) self.Modules[module].teardown();
                    Streak.NotificationCenter.notify({
                        eventName: "streak.teardown"
                    });
                    self.Modules.TopNav.haltExecution();
                    Gmail.teardown();
                    if (callback) callback()
                },
                dependentFunctionKeys: ["topNavInitialized", "gmailLoaded", "htmlLoaded", "localeLoaded"]
            })
        },
        reup: function () {
            var self = this;
            if (!self._isTornDown) return;
            self._isTornDown = false;
            for (module in self.Modules)
                if (self.Modules[module].reup) try {
                    self.Modules[module].reup()
                } catch (err) {
                    self.logError("Reupping bad for: " + module, err)
                }
                Streak.NotificationCenter.notify({
                eventName: "streak.reup"
            });
            Gmail.reup();
            Gmail.detectViewChange({
                fragment: location.hash.substring(1)
            });
            self.trigger("reup")
        },
        destroy: function () {
            this.teardown();
            this.Modules.TopNav.destroy();
            Gmail.destroy();
            this.UI.destroy();
            undoErrorWrap()
        },
        addCSSFile: function (callback) {
            Gmail.insertCss(cssFile);
            if (callback) callback()
        },
        triggerFirstGmailViewChange: function (callback) {
            this._isReady = true;
            Gmail.checkAndTriggerInitialConversationView();
            Gmail.detectViewChange({
                fragment: location.hash.substring(1)
            });
            if (callback) callback();
            Streak.NotificationCenter.notify({
                eventName: "bentoBoxIsReady"
            })
        },
        setUser: function (user) {
            this.user =
                this.Models.User.create(user)
        },
        getUser: function () {
            return this.user
        },
        isExperimentEnabled: function (experimentName) {
            return this.EnabledFeaturesController.isFeatureEnabled(experimentName)
        },
        isFeatureEnabled: function (key) {
            return this.EnabledFeaturesController.isFeatureEnabled(key)
        },
        getUserSettings: function () {
            return this.userSettings
        },
        logError: function (message, err, extraMessage) {
            if (!message && !err) return;
            if (err) {
                if (err.msg) message += "\n msg: " + err.msg;
                message += "\n stack: " + (err.stack || err)
            }
            if (extraMessage) message +=
                "\n extra: " + extraMessage;
            if (this.userEmail) message += "\n user: " + this.userEmail;
            message += "\n clientVersion: " + Streak.clientVersion;
            message += "\n extVersion: " + Streak.extVersion;
            message += "\n url: " + location.toString();
            console.debug(message);
            Requester.error(message)
        },
        logAjaxError: function (msg, res, xhr) {
            if (xhr) msg += "\n status: " + xhr.status;
            if (res && res.error) msg += "\n server msg: " + res.error;
            if (res && res.details) msg += "\n server details: " + res.details;
            if (!res && xhr && xhr.responseText) msg += "\n server response: " +
                xhr.responseText;
            BentoBox.logError(msg)
        }
    });
    Streak.userEmail = GLOBALS[10];
    if (!Streak.userEmail || !Streak.userEmail.isValidEmail()) {
        Messenger.storeData("useremail", "broken.noemail@streak.com");
        return
    } else {
        try {
            var candidates = Streak.searchObject(GLOBALS, Streak.userEmail, 100, true, true);
            if (candidates.length > 0)
                for (var i = 0; i < candidates.length; i++)
                    if (candidates[i].el.toLowerCase() === Streak.userEmail && candidates[i].el !== Streak.userEmail) {
                        Streak.originalEmail = candidates[i].el;
                        break
                    }
        } catch (err) {}
        Messenger.storeData("useremail",
            Streak.userEmail)
    }
    var stackDetector = "mailfoogae.appspot.com";
    var getErrorWrapped = function (func) {
        return function () {
            try {
                func.apply(this, arguments)
            } catch (err) {
                if (err.stack) {
                    var parts = err.stack.split("\n").splice(1);
                    if (parts && parts.length > 0 && _.all(parts, function (part) {
                        return part.indexOf(stackDetector) > -1
                    })) {
                        var msg = "";
                        if (err.name) msg += err.name + ": ";
                        if (err.message) msg += err.message;
                        if (msg.length === 0) msg = "event listener error";
                        BentoBox.logError(msg, err)
                    }
                }
                throw err;
            }
        }
    };
    var wrappedFunctions = [];
    var errorWrap =
        function (object, oldFunctionName, functionArgIndex) {
            var streakFunctionName = "_streak" + oldFunctionName;
            wrappedFunctions.push({
                object: object,
                originalFunctionName: oldFunctionName,
                streakFunctionName: streakFunctionName
            });
            object[streakFunctionName] = object[oldFunctionName];
            object[oldFunctionName] = function () {
                var args = _.toArray(arguments);
                var func = args[functionArgIndex];
                if (func && func.apply) args[functionArgIndex] = getErrorWrapped.call(this, func).bind(this);
                return this[streakFunctionName].apply(this, args)
            }
    };
    var undoErrorWrap =
        function () {
            for (var i = 0; i < wrappedFunctions.length; i++) {
                var obj = wrappedFunctions[i].object;
                var original = wrappedFunctions[i].originalFunctionName;
                var streakFunctionName = wrappedFunctions[i].streakFunctionName;
                obj[original] = obj[streakFunctionName];
                delete obj[streakFunctionName]
            }
    };
    errorWrap(window, "setTimeout", 0);
    Streak.BentoBox = BentoBox;
    BentoBox.Locale = Streak.Locale;
    Streak.logError = Streak.BentoBox.logError;
    Streak.DependencyManager.addFunction({
        functionKey: "bentoBoxInitialized",
        functionToCall: BentoBox.init,
        functionContext: BentoBox
    });
    Streak.DependencyManager.addFunction({
        functionKey: "bentoBox.addCSSFile",
        functionToCall: BentoBox.addCSSFile,
        functionContext: BentoBox,
        dependentFunctionKeys: ["gmailLoaded"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "bentoBox.triggerFirstGmailViewChange",
        functionToCall: BentoBox.triggerFirstGmailViewChange,
        functionContext: BentoBox,
        dependentFunctionKeys: ["leftLinkInitialized", "boxesSidebarControllerInitialized", "labelIndicatorsInitialized", "threadInfoControllerInitialized",
            "pixelTrackerSidebarViewControllerInitialized", "snippetsComposeMasterControllerInitialized", "userSettingsInitialized", "enabledFeaturesControllerInitialized"
        ]
    })
})(Streak, window);
(function (Streak) {
    var Date = Streak.Date,
        BB = Streak.BentoBox,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester;
    var UserStateController = function () {};
    Streak._.extend(UserStateController.prototype, {
        init: function (callback) {
            var self = this;
            this._initializeUserInformation(function () {
                if (BB.isLoggedIn()) Streak.NotificationCenter.notify("reauthorized");
                self._callCallback(callback)
            })
        },
        userLoggedIn: function (rawUserObject) {
            BB.setUser(rawUserObject);
            if (BB.getUser().get("isOauthComplete")) Streak.DependencyManager.notifyFunctionFinished("userLoggedIn")
        },
        ai: function (userEmail) {
            BB.teardown();
            BB.UserSettings.active = false;
            Streak.ai = userEmail;
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["userLoggedIn"];
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["data.pipelines.initialized"];
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["data.boxes.initialized"];
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["data.gmailThreads.initialized"];
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["data.sendLaters.initialized"];
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["data.snippets.initialized"];
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["data.streakSettings.initialized"];
            delete Streak.DependencyManager._mapOfFinishedFunctionKeys["data.oauth2Scopes.initialized"];
            Streak.initializeData(Streak);
            this._tryToGetUserFromServer(function () {
                Streak.NotificationCenter.notify("reauthorized")
            });
            Streak.DependencyManager.addFunction({
                functionKey: "reloadLeftLinkPipelines" + Date.now(),
                functionToCall: BB.Modules.LeftLink.loadPipelines,
                functionContext: BB.Modules.LeftLink,
                dependentFunctionKeys: ["data.pipelines.initialized"]
            })
        },
        _initializeUserInformation: function (callback) {
            this._getUserInfo();
            this._tryToGetUserFromServer(callback)
        },
        _getUserInfo: function () {
            APIRequester.get({
                msgUrl: "users/me/info"
            }, function (userInfo) {
                Streak.debugTrackUser = Streak.debugTrackUser || userInfo;
                if (Streak.debugTrackUser && Streak.debugTrackUser.isUserFirstCall) BB.Tracker.trackStreakPassive({
                    eventName: "firstTimeUserSeen"
                })
            }, null, 1, true)
        },
        _tryToGetUserFromServer: function (callback) {
            var self =
                this;
            APIRequester.get({
                msgUrl: "users/me"
            }, function (serverResponse, xhr) {
                self._handleSuccessfulResponse(serverResponse, xhr, callback)
            }, function (serverResponse, xhr) {
                if (xhr.status === 401) {
                    self._userNotLoggedIn(callback);
                    return true
                }
                self._logGetUserError(serverResponse, xhr, callback)
            }, null, 1, true)
        },
        _handleSuccessfulResponse: function (serverResponse, xhr, callback) {
            if (this._isUserLoggedIn(serverResponse)) {
                this.userLoggedIn(serverResponse);
                this._callCallback(callback);
                return
            }
            this._userNotLoggedIn(callback)
        },
        _userNotLoggedIn: function (callback) {
            if (Messenger.getData("isSafari")) {
                Streak.DependencyManager.notifyFunctionFinished("userLoggedOut");
                this._callCallback(callback);
                return
            }
            this._checkThirdPartyCookiesEnabled(callback)
        },
        _isUserLoggedIn: function (serverResponse) {
            return serverResponse && !serverResponse.error && serverResponse.userKey && serverResponse.isOauthComplete
        },
        _checkThirdPartyCookiesEnabled: function (callback) {
            var self = this;
            this._setThirdPartyCookie(function (setCookieResponse) {
                self._checkCookieWasSet(setCookieResponse, callback)
            })
        },
        _setThirdPartyCookie: function (callback) {
            var self = this;
            Requester.makeCall({
                msgMethod: "GET",
                msgUrl: "/ajaxcalls/setCookie",
                cookieName: "randomCookie"
            }, function (setCookieResponse, xhr) {
                callback(setCookieResponse)
            }, function (errorCookieResponse, xhr) {
                self._logCookieError(xhr);
                self._callCallback(callback)
            })
        },
        _isCookieResponseValid: function (setCookieResponse) {
            return !!setCookieResponse
        },
        _checkCookieWasSet: function (setCookieResponse, callback) {
            var self = this;
            if (!self._isCookieResponseValid(setCookieResponse)) {
                self._logCookieError(xhr);
                self._callCallback(callback);
                return
            }
            var checkCookieRequestParameters = this._constructCookieRequestParameters(setCookieResponse);
            Requester.makeCall(checkCookieRequestParameters, function (checkCookieResponse) {
                self._validateCheckCookieResponse(checkCookieResponse);
                self._callCallback(callback)
            }, function (checkChookieErrorResponse, xhr) {
                self._logCookieError(xhr);
                self._callCallback(callback)
            })
        },
        _constructCookieRequestParameters: function (setCookieResponse) {
            var checkCookieRequestParameters = {
                msgMethod: "GET",
                msgUrl: "/ajaxcalls/checkCookie",
                cookieName: "randomCookie"
            };
            for (var value in setCookieResponse) checkCookieRequestParameters[value] =
                setCookieResponse[value];
            return checkCookieRequestParameters
        },
        _validateCheckCookieResponse: function (checkCookieResponse) {
            if (this._isCheckCookieResponseValid(checkCookieResponse)) Streak.DependencyManager.notifyFunctionFinished("userLoggedOut");
            else this._thirdPartyCookiesDisabled()
        },
        _isCheckCookieResponseValid: function (checkCookieResponse) {
            return checkCookieResponse && checkCookieResponse.success
        },
        _thirdPartyCookiesDisabled: function () {
            BB.Modules.TopNav.showThirdPartyCookiesDisabled()
        },
        _logGetUserError: function (serverResponse) {
            var msg =
                "Server threw an error getting user";
            msg += "\n attempt: 5";
            if (serverResponse && serverResponse.error) msg += "\nServer msg: " + serverResponse.error;
            BB.logError(msg);
            BB.trigger("criticalError");
            BB.isError = true
        },
        _logCookieError: function (xhr) {
            var msg = "Error in determining 3rd party cookies";
            msg += "\n status: " + xhr.status;
            msg += "\n response: " + JSON.stringify(xhr);
            BB.logError(msg);
            BB.isError = true;
            BB.trigger("criticalError")
        },
        _callCallback: function (callback) {
            if (callback) callback()
        }
    });
    BB.UserStateController = new UserStateController;
    Streak.DependencyManager.addFunction({
        functionKey: "userStateInitialized",
        functionToCall: BB.UserStateController.init,
        functionContext: BB.UserStateController
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var EnabledFeaturesController = Streak.Class.subclass({
        className: "EnabledFeaturesController",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_currentPlan",
            destroy: false
        }, {
            name: "_experiments",
            destroy: false
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        setup: function () {
            return this._getUserPlan()
        },
        _getUserPlan: function () {
            var self = this;
            var promise = new Streak.Promise(function (resolve, reject) {
                Streak.APIRequester.getUrl("users/me/plans", function (planResponse) {
                    self._processPlanResponse(planResponse);
                    resolve()
                }, resolve)
            });
            return promise
        },
        _processPlanResponse: function (planResponse) {
            this._currentPlan = planResponse;
            this._experiments = BB.getUser().get("experiments")
        },
        isFeatureEnabled: function (key) {
            return this._isExperimentEnabled(key) || this._isFeatureInPlan(key)
        },
        _isExperimentEnabled: function (experimentName) {
            if (!this._experiments) return false;
            if (!this._experiments[experimentName]) return false;
            return this._experiments[experimentName].inExperiment
        },
        _isFeatureInPlan: function (key) {
            if (!this._currentPlan) return false;
            if (!this._currentPlan.features) return false;
            return this._currentPlan.features.indexOf(key) > -1
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "enabledFeaturesControllerInitialized",
        functionReference: function () {
            var enabledFeaturesController = new EnabledFeaturesController;
            var promise = enabledFeaturesController.setup();
            Library.set("BentoBox.EnabledFeaturesController", enabledFeaturesController);
            return promise
        },
        dependentFunctionKeys: ["userLoggedIn"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var allEventCallbacks = [];
    var fieldMap = {};
    var stageMap = {};
    var Pipeline = function (data) {
        APIModel.call(this, data);
        var self = this;
        this.bind("set", "stages", function () {
            self.trigger("stageChange")
        });
        this.bind("set", "stageOrder", function () {
            self.trigger("stageChange")
        });
        this.bind("set", "pipelineKey", function () {
            var stages = self.getStages().ordered;
            for (var i = 0; i <
                stages.length; i++) stages[i].set("pipelineKey", self.key())
        });
        this._checkSystemColumnsForCaseIdAndFix()
    };
    Pipeline.prototype = Object.create(APIModel.prototype);
    _.extend(Pipeline.prototype, {
        keyName: "pipelineKey",
        nameProperty: "name",
        entityType: "Workflow",
        typeName: "pipeline",
        createProperties: ["name", "stageNames", "fieldNames", "fieldTypes"],
        apiURLs: {
            get: "pipelines/<%= pipelineKey %>",
            update: "pipelines/<%= pipelineKey %>",
            create: "pipelines",
            "delete": "pipelines/<%= pipelineKey %>"
        },
        trigger: function () {
            APIModel.prototype.trigger.apply(this,
                _.toArray(arguments));
            for (var ii = 0; ii < allEventCallbacks.length; ii++) allEventCallbacks[ii].apply(null, [this].concat(_.toArray(arguments)))
        },
        updateMap: {
            fields: function (newObj) {
                var newFields = newObj.fields;
                var newFieldSet = [];
                var fieldsAdded = false;
                var updated = false;
                for (var ii = 0; ii < newFields.length; ii++) {
                    var fieldKey = newFields[ii].key;
                    var field = this.getField(fieldKey);
                    if (field) updated = updated || field.update(newFields[ii]);
                    else {
                        field = BB.Models.PipelineField.create(newFields[ii], this);
                        field.set("pipelineKey",
                            this.key());
                        updated = true
                    }
                    newFieldSet.push(field)
                }
                if (updated) {
                    this.getObj().fields = newFields;
                    if (this.getFields().length !== newFields.length) this.set("fields", newFields)
                }
                fieldMap[this.guid] = newFieldSet;
                return updated
            },
            stageOrder: function (newObj) {
                var oldOrder = this.get("stageOrder");
                if (!JSON.isEqual(oldOrder, newObj.stageOrder)) {
                    stageMap[this.guid] = null;
                    this.set("stageOrder", newObj.stageOrder);
                    this.set("stages", newObj.stages);
                    return true
                }
                this._updateStageIndex()
            },
            "stages": function (newObj) {
                var stagesAdded =
                    false;
                var updated = false;
                var newOrder = newObj.stageOrder || [];
                if (Object.getOwnPropertyNames(newObj.stages).length !== newOrder.length) return;
                var newStages = [];
                for (var ii = 0; ii < newOrder.length; ii++) newStages.push(newObj.stages[newOrder[ii]]);
                var newStageIDs = _.map(newStages, function (stage) {
                    return stage.name + "//" + stage.key
                });
                var oldStageIDs = _.map(this.getStages().ordered, function (stage) {
                    return stage.displayName() + "//" + stage.key()
                });
                if (!JSON.isEqual(newStageIDs, oldStageIDs)) {
                    updated = true;
                    if (newStageIDs.length !==
                        oldStageIDs.length) stagesAdded = true;
                    else
                        for (var i = 0; i < newObj.stageOrder.length; i++) {
                            var stageKey = newObj.stageOrder[i];
                            var newStage = newObj.stages[stageKey];
                            var oldStage = this.getStage(stageKey);
                            if (oldStage && oldStage.displayName() !== newStage.name) oldStage.syncedSet("name", newStage.name);
                            else {
                                stagesAdded = true;
                                break
                            }
                        }
                    if (stagesAdded) {
                        stageMap[this.guid] = null;
                        this.set("stageOrder", newObj.stageOrder);
                        this.set("stages", newObj.stages)
                    }
                }
                this._updateStageIndex();
                return updated
            }
        },
        addStage: function (stageName,
            cb) {
            var stageModel = BB.Models.Stage.create({
                name: stageName,
                pipelineKey: this.key()
            }, this);
            stageModel.save(function () {
                this.getStages().ordered.push(stageModel);
                this.getStages().keyed[stageModel.key()] = stageModel;
                this.getObj().stageOrder.push(stageModel.key());
                this._updateStageIndex();
                if (cb) cb()
            }.bind(this), 1, false, function () {
                this.refresh()
            }.bind(this))
        },
        removeStage: function (stage) {
            this.getStages().ordered.removeVal(stage);
            this.get("stageOrder").removeVal(stage.key());
            this.trigger("set", "stageOrder")
        },
        _updateStageIndex: function () {
            var stages = this.getStages();
            for (var ii = 0; ii < stages.ordered.length; ii++) stages.ordered[ii].set("stageIndex", ii)
        },
        addField: function (field, cb) {
            field.save(function () {
                if (!field.key()) {
                    setTimeout(function () {
                        this.addField(field, cb)
                    }.bind(this), 500);
                    return
                }
                this.getFields().push(field);
                if (cb) cb();
                this.trigger("set", "fields")
            }.bind(this))
        },
        removeField: function (fieldKey, cb) {
            var self = this;
            var field = this.getField(fieldKey);
            this.getFields().removeVal(field);
            this.fullySyncedCallback(function () {
                field.del(function () {
                    self.refresh(cb);
                    self.trigger("set", "fields")
                })
            })
        },
        getFields: function () {
            var fields = fieldMap[this.guid];
            if (!fields) {
                fields = [];
                var rawFields = this.get("fields");
                for (var ii = 0; ii < rawFields.length; ii++) {
                    var field = BB.Models.PipelineField.create(rawFields[ii], this);
                    field.set("pipelineKey", this.key());
                    fields.push(field)
                }
                fieldMap[this.guid] = fields
            }
            return fieldMap[this.guid]
        },
        getField: function (fieldKey) {
            return _.find(this.getFields(), function (aField) {
                return aField.key() === fieldKey
            })
        },
        getStage: function (stageKey) {
            return this.getStages().keyed[stageKey]
        },
        getStageByName: function (stageName) {
            return _.find(this.getStages().ordered, function (stage) {
                return stage.displayName() === stageName
            })
        },
        getStageNames: function () {
            return _.map(this.getStages().ordered, function (stage) {
                return stage.displayName()
            })
        },
        getStages: function () {
            var stages = stageMap[this.guid];
            if (!stages) {
                stages = {
                    ordered: [],
                    keyed: {}
                };
                var rawStages = this.get("stages");
                var stageOrder = this.get("stageOrder");
                for (var ii = 0; ii < stageOrder.length; ii++) {
                    var stage = BB.Models.Stage.create(rawStages[stageOrder[ii]],
                        this);
                    stage.set("pipelineKey", this.key());
                    stages.ordered.push(stage);
                    stages.keyed[stage.key()] = stage
                }
                stageMap[this.guid] = stages
            }
            return stageMap[this.guid]
        },
        getStagesAsList: function () {
            return _.map(this.getStages().ordered, function (stage) {
                return {
                    text: stage.displayName(),
                    value: stage.key()
                }
            })
        },
        addSystemColumn: function (column, uniqueKey, callback, dontSave) {
            var currentSystemColumns = this.getSystemColumns();
            var ukey = uniqueKey || Date.now() + Math.random() + "";
            currentSystemColumns.push({
                property: column.property,
                uniqueKey: ukey
            });
            this.setUISettings("systemColumns", currentSystemColumns, callback, dontSave);
            return ukey
        },
        removeSystemColumn: function (removedColumn) {
            var currentSystemColumns = this.getSystemColumns();
            var systemColumns = _.filter(currentSystemColumns, function (column) {
                return column.uniqueKey !== removedColumn.uniqueKey
            });
            this.setUISettings("systemColumns", systemColumns)
        },
        getFilterableSystemColumns: function () {
            return _.filter(this.getUniqueSystemColumns(), function (systemColumn) {
                return Pipeline.isPropertyFilterable(systemColumn.property)
            })
        },
        getGroupableSystemColumns: function () {
            return _.filter(this.getUniqueSystemColumns(), function (systemColumn) {
                return Pipeline.isPropertyGroupable(systemColumn.property)
            })
        },
        getUniqueSystemColumns: function () {
            return _.uniq(this.getActiveSystemColumns(), function (systemColumn) {
                return systemColumn.property
            })
        },
        getSystemColumnByProperty: function (property) {
            var targetColumn;
            _.each(this.getSystemColumns(), function (column) {
                if (column.property === property) targetColumn = column
            });
            return targetColumn
        },
        getSystemColumn: function (propertyOrUniqueKey) {
            return _.find(this.getActiveSystemColumns(),
                function (column) {
                    return propertyOrUniqueKey === column.uniqueKey || propertyOrUniqueKey === column.property
                })
        },
        isDefaultProperty: function (property) {
            return Pipeline.isDefaultProperty(property)
        },
        getSystemColumns: function () {
            var systemColumns = this.getUISettingsByPath("systemColumns");
            if (_.isUndefined(systemColumns)) {
                systemColumns = [];
                this.setUISettings("systemColumns", systemColumns)
            }
            return _.map(systemColumns, function (column) {
                return _.extend({}, Pipeline.getSystemProperty(column.property), column)
            })
        },
        getActiveSystemColumns: function () {
            var systemColumns =
                this.getSystemColumns();
            var defaultColumns = Pipeline.getDefaultSystemProperties();
            return defaultColumns.concat(systemColumns)
        },
        getAllSystemColumns: function () {
            var systemColumns = this.getActiveSystemColumns();
            var defaultColumns = Pipeline.getAllSystemProperties();
            var combined = systemColumns.concat(defaultColumns);
            return _.uniq(combined, false, "property")
        },
        doesEmailAddressHaveAccess: function (email) {
            var emails = [];
            if (this.get("aclEntries") && this.get("aclEntries").length > 0) emails = _.map(this.get("aclEntries"),
                function (aclEntry) {
                    return aclEntry.email
                });
            if (emails.indexOf(email) > -1) return true;
            if (this.get("orgWide")) {
                var emailDomain = email.split("@")[1].split(".")[0];
                var orgDomain = this.get("organization").organizationId || "";
                if (emailDomain.toLowerCase() === orgDomain.toLowerCase()) return true
            }
            return false
        },
        handle409Conflict: function (response) {
            this.trigger("assignedTo", "unsharePipelineContacts", response)
        },
        getUISettingsByPath: function (keyPath) {
            var objectPath = Streak.ObjectPath.create(this.get("uiSettings"));
            return objectPath.get(keyPath)
        },
        setUISettings: function (keyPath, value, cb, dontSave) {
            var objectPath = Streak.ObjectPath.create(this.get("uiSettings"));
            objectPath.set(keyPath, value);
            this.set("uiSettings", objectPath.toString());
            if (!dontSave) this.save(cb)
        },
        isHidden: function () {
            return BB.UserSettings.get("pipeline/" + this.key() + "/uiSettings/leftLink")
        },
        setHidden: function (val) {
            BB.UserSettings.set("pipeline/" + this.key() + "/uiSettings/leftLink", val);
            BB.UserSettings.save();
            this.trigger("hiddenSettingToggled")
        },
        setColor: function (color) {
            BB.UserSettings.set("pipeline/" +
                this.key() + "/uiSettings/indicator/color", color);
            BB.UserSettings.save(true)
        },
        getColor: function () {
            var color = BB.UserSettings.get("pipeline/" + this.key() + "/uiSettings/indicator/color");
            if (!color) color = {
                backgroundColor: "rgb(255, 173, 71)",
                textColor: "rgb(0, 0, 0)"
            };
            return color
        },
        isDefaultColor: function () {
            return !BB.UserSettings.get("pipeline/" + this.key() + "/uiSettings/indicator/color")
        },
        getSavedViews: function () {
            return this.getUISettingsByPath("savedViews/list") || []
        },
        getSavedView: function (viewKey) {
            return _.find(this.getSavedViews(),
                function (savedView) {
                    return savedView.viewKey === viewKey
                })
        },
        addSavedView: function (viewName, settings) {
            var savedView = {
                name: viewName,
                viewKey: Date.now() + "." + Math.random(),
                settings: settings
            };
            var savedViews = this.getSavedViews();
            savedViews.push(savedView);
            this.setUISettings("savedViews/list", savedViews);
            this.trigger("savedViewsChanged");
            return savedView
        },
        updateSavedView: function (savedView, dontSave) {
            var savedViews = this.getSavedViews();
            for (var ii = 0; ii < savedViews.length; ii++)
                if (savedViews[ii].viewKey === savedView.viewKey) {
                    _.extend(savedViews[ii],
                        savedView);
                    break
                }
            this.setUISettings("savedViews/list", savedViews, null, dontSave);
            this.trigger("savedViewChanged", savedView.viewKey);
            this.trigger("savedViewsChanged")
        },
        _checkSystemColumnsForCaseIdAndFix: function () {
            var columnsChanged = false;
            var systemColumns = this.getUISettingsByPath("systemColumns");
            if (!systemColumns) return;
            for (var ii = 0; ii < systemColumns.length; ii++) {
                var column = systemColumns[ii];
                if (column && column.property === "caseId") {
                    column.property = "boxId";
                    columnsChanged = true
                }
            }
            if (columnsChanged) this.setUISettings("systemColumns",
                systemColumns, null, true)
        }
    });
    Pipeline.createCollection = function (initializedCallback) {
        var c = new Collection;
        c.init({
            entityType: "Workflow",
            key: "pipelineKey",
            onlyUnique: true,
            isStored: false,
            makeModel: function (obj) {
                return Pipeline.create(obj)
            },
            apiURL: "pipelines"
        }, initializedCallback);
        return c
    };
    Pipeline.create = function (data) {
        return new Pipeline(data)
    };
    Pipeline.bindToAllEvents = function (callback) {
        allEventCallbacks.push(callback)
    };
    BB.Models.Pipeline = Pipeline
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var Pipeline = BB.Models.Pipeline;
    var systemProperties = [{
        name: "system_name",
        property: "name",
        type: "TEXT",
        filterAndGroupType: "TEXT",
        sortType: "TEXT",
        isEditable: true,
        isDefault: true,
        isGroupable: false,
        isFilterable: true
    }, {
        name: "system_stage",
        property: "stageKey",
        type: "DROPDOWN",
        filterAndGroupType: "STAGE",
        sortType: "TEXT",
        isEditable: true,
        isDefault: true,
        isGroupable: true,
        isFilterable: true,
        textValueFunction: function (box) {
            return box.getStageName()
        },
        filterValueFunction: function (box) {
            return this.textValueFunction(box)
        }
    }, {
        name: "system_notes",
        property: "notes",
        type: "TEXT_INPUT",
        filterAndGroupType: "TEXT",
        sortType: "TEXT",
        isEditable: true,
        isDefault: true,
        isGroupable: false,
        isFilterable: true,
        textValueFunction: function (box) {
            return Streak.$.cleanText(box.get("notes") || "", false, String.fromCharCode(13))
        }
    }, {
        name: "system_id",
        property: "boxId",
        type: "NUMBER",
        filterAndGroupType: "NUMBER",
        sortType: "NUMBER",
        group: "ID",
        isGroupable: false,
        isFilterable: true
    }, {
        name: "system_created",
        property: "creationTimestamp",
        type: "DATE",
        filterAndGroupType: "DATE",
        sortType: "DATE",
        group: "DATE",
        isGroupable: false,
        isFilterable: true
    }, {
        name: "system_updated",
        property: "lastUpdatedTimestamp",
        type: "DATE",
        filterAndGroupType: "DATE",
        sortType: "DATE",
        group: "DATE",
        isGroupable: false,
        isFilterable: true
    }, {
        name: "system_last_stage_change",
        property: "lastStageChangeTimestamp",
        type: "DATE",
        filterAndGroupType: "DATE",
        sortType: "DATE",
        group: "DATE",
        isGroupable: false,
        isFilterable: true
    }, {
        name: "system_followers",
        property: "followerCount",
        type: "NUMBER",
        filterAndGroupType: "NUMBER",
        sortType: "NUMBER",
        group: "COUNT",
        isGroupable: true,
        isFilterable: true
    }, {
        name: "system_comments",
        property: "commentCount",
        type: "NUMBER",
        filterAndGroupType: "NUMBER",
        sortType: "NUMBER",
        group: "COUNT",
        isGroupable: true,
        isFilterable: true
    }, {
        name: "system_reminder_count",
        property: "reminderCount",
        type: "NUMBER",
        group: "COUNT",
        filterAndGroupType: "NUMBER",
        sortType: "NUMBER",
        isGroupable: true,
        isFilterable: true
    }, {
        name: "system_file_count",
        property: "fileCount",
        type: "NUMBER",
        group: "COUNT",
        filterAndGroupType: "NUMBER",
        sortType: "NUMBER",
        isGroupable: true,
        isFilterable: true
    }, {
        name: "system_last_email",
        property: "lastEmailUpdatedTimestamp",
        type: "DATE",
        group: "DATE",
        filterAndGroupType: "DATE",
        sortType: "DATE",
        isGroupable: false,
        isFilterable: true
    }, {
        name: "system_next_reminder",
        property: "soonestReminderTimestamp",
        type: "DATE",
        group: "DATE",
        filterAndGroupType: "DATE",
        sortType: "DATE",
        isGroupable: false,
        isFilterable: true
    }, {
        name: "system_thread_count",
        property: "gmailThreadCount",
        type: "NUMBER",
        filterAndGroupType: "NUMBER",
        sortType: "NUMBER",
        group: "COUNT",
        isGroupable: true,
        isFilterable: true
    }, {
        name: "system_email_addresses",
        property: "emailAddresses",
        type: "COMPUTED",
        filterAndGroupType: "TEXT",
        sortType: "TEXT",
        isEditable: false,
        isGroupable: false,
        isFilterable: true,
        group: "A_COUNT",
        computeFunction: function (box) {
            var retVal = "";
            var val = _.without(box.get("emailAddresses") || [], BB.userEmail);
            for (var ii = 0; ii < val.length; ii++) retVal += '<span class="people" email="' + val[ii] + '">' + val[ii] + (ii === val.length - 1 ? "" : ",") + "</span>";
            return retVal
        },
        sortFunction: function (box) {
            return _.without(box.get("emailAddresses") || [], BB.userEmail).join(",")
        },
        groupByFunction: function (box) {
            return _.without(box.get("emailAddresses") || [], BB.userEmail)
        },
        textValueFunction: function (box) {
            return _.without(box.get("emailAddresses") || [], BB.userEmail).join(",")
        }
    }, {
        name: "system_assigned_to",
        property: "assignedToSharingEntries",
        type: "COMPUTED",
        filterAndGroupType: "PERSON",
        sortType: "PERSON",
        isEditable: true,
        isGroupable: true,
        isFilterable: true,
        group: "A_ASSIGNED",
        computeFunction: function (box) {
            var retVal = "";
            var val = box.get("assignedToSharingEntries");
            _.each(val, function (contact) {
                if (!contact.displayName) contact.displayName = contact.fullName || contact.email || "";
                var emailString = "";
                if (contact.email) emailString = 'email="' + contact.email + '"';
                var iUrl = contact.imageUrl ? contact.imageUrl : contact.image;
                iUrl = iUrl ? iUrl.unescapeHTML() : Streak.server +
                    Streak.combinedPath + "images/unknownContact.png";
                var cEl = '<img class="people" height="23" width="23" src="' + iUrl + '" title="' + contact.displayName + '">';
                cEl += '<span class="people" ' + emailString + ">" + contact.displayName + "</span>";
                retVal += cEl
            });
            return retVal
        },
        sortFunction: function (box) {
            var val = box.get("assignedToSharingEntries");
            return _(val).chain().map(function (contact) {
                if (contact.displayName) return contact.displayName;
                return contact.email
            }).sortBy(function (contactString) {
                return contactString
            }).join(", ").value()
        },
        groupByFunction: function (box) {
            var val = box.get("assignedToSharingEntries");
            if (val && val.length > 0) return _.pluck(val, "email");
            return null
        },
        textValueFunction: function (box) {
            var list = box.get("assignedToSharingEntries");
            var retList = [];
            if (list && list.length > 0) _.each(list, function (contact) {
                if (contact.fullName) retList.push(contact.fullName + " <" + contact.email + ">");
                else retList.push(contact.email)
            });
            return retList.join(", ")
        }
    }, {
        name: "system_summary",
        property: "summaryCount",
        type: "COMPUTED",
        sortType: "NUMBER",
        group: "A_COUNT",
        isGroupable: false,
        isFilterable: false,
        computeFunction: function (box) {
            return _.template('<div class="boxSummary">' + '<span class="boxSummaryIcon boxSummaryEmail"></span><%= gmailThreadCount %>' + '<span class="boxSummaryIcon boxSummaryFile"></span><%= fileCount %>' + '<span class="boxSummaryIcon boxSummaryComment"></span><%= commentCount %>' + '<span class="boxSummaryIcon boxSummaryReminder"></span><%= reminderCount %>' + "</div>", {
                fileCount: box.getProcessedValue("fileCount"),
                reminderCount: box.getProcessedValue("reminderCount"),
                gmailThreadCount: box.getProcessedValue("gmailThreadCount"),
                commentCount: box.getProcessedValue("commentCount")
            })
        },
        sortFunction: function (box) {
            return [parseFloat(box.getSortValue("gmailThreadCount")), parseFloat(box.getSortValue("fileCount")), parseFloat(box.getSortValue("commentCount")), parseFloat(box.getSortValue("reminderCount"))]
        },
        textValueFunction: function (box) {
            return _.template(["Thread Count: <%= gmailThreadCount %>", "File Count: <%= fileCount %>", "Comment Count: <%= commentCount %>", "Reminder Count: <%= reminderCount %>"].join(", "), {
                fileCount: box.getProcessedValue("fileCount"),
                reminderCount: box.getProcessedValue("reminderCount"),
                gmailThreadCount: box.getProcessedValue("gmailThreadCount"),
                commentCount: box.getProcessedValue("commentCount")
            })
        }
    }, {
        name: "system_freshness",
        property: "freshness",
        type: "COMPUTED",
        group: "A_COUNT",
        isGroupable: true,
        isFilterable: true,
        filterAndGroupType: "NUMBER",
        sortType: "NUMBER",
        computeFunction: function (box) {
            var roundedValue = this._getRoundedValue(box);
            var returnStringArray = ['<div class="__streak__FreshnessIndicator">'];
            for (var ii = 0; ii < 5; ii++) {
                returnStringArray.push("<span");
                if (ii < roundedValue) returnStringArray.push(' class="__streak__FreshnessIndicatorFresh"');
                returnStringArray.push("></span>")
            }
            returnStringArray.push("</div>");
            return returnStringArray.join("")
        },
        sortFunction: function (box) {
            return box.get("freshness")
        },
        groupByFunction: function (box) {
            return this.textValueFunction(box)
        },
        filterValueFunction: function (box) {
            return this.textValueFunction(box)
        },
        textValueFunction: function (box) {
            return this._getRoundedValue(box) +
                ""
        },
        _getRoundedValue: function (box) {
            var val = box.get("freshness");
            try {
                val = parseFloat(val);
                return Math.round(val * 5)
            } catch (err) {}
            return 0
        }
    }];
    var getSystemProperty = function (property) {
        for (var i = 0; i < systemProperties.length; i++)
            if (property === systemProperties[i].property) return systemProperties[i];
        return null
    };
    Pipeline.systemProperties = systemProperties;
    _.extend(Pipeline, {
        getDefaultSystemProperties: function () {
            var props = [];
            _.each(systemProperties, function (prop) {
                if (prop.isDefault) {
                    _translateSystemProperty(prop);
                    props.push(prop)
                }
            });
            return props
        },
        getExtraSystemProperties: function () {
            var props = [];
            _.each(systemProperties, function (prop) {
                if (!prop.isDefault && !prop.isLinkedProperty) {
                    _translateSystemProperty(prop);
                    props.push(prop)
                }
            });
            return props
        },
        getAllSystemProperties: function () {
            return Pipeline.getDefaultSystemProperties().concat(Pipeline.getExtraSystemProperties())
        },
        getFilterableSystemProperties: function () {
            var props = [];
            _.each(systemProperties, function (prop) {
                if (prop.isFilterable) {
                    _translateSystemProperty(prop);
                    props.push(prop)
                }
            });
            return props
        },
        getGroupableSystemProperties: function () {
            var props = [];
            _.each(systemProperties, function (prop) {
                if (prop.isGroupable) {
                    _translateSystemProperty(prop);
                    props.push(prop)
                }
            });
            return props
        },
        isDefaultProperty: function (property) {
            var systemProperty = getSystemProperty(property);
            if (_.isNull(systemProperty) || _.isUndefined(systemProperty)) return false;
            return !!systemProperty.isDefault
        },
        getSystemProperty: function (property) {
            var systemProperty = getSystemProperty(property);
            if (systemProperty) {
                _translateSystemProperty(systemProperty);
                return systemProperty
            }
            return null
        },
        getPropertyName: function (property) {
            var systemProperty = this.getSystemProperty(property);
            if (systemProperty) return systemProperty.name;
            return property
        },
        getPropertyType: function (property) {
            var systemProperty = this.getSystemProperty(property);
            if (systemProperty) return systemProperty.type;
            return null
        },
        getPropertyFilterAndGroupType: function (property) {
            var systemProperty = this.getSystemProperty(property);
            if (systemProperty) return systemProperty.filterAndGroupType;
            return null
        },
        getPropertySortType: function (property) {
            var systemProperty = this.getSystemProperty(property);
            if (systemProperty) return systemProperty.sortType;
            return null
        },
        isPropertyEditable: function (property) {
            var systemProperty = this.getSystemProperty(property);
            if (systemProperty) return systemProperty.isEditable;
            return false
        },
        isPropertyGroupable: function (property) {
            var systemProperty = this.getSystemProperty(property);
            if (systemProperty) return systemProperty.isGroupable;
            return false
        },
        isPropertyFilterable: function (property) {
            var systemProperty =
                this.getSystemProperty(property);
            if (systemProperty) return systemProperty.isFilterable;
            return false
        }
    });

    function _translateSystemProperty(systemProperty) {
        if (!systemProperty.title) {
            systemProperty.title = BB.Locale.getString(systemProperty.name);
            systemProperty.name = BB.Locale.getString(systemProperty.name)
        }
    }
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    BB.Models.Pipeline.Templates = {
        get: function (path) {
            var pathParts = path.split("/");
            if (pathParts.length > 1) {
                var group = this.definitions[pathParts[0]];
                if (group) {
                    var template = group.templates[pathParts[1]];
                    if (!template.translated) {
                        template.friendlyName = BB.Locale.getString(template.friendlyName);
                        for (var i = 0; i < template.stageNames.length; i++) template.stageNames[i] = BB.Locale.getString(template.stageNames[i]);
                        for (var i = 0; i < template.fields.length; i++) template.fields[i].name = BB.Locale.getString(template.fields[i].name);
                        template.translated = true
                    }
                    return template
                }
            }
        },
        getAll: function () {},
        definitions: {
            "business": {
                name: "pipeline_template_group_business",
                templates: {
                    "sales": {
                        friendlyName: "pipeline_template_sales_name",
                        stageNames: ["pipeline_template_stage_lead", "pipeline_template_stage_prospect", "pipeline_template_stage_needs", "pipeline_template_stage_presentation", "pipeline_template_stage_objections", "pipeline_template_stage_negotiation",
                            "pipeline_template_stage_closed_won", "pipeline_template_stage_closed_lost"
                        ],
                        fields: [{
                            name: "pipeline_template_field_amount",
                            type: "TEXT_INPUT"
                        }],
                        systemProperties: ["assignedToSharingEntries"]
                    },
                    "hiring": {
                        friendlyName: "pipeline_template_hiring_name",
                        stageNames: ["pipeline_template_stage_resume", "pipeline_template_stage_phone", "pipeline_template_stage_interview", "pipeline_template_stage_negotiation", "pipeline_template_stage_hired", "pipeline_template_stage_passed", "pipeline_template_stage_rejected"],
                        fields: [{
                            name: "pipeline_template_field_position",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_start_date",
                            type: "DATE"
                        }],
                        systemProperties: ["assignedToSharingEntries"]
                    },
                    "support": {
                        friendlyName: "pipeline_template_support_name",
                        stageNames: ["pipeline_template_stage_new", "pipeline_template_stage_assigned", "pipeline_template_stage_working", "pipeline_template_stage_resolved"],
                        fields: [{
                            name: "pipeline_template_field_priority",
                            type: "TEXT_INPUT"
                        }],
                        systemProperties: ["assignedToSharingEntries"]
                    },
                    "productDevelopment": {
                        friendlyName: "pipeline_template_product_development_name",
                        stageNames: ["pipeline_template_stage_idea", "pipeline_template_stage_spec", "pipeline_template_stage_working", "pipeline_template_stage_launched"],
                        fields: [{
                            name: "pipeline_template_field_priority",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_due_date",
                            type: "DATE"
                        }],
                        systemProperties: ["assignedToSharingEntries"]
                    },
                    "bugTracking": {
                        friendlyName: "pipeline_template_bug_tracking_name",
                        stageNames: ["pipeline_template_stage_reported", "pipeline_template_stage_reproduceable", "pipeline_template_stage_working",
                            "pipeline_template_stage_launched"
                        ],
                        fields: [{
                            name: "pipeline_template_field_priority",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_due_date",
                            type: "DATE"
                        }],
                        systemProperties: ["assignedToSharingEntries"]
                    },
                    "dealflow": {
                        friendlyName: "pipeline_template_dealflow_name",
                        stageNames: ["pipeline_template_stage_lead", "pipeline_template_stage_pitched", "pipeline_template_stage_term_sheet", "pipeline_template_stage_signed", "pipeline_template_stage_passed"],
                        fields: [{
                            name: "pipeline_template_field_amount",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_valuation",
                            type: "TEXT_INPUT"
                        }],
                        systemProperties: ["assignedToSharingEntries"]
                    },
                    "fundraising": {
                        friendlyName: "pipeline_template_fundraising_name",
                        stageNames: ["pipeline_template_stage_lead", "pipeline_template_stage_pitched", "pipeline_template_stage_term_sheet", "pipeline_template_stage_signed", "pipeline_template_stage_money"],
                        fields: [{
                            name: "pipeline_template_field_amount",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_valuation",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_lead",
                            type: "PERSON"
                        }],
                        systemProperties: ["assignedToSharingEntries"]
                    }
                }
            },
            "personal": {
                name: "pipeline_template_group_personal",
                templates: {
                    "todo": {
                        friendlyName: "pipeline_template_todo_name",
                        stageNames: ["pipeline_template_stage_todo", "pipeline_template_stage_working", "pipeline_template_stage_done"],
                        fields: [{
                            name: "pipeline_template_field_priority",
                            type: "TEXT_INPUT"
                        }]
                    },
                    "jobHunting": {
                        friendlyName: "pipeline_template_job_hunting_name",
                        stageNames: ["pipeline_template_stage_applied", "pipeline_template_stage_interview",
                            "pipeline_template_stage_negotiation", "pipeline_template_stage_signed", "pipeline_template_stage_passed", "pipeline_template_stage_rejected"
                        ],
                        fields: [{
                            name: "pipeline_template_field_salary",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_start_date",
                            type: "DATE"
                        }]
                    },
                    "apartmentHunting": {
                        friendlyName: "pipeline_template_apartment_hunting_name",
                        stageNames: ["pipeline_template_stage_interested", "pipeline_template_stage_viewing", "pipeline_template_stage_applied", "pipeline_template_stage_negotiation", "pipeline_template_stage_signed",
                            "pipeline_template_stage_passed"
                        ],
                        fields: [{
                            name: "pipeline_template_field_rent",
                            type: "TEXT_INPUT"
                        }, {
                            name: "pipeline_template_field_start_date",
                            type: "DATE"
                        }, {
                            name: "pipeline_template_field_landlord",
                            type: "PERSON"
                        }]
                    },
                    "lending": {
                        friendlyName: "pipeline_template_lending_name",
                        stageNames: ["pipeline_template_stage_lent", "pipeline_template_stage_notified", "pipeline_template_stage_paid_back"],
                        fields: [{
                            name: "pipeline_template_field_amount",
                            type: "TEXT_INPUT"
                        }]
                    },
                    "tripPlanning": {
                        friendlyName: "pipeline_template_trip_name",
                        stageNames: ["pipeline_template_stage_options", "pipeline_template_stage_researched", "pipeline_template_stage_booking", "pipeline_template_stage_booked", "pipeline_template_stage_paid"],
                        fields: [{
                            name: "pipeline_template_field_amount",
                            type: "TEXT_INPUT"
                        }]
                    }
                }
            },
            "custom": {
                name: "pipeline_template_group_custom",
                templates: {
                    "blank": {
                        friendlyName: "pipeline_template_blank_name",
                        stageNames: ["pipeline_template_stage_default"],
                        fields: []
                    }
                }
            }
        }
    }
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        BB = Streak.BentoBox;
    var PipelineField = function (data, syncParent) {
        APIModel.call(this, data);
        var oldName = this.get("name");
        var self = this;
        this.bind("set", "name", function () {
            var name = self.get("name");
            if (name.length === 0) {
                Streak.Gmail.showNotice(BB.Locale.getString("empty_column_name"), 5E3);
                self.set("name", oldName);
                setTimeout(function () {
                    self.set("name", oldName)
                }, 1);
                return
            }
        });
        this.bind("save", null, function () {
            oldName =
                self.get("name")
        });
        this.syncParent = syncParent
    };
    PipelineField.prototype = Object.create(APIModel.prototype);
    _.extend(PipelineField.prototype, {
        keyName: "key",
        entityType: "Field",
        createProperties: ["name", "type", "pipelineKey"],
        modifyProperties: ["key", "pipelineKey"],
        nameProperty: "name",
        apiURLs: {
            create: "pipelines/<%= pipelineKey %>/fields",
            update: "pipelines/<%= pipelineKey %>/fields/<%= key %>",
            "delete": "pipelines/<%= pipelineKey %>/fields/<%= key %>"
        },
        preSaveFunction: function (objectToSave) {
            if (this.syncParent) {
                objectToSave["pipelineKey"] =
                    this.syncParent.key();
                return true
            }
        },
        preExecuteDeleteFunction: function (objectToDelete) {
            if (this.syncParent) {
                objectToDelete["pipelineKey"] = this.syncParent.key();
                return true
            }
        }
    });
    PipelineField.create = function (data, syncParent) {
        return new PipelineField(data, syncParent)
    };
    BB.Models.PipelineField = PipelineField
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var Pipeline = BB.Models.Pipeline;
    var PipelineLinkedBoxesProperty = Streak.Class.subclass({
        superclass: Streak.Object,
        _initialize: function () {
            this._setupBinding();
            return this
        },
        _setupBinding: function () {
            var self = this;
            BB.Data.getAllPipelines().bind("add", function (pipeline) {
                self._generateSystemPropertyDefinition(pipeline)
            });
            self._generateSystemPropertyDefinition()
        },
        _generateSystemPropertyDefinition: function (pipeline) {
            var baseDefinition = _.clone(linkedBoxSystemPropertyDefinition);
            if (pipeline) {
                baseDefinition.title = pipeline.displayName();
                baseDefinition.property = "linkedBoxes." + pipeline.key()
            } else {
                baseDefinition.title = BB.Locale.getString("all_linked_boxes");
                baseDefinition.property = "linkedBoxes"
            }
            baseDefinition.name = baseDefinition.title;
            Pipeline.systemProperties.push(baseDefinition)
        }
    });
    var linkedBoxSystemPropertyDefinition = {
        type: "COMPUTED",
        sortType: "TEXT",
        filterAndGroupType: "TEXT",
        isEditable: true,
        isGroupable: true,
        isFilterable: true,
        isLinkedProperty: true,
        group: "Z_LINKED_BOXES",
        computeFunction: function (box) {
            var linkedBoxes = _getLinkedBoxesForPipeline(box, this);
            var number = linkedBoxes.length;
            if (number === 0) return "";
            var retString = [];
            retString.push('<span class="streak__linkedBoxes_wrapper');
            if (number > 1) retString.push(" streak__linkedBoxes_wrapper_moreThanOne");
            retString.push('">');
            retString.push('<span class="streak__linkedBoxes_names">');
            for (var ii = 0; ii < linkedBoxes.length; ii++) {
                retString.push('<span class="streak__linkedBoxes_name">');
                if (ii > 0) retString.push(", ");
                retString.push(linkedBoxes[ii].displayName());
                retString.push("</span>")
            }
            retString.push("</span>");
            if (number > 1) {
                retString.push('<span class="streak__linkedBoxes_numberOfBoxes">');
                retString.push("(" + number + ")");
                retString.push("</span>")
            }
            retString.push("</span>");
            return retString.join("")
        },
        filterValueFunction: function (box) {
            var boxes = _getLinkedBoxesForPipeline(box, this);
            return _.map(boxes,
                function (box) {
                    return box.displayName()
                }).join(" ")
        },
        groupByFunction: function (box) {
            var boxes = _getLinkedBoxesForPipeline(box, this);
            return _.map(boxes, function (box) {
                return box.displayName()
            })
        },
        sortFunction: function (box) {
            var boxes = _getLinkedBoxesForPipeline(box, this);
            return _.map(boxes, function (box) {
                return box.displayName()
            }).join(" ")
        }
    };

    function _getLinkedBoxesForPipeline(box, definition) {
        var parts = definition.property.split(".");
        var pipelineKey;
        if (parts.length > 1) pipelineKey = definition.property.split(".")[1];
        var boxKeys = box.get("linkedBoxKeys");
        return _.chain(boxKeys).map(function (boxKey) {
            return BB.Data.getBox(boxKey)
        }).filter(function (linkedBox) {
            return linkedBox && (!pipelineKey || linkedBox.getPipeline().key() === pipelineKey)
        }).sort(function (box) {
            return box.displayName()
        }).value()
    }
    Pipeline.getLinkedBoxSystemColumn = function (pipeline) {
        if (pipeline) return Pipeline.getSystemProperty("linkedBoxes." + pipeline.key());
        return Pipeline.getSystemProperty("linkedBoxes")
    };
    Streak.DependencyManager.addFunction({
        functionKey: "pipelineLinkedBoxesPropertyInitialized",
        functionToCall: function (callback) {
            Streak.Library.set("BentoBox.Models.Pipeline.PipelineLinkedBoxesProperty", new PipelineLinkedBoxesProperty);
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.pipelines.collectionCreated", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Pipeline = BB.Models.Pipeline;
    var allEventCallbacks = [];
    var fieldMap = {};
    var Box = function (data) {
        APIModel.call(this, data);
        var self = this;
        this.bind("set", "boxKey", function () {
            var fields = self._getFields();
            if (fields)
                for (var i = 0; i < fields.length; i++) fields[i].set("boxKey", self.key())
        })
    };
    Box.prototype = Object.create(APIModel.prototype);
    _.extend(Box.prototype, {
        keyName: "boxKey",
        nameProperty: "name",
        entityType: "Case",
        typeName: "box",
        createProperties: ["pipelineKey", "name", "stageKey"],
        apiURLs: {
            get: "boxes/<%= boxKey %>",
            update: "boxes/<%= boxKey %>",
            create: "pipelines/<%= pipelineKey %>/boxes",
            "delete": "boxes/<%= boxKey %>"
        },
        trigger: function () {
            APIModel.prototype.trigger.apply(this, _.toArray(arguments));
            for (var ii = 0; ii < allEventCallbacks.length; ii++) allEventCallbacks[ii].apply(null, [this].concat(_.toArray(arguments)))
        },
        updateMap: {
            fields: function (newObj) {
                var newFields = newObj.fields;
                var fieldsAdded = false;
                var updated = false;
                for (var fieldKey in newFields) {
                    var field = this._getField(fieldKey);
                    if (field) {
                        field.set("boxKey", this.key());
                        if (JSON.stringify(field.displayName()) !== JSON.stringify(newFields[fieldKey])) updated = updated || field.syncedSet("value", newFields[fieldKey])
                    } else {
                        if (!this.getObj().fields) this.getObj().fields = {};
                        this.getObj().fields[fieldKey] = newFields[fieldKey]
                    }
                }
                return updated
            }
        },
        getThreads: function () {
            return Streak.BentoBox.Data.getGmailThreadGroup(this.key())
        },
        getProcessedFieldValue: function (fieldKey) {
            var field =
                this._getField(fieldKey);
            if (field) return field.getProcessedValue();
            else return this._getProcessedFieldValue(fieldKey)
        },
        _getProcessedFieldValue: function (fieldKey) {
            var val = this.getFieldValue(fieldKey);
            if (!val) return "";
            switch (this.getPipeline().getField(fieldKey).get("type")) {
            case "TEXT_INPUT":
                val = val.replace(/<br\s*\/?>|<div>/img, "\n").replace("&nbsp;", " ");
                break;
            case "DATE":
                break;
            case "PERSON":
                try {
                    var list = val;
                    var arr = [];
                    for (var i = 0; i < list.length; i++) arr.push(list[i].displayName);
                    val = arr.join(",")
                } catch (err) {
                    val =
                        ""
                }
                break
            }
            return val
        },
        getFieldTextValue: function (fieldKey) {
            var val = this._getFieldValue(fieldKey);
            switch (this.getPipeline().getField(fieldKey).get("type")) {
            case "TEXT_INPUT":
                val = Streak.$.cleanText(val, false);
                break;
            case "DATE":
                if (val) val = Date.ccreate(val).customFormat("export");
                else val = "";
                break;
            case "PERSON":
                try {
                    var list = val;
                    var arr = [];
                    for (var i = 0; i < list.length; i++) {
                        var newVal = list[i].displayName;
                        if (list[i].email) newVal += "<" + list[i].email + ">";
                        arr.push(newVal)
                    }
                    val = arr.join(",")
                } catch (err) {
                    val = ""
                }
                break
            }
            return val
        },
        getFieldDisplayValue: function (fieldKey) {
            var val = this._getFieldValue(fieldKey);
            switch (this.getPipeline().getField(fieldKey).get("type")) {
            case "TEXT_INPUT":
                val = Streak.$.getTextHTML(val);
                break;
            case "DATE":
                var date = val ? Date.create(val) : null,
                    dateText = val ? date.prettyDate(true) : null;
                val = dateText || "";
                break;
            case "PERSON":
                try {
                    var list = val;
                    var arr = [];
                    for (var i = 0; i < list.length; i++) {
                        var newVal = list[i].displayName;
                        if (list[i].email) newVal += "<" + list[i].email + ">";
                        arr.push(newVal)
                    }
                    val = arr.join(",")
                } catch (err) {
                    val =
                        ""
                }
                break
            }
            return val
        },
        getFieldValue: function (fieldKey) {
            var field = this._getField(fieldKey);
            if (field) return field.get("value");
            return this._getFieldValue(fieldKey)
        },
        _getFieldValue: function (fieldKey) {
            var fields = this.getObj().fields;
            if (!fields) return "";
            else return fields[fieldKey]
        },
        getField: function (fieldKey) {
            var fields = this._getFields();
            if (!fields) fieldMap[this._getFieldMapKey()] = [];
            var field = _.find(this._getFields(), function (field) {
                return field.key() === fieldKey
            });
            if (!field) {
                var value = "";
                if (this.getObj().fields)
                    if (this.getObj().fields[fieldKey]) value =
                        this.getObj().fields[fieldKey];
                field = BB.Models.BoxField.create({
                    key: fieldKey,
                    boxKey: this.key(),
                    value: value,
                    type: this.getPipeline().getField(fieldKey).get("type")
                }, this);
                field.bind("preCreate", null, function () {
                    field.set("boxKey", this.key())
                }.bind(this), this.guid);
                var previousValue = this._getFieldValue(fieldKey);
                field.bind("set", "value", function () {
                    if (!this.getObj().fields) this.getObj().fields = {};
                    var previousValue = this.getFieldValue(fieldKey);
                    this.getObj().fields[fieldKey] = field.get("value");
                    this.trigger("change",
                        null, "fieldKey", previousValue, fieldKey);
                    previousValue = this._getFieldValue(fieldKey)
                }.bind(this), this.guid);
                field.bind("save", null, function () {
                    this.trigger("save")
                }.bind(this), this.guid);
                this._getFields().push(field)
            }
            return field
        },
        _getField: function (fieldKey) {
            if (!this._getFields()) return null;
            return _.find(this.getFields(), function (field) {
                return field.key() === fieldKey
            })
        },
        getFields: function () {
            var array = [];
            var fields = this.getPipeline().getFields();
            if (fields)
                for (var i = 0; i < fields.length; i++) array.push(this.getField(fields[i].key()));
            return array
        },
        _getFields: function () {
            if (!fieldMap[this._getFieldMapKey()]) return null;
            return fieldMap[this._getFieldMapKey()]
        },
        _getFieldMapKey: function () {
            return this.guid
        },
        clearFields: function () {
            this.getObj().fields = {};
            delete fieldMap[this._getFieldMapKey()]
        },
        getStage: function () {
            var pipeline = this.getPipeline();
            if (pipeline) return pipeline.getStage(this.get("stageKey"));
            return null
        },
        getStageName: function () {
            return this.getStage().displayName()
        },
        getAssignedToSharingEntries: function () {
            return this.get("assignedToSharingEntries")
        },
        getPipeline: function () {
            return BB.Data.getPipeline(this.get("pipelineKey"))
        },
        handle409Conflict: function (response) {
            this.trigger("assignedTo", "setToUnsharedContacts", response)
        }
    });
    Box.create = function (data) {
        return new Box(data)
    };
    Box.bindToAllEvents = function (callback) {
        allEventCallbacks.push(callback)
    };
    Box.createCollection = function (pipelineKey, initializedCallback) {
        var c = new Collection;
        c.init({
            entityType: "Case",
            key: "boxKey",
            keyName: "boxKey",
            keyValue: pipelineKey,
            makeModel: function (obj) {
                return BB.Models.Box.create(obj)
            },
            apiURL: pipelineKey ? "pipelines/" + pipelineKey + "/boxes" : "/boxes",
            onlyUnique: true,
            isStored: false
        }, initializedCallback);
        return c
    };
    BB.Models.Box = Box
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Pipeline = BB.Models.Pipeline;
    _.extend(BB.Models.Box.prototype, {
        getProcessedValue: function (property) {
            var type = Pipeline.getPropertyType(property);
            var val = this.get(property);
            switch (type) {
            case "DATE":
                var date = val ? Date.create(val) : null,
                    dateText = val ? date.prettyDate(true) : null;
                return dateText || "";
                break;
            case "NUMBER":
                if (!val) val = 0;
                return val + "";
                break;
            case "COMPUTED":
                var systemProperty =
                    Pipeline.getSystemProperty(property);
                return systemProperty.computeFunction(this);
                break;
            default:
                return val + ""
            }
        },
        getSortValue: function (property) {
            if (property === "stageKey") return this.getStageName();
            var type = Pipeline.getPropertyType(property);
            var val = this.get(property);
            switch (type) {
            case "DATE":
                return parseInt(val);
                break;
            case "NUMBER":
                if (!val) val = 0;
                return parseFloat(val);
                break;
            case "COMPUTED":
                var systemProperty = Pipeline.getSystemProperty(property);
                return systemProperty.sortFunction.call(systemProperty,
                    this);
                break;
            default:
                return val
            }
        },
        getGroupByValue: function (property) {
            var type = Pipeline.getPropertyType(property);
            var val = this.get(property);
            var ret = [];
            if (property === "stageKey") {
                if (this.getStage()) ret.push(this.get(property))
            } else switch (type) {
            case "COMPUTED":
                var systemProperty = Pipeline.getSystemProperty(property);
                ret = systemProperty.groupByFunction.call(systemProperty, this);
                break;
            default:
                ret.push(this.getProcessedValue(property))
            }
            return ret || ["no_value"]
        },
        getTextValue: function (property) {
            var systemProperty =
                Pipeline.getSystemProperty(property);
            if (!systemProperty) return "";
            if (systemProperty.type === "DATE") {
                var val = this.get(property);
                if (val) return Date.create(val).customFormat("export");
                else return ""
            } else if (systemProperty.textValueFunction) return systemProperty.textValueFunction.call(systemProperty, this);
            else return this.getProcessedValue(property)
        },
        getDisplayValue: function (property) {
            var systemProperty = Pipeline.getSystemProperty(property);
            if (!systemProperty) return "";
            if (systemProperty.type === "DATE") {
                var val =
                    this.get(property);
                var date = val ? Date.create(val) : null,
                    dateText = val ? date.prettyDate(true) : null;
                return dateText || ""
            } else if (systemProperty.textValueFunction) return Streak.$.getTextHTML(systemProperty.textValueFunction.call(systemProperty, this));
            else return Streak.$.getTextHTML(this.getProcessedValue(property))
        },
        getFilterValue: function (property) {
            var systemProperty = Pipeline.getSystemProperty(property);
            if (!systemProperty) return "";
            if (systemProperty.filterValueFunction) return systemProperty.filterValueFunction.call(systemProperty,
                this);
            else return this.get(property)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var ClientGmailThread = function (data) {
        Model.call(this, data);
        this.notSynced = true
    };
    ClientGmailThread.prototype = Object.create(Model.prototype);
    _.extend(ClientGmailThread.prototype, {
        keyName: "threadGmailId"
    });
    ClientGmailThread.create = function (data) {
        return new ClientGmailThread(data)
    };
    ClientGmailThread.createCollection = function () {
        var c = new Collection;
        c.init({
            key: "threadGmailId",
            onlyUnique: true,
            makeModel: function (obj) {
                return ClientGmailThread.create(obj)
            }
        });
        return c
    };
    BB.Models.ClientGmailThread = ClientGmailThread
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        APIRequester = Streak.APIRequester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var ThreadInfo = function (data) {
        APIModel.call(this, data)
    };
    ThreadInfo.prototype = Object.create(APIModel.prototype);
    _.extend(ThreadInfo.prototype, {
        keyName: "threadGmailId",
        notSynced: true,
        refresh: function () {
            var self = this;
            this.addSyncedCallback(function () {
                APIRequester.getUrl("threadinfo/" + this.key(), this.handleSuccessfulResponse.bind(this), this.handleErrorResponse.bind(this))
            })
        },
        handleSuccessfulResponse: function (res) {
            this._handleBox(res.box);
            this._handleTrackedThread(res.trackedThread);
            this.trigger("modified");
            this.performNextSyncOperation()
        },
        _handleBox: function (rawBox) {
            if (!rawBox) {
                this.set("box", null);
                return
            }
            var box = BB.Data.addBox(rawBox);
            this.set("box", box)
        },
        _handleTrackedThread: function (rawTrackedThread) {
            if (!rawTrackedThread) {
                this.set("trackedThread", null);
                return
            }
            var trackedThread = this.get("trackedThread");
            if (trackedThread) {
                trackedThread.update(rawTrackedThread);
                return
            }
            trackedThread =
                BB.Models.TrackedThread.create(rawTrackedThread);
            this.set("trackedThread", trackedThread)
        },
        updateFromListCall: function (rawThreadInfo) {
            if (!rawThreadInfo.box) this.set("box", null);
            else {
                var box = BB.Data.getBox(rawThreadInfo.box.boxKey);
                if (box) this.set("box", box)
            }
            this.set("listTrackedThread", rawThreadInfo.trackedThread);
            this.setTimeLastSynced()
        },
        needsToSync: function () {
            return this.get("trackedThread") && !this.get("listTrackedThread")
        }
    });
    ThreadInfo.create = function (data) {
        return new ThreadInfo(data)
    };
    ThreadInfo.createCollection =
        function () {
            var c = new Collection;
            c.init({
                entityType: "ThreadInfo",
                key: "threadGmailId",
                onlyUnique: true,
                makeModel: function (obj) {
                    return ThreadInfo.create(obj)
                }
            });
            return c
    };
    BB.Models.ThreadInfo = ThreadInfo
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var ImportJob = function (data) {
        APIModel.call(this, data)
    };
    ImportJob.prototype = Object.create(APIModel.prototype);
    _.extend(ImportJob.prototype, {
        keyName: "importJobKey",
        entityType: "ImportJob",
        typeName: "ImportJob",
        createProperties: ["pipelineKey"],
        apiURLs: {
            get: "importjobs/<%= importJobKey %>",
            update: "importjobs/<%= importJobKey %>",
            create: "pipelines/<%= pipelineKey %>/importjobs",
            "delete": "importjobs/<%= importJobKey %>"
        }
    });
    ImportJob.create = function (data) {
        return new ImportJob(data)
    };
    ImportJob.createCollection = function (pipelineKey) {
        var c = new Collection;
        c.init({
            entityType: "ImportJob",
            keyName: pipelineKey ? "pipelineKey" : null,
            keyValue: pipelineKey ? pipelineKey : null,
            key: "importJobKey",
            onlyUnique: true,
            apiURL: "pipelines/" + pipelineKey + "/importjobs",
            refreshParameters: {
                statusList: ["UPLOADED", "VERIFIED", "PROCESSING", "INVALID_FILE", "ERROR_IMPORTING"]
            },
            makeModel: function (obj) {
                return ImportJob.create(obj)
            }
        });
        return c
    };
    BB.Models.ImportJob = ImportJob
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var GmailThread = function (data) {
        APIModel.call(this, data)
    };
    GmailThread.prototype = Object.create(APIModel.prototype);
    _.extend(GmailThread.prototype, {
        keyName: "gmailThreadKey",
        entityType: "GmailThread",
        typeName: "thread",
        createProperties: ["boxKey"],
        apiURLs: {
            get: "threads/<%= gmailThreadKey %>",
            create: "boxes/<%= boxKey %>/threads",
            update: "threads/<%= gmailThreadKey %>",
            "delete": "threads/<%= gmailThreadKey %>"
        }
    });
    GmailThread.create = function (data) {
        return new GmailThread(data)
    };
    GmailThread.createCollection = function (boxKey) {
        var c = new Collection;
        c.init({
            entityType: "GmailThread",
            keyName: boxKey ? "boxKey" : null,
            keyValue: boxKey ? boxKey : null,
            key: "gmailThreadKey",
            onlyUnique: true,
            makeModel: function (obj) {
                return GmailThread.create(obj)
            },
            apiURL: "boxes/" + boxKey + "/threads"
        });
        return c
    };
    BB.Models.GmailThread = GmailThread
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Gmail = Streak.Gmail;
    var SendLater = function (data) {
        APIModel.call(this, data);
        this._numberOfReplies = 0
    };
    SendLater.prototype = Object.create(APIModel.prototype);
    _.extend(SendLater.prototype, {
        keyName: "sendLaterKey",
        entityType: "SendLater",
        typeName: "sendLater",
        createProperties: ["gmailDraftId", "sendDate", "subject", "sendLaterType"],
        apiURLs: {
            get: "sendlaters/<%= sendLaterKey %>",
            update: "sendlaters/<%= sendLaterKey %>",
            create: "sendlaters",
            "delete": "sendlaters/<%= sendLaterKey %>"
        },
        link: function () {
            return Gmail.Constants.Drafts + "/" + this.get("gmailDraftId")
        },
        incrementNumberOfReplies: function () {
            this._numberOfReplies += 1
        },
        decrementNumberOfReplies: function () {
            this._numberOfReplies -= 1;
            if (this._numberOfReplies === 0) this.del()
        }
    });
    SendLater.create = function (data) {
        return new SendLater(data)
    };
    SendLater.createCollection = function (caseKey) {
        var c = new Collection;
        c.init({
            entityType: "SendLater",
            key: "sendLaterKey",
            onlyUnique: true,
            makeModel: function (obj) {
                return SendLater.create(obj)
            },
            apiURL: "sendlaters",
            refreshParameters: {
                sendLaterStatusList: JSON.stringify(["SCHEDULED", "ERROR_ON_SEND"])
            }
        });
        return c
    };
    BB.Models.SendLater = SendLater
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var Stage = function (data, syncParent) {
        APIModel.call(this, data);
        var self = this;
        var oldStageName = data.name;
        this.bind("set", "name", function () {
            var pipeline = BB.Data.getPipeline(self.get("pipelineKey"));
            if (!pipeline) return;
            var stages = pipeline.getStages().ordered;
            for (var i = 0; i < stages.length; i++)
                if (stages[i].displayName() === self.get("name"))
                    if (stages[i].key() !==
                        self.key()) {
                        Streak.Gmail.showNotice(BB.Locale.getString("same_stage_name"), 5E3);
                        self.set("name", oldStageName);
                        return
                    }
            if (pipeline) pipeline.trigger("stageChange")
        });
        this.bind("save", null, function () {
            oldStageName = self.get("name")
        });
        this.bind("saveRejected", null, function () {
            self.set("name", oldStageName)
        });
        this.syncParent = syncParent
    };
    Stage.prototype = Object.create(APIModel.prototype);
    _.extend(Stage.prototype, {
        keyName: "key",
        entityType: "Stage",
        createProperties: ["name", "pipelineKey"],
        modifyProperties: ["key",
            "pipelineKey"
        ],
        nameProperty: "name",
        apiURLs: {
            get: "pipelines/<%= pipelineKey %>/stages/<%= key %>",
            update: "pipelines/<%= pipelineKey %>/stages/<%= key %>",
            "delete": "pipelines/<%= pipelineKey %>/stages/<%= key %>",
            create: "pipelines/<%= pipelineKey %>/stages"
        },
        preSaveFunction: function () {
            var pipeline = BB.Data.getPipeline(this.get("pipelineKey"));
            if (pipeline) {
                var existing = pipeline.getStageByName(this.displayName());
                if (existing)
                    if (existing.key() !== this.key()) {
                        Streak.Gmail.showNotice(BB.Locale.getString("same_stage_name"),
                            5E3);
                        return false
                    }
                return true
            }
            return false
        },
        preDeleteFunction: function () {
            if (this.canDelete()) return true;
            else {
                Streak.Gmail.showNotice(BB.Locale.getString("stage_empty"), 5E3);
                return false
            }
        },
        canDelete: function () {
            var pipeline = BB.Data.getPipeline(this.get("pipelineKey"));
            if (!pipeline) return false;
            var boxes = BB.Data.getPipelineBoxes(this.get("pipelineKey"));
            if (boxes && boxes.length > 0) boxes = BB.Data.getPipelineBoxes(this.get("pipelineKey")).filter(_.bind(function (box) {
                    return box.get("stageKey") === this.key()
                },
                this));
            if (boxes && boxes.length > 0) return false;
            return true
        },
        preExecuteDeleteFunction: function (objectToDelete) {
            if (this.syncParent) {
                objectToDelete["pipelineKey"] = this.syncParent.key();
                return true
            }
        }
    });
    Stage.create = function (data, syncParent) {
        return new Stage(data, syncParent)
    };
    BB.Models.Stage = Stage
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var Reminder = function (data) {
        APIModel.call(this, data)
    };
    Reminder.prototype = Object.create(APIModel.prototype);
    _.extend(Reminder.prototype, {
        keyName: "reminderKey",
        entityType: "Reminder",
        createProperties: ["remindDate", "boxKey", "workflowKey", "message", "remindFollowers"],
        apiURLs: {
            get: "reminders/<%= reminderKey %>",
            update: "reminders/<%= reminderKey %>",
            create: "boxes/<%= boxKey %>/reminders",
            "delete": "reminders/<%= reminderKey %>"
        }
    });
    Reminder.create = function (data) {
        return new Reminder(data)
    };
    Reminder.createCollection = function (boxKey) {
        var c = new Collection;
        c.init({
            entityType: "Reminder",
            key: "reminderKey",
            onlyUnique: true,
            makeModel: function (obj) {
                return Reminder.create(obj)
            },
            apiURL: "boxes/" + boxKey + "/reminders"
        });
        return c
    };
    BB.Models.Reminder = Reminder
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        BB = Streak.BentoBox;
    var BoxField = function (data, syncParent) {
        APIModel.call(this, data);
        this.bind("set", "value", function () {
            this.setProcessedValue()
        }.bind(this));
        this.setProcessedValue();
        this.syncParent = syncParent
    };
    BoxField.prototype = Object.create(APIModel.prototype);
    _.extend(BoxField.prototype, {
        keyName: "key",
        entityType: "Field",
        createProperties: ["boxKey"],
        modifyProperties: ["key", "boxKey"],
        nameProperty: "value",
        apiURLs: {
            update: "boxes/<%= boxKey %>/fields/<%= key %>"
        },
        updateMap: {
            "value": function (newObj) {
                var currValue = this.getProcessedValue();
                var newValue;
                switch (this.get("type")) {
                case "TEXT_INPUT":
                    newValue = newObj.value.replace(/<br\s*\/?>|<div>/img, "\n").stripTags().replace("&nbsp;", " ");
                    break;
                case "DATE":
                    newValue = newObj.value;
                    break;
                case "PERSON":
                    try {
                        var list = newObj.value;
                        var arr = [];
                        for (var i = 0; i < list.length; i++) arr.push(list[i].displayName);
                        newValue = arr.join(",")
                    } catch (err) {
                        newValue = ""
                    }
                    break
                }
                if (JSON.compare(currValue,
                    newValue)) {
                    this.set("value", newObj.value);
                    return true
                }
            }
        },
        preSaveFunction: function (objectToSave) {
            if (this.syncParent) {
                objectToSave["boxKey"] = this.syncParent.key();
                return true
            }
        },
        getProcessedValue: function () {
            return this.processedValue
        },
        setProcessedValue: function () {
            switch (this.get("type")) {
            case "TEXT_INPUT":
                this.processedValue = this.displayName().replace(/<br\s*\/?>|<div>/img, "\n").stripTags().replace("&nbsp;", " ");
                break;
            case "DATE":
                this.processedValue = this.displayName();
                break;
            case "PERSON":
                try {
                    var list =
                        this.displayName();
                    var arr = [];
                    for (var i = 0; i < list.length; i++) arr.push(list[i].displayName);
                    this.processedValue = arr.join(",")
                } catch (err) {
                    this.processedValue = ""
                }
                break
            }
        }
    });
    BoxField.create = function (data, syncParent) {
        return new BoxField(data, syncParent)
    };
    BB.Models.BoxField = BoxField
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var Snippet = function (data) {
        APIModel.call(this, data)
    };
    Snippet.prototype = Object.create(APIModel.prototype);
    _.extend(Snippet.prototype, {
        keyName: "snippetKey",
        entityType: "Snippet",
        typeName: "snippet",
        createProperties: ["snippetName", "snippetText", "subject"],
        requiredCreate: ["snippetName", "snippetText"],
        nameProperty: "snippetName",
        apiURLs: {
            get: "snippets/<%= snippetKey %>",
            update: "snippets/<%= snippetKey %>",
            create: "snippets",
            "delete": "snippets/<%= snippetKey %>"
        },
        getText: function () {
            var text = this.get("snippetText");
            if (text && text.value) text = text.value;
            if (this.get("snippetType") === "TEXT") text = Streak.$.getTextHTML(text);
            return text
        },
        preSaveFunction: function (serverObject) {
            if (!serverObject.snippetText) return false;
            if (!serverObject.snippetName) return false;
            serverObject.partOfPipeline = !! serverObject.pipelineKey;
            return true
        }
    });
    Snippet.create = function (data) {
        return new Snippet(data)
    };
    Snippet.createCollection = function () {
        var c = new Collection;
        c.init({
            entityType: "Snippet",
            key: "snippetKey",
            onlyUnique: true,
            makeModel: function (obj) {
                return Snippet.create(obj)
            },
            apiURL: "snippets"
        });
        return c
    };
    BB.Models.Snippet = Snippet
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var File = function (data) {
        APIModel.call(this, data)
    };
    File.prototype = Object.create(APIModel.prototype);
    _.extend(File.prototype, {
        keyName: "fileKey",
        entityType: "File",
        typeName: "File",
        nameProperty: "fileName",
        apiURLs: {
            get: "files/<%= fileKey %>",
            "delete": "files/<%= fileKey %>"
        }
    });
    File.create = function (data) {
        return new File(data)
    };
    File.createCollection = function (boxKey) {
        var c =
            new Collection;
        c.init({
            entityType: "File",
            keyName: boxKey ? "boxKey" : null,
            keyValue: boxKey ? boxKey : null,
            key: "fileKey",
            onlyUnique: true,
            apiURL: "boxes/" + boxKey + "/files",
            makeModel: function (obj) {
                return File.create(obj)
            }
        });
        return c
    };
    BB.Models.File = File
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var User = function (data) {
        APIModel.call(this, data);
        this.streakSettings = null
    };
    User.prototype = Object.create(APIModel.prototype);
    _.extend(User.prototype, {
        entityType: "User",
        keyName: "userKey",
        nameProperty: "displayName",
        apiURLs: {
            get: "users/me",
            update: "users/<%= userKey %>"
        },
        getHeadsUpSections: function () {
            return BB.UserSettings.getSetting("headsUp/sections") || []
        },
        saveHeadsUpSections: function (headsUpSections) {
            var sectionsToSave = headsUpSections || BB.UserSettings.getSetting("headsUp/sections");
            BB.UserSettings.setSetting("headsUp/sections", sectionsToSave);
            BB.UserSettings.saveSettings()
        },
        getEmail: function () {
            return this.get("email").toLowerCase()
        },
        getDomain: function () {
            return this.get("email").split("@")[1]
        }
    });
    User.create = function (data) {
        return new User(data)
    };
    BB.Models.User = User
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var UserUISettings = function (data) {
        APIModel.call(this, data)
    };
    UserUISettings.prototype = Object.create(APIModel.prototype);
    _.extend(UserUISettings.prototype, {
        keyName: "userUISettingsKey",
        entityType: "userUISettings",
        typeName: "userUISettings",
        apiURLs: {
            get: "users/me/uisettings",
            update: "users/me/uisettings/<%= userUISettingsKey %>"
        },
        alwaysRefresh: function () {
            return true
        }
    });
    UserUISettings.create = function (data) {
        return new UserUISettings(data)
    };
    BB.Models.UserUISettings = UserUISettings
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var StreakSettings = function (data) {
        APIModel.call(this, data)
    };
    StreakSettings.prototype = Object.create(APIModel.prototype);
    _.extend(StreakSettings.prototype, {
        entityType: "StreakSettings",
        keyName: "streakSettingsKey",
        apiURLs: {
            get: "users/me/settings",
            update: "users/me/settings/<%= streakSettingsKey %>"
        },
        setValueByKey: function (pageKey, sectionKey, settingKey, propertyKey,
            newValue) {
            var pages = this.getObj().pages;
            var page = _.find(pages, function (_page) {
                return _page.key === pageKey
            });
            var section = _.find(page.sections, function (_section) {
                return _section.key === sectionKey
            });
            var setting;
            _.each(section.settings, function (s) {
                if (s.key === settingKey) s[propertyKey] = newValue;
                else _.each(s.subsettings, function (subsetting) {
                    if (subsetting.key === settingKey) subsetting[propertyKey] = newValue
                })
            });
            this.set("pages", pages)
        },
        setSelectedValues: function (pageKey, sectionKey, settingKey, newValue) {
            this.setValueByKey(pageKey,
                sectionKey, settingKey, "selectedValues", newValue);
            BB.Tracker.trackStreakActive({
                widgetContext: "streakSettigns"
            }, {
                "settingKey": settingKey
            }, {
                eventName: "setSelectedValues"
            });
            this.save()
        },
        setSettingValue: function (settingName, value) {
            var setting = this.getSetting(settingName);
            setting.selectedValues = value;
            this.save()
        },
        getPages: function () {
            return this.get("pages")
        },
        forceRefresh: function () {
            try {
                this.refresh()
            } catch (e) {}
        },
        getSetting: function (settingName) {
            var _setting;
            var pages = this.get("pages");
            _.each(pages, function (page) {
                _.each(page.sections,
                    function (section) {
                        _.each(section.settings, function (setting) {
                            if (setting.displayName === settingName) _setting = setting;
                            else _.each(setting.subsettings, function (subsetting) {
                                if (subsetting.displayName === settingName) _setting = subsetting
                            })
                        })
                    })
            });
            return _setting
        },
        settingIsEnabled: function (settingName) {
            var setting = this.getSetting(settingName);
            if (_.isDefined(setting)) {
                var settingSelectedValues = setting.selectedValues;
                if (_.contains(setting.selectedValues, "default")) settingSelectedValues = setting.defaultValues;
                if (_.contains(settingSelectedValues,
                    "enabled")) return true
            }
            return false
        }
    });
    StreakSettings.create = function (data) {
        return new StreakSettings(data)
    };
    BB.Models.StreakSettings = StreakSettings
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Locale = BB.Locale;
    var EmailFilter = function (data) {
        APIModel.call(this, data)
    };
    EmailFilter.prototype = Object.create(APIModel.prototype);
    _.extend(EmailFilter.prototype, {
        keyName: "key",
        nameProperty: "value",
        createProperties: ["type", "value", "caseKey"],
        apiURLs: {
            get: "emailfilters/<%= key %>",
            "delete": "emailfilters/<%= key %>",
            create: "emailfilters"
        },
        matches: function (emailAddress) {
            var type =
                this.get("type"),
                value = this.get("value");
            if (type === "EMAIL_ADDRESS_FILTER") return value === emailAddress;
            else if (type === "DOMAIN_FILTER") return emailAddress.endsWith(value);
            else return false
        },
        filterDisplayHtml: function () {
            var type = this.get("type"),
                value = this.get("value");
            if (type === "EMAIL_ADDRESS_FILTER") return Locale.getString("email_suggestion_creation_one_email", {
                email: value
            });
            else if (type === "DOMAIN_FILTER") return Locale.getString("email_suggestion_creation_one_domain", {
                domain: value
            });
            else return "Error."
        }
    });
    EmailFilter.create = function (data) {
        return new EmailFilter(data)
    };
    EmailFilter.createCollection = function (boxKey) {
        var c = new Collection;
        c.init({
            key: "boxKey",
            onlyUnique: true,
            apiURL: "boxes/" + boxKey + "/emailfilters",
            makeModel: function (obj) {
                return EmailFilter.create(obj)
            }
        });
        return c
    };
    BB.Models.EmailFilter = EmailFilter
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var EmailFilterBlacklist = function (data) {
        APIModel.call(this, data)
    };
    EmailFilterBlacklist.prototype = Object.create(APIModel.prototype);
    _.extend(EmailFilterBlacklist.prototype, {
        keyName: "key",
        nameProperty: "blacklistEmail",
        createProperties: ["blacklistEmail"],
        apiURLs: {
            get: "emailfilterpromoblacklists/<%= key %>",
            "delete": "emailfilterpromoblacklists/<%= key %>",
            create: "emailfilterpromoblacklists",
            update: "emailfilterpromoblacklists/<%= key %>"
        },
        matches: function (emailAddress) {
            return this.get("blacklistEmail") === emailAddress
        }
    });
    EmailFilterBlacklist.create = function (data) {
        return new EmailFilterBlacklist(data)
    };
    EmailFilterBlacklist.createCollection = function () {
        var c = new Collection;
        c.init({
            key: "key",
            onlyUnique: true,
            apiURL: "emailfilterpromoblacklists",
            makeModel: function (obj) {
                return EmailFilterBlacklist.create(obj)
            }
        });
        return c
    };
    BB.Models.EmailFilterBlacklist = EmailFilterBlacklist
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Pipeline = BB.Models.Pipeline;
    _.extend(BB.Models.Box.prototype, {
        getProcessedValue: function (property) {
            var type = Pipeline.getPropertyType(property);
            var val = this.get(property);
            switch (type) {
            case "DATE":
                var date = val ? Date.create(val) : null,
                    dateText = val ? date.prettyDate(true) : null;
                return dateText || "";
                break;
            case "NUMBER":
                if (!val) val = 0;
                return val + "";
                break;
            case "COMPUTED":
                var systemProperty =
                    Pipeline.getSystemProperty(property);
                return systemProperty.computeFunction(this);
                break;
            default:
                return val + ""
            }
        },
        getSortValue: function (property) {
            if (property === "stageKey") return this.getStageName();
            var type = Pipeline.getPropertyType(property);
            var val = this.get(property);
            switch (type) {
            case "DATE":
                return parseInt(val);
                break;
            case "NUMBER":
                if (!val) val = 0;
                return parseFloat(val);
                break;
            case "COMPUTED":
                var systemProperty = Pipeline.getSystemProperty(property);
                return systemProperty.sortFunction.call(systemProperty,
                    this);
                break;
            default:
                return val
            }
        },
        getGroupByValue: function (property) {
            var type = Pipeline.getPropertyType(property);
            var val = this.get(property);
            var ret = [];
            if (property === "stageKey") {
                if (this.getStage()) ret.push(this.get(property))
            } else switch (type) {
            case "COMPUTED":
                var systemProperty = Pipeline.getSystemProperty(property);
                ret = systemProperty.groupByFunction.call(systemProperty, this);
                break;
            default:
                ret.push(this.getProcessedValue(property))
            }
            return ret || ["no_value"]
        },
        getTextValue: function (property) {
            var systemProperty =
                Pipeline.getSystemProperty(property);
            if (!systemProperty) return "";
            if (systemProperty.type === "DATE") {
                var val = this.get(property);
                if (val) return Date.create(val).customFormat("export");
                else return ""
            } else if (systemProperty.textValueFunction) return systemProperty.textValueFunction.call(systemProperty, this);
            else return this.getProcessedValue(property)
        },
        getDisplayValue: function (property) {
            var systemProperty = Pipeline.getSystemProperty(property);
            if (!systemProperty) return "";
            if (systemProperty.type === "DATE") {
                var val =
                    this.get(property);
                var date = val ? Date.create(val) : null,
                    dateText = val ? date.prettyDate(true) : null;
                return dateText || ""
            } else if (systemProperty.textValueFunction) return Streak.$.getTextHTML(systemProperty.textValueFunction.call(systemProperty, this));
            else return Streak.$.getTextHTML(this.getProcessedValue(property))
        },
        getFilterValue: function (property) {
            var systemProperty = Pipeline.getSystemProperty(property);
            if (!systemProperty) return "";
            if (systemProperty.filterValueFunction) return systemProperty.filterValueFunction.call(systemProperty,
                this);
            else return this.get(property)
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var self = InboxManipulator = {
        CONSTANTS: {
            COLUMN_NAMES: ["CHECKBOX", "STAR", "PEOPLE", "IMPORTANCE", "SUBJECT", "ATTACHMENTS", "DATE", "LABELS"],
            TABLE_MANIPULATION_TYPES: ["COLUMN_WIDTH"],
            ROW_MANIPULATION_TYPES: ["PREPEND_ELEMENT", "APPEND_ELEMENT", "REMOVE_ELEMENT", "REPLACE_CONTENT"]
        },
        _columnNameColGroupMap: {
            CHECKBOX: "Ci",
            STAR: "y5",
            PEOPLE: "yY",
            IMPORTANCE: "yF",
            SUBJECT: "null",
            ATTACHMENTS: "yg",
            DATE: "xX"
        },
        _columnNameRowObjectMap: {
            "STAR": "starHolder",
            "LABELS": "labelContainer",
            "SUBJECT": "subjectLink",
            "ATTACHMENTS": "attachmentsContainer",
            "DATE": "date"
        },
        _dataSources: [],
        _manipulations: [],
        init: function (callback) {
            Gmail.observe("newInboxEmails", self.refreshAll);
            Gmail.observe("newInboxEmail", self.refreshRow);
            if (callback) callback()
        },
        refreshAll: function (isSecond) {
            if (!Gmail.isListView()) return;
            self._getAndApplyTableManipulations();
            var rowThreadObjects = BB.Threads.getCurrentRowsAndThreads();
            if (!isSecond && self._doWeNeedToRefreshGmailThreadList(rowThreadObjects)) {
                self._refreshGmailThreadList();
                return
            }
            self._undoManipulations();
            for (var ii = 0; ii < rowThreadObjects.length; ii++) self._refreshRow(rowThreadObjects[ii])
        },
        _doWeNeedToRefreshGmailThreadList: function (rowThreadObjects) {
            var anyNull = _.any(rowThreadObjects, function (rowThreadObject) {
                var thread = rowThreadObject.thread;
                if (!thread || !thread.key || !thread.key()) return true;
                return false
            });
            return anyNull && Gmail.getVisibleThreadRows().length > 0
        },
        _refreshGmailThreadList: function () {
            BB.Threads.requestCurrentList(function () {
                self.refreshAll(true)
            })
        },
        refreshRow: function (rowObject) {
            var thread =
                BB.Threads.getThreadFromRow(rowObject);
            if (!thread) return;
            self._refreshRow({
                thread: thread,
                row: rowObject
            })
        },
        addDataSource: function (dataSource) {
            self._dataSources.push(dataSource);
            self._dataSources = _.sortBy(self._dataSources, function (dataSource) {
                return dataSource.priority
            });
            if (dataSource.getGlobalManipulation && dataSource.getGlobalManipulation()) self._applyGlobalManipulation(dataSource.getGlobalManipulation());
            self.refreshAll()
        },
        _applyGlobalManipulation: function (globalManipulation) {
            if (!globalManipulation) return;
            switch (globalManipulation.type) {
            case "CSS_CHANGE":
                self._applyCSSManipulation(globalManipulation.columnName, globalManipulation.cssRule);
                break
            }
        },
        _applyCSSManipulation: function (columnName, cssRule) {
            var selector = "[gh=tl] colgroup col." + self._columnNameColGroupMap[columnName];
            Streak.CSSStyleManipulator.addRule(selector + "{ " + cssRule + ";}", 0)
        },
        _getAndApplyTableManipulations: function () {
            for (var ii = 0; ii < self._dataSources.length; ii++)
                if (self._dataSources[ii] && self._dataSources[ii].getTableManipulation) self._applyTableManipulation(self._dataSources[ii].getTableManipulation())
        },
        _applyTableManipulation: function (tableManipulation) {
            if (!tableManipulation) return;
            switch (tableManipulation.type) {
            case "COLUMN_WIDTH":
                self._changeColumnWidth(tableManipulation.columnName, tableManipulation.width);
                break
            }
        },
        _changeColumnWidth: function (columnName, width) {
            var colGroup = self._getColGroup(columnName);
            colGroup.css("width", width + "px")
        },
        _getColGroup: function (columnName) {
            return Gmail.getCurrentMain().find("[gh=tl] colgroup col." + self._columnNameColGroupMap[columnName])
        },
        _refreshRow: function (rowThreadObject) {
            var manipulations =
                self._getRowManipulations(rowThreadObject.thread, rowThreadObject.row);
            self._applyRowManipulations(rowThreadObject.row, manipulations)
        },
        _undoManipulations: function () {
            for (var ii = 0; ii < self._manipulations.length; ii++) self._undoManipulation(self._manipulations[ii]);
            self._manipulations.length = 0
        },
        _undoManipulation: function (manipulation) {
            if (!manipulation) return;
            manipulation.undo()
        },
        _getRowManipulations: function (threadObject, rowObject) {
            var manipulations = [];
            for (var ii = 0; ii < self._dataSources.length; ii++) try {
                if (threadObject) manipulations.push(self._dataSources[ii].getRowManipulation(threadObject,
                    rowObject))
            } catch (err) {
                BB.logError("get row manipulation fail", err)
            }
            return manipulations
        },
        _applyRowManipulations: function (rowObject, manipulations) {
            if (!manipulations) return;
            for (var ii = 0; ii < manipulations.length; ii++) try {
                self._applyOneOrMoreRowManipulations(rowObject, manipulations[ii])
            } catch (err) {
                BB.logError("row manipulation fail", err)
            }
        },
        _applyOneOrMoreRowManipulations: function (rowObject, manipulation) {
            if (!manipulation) return;
            if (_.isArray(manipulation))
                for (var ii = 0; ii < manipulation.length; ii++) this._applyRowManipulation(rowObject,
                    manipulation[ii]);
            else this._applyRowManipulation(rowObject, manipulation)
        },
        _applyRowManipulation: function (rowObject, manipulation) {
            switch (manipulation.getManipulationType()) {
            case "PREPEND_ELEMENT":
                self._insertElementIntoRow(rowObject, manipulation.getColumnName(), manipulation.getElement(), "prepend");
                break;
            case "APPEND_ELEMENT":
                self._insertElementIntoRow(rowObject, manipulation.getColumnName(), manipulation.getElement(), "append");
                break;
            case "REMOVE_ELEMENT":
                self._removeElement(rowObject, manipulation.getColumnName(),
                    manipulation.getSelector());
                break;
            case "REPLACE_CONTENT":
                self._replaceContent(rowObject, manipulation.getColumnName(), manipulation.getElement());
                break
            }
            this._manipulations.push(manipulation)
        },
        _insertElementIntoRow: function (rowObject, columnName, element, attachMethod) {
            if (columnName === "ATTACHMENTS") self._expandAttachmentsIfNeeded(rowObject);
            var columnElement = rowObject[self._columnNameRowObjectMap[columnName]];
            if (columnElement && columnElement[attachMethod]) rowObject[self._columnNameRowObjectMap[columnName]][attachMethod](element)
        },
        _removeElement: function (rowObject, columnName, selector) {
            rowObject[self._columnNameRowObjectMap[columnName]].find(selector).remove()
        },
        _replaceContent: function (rowObject, columnName, element) {
            rowObject[self._columnNameRowObjectMap[columnName]].html(element)
        },
        _expandAttachmentsIfNeeded: function (rowObject) {
            if (rowObject.type === "vertical") return;
            if (!self._rowHasAttachment(rowObject)) return;
            self._changeColumnWidth("ATTACHMENTS", 50)
        },
        _rowHasAttachment: function (rowObject) {
            return rowObject.rowNode.find("td.yf img").length >
                0
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "inboxManipulatorInitialized",
        functionToCall: InboxManipulator.init,
        functionContext: InboxManipulator,
        dependentFunctionKeys: ["gmailLoaded"]
    });
    Streak.NotificationCenter.addFunction({
        eventName: "streak.teardown",
        functionToCall: function () {
            InboxManipulator.refreshAll()
        }
    });
    Streak.NotificationCenter.addFunction({
        eventName: "streak.reup",
        functionToCall: function () {
            InboxManipulator.refreshAll()
        }
    });
    Streak.Gmail.InboxManipulator = InboxManipulator
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var InboxRowManipulationBase = Streak.Class.subclass({
        className: "InboxRowManipulationBase",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        getManipulationType: function () {
            throw new Error("must define get manipulation types");
        },
        getColumnName: function () {
            throw new Error("must define get column name");
        },
        getElement: function () {
            throw new Error("must define get element");
        },
        undo: function () {
            throw new Error("must define undo");
        }
    });
    Gmail.InboxManipulator.InboxRowManipulationBase = InboxRowManipulationBase
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var AjaxInterceptorSourceBase = Streak.Class.subclass({
        className: "AjaxInterceptorSourceBase",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        isRequestRelevant: function (urlParametres) {
            throw new Error("must define getRelevantAjaxParameters");
        },
        getAjaxInterceptor: function () {
            throw new Error("must define getAjaxInterceptor");
        }
    });
    Gmail.AjaxInterceptorSourceBase = AjaxInterceptorSourceBase;
    var AjaxInterceptorBase = Streak.Class.subclass({
        className: "AjaxInterceptorBase",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        requestStatusUpdated: function (xhr) {
            throw new Error("must define requestStatusUpdated");
        }
    });
    Gmail.AjaxInterceptorBase = AjaxInterceptorBase
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var RFCMessageIdExtractor = Streak.Class.subclass({
        className: "RFCMessageIdExtractor",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        getRFCMessageIdForThread: function (thread, callback) {
            Streak.Requester.gmailGet({
                view: "om",
                th: thread.key()
            }, function (response) {
                var messageId;
                try {
                    messageId = _extractRFCMessageId(response)
                } catch (err) {}
                if (messageId) {
                    callback(messageId);
                    return
                }
                BB.logError("extracting messageId\n" + response);
                callback()
            }, function () {
                BB.logError("rfc message id request failed");
                callback()
            })
        }
    });

    function _extractRFCMessageId(response) {
        if (!response) return;
        var parts = response.split(/\r|\n/);
        if (parts.length === 1) return;
        var messageParts = _.filter(parts, function (part) {
            return part.match(/^\s*Message-ID: /i)
        });
        if (messageParts.length !==
            1) return;
        var lineParts = messageParts[0].split(": ");
        if (lineParts.length < 2) return;
        return lineParts[1].trim()
    }
    Gmail.RFCMessageIdExtractor = new RFCMessageIdExtractor
})(Streak);
Streak.UI = {};
(function (Streak) {
    var _ = Streak._;
    var superclass = Streak.Object;
    Streak.UI.Delegator = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_delegates",
            destroy: false
        }, {
            name: "_delegate",
            destroy: false,
            set: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._delegates = []
        },
        addDelegate: function (delegate) {
            if (this._delegates.indexOf(delegate) === -1) this._delegates.push(delegate)
        },
        removeDelegate: function (delegate) {
            var index = this._delegates.indexOf(delegate);
            if (index > -1) this._delegates.splice(index,
                1)
        },
        removeAllDelegates: function () {
            this._delegates.length = 0
        },
        _callDelegateFunction: function (functionName) {
            var args = _.rest(_.toArray(arguments));
            if (this._delegate && this._delegate[functionName]) this._delegate[functionName].apply(this._delegate, args);
            if (!this._delegates) return;
            var delegates = _.clone(this._delegates);
            for (var i = 0; i < delegates.length; i++)
                if (delegates[i][functionName]) delegates[i][functionName].apply(delegates[i], args)
        }
    })
})(Streak);
(function (Streak) {
    var UI = Streak.UI;
    UI.DataSourceDelegateMixin = function (superclass) {
        return {
            memberVariables: [{
                "name": "_dataSource",
                destroy: false
            }],
            setDataSource: function (dataSource) {
                this._removeCurrentDataSource();
                this._dataSource = dataSource;
                dataSource.addDelegate(this)
            },
            _removeCurrentDataSource: function () {
                if (this._dataSource !== null) {
                    this._dataSource.removeDelegate(this);
                    this._dataSource = null
                }
            },
            handleDataUpdated: function (dataSource) {},
            destroy: function () {
                this._removeCurrentDataSource();
                superclass.prototype.destroy.call(this)
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.$;
    var superclass = Streak.UI.Delegator;
    Streak.UI.View = Streak.Class.subclass({
        className: "View",
        superclass: superclass,
        memberVariables: [{
            name: "_element",
            destroy: true,
            get: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupElement()
        },
        _setupElement: function () {
            this._element = $(document.createElement("div"))
        },
        addSubview: function (subview) {
            this._element.append(subview.getElement())
        },
        setSubview: function (subview) {
            this._element.html(subview.getElement())
        },
        addClass: function (className) {
            this._element.addClass(className)
        }
    })
})(Streak);
(function (Streak) {
    var UI = Streak.UI;
    var superclass = UI.Delegator;
    UI.ViewController = Streak.Class.subclass({
        className: "ViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_view",
            destroy: true,
            get: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupView();
            if (this._view && this._view.addDelegate) this._view.addDelegate(this)
        },
        _setupView: function () {
            this._view = new UI.View
        },
        setView: function (view) {
            if (this._view) this._view.destroy();
            this._view = view
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI;
    var superclass = UI.ViewController;
    UI.CollectionViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_viewControllers",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._viewControllers = []
        },
        addViewController: function (viewController) {
            this._viewControllers.push(viewController);
            this._view.addSubview(viewController.getView())
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI;
    var superclass = UI.ViewController;
    UI.HorizontalCollectionViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_viewControllers",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._viewControllers = [];
            this._view.addClass("__streak_horizontal_layout")
        },
        addViewController: function (viewController) {
            this._viewControllers.push(viewController);
            this._view.addSubview(viewController.getView())
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI;
    var superclass = UI.ViewController;
    UI.SplitRowsCollectionViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_numberOfColumnsInRow",
            destroy: false
        }, {
            name: "_numberOfRows",
            destroy: false
        }, {
            name: "_verticalViewControllers",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._numberOfColumnsInRow = {};
            this._numberOfRows = 0;
            this._verticalViewControllers = []
        },
        addRow: function () {
            this._numberOfRows += 1;
            var horizontalViewController = new UI.HorizontalCollectionViewController;
            this._verticalViewControllers.push(horizontalViewController);
            this._view.addSubview(horizontalViewController.getView());
            return this._numberOfRows - 1
        },
        getLastRow: function () {
            return this._numberOfRows - 1
        },
        addViewControllerToRow: function (viewController, row) {
            this._numberOfColumnsInRow[row] = (this._numberOfColumnsInRow[row] || 0) + 1;
            var rowController = this._verticalViewControllers[row];
            rowController.addViewController(viewController);
            return this._numberOfColumnsInRow[row] -
                1
        }
    })
})(Streak);
(function (Streak) {
    var UI = Streak.UI;
    var superclass = UI.View;
    UI.ChartView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            "name": "_data",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupChart()
        },
        _setupChart: function () {},
        setData: function (data) {
            this._data = data;
            this._drawChart()
        },
        _drawChart: function () {},
        windowResized: function () {
            this._drawChart()
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI;
    var superclass = UI.ChartView;
    UI.GoogleChartView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_googleChartClass",
            destroy: false
        }, {
            name: "_chart",
            destroy: false
        }, {
            name: "_googleFormattedData",
            destroy: false
        }, {
            name: "_chartOptions",
            destroy: false,
            get: true
        }],
        setGoogleChartClass: function (googleChartClass) {
            this._googleChartClass = googleChartClass;
            this._chart = new this._googleChartClass(this.getChartContainerElement());
            this._chartOptions = {}
        },
        getChartContainerElement: function () {
            return this._element[0]
        },
        setChartOptions: function (options) {
            _.extend(this._chartOptions, this._chartOptions, options)
        },
        setData: function (data) {
            if (data)
                if (_.isArray(data)) this._googleFormattedData = google.visualization.arrayToDataTable(data);
                else this._googleFormattedData = data;
                else this._googleFormattedData = null;
            superclass.prototype.setData.call(this, data)
        },
        setVAxisLabel: function (label) {
            if (!this._chartOptions.vAxis) this._chartOptions.vAxis = {};
            this._chartOptions.vAxis.title = label
        },
        setSeriesOptions: function (seriesOptions) {
            this._chartOptions.series =
                seriesOptions
        },
        _drawChart: function () {
            if (this._googleFormattedData) this._chart.draw(this._googleFormattedData, this.getChartOptions())
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI;
    var superclass = UI.GoogleChartView;
    UI.BarChartView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_legendWidth",
            destroy: false,
            get: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this.setGoogleChartClass(google.visualization.BarChart);
            this._chartOptions = {
                hAxis: {
                    viewWindow: {},
                    gridlines: {},
                    minorGridlines: {},
                    titleTextStyle: {},
                    textStyle: {}
                },
                chartArea: {},
                legend: {}
            }
        },
        setIsStacked: function (isStacked) {
            this._chartOptions.isStacked =
                isStacked
        },
        setLegendWidth: function (legendWidth) {
            this._legendWidth = legendWidth
        },
        _computeWidth: function () {
            if (this._legendWidth) this.setChartWidthPercentage((this._element.width() - this._legendWidth) * 100 / this._element.width())
        },
        setSeriesColors: function (colors) {
            this._chartOptions.series = _.map(colors, function (color) {
                return {
                    color: color
                }
            })
        },
        setHeight: function (height) {
            this._chartOptions.height = height
        },
        setChartHeightPercentage: function (percentage) {
            if (percentage) this._chartOptions.chartArea.height = percentage +
                "%";
            else this._chartOptions.chartArea.height = null
        },
        setChartWidthPercentage: function (percentage) {
            if (percentage) this._chartOptions.chartArea.width = percentage + "%";
            else this._chartOptions.chartArea.width = null
        },
        setMinimum: function (minimum) {
            this._chartOptions.hAxis.minValue = minimum;
            this._chartOptions.hAxis.viewWindow.min = minimum
        },
        setTitle: function (title) {
            this._chartOptions.title = title
        },
        showHAxis: function (show) {
            if (show) {
                delete this._chartOptions.hAxis.baselineColor;
                delete this._chartOptions.hAxis.titleTextStyle.color;
                delete this._chartOptions.hAxis.textStyle.color
            } else {
                this._chartOptions.hAxis.baselineColor = "transparent";
                this._chartOptions.hAxis.titleTextStyle.color = "transparent";
                this._chartOptions.hAxis.textStyle.color = "transparent"
            }
        },
        showHGridlines: function (show) {
            if (show) {
                delete this._chartOptions.hAxis.minorGridlines.color;
                delete this._chartOptions.hAxis.gridlines.color
            } else {
                this._chartOptions.hAxis.minorGridlines.color = "transparent";
                this._chartOptions.hAxis.gridlines.color = "transparent"
            }
        },
        showLegend: function (show) {
            if (show) delete this._chartOptions.legend.position;
            else this._chartOptions.legend.position = "none"
        },
        getChartOptions: function () {
            this._computeWidth();
            return superclass.prototype.getChartOptions.call(this)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI;
    var superclass = UI.GoogleChartView;
    UI.TimelineChartView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_chartOptions",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this.setGoogleChartClass(google.visualization.Timeline);
            this._chartOptions = {}
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        UI = Streak.UI;
    var superclass = UI.GoogleChartView;
    UI.RingChartView = Streak.Class.subclass({
        superclass: superclass,
        _memberVariables: [{
            name: "_googleRingChartContainer",
            destroy: true
        }, {
            name: "_centerLabelElementContainer",
            destroy: true
        }, {
            name: "_centerLabelValue",
            set: true,
            get: true,
            destroy: true
        }, {
            name: "_centerLabelUnit",
            set: true,
            get: true,
            destroy: true
        }, {
            name: "_centerLabelValueElement",
            destroy: true
        }, {
            name: "_centerLabelUnitElement",
            destroy: true
        }],
        _initialize: function (options) {
            superclass.prototype._initialize.call(this, options);
            this.setGoogleChartClass(google.visualization.PieChart, this._googleRingChartContainer)
        },
        _setupElement: function () {
            superclass.prototype._setupElement.call(this);
            this._element = HTML.getElement("streak__ringChart");
            this._googleRingChartContainer = this._element.find(".streak__googleRingChartContainer");
            this._centerLabelValueElement = this._element.find(".streak__ringChartCenterLabelValue");
            this._centerLabelUnitElement = this._element.find(".streak__ringChartCenterLabelUnit");
            this._centerLabelElementContainer = this._element.find(".streak__ringChartCenterLabelContainer")
        },
        getChartContainerElement: function () {
            return this._googleRingChartContainer[0]
        },
        _drawChart: function () {
            superclass.prototype._drawChart.apply(this, arguments);
            var boundingBox = this._chart.getChartLayoutInterface().getChartAreaBoundingBox();
            var legendBoundingBox = this._chart.getChartLayoutInterface().getBoundingBox("legend");
            this._centerLabelElementContainer[0].style.top = boundingBox.top + "px";
            this._centerLabelElementContainer[0].style.left =
                boundingBox.left + "px";
            this._centerLabelElementContainer[0].style.height = boundingBox.height + "px";
            if (legendBoundingBox) this._centerLabelElementContainer[0].style.width = legendBoundingBox.left - boundingBox.left - 18 + "px";
            else this._centerLabelElementContainer[0].style.width = boundingBox.width + "px"; if (this.getCenterLabelValue() && this.getCenterLabelUnit()) {
                this._centerLabelValueElement.html(this.getCenterLabelValue());
                this._centerLabelUnitElement.html(this.getCenterLabelUnit())
            } else if (this.getCenterLabelValue()) this._centerLabelValueElement.html(this.getCenterLabelValue())
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI;
    var superclass = Streak.Class.mixin(UI.ViewController, UI.DataSourceDelegateMixin);
    UI.ChartViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            "name": "_data",
            destroy: false
        }],
        setDataSource: function (dataSource) {
            superclass.prototype.setDataSource.call(this, dataSource);
            this._retrieveData()
        },
        _retrieveData: function () {
            this._data = this._dataSource.getChartData();
            if (this._view.setData) this._view.setData(this._data)
        },
        handleDataUpdated: function (dataSource) {
            this._retrieveData()
        },
        windowResized: function () {
            this._view.windowResized()
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        UI = Streak.UI;
    var ChartFactory = Streak.Class.subclass({
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        createChart: function (options) {
            var chart = this["_create" + options.type.camelize()](options);
            delete options.type;
            chart.setChartOptions(options);
            return chart
        },
        _createLineChart: function (options) {
            var chart = new UI.GoogleChartView;
            chart.setGoogleChartClass(google.visualization.LineChart);
            return chart
        },
        _createRingChart: function (options) {
            var chart = new UI.RingChartView;
            if (!options.pieHole) options.pieHole = 0.5;
            return chart
        }
    });
    Library.set("UI.ChartFactory", new ChartFactory)
})(Streak);
if (!window.streakpanel) window.streakpanel = [];
(function (streakpanel) {
    var ArrayProto = Array.prototype,
        ObjProto = Object.prototype,
        slice = ArrayProto.slice,
        toString = ObjProto.toString,
        hasOwnProperty = ObjProto.hasOwnProperty,
        windowConsole = window.console,
        navigator = window.navigator,
        document = window.document,
        userAgent = navigator.userAgent;
    var eventQueue = [],
        eventTimer = null;
    var PRIMARY_INSTANCE_NAME = "streakpanel",
        SET_QUEUE_KEY = "__mps",
        SET_ONCE_QUEUE_KEY = "__mpso",
        ADD_QUEUE_KEY = "__mpa",
        APPEND_QUEUE_KEY = "__mpap",
        SET_ACTION = "$set",
        SET_ONCE_ACTION = "$set_once",
        ADD_ACTION =
            "$add",
        APPEND_ACTION = "$append",
        PEOPLE_DISTINCT_ID_KEY = "$people_distinct_id",
        ALIAS_ID_KEY = "__alias",
        RESERVED_PROPERTIES = [SET_QUEUE_KEY, SET_ONCE_QUEUE_KEY, ADD_QUEUE_KEY, APPEND_QUEUE_KEY, PEOPLE_DISTINCT_ID_KEY, ALIAS_ID_KEY];
    var SNIPPET_VERSION = streakpanel && streakpanel["__SV"] || 1.2,
        THROTTLE_MILLISECONDS = streakpanel && streakpanel["__THROTTLE"] || 120 * 1E3,
        USE_XHR = true,
        ENQUEUE_REQUESTS = !USE_XHR && userAgent.indexOf("MSIE") == -1;
    var _ = {}, DEBUG = false,
        DEFAULT_CONFIG = {
            "api_host": Streak.server,
            "cross_subdomain_cookie": true,
            "cookie_name": "",
            "loaded": function () {},
            "store_google": true,
            "save_referrer": true,
            "test": false,
            "verbose": false,
            "img": false,
            "track_pageview": false,
            "debug": false,
            "track_links_timeout": 300,
            "cookie_expiration": 365 * 10,
            "upgrade": false,
            "disable_cookie": false,
            "secure_cookie": false,
            "ip": true
        }, DOM_LOADED = false;
    (function () {
        var nativeForEach = ArrayProto.forEach,
            nativeIndexOf = ArrayProto.indexOf,
            nativeIsArray = Array.isArray,
            breaker = {};
        var each = _.each = function (obj, iterator, context) {
            if (obj == null) return;
            if (nativeForEach &&
                obj.forEach === nativeForEach) obj.forEach(iterator, context);
            else if (obj.length === +obj.length)
                for (var i = 0, l = obj.length; i < l; i++) {
                    if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return
                } else
                    for (var key in obj)
                        if (hasOwnProperty.call(obj, key))
                            if (iterator.call(context, obj[key], key, obj) === breaker) return
        };
        _.extend = function (obj) {
            each(slice.call(arguments, 1), function (source) {
                for (var prop in source)
                    if (source[prop] !== void 0) obj[prop] = source[prop]
            });
            return obj
        };
        _.isArray = nativeIsArray || function (obj) {
            return toString.call(obj) ===
                "[object Array]"
        };
        _.isFunction = function (f) {
            try {
                return /^\s*\bfunction\b/.test(f)
            } catch (x) {
                return false
            }
        };
        _.isArguments = function (obj) {
            return !!(obj && hasOwnProperty.call(obj, "callee"))
        };
        _.toArray = function (iterable) {
            if (!iterable) return [];
            if (iterable.toArray) return iterable.toArray();
            if (_.isArray(iterable)) return slice.call(iterable);
            if (_.isArguments(iterable)) return slice.call(iterable);
            return _.values(iterable)
        };
        _.values = function (obj) {
            var results = [];
            if (obj == null) return results;
            each(obj, function (value) {
                results[results.length] =
                    value
            });
            return results
        };
        _.identity = function (value) {
            return value
        };
        _.include = function (obj, target) {
            var found = false;
            if (obj == null) return found;
            if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
            each(obj, function (value) {
                if (found || (found = value === target)) return breaker
            });
            return found
        };
        _.includes = function (str, needle) {
            return str.indexOf(needle) !== -1
        }
    })();
    _.inherit = function (subclass, superclass) {
        subclass.prototype = new superclass;
        subclass.prototype.constructor = subclass;
        subclass.superclass =
            superclass.prototype;
        return subclass
    };
    _.isObject = function (obj) {
        return obj === Object(obj) && !_.isArray(obj)
    };
    _.isEmptyObject = function (obj) {
        if (_.isObject(obj)) {
            for (var key in obj)
                if (hasOwnProperty.call(obj, key)) return false;
            return true
        }
        return false
    };
    _.isUndefined = function (obj) {
        return obj === void 0
    };
    _.isString = function (obj) {
        return toString.call(obj) == "[object String]"
    };
    _.isDate = function (obj) {
        return toString.call(obj) == "[object Date]"
    };
    _.isNumber = function (obj) {
        return toString.call(obj) == "[object Number]"
    };
    _.encodeDates = function (obj) {
        _.each(obj, function (v, k) {
            if (_.isDate(v)) obj[k] = _.formatDate(v);
            else if (_.isObject(v)) obj[k] = _.encodeDates(v)
        });
        return obj
    };
    _.formatDate = function (d) {
        function pad(n) {
            return n < 10 ? "0" + n : n
        }
        return d.getUTCFullYear() + "-" + pad(d.getUTCMonth() + 1) + "-" + pad(d.getUTCDate()) + "T" + pad(d.getUTCHours()) + ":" + pad(d.getUTCMinutes()) + ":" + pad(d.getUTCSeconds())
    };
    _.strip_empty_properties = function (p) {
        var ret = {};
        _.each(p, function (v, k) {
            if (_.isString(v) && v.length > 0) ret[k] = v
        });
        return ret
    };
    _.bind = function (func,
        context) {
        var args = slice.call(arguments, 2);
        return function () {
            return func.apply(context, args.concat(slice.call(arguments)))
        }
    };
    _.truncate = function (obj, length) {
        var ret;
        if (typeof obj === "string") ret = obj.slice(0, length);
        else if (_.isArray(obj)) {
            ret = [];
            _.each(obj, function (val) {
                ret.push(_.truncate(val, length))
            })
        } else if (_.isObject(obj)) {
            ret = {};
            _.each(obj, function (val, key) {
                ret[key] = _.truncate(val, length)
            })
        } else ret = obj;
        return ret
    };
    _.JSONEncode = function () {
        return function (mixed_val) {
            var indent;
            var value = mixed_val;
            var i;
            var quote = function (string) {
                var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
                var meta = {
                    "\u0008": "\\b",
                    "\t": "\\t",
                    "\n": "\\n",
                    "\u000c": "\\f",
                    "\r": "\\r",
                    '"': '\\"',
                    "\\": "\\\\"
                };
                escapable.lastIndex = 0;
                return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
                    var c = meta[a];
                    return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                }) + '"' : '"' + string + '"'
            };
            var str = function (key, holder) {
                var gap =
                    "";
                var indent = "    ";
                var i = 0;
                var k = "";
                var v = "";
                var length = 0;
                var mind = gap;
                var partial = [];
                var value = holder[key];
                if (value && typeof value === "object" && typeof value.toJSON === "function") value = value.toJSON(key);
                switch (typeof value) {
                case "string":
                    return quote(value);
                case "number":
                    return isFinite(value) ? String(value) : "null";
                case "boolean":
                case "null":
                    return String(value);
                case "object":
                    if (!value) return "null";
                    gap += indent;
                    partial = [];
                    if (toString.apply(value) === "[object Array]") {
                        length = value.length;
                        for (i = 0; i < length; i +=
                            1) partial[i] = str(i, value) || "null";
                        v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                        gap = mind;
                        return v
                    }
                    for (k in value)
                        if (hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) partial.push(quote(k) + (gap ? ": " : ":") + v)
                        }
                    v = partial.length === 0 ? "{}" : gap ? "{" + partial.join(",") + "" + mind + "}" : "{" + partial.join(",") + "}";
                    gap = mind;
                    return v
                }
            };
            return str("", {
                "": value
            })
        }
    }();
    _.JSONDecode = function () {
        var at, ch, escapee = {
                '"': '"',
                "\\": "\\",
                "/": "/",
                "b": "\u0008",
                "f": "\u000c",
                "n": "\n",
                "r": "\r",
                "t": "\t"
            }, text, error = function (m) {
                throw {
                    name: "SyntaxError",
                    message: m,
                    at: at,
                    text: text
                };
            }, next = function (c) {
                if (c && c !== ch) error("Expected '" + c + "' instead of '" + ch + "'");
                ch = text.charAt(at);
                at += 1;
                return ch
            }, number = function () {
                var number, string = "";
                if (ch === "-") {
                    string = "-";
                    next("-")
                }
                while (ch >= "0" && ch <= "9") {
                    string += ch;
                    next()
                }
                if (ch === ".") {
                    string += ".";
                    while (next() && ch >= "0" && ch <= "9") string += ch
                }
                if (ch === "e" || ch === "E") {
                    string += ch;
                    next();
                    if (ch === "-" || ch === "+") {
                        string += ch;
                        next()
                    }
                    while (ch >= "0" && ch <= "9") {
                        string +=
                            ch;
                        next()
                    }
                }
                number = +string;
                if (!isFinite(number)) error("Bad number");
                else return number
            }, string = function () {
                var hex, i, string = "",
                    uffff;
                if (ch === '"')
                    while (next()) {
                        if (ch === '"') {
                            next();
                            return string
                        }
                        if (ch === "\\") {
                            next();
                            if (ch === "u") {
                                uffff = 0;
                                for (i = 0; i < 4; i += 1) {
                                    hex = parseInt(next(), 16);
                                    if (!isFinite(hex)) break;
                                    uffff = uffff * 16 + hex
                                }
                                string += String.fromCharCode(uffff)
                            } else if (typeof escapee[ch] === "string") string += escapee[ch];
                            else break
                        } else string += ch
                    }
                error("Bad string")
            }, white = function () {
                while (ch && ch <= " ") next()
            },
            word = function () {
                switch (ch) {
                case "t":
                    next("t");
                    next("r");
                    next("u");
                    next("e");
                    return true;
                case "f":
                    next("f");
                    next("a");
                    next("l");
                    next("s");
                    next("e");
                    return false;
                case "n":
                    next("n");
                    next("u");
                    next("l");
                    next("l");
                    return null
                }
                error("Unexpected '" + ch + "'")
            }, value, array = function () {
                var array = [];
                if (ch === "[") {
                    next("[");
                    white();
                    if (ch === "]") {
                        next("]");
                        return array
                    }
                    while (ch) {
                        array.push(value());
                        white();
                        if (ch === "]") {
                            next("]");
                            return array
                        }
                        next(",");
                        white()
                    }
                }
                error("Bad array")
            }, object = function () {
                var key, object = {};
                if (ch === "{") {
                    next("{");
                    white();
                    if (ch === "}") {
                        next("}");
                        return object
                    }
                    while (ch) {
                        key = string();
                        white();
                        next(":");
                        if (Object.hasOwnProperty.call(object, key)) error('Duplicate key "' + key + '"');
                        object[key] = value();
                        white();
                        if (ch === "}") {
                            next("}");
                            return object
                        }
                        next(",");
                        white()
                    }
                }
                error("Bad object")
            };
        value = function () {
            white();
            switch (ch) {
            case "{":
                return object();
            case "[":
                return array();
            case '"':
                return string();
            case "-":
                return number();
            default:
                return ch >= "0" && ch <= "9" ? number() : word()
            }
        };
        return function (source) {
            var result;
            text = source;
            at = 0;
            ch = " ";
            result = value();
            white();
            if (ch) error("Syntax error");
            return result
        }
    }();
    _.base64Encode = function (data) {
        var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
            ac = 0,
            enc = "",
            tmp_arr = [];
        if (!data) return data;
        data = _.utf8Encode(data);
        do {
            o1 = data.charCodeAt(i++);
            o2 = data.charCodeAt(i++);
            o3 = data.charCodeAt(i++);
            bits = o1 << 16 | o2 << 8 | o3;
            h1 = bits >> 18 & 63;
            h2 = bits >> 12 & 63;
            h3 = bits >> 6 & 63;
            h4 = bits & 63;
            tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) +
                b64.charAt(h4)
        } while (i < data.length);
        enc = tmp_arr.join("");
        switch (data.length % 3) {
        case 1:
            enc = enc.slice(0, -2) + "==";
            break;
        case 2:
            enc = enc.slice(0, -1) + "=";
            break
        }
        return enc
    };
    _.utf8Encode = function (string) {
        string = (string + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        var utftext = "",
            start, end;
        var stringl = 0,
            n;
        start = end = 0;
        stringl = string.length;
        for (n = 0; n < stringl; n++) {
            var c1 = string.charCodeAt(n);
            var enc = null;
            if (c1 < 128) end++;
            else if (c1 > 127 && c1 < 2048) enc = String.fromCharCode(c1 >> 6 | 192, c1 & 63 | 128);
            else enc = String.fromCharCode(c1 >>
                12 | 224, c1 >> 6 & 63 | 128, c1 & 63 | 128); if (enc !== null) {
                if (end > start) utftext += string.substring(start, end);
                utftext += enc;
                start = end = n + 1
            }
        }
        if (end > start) utftext += string.substring(start, string.length);
        return utftext
    };
    _.UUID = function () {
        var T = function () {
            var d = 1 * new Date,
                i = 0;
            while (d == 1 * new Date) i++;
            return d.toString(16) + i.toString(16)
        };
        var R = function () {
            return Math.random().toString(16).replace(".", "")
        };
        var UA = function (n) {
            var ua = userAgent,
                i, ch, buffer = [],
                ret = 0;

            function xor(result, byte_array) {
                var j, tmp = 0;
                for (j = 0; j < byte_array.length; j++) tmp |=
                    buffer[j] << j * 8;
                return result ^ tmp
            }
            for (i = 0; i < ua.length; i++) {
                ch = ua.charCodeAt(i);
                buffer.unshift(ch & 255);
                if (buffer.length >= 4) {
                    ret = xor(ret, buffer);
                    buffer = []
                }
            }
            if (buffer.length > 0) ret = xor(ret, buffer);
            return ret.toString(16)
        };
        return function () {
            var se = (screen.height * screen.width).toString(16);
            return T() + "-" + R() + "-" + UA() + "-" + se + "-" + T()
        }
    }();
    _.isBlockedUA = function () {
        var a = userAgent;
        if (/(google web preview|baiduspider|yandexbot)/i.test(a)) return true;
        return false
    };
    _.HTTPBuildQuery = function (formdata, arg_separator) {
        var key,
            use_val, use_key, tmp_arr = [];
        if (typeof arg_separator === "undefined") arg_separator = "&";
        _.each(formdata, function (val, key) {
            use_val = encodeURIComponent(val.toString());
            use_key = encodeURIComponent(key);
            tmp_arr[tmp_arr.length] = use_key + "=" + use_val
        });
        return tmp_arr.join(arg_separator)
    };
    _.getQueryParam = function (url, param) {
        param = param.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regexS = "[\\?&]" + param + "=([^&#]*)",
            regex = new RegExp(regexS),
            results = regex.exec(url);
        if (results === null || results && typeof results[1] !==
            "string" && results[1].length) return "";
        else return decodeURIComponent(results[1]).replace(/\+/g, " ")
    };
    _.cookie = {
        get: function (name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(";");
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == " ") c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return decodeURIComponent(c.substring(nameEQ.length, c.length))
            }
            return null
        },
        parse: function (name) {
            var cookie;
            try {
                cookie = _.JSONDecode(_.cookie.get(name)) || {}
            } catch (err) {}
            return cookie
        },
        set: function (name, value,
            days, cross_subdomain, is_secure) {
            var cdomain = "",
                expires = "",
                secure = "";
            if (cross_subdomain) {
                var matches = document.location.hostname.match(/[a-z0-9][a-z0-9\-]+\.[a-z\.]{2,6}$/i),
                    domain = matches ? matches[0] : "";
                cdomain = domain ? "; domain=." + domain : ""
            }
            if (days) {
                var date = new Date;
                date.setTime(date.getTime() + days * 24 * 60 * 60 * 1E3);
                expires = "; expires=" + date.toGMTString()
            }
            if (is_secure) secure = "; secure";
            document.cookie = name + "=" + encodeURIComponent(value) + expires + "; path=/" + cdomain + secure
        },
        remove: function (name, cross_subdomain) {
            _.cookie.set(name,
                "", -1, cross_subdomain)
        }
    };
    _.register_event = function () {
        var register_event = function (element, type, handler, oldSchool) {
            if (!element) {
                console.error("No valid element provided to register_event");
                return
            }
            if (element.addEventListener && !oldSchool) element.addEventListener(type, handler, false);
            else {
                var ontype = "on" + type;
                var old_handler = element[ontype];
                element[ontype] = makeHandler(element, handler, old_handler)
            }
        };

        function makeHandler(element, new_handler, old_handlers) {
            var handler = function (event) {
                event = event || fixEvent(window.event);
                if (!event) return undefined;
                var ret = true;
                var old_result, new_result;
                if (_.isFunction(old_handlers)) old_result = old_handlers(event);
                new_result = new_handler.call(element, event);
                if (false === old_result || false === new_result) ret = false;
                return ret
            };
            return handler
        }

        function fixEvent(event) {
            if (event) {
                event.preventDefault = fixEvent.preventDefault;
                event.stopPropagation = fixEvent.stopPropagation
            }
            return event
        }
        fixEvent.preventDefault = function () {
            this.returnValue = false
        };
        fixEvent.stopPropagation = function () {
            this.cancelBubble =
                true
        };
        return register_event
    }();
    _.dom_query = function () {
        function getAllChildren(e) {
            return e.all ? e.all : e.getElementsByTagName("*")
        }
        var bad_whitespace = /[\t\r\n]/g;

        function hasClass(elem, selector) {
            var className = " " + selector + " ";
            return (" " + elem.className + " ").replace(bad_whitespace, " ").indexOf(className) >= 0
        }

        function getElementsBySelector(selector) {
            if (!document.getElementsByTagName) return new Array;
            var tokens = selector.split(" ");
            var token;
            var currentContext = new Array(document);
            for (var i = 0; i < tokens.length; i++) {
                token =
                    tokens[i].replace(/^\s+/, "").replace(/\s+$/, "");
                if (token.indexOf("#") > -1) {
                    var bits = token.split("#");
                    var tagName = bits[0];
                    var id = bits[1];
                    var element = document.getElementById(id);
                    if (!element || tagName && element.nodeName.toLowerCase() != tagName) return new Array;
                    currentContext = new Array(element);
                    continue
                }
                if (token.indexOf(".") > -1) {
                    var bits = token.split(".");
                    var tagName = bits[0];
                    var className = bits[1];
                    if (!tagName) tagName = "*";
                    var found = new Array;
                    var foundCount = 0;
                    for (var h = 0; h < currentContext.length; h++) {
                        var elements;
                        if (tagName == "*") elements = getAllChildren(currentContext[h]);
                        else elements = currentContext[h].getElementsByTagName(tagName);
                        for (var j = 0; j < elements.length; j++) found[foundCount++] = elements[j]
                    }
                    currentContext = new Array;
                    var currentContextIndex = 0;
                    for (var k = 0; k < found.length; k++)
                        if (found[k].className && _.isString(found[k].className) && hasClass(found[k], className)) currentContext[currentContextIndex++] = found[k];
                    continue
                }
                if (token.match(/^(\w*)\[(\w+)([=~\|\^\$\*]?)=?"?([^\]"]*)"?\]$/)) {
                    var tagName = RegExp.$1;
                    var attrName =
                        RegExp.$2;
                    var attrOperator = RegExp.$3;
                    var attrValue = RegExp.$4;
                    if (!tagName) tagName = "*";
                    var found = new Array;
                    var foundCount = 0;
                    for (var h = 0; h < currentContext.length; h++) {
                        var elements;
                        if (tagName == "*") elements = getAllChildren(currentContext[h]);
                        else elements = currentContext[h].getElementsByTagName(tagName);
                        for (var j = 0; j < elements.length; j++) found[foundCount++] = elements[j]
                    }
                    currentContext = new Array;
                    var currentContextIndex = 0;
                    var checkFunction;
                    switch (attrOperator) {
                    case "=":
                        checkFunction = function (e) {
                            return e.getAttribute(attrName) ==
                                attrValue
                        };
                        break;
                    case "~":
                        checkFunction = function (e) {
                            return e.getAttribute(attrName).match(new RegExp("\\b" + attrValue + "\\b"))
                        };
                        break;
                    case "|":
                        checkFunction = function (e) {
                            return e.getAttribute(attrName).match(new RegExp("^" + attrValue + "-?"))
                        };
                        break;
                    case "^":
                        checkFunction = function (e) {
                            return e.getAttribute(attrName).indexOf(attrValue) == 0
                        };
                        break;
                    case "$":
                        checkFunction = function (e) {
                            return e.getAttribute(attrName).lastIndexOf(attrValue) == e.getAttribute(attrName).length - attrValue.length
                        };
                        break;
                    case "*":
                        checkFunction =
                            function (e) {
                                return e.getAttribute(attrName).indexOf(attrValue) > -1
                        };
                        break;
                    default:
                        checkFunction = function (e) {
                            return e.getAttribute(attrName)
                        }
                    }
                    currentContext = new Array;
                    currentContextIndex = 0;
                    for (var k = 0; k < found.length; k++)
                        if (checkFunction(found[k])) currentContext[currentContextIndex++] = found[k];
                    continue
                }
                tagName = token;
                var found = new Array;
                var foundCount = 0;
                for (var h = 0; h < currentContext.length; h++) {
                    var elements = currentContext[h].getElementsByTagName(tagName);
                    for (var j = 0; j < elements.length; j++) found[foundCount++] =
                        elements[j]
                }
                currentContext = found
            }
            return currentContext
        }
        return getElementsBySelector
    }();
    _.info = {
        campaignParams: function () {
            var campaign_keywords = "utm_source utm_medium utm_campaign utm_content utm_term".split(" "),
                kw = "",
                params = {};
            _.each(campaign_keywords, function (kwkey) {
                kw = _.getQueryParam(document.URL, kwkey);
                if (kw.length) params[kwkey] = kw
            });
            return params
        },
        searchEngine: function (referrer) {
            if (referrer.search("https?://(.*)google.([^/?]*)") === 0) return "google";
            else if (referrer.search("https?://(.*)bing.com") ===
                0) return "bing";
            else if (referrer.search("https?://(.*)yahoo.com") === 0) return "yahoo";
            else if (referrer.search("https?://(.*)duckduckgo.com") === 0) return "duckduckgo";
            else return null
        },
        searchInfo: function (referrer) {
            var search = _.info.searchEngine(referrer),
                param = search != "yahoo" ? "q" : "p",
                ret = {};
            if (search !== null) {
                ret["searchEngine"] = search;
                var keyword = _.getQueryParam(referrer, param);
                if (keyword.length) ret["searchEngineKeyword"] = keyword
            }
            return ret
        },
        browser: function () {
            var ua = userAgent,
                vend = navigator.vendor || "";
            if (window.opera) {
                if (_.includes(ua, "Mini")) return "Opera Mini";
                return "Opera"
            } else if (/(BlackBerry|PlayBook|BB10)/i.test(ua)) return "BlackBerry";
            else if (_.includes(ua, "Chrome")) return "Chrome";
            else if (_.includes(vend, "Apple")) {
                if (_.includes(ua, "Mobile")) return "Mobile Safari";
                return "Safari"
            } else if (_.includes(ua, "Android")) return "Android Mobile";
            else if (_.includes(ua, "Konqueror")) return "Konqueror";
            else if (_.includes(ua, "Firefox")) return "Firefox";
            else if (_.includes(ua, "MSIE")) return "Internet Explorer";
            else if (_.includes(ua,
                "Gecko")) return "Mozilla";
            else return ""
        },
        os: function () {
            var a = userAgent;
            if (/Windows/i.test(a)) {
                if (/Phone/.test(a)) return "Windows Mobile";
                return "Windows"
            } else if (/(iPhone|iPad|iPod)/.test(a)) return "iOS";
            else if (/Android/.test(a)) return "Android";
            else if (/(BlackBerry|PlayBook|BB10)/i.test(a)) return "BlackBerry";
            else if (/Mac/i.test(a)) return "Mac OS X";
            else if (/Linux/.test(a)) return "Linux";
            else return ""
        },
        device: function () {
            var a = userAgent;
            if (/iPhone/.test(a)) return "iPhone";
            else if (/iPad/.test(a)) return "iPad";
            else if (/iPod/.test(a)) return "iPod Touch";
            else if (/(BlackBerry|PlayBook|BB10)/i.test(a)) return "BlackBerry";
            else if (/Windows Phone/i.test(a)) return "Windows Phone";
            else if (/Android/.test(a)) return "Android";
            else return ""
        },
        referringDomain: function (referrer) {
            var split = referrer.split("/");
            if (split.length >= 3) return split[2];
            return ""
        },
        properties: function () {
            return _.strip_empty_properties({
                "os": _.info.os(),
                "browser": _.info.browser(),
                "referrer": document.referrer,
                "referringDomain": _.info.referringDomain(document.referrer),
                "device": _.info.device()
            })
        },
        people_properties: function () {
            return _.strip_empty_properties({
                "$os": _.info.os(),
                "$browser": _.info.browser()
            })
        },
        pageviewInfo: function (page) {
            return _.strip_empty_properties({
                "mp_page": page,
                "mp_referrer": document.referrer,
                "mp_browser": _.info.browser(),
                "mp_platform": _.info.os()
            })
        }
    };
    var console = {
        log: function () {
            if (DEBUG && !_.isUndefined(windowConsole) && windowConsole) try {
                windowConsole.log.apply(windowConsole, arguments)
            } catch (err) {
                _.each(arguments, function (arg) {
                    windowConsole.log(arg)
                })
            }
        },
        error: function () {
            if (DEBUG && !_.isUndefined(windowConsole) && windowConsole) {
                var args = ["Streakpanel error:"].concat(_.toArray(arguments));
                try {
                    windowConsole.error.apply(windowConsole, args)
                } catch (err) {
                    _.each(args, function (arg) {
                        windowConsole.error(arg)
                    })
                }
            }
        },
        critical: function () {
            if (!_.isUndefined(windowConsole) && windowConsole) {
                var args = ["Streakpanel error:"].concat(_.toArray(arguments));
                try {
                    windowConsole.error.apply(windowConsole, args)
                } catch (err) {
                    _.each(args, function (arg) {
                        windowConsole.error(arg)
                    })
                }
            }
        }
    };
    var DomTracker =
        function () {};
    DomTracker.prototype.create_properties = function () {};
    DomTracker.prototype.event_handler = function () {};
    DomTracker.prototype.after_track_handler = function () {};
    DomTracker.prototype.init = function (streakpanel_instance) {
        this.mp = streakpanel_instance;
        return this
    };
    DomTracker.prototype.track = function (query, event_name, properties, user_callback) {
        var that = this,
            elements = _.dom_query(query);
        if (elements.length == 0) {
            console.error("The DOM query (" + query + ") returned 0 elements");
            return
        }
        _.each(elements, function (element) {
            _.register_event(element,
                this.override_event, function (e) {
                    var options = {}, props = that.create_properties(properties, this),
                        timeout = that.mp.get_config("track_links_timeout");
                    that.event_handler(e, this, options);
                    window.setTimeout(that.track_callback(user_callback, props, options, true), timeout);
                    that.mp.track(event_name, props, that.track_callback(user_callback, props, options))
                })
        }, this);
        return true
    };
    DomTracker.prototype.track_callback = function (user_callback, props, options, timeout_occured) {
        timeout_occured = timeout_occured || false;
        var that = this;
        return function () {
            if (options.callback_fired) return;
            options.callback_fired = true;
            if (user_callback && user_callback(timeout_occured, props) === false) return;
            that.after_track_handler(props, options, timeout_occured)
        }
    };
    DomTracker.prototype.create_properties = function (properties, element) {
        var props;
        if (typeof properties === "function") props = properties(element);
        else props = _.extend({}, properties);
        return props
    };
    var LinkTracker = function () {
        this.override_event = "click"
    };
    _.inherit(LinkTracker, DomTracker);
    LinkTracker.prototype.create_properties =
        function (properties, element) {
            var props = LinkTracker.superclass.create_properties.apply(this, arguments);
            if (element.href) props["url"] = element.href;
            return props
    };
    LinkTracker.prototype.event_handler = function (evt, element, options) {
        options.new_tab = evt.which === 2 || evt.metaKey || element.target === "_blank";
        options.href = element.href;
        if (!options.new_tab) evt.preventDefault()
    };
    LinkTracker.prototype.after_track_handler = function (props, options, timeout_occured) {
        if (options.new_tab) return;
        setTimeout(function () {
            window.location =
                options.href
        }, 0)
    };
    var FormTracker = function () {
        this.override_event = "submit"
    };
    _.inherit(FormTracker, DomTracker);
    FormTracker.prototype.event_handler = function (evt, element, options) {
        options.element = element;
        evt.preventDefault()
    };
    FormTracker.prototype.after_track_handler = function (props, options, timeout_occured) {
        setTimeout(function () {
            options.element.submit()
        }, 0)
    };
    var StreakpanelCookie = function (config) {
        this["props"] = {};
        this.campaign_params_saved = false;
        if (config["cookie_name"]) this.name = "mp_" + config["cookie_name"];
        else this.name = "mp_" + config["token"] + "_streakpanel";
        this.load();
        this.update_config(config);
        this.upgrade(config);
        this.save()
    };
    StreakpanelCookie.prototype.properties = function () {
        var p = {};
        _.each(this["props"], function (v, k) {
            if (!_.include(RESERVED_PROPERTIES, k)) p[k] = v
        });
        return p
    };
    StreakpanelCookie.prototype.load = function () {
        if (this.disabled) return;
        var cookie = _.cookie.parse(this.name);
        if (cookie) this["props"] = _.extend({}, cookie)
    };
    StreakpanelCookie.prototype.upgrade = function (config) {
        var should_upgrade = config["upgrade"],
            old_cookie_name, old_cookie;
        if (should_upgrade) {
            old_cookie_name = "mp_super_properties";
            if (typeof should_upgrade === "string") old_cookie_name = should_upgrade;
            old_cookie = _.cookie.parse(old_cookie_name);
            _.cookie.remove(old_cookie_name);
            _.cookie.remove(old_cookie_name, true);
            if (old_cookie) this["props"] = _.extend(this["props"], old_cookie["all"], old_cookie["events"])
        }
        if (!config["cookie_name"] && config["name"] !== "streakpanel") {
            old_cookie_name = "mp_" + config["token"] + "_" + config["name"];
            old_cookie = _.cookie.parse(old_cookie_name);
            if (old_cookie) {
                _.cookie.remove(old_cookie_name);
                _.cookie.remove(old_cookie_name, true);
                this.register_once(old_cookie)
            }
        }
    };
    StreakpanelCookie.prototype.save = function () {
        if (this.disabled) return;
        _.cookie.set(this.name, _.JSONEncode(this["props"]), this.expire_days, this.cross_subdomain, this.secure)
    };
    StreakpanelCookie.prototype.remove = function () {
        _.cookie.remove(this.name, false);
        _.cookie.remove(this.name, true)
    };
    StreakpanelCookie.prototype.clear = function () {
        this.remove();
        this["props"] = {}
    };
    StreakpanelCookie.prototype.register_once =
        function (props, default_value, days) {
            if (_.isObject(props)) {
                if (typeof default_value === "undefined") default_value = "None";
                this.expire_days = typeof days === "undefined" ? this.default_expiry : days;
                _.each(props, function (val, prop) {
                    if (!this["props"][prop] || this["props"][prop] === default_value) this["props"][prop] = val
                }, this);
                this.save();
                return true
            }
            return false
    };
    StreakpanelCookie.prototype.register = function (props, days) {
        if (_.isObject(props)) {
            this.expire_days = typeof days === "undefined" ? this.default_expiry : days;
            _.extend(this["props"],
                props);
            this.save();
            return true
        }
        return false
    };
    StreakpanelCookie.prototype.unregister = function (prop) {
        if (prop in this["props"]) {
            delete this["props"][prop];
            this.save()
        }
    };
    StreakpanelCookie.prototype.update_campaign_params = function () {
        if (!this.campaign_params_saved) {
            this.register_once(_.info.campaignParams());
            this.campaign_params_saved = true
        }
    };
    StreakpanelCookie.prototype.update_search_keyword = function (referrer) {
        this.register(_.info.searchInfo(referrer))
    };
    StreakpanelCookie.prototype.update_referrer_info = function (referrer) {
        this.register_once({
            "referrer": referrer ||
                "$direct",
            "referringDomain": _.info.referringDomain(referrer) || "$direct"
        }, "")
    };
    StreakpanelCookie.prototype.get_referrer_info = function () {
        return _.strip_empty_properties({
            "referrer": this["props"]["initial_referrer"],
            "referringDomain": this["props"]["referringDomain"]
        })
    };
    StreakpanelCookie.prototype.safe_merge = function (props) {
        _.each(this["props"], function (val, prop) {
            if (!(prop in props)) props[prop] = val
        });
        return props
    };
    StreakpanelCookie.prototype.update_config = function (config) {
        this.default_expiry = this.expire_days =
            config["cookie_expiration"];
        this.set_disabled(config["disable_cookie"]);
        this.set_cross_subdomain(config["cross_subdomain_cookie"]);
        this.set_secure(config["secure_cookie"])
    };
    StreakpanelCookie.prototype.set_disabled = function (disabled) {
        this.disabled = disabled;
        if (this.disabled) this.remove()
    };
    StreakpanelCookie.prototype.set_cross_subdomain = function (cross_subdomain) {
        if (cross_subdomain !== this.cross_subdomain) {
            this.cross_subdomain = cross_subdomain;
            this.remove();
            this.save()
        }
    };
    StreakpanelCookie.prototype.get_cross_subdomain =
        function () {
            return this.cross_subdomain
    };
    StreakpanelCookie.prototype.set_secure = function (secure) {
        if (secure !== this.secure) {
            this.secure = secure ? true : false;
            this.remove();
            this.save()
        }
    };
    StreakpanelCookie.prototype._add_to_people_queue = function (queue, data) {
        var q_key = this._get_queue_key(queue),
            q_data = data[queue],
            set_q = this._get_or_create_queue(SET_ACTION),
            set_once_q = this._get_or_create_queue(SET_ONCE_ACTION),
            add_q = this._get_or_create_queue(ADD_ACTION),
            append_q = this._get_or_create_queue(APPEND_ACTION, []);
        if (q_key ===
            SET_QUEUE_KEY) {
            _.extend(set_q, q_data);
            this._pop_from_people_queue(ADD_ACTION, q_data)
        } else if (q_key === SET_ONCE_QUEUE_KEY) _.each(q_data, function (v, k) {
            if (!(k in set_once_q)) set_once_q[k] = v
        });
        else if (q_key === ADD_QUEUE_KEY) _.each(q_data, function (v, k) {
            if (k in set_q) set_q[k] += v;
            else {
                if (!(k in add_q)) add_q[k] = 0;
                add_q[k] += v
            }
        }, this);
        else if (q_key === APPEND_QUEUE_KEY) append_q.push(q_data);
        console.log("MIXPANEL PEOPLE REQUEST (QUEUED, PENDING IDENTIFY):");
        console.log(data);
        this.save()
    };
    StreakpanelCookie.prototype._pop_from_people_queue =
        function (queue, data) {
            var q = this._get_queue(queue);
            if (!_.isUndefined(q)) {
                _.each(data, function (v, k) {
                    delete q[k]
                }, this);
                this.save()
            }
    };
    StreakpanelCookie.prototype._get_queue_key = function (queue) {
        if (queue === SET_ACTION) return SET_QUEUE_KEY;
        else if (queue === SET_ONCE_ACTION) return SET_ONCE_QUEUE_KEY;
        else if (queue === ADD_ACTION) return ADD_QUEUE_KEY;
        else if (queue === APPEND_ACTION) return APPEND_QUEUE_KEY;
        else console.error("Invalid queue:", queue)
    };
    StreakpanelCookie.prototype._get_queue = function (queue) {
        return this["props"][this._get_queue_key(queue)]
    };
    StreakpanelCookie.prototype._get_or_create_queue = function (queue, default_val) {
        var key = this._get_queue_key(queue),
            default_val = _.isUndefined(default_val) ? {} : default_val;
        return this["props"][key] || (this["props"][key] = default_val)
    };
    var create_mplib = function (token, config, name) {
        var instance, target = name === PRIMARY_INSTANCE_NAME ? streakpanel : streakpanel[name];
        if (target && !_.isArray(target)) {
            console.error("You have already initialized " + name);
            return
        }
        instance = new StreakpanelLib;
        instance._init(token, config, name);
        instance["people"] = new StreakpanelPeople;
        instance["people"]._init(instance);
        DEBUG = DEBUG || instance.get_config("debug");
        if (!_.isUndefined(target)) {
            instance._execute_array.call(instance["people"], target["people"]);
            instance._execute_array(target)
        }
        return instance
    };
    var StreakpanelLib = function () {};
    StreakpanelLib.prototype.init = function (token, config, name) {
        if (typeof name === "undefined") {
            console.error("You must name your new library: init(token, config, name)");
            return
        }
        if (name === PRIMARY_INSTANCE_NAME) {
            console.error("You must initialize the main streakpanel object right after you include the Streakpanel js snippet");
            return
        }
        var instance = create_mplib(token, config, name);
        streakpanel[name] = instance;
        instance._loaded();
        return instance
    };
    StreakpanelLib.prototype._init = function (token, config, name) {
        this["__loaded"] = true;
        this["config"] = {};
        this.set_config(_.extend({}, DEFAULT_CONFIG, config, {
            "name": name,
            "token": token,
            "callback_fn": (name === PRIMARY_INSTANCE_NAME ? name : PRIMARY_INSTANCE_NAME + "." + name) + "._jsc"
        }));
        this["_jsc"] = function () {};
        this.__dom_loaded_queue = [];
        this.__request_queue = [];
        this.__disabled_events = [];
        this._flags = {
            "disable_all_events": false,
            "identify_called": false
        };
        this["cookie"] = new StreakpanelCookie(this["config"])
    };
    StreakpanelLib.prototype._loaded = function () {
        this.get_config("loaded")(this);
        if (this.get_config("track_pageview")) this.track_pageview()
    };
    StreakpanelLib.prototype._dom_loaded = function () {
        _.each(this.__dom_loaded_queue, function (item) {
            this._track_dom.apply(this, item)
        }, this);
        _.each(this.__request_queue, function (item) {
            this._send_request.apply(this, item)
        }, this);
        delete this.__dom_loaded_queue;
        delete this.__request_queue
    };
    StreakpanelLib.prototype._track_dom =
        function (DomClass, args) {
            if (this.get_config("img")) {
                console.error("You can't use DOM tracking functions with img = true.");
                return false
            }
            if (!DOM_LOADED) {
                this.__dom_loaded_queue.push([DomClass, args]);
                return false
            }
            var dt = (new DomClass).init(this);
            return dt.track.apply(dt, args)
    };
    StreakpanelLib.prototype._prepare_callback = function (callback, data) {
        if (_.isUndefined(callback)) return null;
        if (USE_XHR) {
            var callback_function = function (response) {
                callback(response, data)
            };
            return callback_function
        } else {
            var jsc = this["_jsc"],
                randomized_cb = "" + Math.floor(Math.random() * 1E8),
                callback_string = this.get_config("callback_fn") + '["' + randomized_cb + '"]';
            jsc[randomized_cb] = function (response) {
                delete jsc[randomized_cb];
                callback(response, data)
            };
            return callback_string
        }
    };
    StreakpanelLib.prototype._send_request = function (url, data, callback) {
        if (ENQUEUE_REQUESTS) {
            this.__request_queue.push(arguments);
            return
        }
        var verbose_mode = this.get_config("verbose");
        if (this.get_config("test")) data["test"] = 1;
        if (verbose_mode) data["verbose"] = 1;
        if (this.get_config("img")) data["img"] =
            1;
        if (callback && !USE_XHR) data["callback"] = callback;
        var queryString = _.HTTPBuildQuery(data);
        if ("img" in data) {
            var img = document.createElement("img");
            img.src = url;
            document.body.appendChild(img)
        } else if (USE_XHR) {
            var req = new XMLHttpRequest;
            req.open("POST", url, true);
            req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            req.withCredentials = true;
            req.onreadystatechange = function (e) {
                if (req.readyState === 4)
                    if (req.status === 200) {
                        if (callback)
                            if (verbose_mode) callback(_.JSONDecode(req.responseText));
                            else callback(Number(req.responseText))
                    } else {
                        var error = "Bad HTTP status: " + req.status + " " + req.statusText;
                        console.error(error);
                        if (callback)
                            if (verbose_mode) callback({
                                status: 0,
                                error: error
                            });
                            else callback(0)
                    }
            };
            req.send(queryString)
        } else {
            var script = document.createElement("script");
            script.type = "text/javascript";
            script.async = true;
            script.defer = true;
            script.src = url;
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(script, s)
        }
    };
    StreakpanelLib.prototype._execute_array = function (array) {
        var fn_name,
            alias_calls = [],
            other_calls = [],
            tracking_calls = [];
        _.each(array, function (item) {
            if (item) {
                fn_name = item[0];
                if (typeof item === "function") item.call(this);
                else if (_.isArray(item) && fn_name === "alias") alias_calls.push(item);
                else if (_.isArray(item) && fn_name.indexOf("track") != -1 && typeof this[fn_name] === "function") tracking_calls.push(item);
                else other_calls.push(item)
            }
        }, this);
        var execute = function (calls, context) {
            _.each(calls, function (item) {
                this[item[0]].apply(this, item.slice(1))
            }, context)
        };
        execute(alias_calls, this);
        execute(other_calls, this);
        execute(tracking_calls, this)
    };
    StreakpanelLib.prototype.push = function (item) {
        this._execute_array([item])
    };
    StreakpanelLib.prototype.disable = function (events) {
        if (typeof events === "undefined") this._flags.disable_all_events = true;
        else this.__disabled_events = this.__disabled_events.concat(events)
    };
    StreakpanelLib.prototype.track = function (event_name, properties, callback) {
        if (typeof event_name === "undefined") {
            console.error("No event name provided to streakpanel.track");
            return
        }
        if (_.isBlockedUA() ||
            this._flags.disable_all_events || _.include(this.__disabled_events, event_name)) {
            if (typeof callback !== "undefined") callback(0);
            return
        }
        properties = properties || {};
        this["cookie"].update_search_keyword(document.referrer);
        if (this.get_config("store_google")) this["cookie"].update_campaign_params();
        if (this.get_config("save_referrer")) this["cookie"].update_referrer_info(document.referrer);
        properties = _.extend({}, {
            "timestamp": (new Date).getTime() * 1E3,
            "screenWidth": screen.width,
            "screenHeight": screen.height,
            "windowWidth": window.innerWidth,
            "windowHeight": window.innerHeight
        }, _.info.properties(), this["cookie"].properties(), properties);
        var data = {
            "event": event_name,
            "properties": properties
        };
        eventQueue.push(data);
        this.send_batched_requests_throttled();
        return data
    };
    StreakpanelLib.prototype.send_batched_requests = function () {
        var request = {
            data: eventQueue,
            clientRequestTimestamp: (new Date).getTime() * 1E3
        };
        var json_data = _.JSONEncode(request);
        eventQueue = [];
        this._send_request(this.get_config("api_host") + "/eventtracking/track", {
            json: json_data
        }, null)
    };
    StreakpanelLib.prototype.send_batched_requests_throttled = function () {
        if (eventTimer) clearTimeout(eventTimer);
        eventTimer = setTimeout(_.bind(this.send_batched_requests, this), THROTTLE_MILLISECONDS)
    };
    StreakpanelLib.prototype.track_pageview = function (page) {
        if (typeof page === "undefined") page = document.location.href;
        this.track("mp_page_view", _.info.pageviewInfo(page))
    };
    StreakpanelLib.prototype.track_links = function () {
        return this._track_dom.call(this, LinkTracker, arguments)
    };
    StreakpanelLib.prototype.track_forms =
        function () {
            return this._track_dom.call(this, FormTracker, arguments)
    };
    StreakpanelLib.prototype.register = function (props, days) {
        this["cookie"].register(props, days)
    };
    StreakpanelLib.prototype.register_once = function (props, default_value, days) {
        this["cookie"].register_once(props, default_value, days)
    };
    StreakpanelLib.prototype.unregister = function (property) {
        this["cookie"].unregister(property)
    };
    StreakpanelLib.prototype._register_single = function (prop, value) {
        var props = {};
        props[prop] = value;
        this.register(props)
    };
    StreakpanelLib.prototype.identify =
        function (unique_id, _set_callback, _add_callback, _append_callback, _set_once_callback) {
            if (unique_id != this.get_distinct_id() && unique_id != this.get_property(ALIAS_ID_KEY)) {
                this.unregister(ALIAS_ID_KEY);
                this._register_single("distinct_id", unique_id)
            }
            this._flags.identify_called = true;
            this["people"]._flush(_set_callback, _add_callback, _append_callback, _set_once_callback)
    };
    StreakpanelLib.prototype.get_distinct_id = function () {
        return this.get_property("distinct_id")
    };
    StreakpanelLib.prototype.alias = function (alias,
        original) {
        if (alias === this.get_property(PEOPLE_DISTINCT_ID_KEY)) {
            console.critical("Attempting to create alias for existing People user - aborting.");
            return -2
        }
        var _this = this;
        if (_.isUndefined(original)) original = this.get_distinct_id();
        if (alias !== original) {
            this._register_single(ALIAS_ID_KEY, alias);
            return this.track("$create_alias", {
                "alias": alias,
                "distinct_id": original
            }, function (response) {
                _this.identify(alias)
            })
        } else {
            console.error("alias matches current distinct_id - skipping api call.");
            this.identify(alias);
            return -1
        }
    };
    StreakpanelLib.prototype.name_tag = function (name_tag) {
        this._register_single("mp_name_tag", name_tag)
    };
    StreakpanelLib.prototype.set_config = function (config) {
        if (_.isObject(config)) {
            _.extend(this["config"], config);
            if (this["cookie"]) this["cookie"].update_config(this["config"]);
            DEBUG = DEBUG || this.get_config("debug")
        }
    };
    StreakpanelLib.prototype.get_config = function (prop_name) {
        return this["config"][prop_name]
    };
    StreakpanelLib.prototype.get_property = function (property_name) {
        return this["cookie"]["props"][property_name]
    };
    StreakpanelLib.prototype.toString = function () {
        var name = this.get_config("name");
        if (name !== PRIMARY_INSTANCE_NAME) name = PRIMARY_INSTANCE_NAME + "." + name;
        return name
    };
    var StreakpanelPeople = function () {};
    StreakpanelPeople.prototype._init = function (streakpanel) {
        this._streakpanel = streakpanel
    };
    StreakpanelPeople.prototype.set = function (prop, to, callback) {
        var data = {};
        var $set = {};
        if (_.isObject(prop)) {
            _.each(prop, function (v, k) {
                if (k == "$distinct_id" || k == "$token") return;
                else $set[k] = v
            });
            callback = to
        } else $set[prop] = to; if (this._get_config("save_referrer")) this._streakpanel.cookie.update_referrer_info(document.referrer);
        $set = _.extend({}, _.info.people_properties(), this._streakpanel.cookie.get_referrer_info(), $set);
        data[SET_ACTION] = $set;
        return this._send_request(data, callback)
    };
    StreakpanelPeople.prototype.set_once = function (prop, to, callback) {
        var data = {};
        var $set_once = {};
        if (_.isObject(prop)) {
            _.each(prop, function (v, k) {
                if (k == "$distinct_id" || k == "$token") return;
                else $set_once[k] = v
            });
            callback = to
        } else $set_once[prop] = to;
        data[SET_ONCE_ACTION] = $set_once;
        return this._send_request(data, callback)
    };
    StreakpanelPeople.prototype.increment =
        function (prop, by, callback) {
            var data = {};
            var $add = {};
            if (_.isObject(prop)) {
                _.each(prop, function (v, k) {
                    if (k == "$distinct_id" || k == "$token") return;
                    else if (isNaN(parseFloat(v))) {
                        console.error("Invalid increment value passed to streakpanel.people.increment - must be a number");
                        return
                    } else $add[k] = v
                });
                callback = by
            } else {
                if (_.isUndefined(by)) by = 1;
                $add[prop] = by
            }
            data[ADD_ACTION] = $add;
            return this._send_request(data, callback)
    };
    StreakpanelPeople.prototype.append = function (list_name, value, callback) {
        var data = {};
        var $append = {};
        if (_.isObject(list_name)) {
            _.each(list_name, function (v, k) {
                if (k == "$distinct_id" || k == "$token") return;
                else $append[k] = v
            });
            callback = value
        } else $append[list_name] = value;
        data[APPEND_ACTION] = $append;
        return this._send_request(data, callback)
    };
    StreakpanelPeople.prototype.track_charge = function (amount, properties, callback) {
        if (!_.isNumber(amount)) {
            amount = parseFloat(amount);
            if (isNaN(amount)) {
                console.error("Invalid value passed to streakpanel.people.track_charge - must be a number");
                return
            }
        }
        return this.append("$transactions",
            _.extend({
                "$amount": amount
            }, properties), callback)
    };
    StreakpanelPeople.prototype.clear_charges = function (callback) {
        return this.set("$transactions", [], callback)
    };
    StreakpanelPeople.prototype.delete_user = function () {
        if (!this._identify_called()) {
            console.error("streakpanel.people.delete_user() requires you to call identify() first");
            return
        }
        var data = {
            "$delete": this._streakpanel.get_distinct_id()
        };
        return this._send_request(data)
    };
    StreakpanelPeople.prototype.toString = function () {
        return this._streakpanel.toString() +
            ".people"
    };
    StreakpanelPeople.prototype._send_request = function (data, callback) {
        data["$token"] = this._get_config("token");
        data["$distinct_id"] = this._streakpanel.get_distinct_id();
        var date_encoded_data = _.encodeDates(data),
            truncated_data = _.truncate(date_encoded_data, 255),
            json_data = _.JSONEncode(date_encoded_data),
            encoded_data = _.base64Encode(json_data);
        if (!this._identify_called()) {
            this._enqueue(data);
            if (!_.isUndefined(callback))
                if (this._get_config("verbose")) callback({
                    status: -1,
                    error: null
                });
                else callback(-1);
            return truncated_data
        }
        console.log("MIXPANEL PEOPLE REQUEST:");
        console.log(truncated_data);
        this._streakpanel._send_request(this._get_config("api_host") + "/engage/", {
            "data": encoded_data
        }, this._streakpanel._prepare_callback(callback, truncated_data));
        return truncated_data
    };
    StreakpanelPeople.prototype._get_config = function (conf_var) {
        return this._streakpanel.get_config(conf_var)
    };
    StreakpanelPeople.prototype._identify_called = function () {
        return this._streakpanel._flags.identify_called === true
    };
    StreakpanelPeople.prototype._enqueue =
        function (data) {
            if (SET_ACTION in data) this._streakpanel.cookie._add_to_people_queue(SET_ACTION, data);
            else if (SET_ONCE_ACTION in data) this._streakpanel.cookie._add_to_people_queue(SET_ONCE_ACTION, data);
            else if (ADD_ACTION in data) this._streakpanel.cookie._add_to_people_queue(ADD_ACTION, data);
            else if (APPEND_ACTION in data) this._streakpanel.cookie._add_to_people_queue(APPEND_ACTION, data);
            else console.error("Invalid call to _enqueue():", data)
    };
    StreakpanelPeople.prototype._flush = function (_set_callback, _add_callback,
        _append_callback, _set_once_callback) {
        var _this = this,
            $set_queue = _.extend({}, this._streakpanel.cookie._get_queue(SET_ACTION)),
            $set_once_queue = _.extend({}, this._streakpanel.cookie._get_queue(SET_ONCE_ACTION)),
            $add_queue = _.extend({}, this._streakpanel.cookie._get_queue(ADD_ACTION)),
            $append_queue = this._streakpanel.cookie._get_queue(APPEND_ACTION);
        if (!_.isUndefined($set_queue) && _.isObject($set_queue) && !_.isEmptyObject($set_queue)) {
            _this._streakpanel.cookie._pop_from_people_queue(SET_ACTION, $set_queue);
            this.set($set_queue,
                function (response, data) {
                    if (response == 0) _this._streakpanel.cookie._add_to_people_queue(SET_ACTION, $set_queue);
                    if (!_.isUndefined(_set_callback)) _set_callback(response, data)
                })
        }
        if (!_.isUndefined($set_once_queue) && _.isObject($set_once_queue) && !_.isEmptyObject($set_once_queue)) {
            _this._streakpanel.cookie._pop_from_people_queue(SET_ONCE_ACTION, $set_once_queue);
            this.set_once($set_once_queue, function (response, data) {
                if (response == 0) _this._streakpanel.cookie._add_to_people_queue(SET_ONCE_ACTION, $set_once_queue);
                if (!_.isUndefined(_set_once_callback)) _set_once_callback(response, data)
            })
        }
        if (!_.isUndefined($add_queue) && _.isObject($add_queue) && !_.isEmptyObject($add_queue)) {
            _this._streakpanel.cookie._pop_from_people_queue(ADD_ACTION, $add_queue);
            this.increment($add_queue, function (response, data) {
                if (response == 0) _this._streakpanel.cookie._add_to_people_queue(ADD_ACTION, $add_queue);
                if (!_.isUndefined(_add_callback)) _add_callback(response, data)
            })
        }
        if (!_.isUndefined($append_queue) && _.isArray($append_queue) && $append_queue.length) {
            for (var i =
                $append_queue.length - 1; i >= 0; i--) {
                var $append_item = $append_queue.pop();
                _this.append($append_item, function (response, data) {
                    if (response == 0) _this._streakpanel.cookie._add_to_people_queue(APPEND_ACTION, $append_item);
                    if (!_.isUndefined(_append_callback)) _append_callback(response, data)
                })
            }
            _this._streakpanel.cookie.save()
        }
    };
    _["toArray"] = _.toArray;
    _["isObject"] = _.isObject;
    _["JSONEncode"] = _.JSONEncode;
    _["JSONDecode"] = _.JSONDecode;
    _["isEmptyObject"] = _.isEmptyObject;
    StreakpanelLib.prototype["init"] = StreakpanelLib.prototype.init;
    StreakpanelLib.prototype["disable"] = StreakpanelLib.prototype.disable;
    StreakpanelLib.prototype["track"] = StreakpanelLib.prototype.track;
    StreakpanelLib.prototype["track_links"] = StreakpanelLib.prototype.track_links;
    StreakpanelLib.prototype["track_forms"] = StreakpanelLib.prototype.track_forms;
    StreakpanelLib.prototype["track_pageview"] = StreakpanelLib.prototype.track_pageview;
    StreakpanelLib.prototype["register"] = StreakpanelLib.prototype.register;
    StreakpanelLib.prototype["register_once"] = StreakpanelLib.prototype.register_once;
    StreakpanelLib.prototype["unregister"] = StreakpanelLib.prototype.unregister;
    StreakpanelLib.prototype["identify"] = StreakpanelLib.prototype.identify;
    StreakpanelLib.prototype["alias"] = StreakpanelLib.prototype.alias;
    StreakpanelLib.prototype["name_tag"] = StreakpanelLib.prototype.name_tag;
    StreakpanelLib.prototype["set_config"] = StreakpanelLib.prototype.set_config;
    StreakpanelLib.prototype["get_config"] = StreakpanelLib.prototype.get_config;
    StreakpanelLib.prototype["get_property"] = StreakpanelLib.prototype.get_property;
    StreakpanelLib.prototype["get_distinct_id"] = StreakpanelLib.prototype.get_distinct_id;
    StreakpanelLib.prototype["toString"] = StreakpanelLib.prototype.toString;
    StreakpanelCookie.prototype["properties"] = StreakpanelCookie.prototype.properties;
    StreakpanelCookie.prototype["update_search_keyword"] = StreakpanelCookie.prototype.update_search_keyword;
    StreakpanelCookie.prototype["update_referrer_info"] = StreakpanelCookie.prototype.update_referrer_info;
    StreakpanelCookie.prototype["get_cross_subdomain"] = StreakpanelCookie.prototype.get_cross_subdomain;
    StreakpanelCookie.prototype["clear"] = StreakpanelCookie.prototype.clear;
    StreakpanelPeople.prototype["set"] = StreakpanelPeople.prototype.set;
    StreakpanelPeople.prototype["set_once"] = StreakpanelPeople.prototype.set_once;
    StreakpanelPeople.prototype["increment"] = StreakpanelPeople.prototype.increment;
    StreakpanelPeople.prototype["append"] = StreakpanelPeople.prototype.append;
    StreakpanelPeople.prototype["track_charge"] = StreakpanelPeople.prototype.track_charge;
    StreakpanelPeople.prototype["clear_charges"] = StreakpanelPeople.prototype.clear_charges;
    StreakpanelPeople.prototype["delete_user"] = StreakpanelPeople.prototype.delete_user;
    StreakpanelPeople.prototype["toString"] = StreakpanelPeople.prototype.toString;
    if (_.isUndefined(streakpanel)) {
        console.critical("'streakpanel' object not initialized. Ensure you are using the latest version of the Streakpanel JS Library along with the snippet we provide.");
        return
    }
    if (streakpanel["__loaded"] || streakpanel["config"] && streakpanel["cookie"]) {
        console.error("Streakpanel library has already been downloaded at least once.");
        return
    }
    if (SNIPPET_VERSION < 1.1) {
        console.critical("Version mismatch; please ensure you're using the latest version of the Streakpanel code snippet.");
        return
    }
    var instances = {};
    _.each(streakpanel["_i"], function (item) {
        var name, instance;
        if (item && _.isArray(item)) {
            name = item[item.length - 1];
            instance = create_mplib.apply(this, item);
            instances[name] = instance
        }
    });
    var extend_mp = function () {
        _.each(instances, function (instance, name) {
            if (name !== PRIMARY_INSTANCE_NAME) streakpanel[name] = instance
        });
        streakpanel["_"] = _
    };
    streakpanel["init"] =
        function (token, config, name) {
            if (name) {
                if (!streakpanel[name]) {
                    streakpanel[name] = instances[name] = create_mplib(token, config, name);
                    streakpanel[name]._loaded()
                }
            } else {
                var instance = streakpanel;
                if (instances[PRIMARY_INSTANCE_NAME]) instance = instances[PRIMARY_INSTANCE_NAME];
                else if (token) instance = create_mplib(token, config, PRIMARY_INSTANCE_NAME);
                window[PRIMARY_INSTANCE_NAME] = streakpanel = instance;
                extend_mp()
            }
    };
    streakpanel["init"]();
    _.each(instances, function (instance) {
        instance._loaded()
    });

    function dom_loaded_handler() {
        if (dom_loaded_handler.done) return;
        dom_loaded_handler.done = true;
        DOM_LOADED = true;
        ENQUEUE_REQUESTS = false;
        _.each(instances, function (inst) {
            inst._dom_loaded()
        })
    }
    if (document.addEventListener)
        if (document.readyState == "complete") dom_loaded_handler();
        else document.addEventListener("DOMContentLoaded", dom_loaded_handler, false);
        else if (document.attachEvent) {
        document.attachEvent("onreadystatechange", dom_loaded_handler);
        var toplevel = false;
        try {
            toplevel = window.frameElement == null
        } catch (e) {}
        if (document.documentElement.doScroll && toplevel) {
            function do_scroll_check() {
                try {
                    document.documentElement.doScroll("left")
                } catch (e) {
                    setTimeout(do_scroll_check,
                        1);
                    return
                }
                dom_loaded_handler()
            }
            do_scroll_check()
        }
    }
    _.register_event(window, "load", dom_loaded_handler, true)
})(window["streakpanel"]);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var BoxDisplayText = function () {};
    _.extend(BoxDisplayText.prototype, {
        getDetailsText: function (box) {
            var pipeline = box.getPipeline();
            var fields = this._getFieldsInOrder(pipeline);
            fields = _.uniq(fields, false, function (field) {
                return field.key()
            });
            var detailText = [];
            var notes = $.cleanText(box.get("notes")).trim() ||
                "";
            if (notes) detailText.push(notes);
            for (var ii = 0; ii < fields.length; ii++) {
                var text = BB.UI.getFieldKeyText(box, pipeline, fields[ii].key(), true).escapeHTML();
                if (text.trim().length > 0) detailText.push(text.trim())
            }
            return detailText.join(", ")
        },
        _getFieldsInOrder: function (pipeline) {
            var columnOrder = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.load(pipeline);
            var columnVisibility = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings.load(pipeline);
            if (!columnOrder || !columnOrder.data || !_.isArray(columnOrder.data)) return pipeline.getFields();
            var fields = [];
            for (var ii = 0; ii < columnOrder.data.length; ii++) {
                var column = columnOrder.data[ii];
                var parts = column.split("|");
                if (parts[0] === "field") fields.push(pipeline.getField(parts[1]))
            }
            return fields
        },
        destroy: function () {}
    });
    BB.Services.BoxDisplayText = new BoxDisplayText
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        BB = Streak.BentoBox;
    var BoxSearcher = {
        searchNameByQuery: function (query) {
            var boxes = _(BB.Data.getAllBoxes()).chain().filter(function (box) {
                if (box.get("name")) return box.get("name").toLowerCase().indexOf(query.toLowerCase()) > -1;
                return false
            }).sortBy(function (box) {
                if (box.get("name")) return -1 * box.get("name").intersectionLength(query);
                return 0
            }).first(50).value();
            return boxes
        }
    };
    BB.Services.BoxSearcher = BoxSearcher
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        BB = Streak.BentoBox;
    var SuggestedBoxNames = {
        getSuggestions: function (threads) {
            var self = this;
            var i;
            if (threads && threads.length > 0) {
                var map = {
                    names: {},
                    companies: {}
                };
                var names = _.sortedPluck(threads, {
                    pluck: function (thread) {
                        var arr = [];
                        if (thread.get("emailAddresses"))
                            for (var i = 0; i < thread.get("emailAddresses").length; i++)
                                if (thread.get("emailAddresses")[i] != Streak.userEmail) {
                                    var names = thread.get("names");
                                    if (names && names.length > 0)
                                        if (names[i]) arr.push(names[i].capitalize());
                                        else arr.push(thread.get("emailAddresses")[i].split("@")[0])
                                }
                        return arr
                    },
                    filter: function (name) {
                        return name !== "me"
                    }
                });
                names.reverse();
                for (i = 0; i < names.length; i++) names[i] = $.trim(names[i].replace("\u2706", "")).split(" ").map(function (s) {
                    return s.capitalize()
                }).join(" ");
                var nameHash = {};
                for (i = 0; i < names.length; i++)
                    if (names[i].indexOf(" ") > -1) nameHash[names[i].split(" ")[0].toLowerCase()] = names[i];
                names = _.filter(names, function (name) {
                    if (name.indexOf(" ") === -1) return !nameHash[name.toLowerCase()];
                    return true
                });
                var cDomain = BB.getUser().get("email").split("@")[1].split(".")[0];
                var companies = _.sortedPluck(threads, {
                    pluck: function (thread) {
                        return thread.get("emailAddresses")
                    },
                    map: function (address) {
                        return address.split("@")[1].capitalize().split(".")[0]
                    },
                    filter: function (domain) {
                        return BB.Constants.EMAIL_BLACK_LIST.indexOf(domain.toLowerCase()) === -1 && domain.toLowerCase() !== cDomain.toLowerCase()
                    }
                });
                companies.reverse();
                var allSuggestions = [];
                var subjects = _.pluckPlus(threads, function (thread) {
                    try {
                        return thread.get("subject").stripTags()
                    } catch (e) {
                        return ""
                    }
                });
                allSuggestions = allSuggestions.concat(_.firstIfPresent([subjects, companies, names]));
                allSuggestions = allSuggestions.concat(_.restIfPresent([names, companies, subjects]));
                var finalSugggestions = _.chain(allSuggestions).uniq().compact().filter(this._doesBoxNameNotExist).value();
                return finalSugggestions
            }
        },
        _doesBoxNameNotExist: function (boxName) {
            var boxes = BB.Data.getAllBoxes();
            for (var ii = 0; ii < boxes.length; ii++)
                if (boxes[ii].displayName().toLowerCase() === boxName.toLowerCase()) return false;
            return true
        }
    };
    BB.Services.SuggestedBoxNames =
        SuggestedBoxNames
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        jwerty = Streak.jwerty,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PUNCTUATION_REGEX = /[^\w]|\s/;
    var CharacterSequenceController = function () {
        this._keyBuffer = null;
        this._bufferHistory = [];
        this._stateMachine = null;
        this._sequences = [];
        this._characterSequenceModels = [];
        this._setupShortcutListenerStateMachine()
    };
    _.extend(CharacterSequenceController.prototype, {
        addDataSource: function (characterSequenceModel) {
            this._characterSequenceModels.push(characterSequenceModel);
            _.mutate("union", this._sequences, characterSequenceModel.getSequences());
            characterSequenceModel.addDelegate(this)
        },
        sequencesChanged: function (characterSequenceModel) {
            var self = this;
            var sequences = _.chain(this._characterSequenceModels).map(function (characterSequenceModel) {
                return characterSequenceModel.getSequences()
            }).flatten().value();
            this._sequences.length = 0;
            _.mutate("union", this._sequences, sequences)
        }
    });
    _.extend(CharacterSequenceController.prototype, {
        _setupShortcutListenerStateMachine: function () {
            var self =
                this;
            this._stateMachine = Streak.StateMachine.create({
                initial: "start",
                events: [{
                    name: "charPress",
                    from: ["start", "someMatches"],
                    to: "bufferCheck"
                }, {
                    name: "charPress",
                    from: ["noMatches"],
                    to: "noMatches"
                }, {
                    name: "noMatching",
                    from: ["bufferCheck"],
                    to: "noMatches"
                }, {
                    name: "matching",
                    from: ["bufferCheck"],
                    to: "someMatches"
                }, {
                    name: "deletePress",
                    from: ["noMatches", "someMatches"],
                    to: "bufferCheck"
                }, {
                    name: "deletePress",
                    from: ["start"],
                    to: "start"
                }, {
                    name: "reset",
                    from: ["noMatches", "someMatches", "bufferCheck", "start"],
                    to: "start"
                }],
                callbacks: {
                    onstart: _.bind(this._onStart, this),
                    onnoMatches: _.bind(this._onNoMatches, this),
                    onsomeMatches: _.bind(this._onSomeMatches, this),
                    onbufferCheck: _.bind(this._onBufferCheck, this),
                    onbeforedeletePress: _.bind(this._onBeforeDeletePress, this)
                }
            })
        },
        _onStart: function (event, from, to) {
            this._keyBuffer = "";
            this._bufferHistory.length = 0;
            this._callNoMatchCallbacks()
        },
        _onNoMatches: function (event, from, to) {
            if (this._keyBuffer.length > 0) this._bufferHistory.push(this._keyBuffer);
            this._callNoMatchCallbacks()
        },
        _onSomeMatches: function (event,
            from, to) {
            if (this._keyBuffer.length > 0) this._bufferHistory.push(this._keyBuffer)
        },
        _onBufferCheck: function (event, from, to, keyPressEvent) {
            if (!this._keyBuffer || this._keyBuffer.length === 0) {
                this._stateMachine.reset();
                return
            }
            var matchedSequences = this._findPartialMatchSequences();
            if (matchedSequences.length === 0) {
                if (this._keyBuffer.match(/\s/)) this._stateMachine.reset();
                this._keyBuffer = "";
                this._stateMachine.noMatching();
                return
            }
            this._callPartialMatchCallbacks(matchedSequences);
            if (this._isThereAnExactMatch(matchedSequences)) {
                if (this._shouldSuppressKeypress()) keyPressEvent.preventDefault();
                this._callRelevantCallbacks();
                this._stateMachine.reset();
                return
            }
            this._stateMachine.matching()
        },
        _onBeforeDeletePress: function (event, from, to) {
            if (this._bufferHistory.length > 1) {
                this._keyBuffer = this._bufferHistory.pop();
                this._keyBuffer = this._bufferHistory.pop()
            } else this._keyBuffer = ""
        },
        _findPartialMatchSequences: function () {
            var self = this;
            return _.filter(this._sequences, function (sequence) {
                return sequence && sequence.indexOf(self._keyBuffer) === 0
            })
        },
        _isThereAnExactMatch: function (sequences) {
            for (var ii = 0; ii < sequences.length; ii++)
                if (sequences[ii] ===
                    this._keyBuffer) return true;
            return false
        },
        _shouldSuppressKeypress: function () {
            var matchedSequenceModels = this._findMatchingSequenceModels();
            for (var ii = 0; ii < matchedSequenceModels.length; ii++)
                if (matchedSequenceModels[ii].onMatchShouldSuppress()) return true
        },
        _findMatchingSequenceModels: function (checkSequences) {
            if (!checkSequences) checkSequences = [this._keyBuffer];
            var sequence = this._keyBuffer;
            return _.filter(this._characterSequenceModels, function (characterSequenceModel) {
                var sequences = characterSequenceModel.getSequences();
                for (var ii = 0; ii < sequences.length; ii++)
                    for (var jj = 0; jj < checkSequences.length; jj++)
                        if (sequences[ii] === checkSequences[jj]) return true
            })
        },
        _callNoMatchCallbacks: function () {
            for (var ii = 0; ii < this._characterSequenceModels.length; ii++) this._characterSequenceModels[ii].noMatchFound()
        },
        _callRelevantCallbacks: function () {
            var matchedSequenceModels = this._findMatchingSequenceModels();
            for (var ii = 0; ii < matchedSequenceModels.length; ii++) matchedSequenceModels[ii].exactMatchFound(this._keyBuffer)
        },
        _callPartialMatchCallbacks: function (matchedSequences) {
            var matchedSequenceModels =
                this._findMatchingSequenceModels(matchedSequences);
            for (var ii = 0; ii < matchedSequenceModels.length; ii++) matchedSequenceModels[ii].partialMatchFound(this._keyBuffer)
        }
    });
    _.extend(CharacterSequenceController.prototype, {
        destroy: function () {
            this._bufferHistory.length = 0;
            this._sequences.length = 0;
            this._characterSequenceModels.length = 0
        },
        keydown: function (event) {
            if (jwerty.is("left/right", event)) this._stateMachine.reset()
        },
        keypress: function (event) {
            if (jwerty.is("enter", event)) {
                this._stateMachine.reset();
                return
            }
            var character =
                String.fromCharCode(event.keyCode);
            if (character.match(/\s/) && this._stateMachine.is("noMatches")) {
                this._stateMachine.reset();
                return
            }
            if (this._stateMachine.is("noMatches") && character.match(PUNCTUATION_REGEX)) {
                this._stateMachine.reset();
                return
            }
            this._keyBuffer += character;
            this._stateMachine.charPress(event)
        },
        keyup: function (event) {
            if (jwerty.is("backspace", event)) this._stateMachine.deletePress()
        },
        editorBlur: function () {
            this._stateMachine.reset()
        }
    });
    BB.Controllers.CharacterSequenceController = CharacterSequenceController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var CharacterSequenceBaseDataSource = function () {
        Streak.ViewControllerBase.call(this)
    };
    CharacterSequenceBaseDataSource.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(CharacterSequenceBaseDataSource.prototype, {
        getSequences: function () {
            return this._sequences
        },
        addSequence: function (sequence) {
            this._callDelegateFunction("sequencesChanged")
        },
        removeSequence: function (sequence) {
            this._callDelegateFunction("sequencesChanged")
        },
        exactMatchFound: function () {
            this._callDelegateFunction.apply(this, ["exactMatchFound"].concat(_.toArray(arguments)))
        },
        partialMatchFound: function () {
            this._callDelegateFunction.apply(this, ["partialMatchFound"].concat(_.toArray(arguments)))
        },
        noMatchFound: function () {
            this._callDelegateFunction.apply(this, ["noMatchFound"].concat(_.toArray(arguments)))
        },
        onMatchShouldSuppress: function () {
            return false
        }
    });
    BB.Controllers.CharacterSequenceController.CharacterSequenceBaseDataSource =
        CharacterSequenceBaseDataSource
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var promptVisible = false;
    var promptQueue = [];
    var self;
    self = BB.AssignedToController = {
        initialized: false,
        init: function (cb) {
            if (!self.initialized) {
                BB.Models.Box.bindToAllEvents(self.handleBoxTrigger.bind(self));
                BB.Models.Pipeline.bindToAllEvents(self.handlePipelineTrigger.bind(self));
                self.initialized = true
            }
            if (cb) cb()
        },
        handleBoxTrigger: function (box, event, property,
            response) {
            var args = _(arguments).chain().toArray().rest(3);
            var pipeline = box.getPipeline();
            var reshareContacts = [];
            var unsharedContacts;
            var attemptedList;
            if (_.isReal(box) && event === "assignedTo" && property === "setToUnsharedContacts" && response) {
                attemptedList = box.getAssignedToSharingEntries();
                unsharedContacts = response.details;
                if (unsharedContacts.length > 0) pipeline.fullySyncedCallback(function () {
                    var i;
                    for (i = 0; i < unsharedContacts.length; i++)
                        if (!pipeline.doesEmailAddressHaveAccess(unsharedContacts[i])) reshareContacts.push(unsharedContacts[i]);
                    if (reshareContacts.length > 0) this.promptForBoxSharing(box, pipeline, attemptedList, reshareContacts)
                }.bind(this))
            }
        },
        promptForBoxSharing: function (box, pipeline, attemptedContacts, unsharedContacts) {
            var self = this;
            if (promptVisible) {
                promptQueue.push({
                    type: "boxSharing",
                    box: box,
                    pipeline: pipeline,
                    attemptedContacts: attemptedContacts,
                    unsharedContacts: unsharedContacts
                });
                return
            }
            promptVisible = true;
            var body = BB.Locale.getString("assigned_to_share_body", {
                pipeline: pipeline.displayName(),
                box: box.displayName()
            }) + "<br />" +
                "<ul>";
            _.each(unsharedContacts, function (contact) {
                var li = "<li>";
                if (contact.fullName) li += contact.fullName + " - ";
                if (contact.email) li += contact.email;
                li += "</li>";
                body += li
            });
            body += "</ul>";
            BB.Widgets.Modal.confirm(BB.Locale.getString("assigned_to_share_title"), body, function () {
                var currentACL = pipeline.get("aclEntries");
                currentACL = currentACL.concat(attemptedContacts);
                currentACL = _.uniq(currentACL, function (contact) {
                    return contact.email
                });
                pipeline.set("aclEntries", currentACL);
                pipeline.save(function () {
                    this.resaveBox(box,
                        attemptedContacts, unsharedContacts)
                }.bind(this))
            }.bind(this), function () {}.bind(this), this.nextPrompt.bind(this))
        },
        handlePipelineTrigger: function (pipeline, event, property, response) {
            var args = _(arguments).chain().toArray().rest(2);
            if (_.isReal(pipeline) && event === "assignedTo" && property === "unsharePipelineContacts" && response) {
                var contactsToUnshare = response.details;
                var acl = pipeline.get("aclEntries");
                var orgWide = pipeline.get("orgWide");
                if (contactsToUnshare.length > 0) pipeline.fullySyncedCallback(function () {
                    self.promptForPipelineUnshare(pipeline,
                        contactsToUnshare, acl, orgWide)
                })
            }
        },
        promptForPipelineUnshare: function (pipeline, contactsToUnshare, acl, orgWide) {
            var self = this;
            if (promptVisible) {
                promptQueue.push({
                    type: "pipelineUnshare",
                    pipeline: pipeline,
                    contactsToUnshare: contactsToUnshare,
                    acl: acl,
                    orgWide: orgWide
                });
                return
            }
            promptVisible = true;
            var emails = _.map(contactsToUnshare, function (contact) {
                return contact.email
            }).join(", ");
            var body = BB.Locale.getString("assigned_to_unshare_pipeline_body", {
                contacts: emails
            });
            BB.Widgets.Modal.confirm(BB.Locale.getString("assigned_to_unshare_pipeline_title"),
                body, function () {
                    pipeline.set("aclEntries", acl);
                    pipeline.set("orgWide", orgWide);
                    pipeline.forceSave()
                }.bind(this), function () {}.bind(this), this.nextPrompt.bind(this))
        },
        nextPrompt: function () {
            promptVisible = false;
            if (promptQueue.length > 0) {
                var args = promptQueue.shift();
                if (args.type === "boxSharing") this.promptForBoxSharing(args.box, args.pipeline, args.attemptedContacts, args.unsharedContacts);
                else if (args.type === "pipelineUnshare") this.promptForPipelineUnshare(args.pipeline, args.contactsToUnshare, args.acl, args.orgWide)
            }
        },
        resaveBox: function (box, newContacts) {
            box.set("assignedToSharingEntries", newContacts);
            box.save()
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "assignedToControllerInitialized",
        functionToCall: BB.AssignedToController.init,
        functionContext: BB.AssignedToController,
        dependentFunctionKeys: ["data.pipelines.initialized", "data.boxes.initialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var promptVisible = false;
    var promptQueue = [];
    var BoxSuggestionsController = {
        trackingContext: {
            widgetContext: "boxGeneratedBySuggestions"
        },
        initialized: false,
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                var boxes = BB.Data.getAllBoxes();
                self.blackListOrgs.push(BB.getUser().getDomain().toLowerCase());
                boxes.bind("add", function (box) {
                    self.updateBoxStemmingCache(box)
                });
                boxes.bind("remove", function (box) {
                    try {
                        self.removeBoxStemmingCache(box)
                    } catch (ee) {}
                });
                boxes.bind("modelChange", function (box, property) {
                    if (property === "name") self.updateBoxStemmingCache(box)
                });
                self.initialized = true
            }
            if (cb) cb()
        },
        getBoxSuggestions: function (threads) {
            var self = this;
            if (!threads) return [];
            var threadsInfo = self.extractthreadsInfo(threads);
            var boxesObjectArray = self._getComputedBoxes(threadsInfo);
            var limitedBoxArray = _.first(boxesObjectArray, 3);
            limitedBoxArray = _.filter(limitedBoxArray, function (box) {
                return box.rank >=
                    self.OVERALL_THREASHOLD
            });
            var boxesArray = _.map(limitedBoxArray, function (boxObject) {
                var sourceOfAlgo = boxObject.rankingFactors;
                var _sourceRaw = sourceOfAlgo;
                var _source = self.generateSourceText(sourceOfAlgo);
                var _clickCallback = function (ee) {
                    var sourceOfAlgoArray = _.map(sourceOfAlgo, function (value, algoName) {
                        return algoName
                    });
                    var flattenedProps = {
                        algosArrayString: sourceOfAlgoArray.join(","),
                        algosJSON: JSON.stringify(sourceOfAlgo)
                    };
                    self.track("suggestedBoxChosen", flattenedProps)
                };
                return {
                    box: boxObject.box,
                    clickCallback: _clickCallback,
                    _source: _source,
                    sourceRaw: _sourceRaw
                }
            });
            return boxesArray
        },
        removeBoxStemmingCache: function (box) {
            var self = this;
            var boxKeywords = self.boxesStemmedKeywordsCache[box.key()];
            if (_.isReal(boxKeywords)) _.each(boxKeywords, function (stemmedWord) {
                var boxes = self.keywordToBoxMapStemmingCache[stemmedWord];
                if (_.isReal(boxes)) {
                    boxes = _.filter(boxes, function (currBox) {
                        return currBox !== box
                    });
                    self.keywordToBoxMapStemmingCache[stemmedWord] = boxes
                }
            });
            self.boxesStemmedKeywordsCache[box.key()] = null
        },
        updateBoxStemmingCache: function (box) {
            var self =
                this;
            try {
                var boxKeywords = box.get("name").split(" ");
                boxKeywords = _.map(boxKeywords, function (keyword) {
                    var stemmedWord = Streak.Stemmer(keyword.toLowerCase().trim());
                    if (!_.isReal(self.keywordToBoxMapStemmingCache[stemmedWord])) self.keywordToBoxMapStemmingCache[stemmedWord] = [];
                    self.keywordToBoxMapStemmingCache[stemmedWord].push(box);
                    return stemmedWord
                });
                self.boxesStemmedKeywordsCache[box.key()] = boxKeywords
            } catch (ee) {}
        },
        keywordToBoxMapStemmingCache: {},
        algosAndWeighting: {
            "emailsAlgo": {
                "weighting": 0.65,
                "sourceReason": "emails in common with box contacts",
                "lowerBoundthreashHold": 0.6
            },
            "orgsAlgo": {
                "weighting": 0.65,
                "sourceReason": "similar organizations associated with box ",
                "lowerBoundthreashHold": 0.6
            },
            "orgNameMatchAlgo": {
                "weighting": 0.8,
                "lowerBoundthreashHold": 0
            },
            "subjectsAlgo": {
                "weighting": 0.1,
                "sourceReason": "subject similarity to box name",
                "lowerBoundthreashHold": 0.85
            },
            "wordsAlgo": {
                "weighting": 0.9,
                "sourceReason": "keywords in common with box name",
                "lowerBoundthreashHold": 0.2
            }
        },
        OVERALL_THREASHOLD: 0.1,
        BOXLEN: 3,
        COMMON_ENGLISH_WORDS: ["the", "is", "was", "to",
            "an", "did", "and", "a", "or", "you", "this", "they", "her", "not", "he", "she", "they", "would", "there", "their", "with", "about", "from", "have", "look", "know", "seem", "feel", "leave", "thing", "want"
        ],
        boxesStemmedKeywordsCache: {},
        wordsAlgo: function (threadsInfo) {
            if (threadsInfo.keywordsInSubject.length === 0) return [];
            var self = this;
            var threadKeywords = threadsInfo.keywordsInSubject;
            var setOfmatchedBoxes = [];
            var boxes = Streak.BentoBox.Data.getAllBoxes();
            var mapOfKeywordsWithMatchedBoxes = {};
            _.each(threadKeywords, function (stemmedWord) {
                var boxes =
                    self.keywordToBoxMapStemmingCache[stemmedWord];
                if (_.isReal(boxes)) mapOfKeywordsWithMatchedBoxes[stemmedWord] = boxes;
                else;
            });
            var winningBoxes = self.wordAlgoCombineBoxes(mapOfKeywordsWithMatchedBoxes);
            return winningBoxes
        },
        wordAlgoCombineBoxes: function (mapOfKeywordsWithMatchedBoxes) {
            var boxMap = {};
            _.each(mapOfKeywordsWithMatchedBoxes, function (boxes, word) {
                var confidenceInSuggestion = 0.9999 * 1 / boxes.length;
                _.each(boxes, function (box) {
                    if (boxMap[box.key()]) boxMap[box.key()].confidenceInSuggestion += confidenceInSuggestion;
                    else boxMap[box.key()] = {
                        box: box,
                        boxKey: box.key(),
                        confidenceInSuggestion: confidenceInSuggestion
                    }
                })
            });
            var topBoxes = [];
            _.each(boxMap, function (boxObj) {
                topBoxes.push(boxObj)
            });
            topBoxes = _.sortBy(topBoxes, function (boxObj) {
                return boxObj.confidenceInSuggestion
            });
            return topBoxes.reverse()
        },
        stringsMatchingWeighted: function (string1, string2) {
            var cleanString1 = string1.toLowerCase().trim();
            var cleanString2 = string2.toLowerCase().trim();
            var minLen = Math.min(cleanString1.length, cleanString2.length);
            var maxLen = Math.max(cleanString1.length,
                cleanString2.length);
            if (minLen / maxLen <= 0.5) return 0;
            var differenceAlgoResult = Streak.calculateFastLevinshteinFinal(cleanString1, cleanString2);
            var result = 1 - differenceAlgoResult / maxLen;
            if (result < 0) {
                Streak.BentoBox.logError("  stringsMatchingWeighted   \n getting negative values for a weird reason on" + string1 + "," + string2);
                return 0
            }
            return result
        },
        subjectsAlgo: function (threadsInfo) {
            if (threadsInfo.subjects.length === 0) return [];
            var self = this;
            var threadSubjects = threadsInfo.subjects;
            var setOfmatchedBoxes = [];
            var boxes = Streak.BentoBox.Data.getAllBoxes();
            _.each(boxes, function (box) {
                var subjectsMatchedCount = 0;
                var subjectsMatchedWeight = 0;
                var subjectsMatchedWeights = [];
                _.each(threadSubjects, function (subject) {
                    var weight = self.stringsMatchingWeighted(subject, box.get("name"));
                    if (weight > 0) {
                        subjectsMatchedWeights.push(weight);
                        subjectsMatchedCount++;
                        subjectsMatchedWeight += weight
                    }
                });
                if (subjectsMatchedWeight !== 0 && subjectsMatchedCount !== 0) {
                    var calculateWeightedAvg = function (weights) {
                        var count = weights.length;
                        var avg = 0;
                        _.each(weights, function (weight) {
                            avg = weight / count
                        });
                        return avg
                    };
                    var confidenceInSuggestion = calculateWeightedAvg(subjectsMatchedWeights);
                    setOfmatchedBoxes.push({
                        box: box,
                        boxKey: box.key(),
                        confidenceInSuggestion: confidenceInSuggestion
                    })
                }
            });
            return setOfmatchedBoxes
        },
        emailsAlgo: function (threadsInfo) {
            if (threadsInfo.emailAddressesCount === 0) return [];
            var setOfmatchedBoxes = [];
            var boxes = Streak.BentoBox.Data.getAllBoxes();
            var emailsInThreads = threadsInfo.emailAddresses;
            _.each(boxes, function (box) {
                var boxEmails = box.get("emailAddresses");
                var emailsMatchedCount = 0;
                _.each(emailsInThreads, function (count, email) {
                    if (_.contains(boxEmails, email)) emailsMatchedCount += count
                });
                var confidenceInSuggestion = 1 * emailsMatchedCount * (1 / threadsInfo.emailAddressesCount);
                if (confidenceInSuggestion > 0) setOfmatchedBoxes.push({
                    box: box,
                    boxKey: box.key(),
                    confidenceInSuggestion: confidenceInSuggestion
                })
            });
            return setOfmatchedBoxes
        },
        extractKeywordsFromSubject: function (subject) {
            var self = this;
            var subjectWords = subject.split(" ");
            subjectWords = _.filter(subjectWords, function (word) {
                var cleanWord =
                    word.toLowerCase().trim();
                return cleanWord.length > 2 && !_.contains(self.COMMON_ENGLISH_WORDS, cleanWord)
            });
            subjectWords = _.map(subjectWords, function (word) {
                return Streak.Stemmer(word.toLowerCase().trim())
            });
            return subjectWords
        },
        extractthreadsInfo: function (threads) {
            var self = this;
            var threadsInfo = {
                emailAddresses: {},
                emailAddressesCount: 0,
                subjects: [],
                orgs: {},
                "threads": threads
            };
            _.each(threads, function (thread) {
                var emails = thread.get("emailAddresses");
                _.each(emails, function (email) {
                    threadsInfo.emailAddressesCount++;
                    if (threadsInfo.emailAddresses[email]) threadsInfo.emailAddresses[email]++;
                    else threadsInfo.emailAddresses[email] = 1
                });
                var subject = thread.get("subject").trim();
                threadsInfo.subjects.push(subject);
                threadsInfo.keywordsInSubject = self.extractKeywordsFromSubject(subject)
            });
            threadsInfo.orgs = self.extractOrgs(threadsInfo);
            return threadsInfo
        },
        processAndCombineBoxesIntoSortedArray: function (mapOfBoxes) {
            var boxes = [];
            _.each(mapOfBoxes, function (boxObject, boxKey) {
                boxes.push(boxObject)
            });
            var sortedBox = _.sortBy(boxes,
                function (box) {
                    return box.rank
                });
            return sortedBox
        },
        _getComputedBoxes: function (threadsInfo) {
            var self = this;
            var boxMap = {};
            var boxArray = [];
            _.each(self.algosAndWeighting, function (algoProperties, algoName) {
                var algoBoxes = self[algoName](threadsInfo);
                _.each(algoBoxes, function (boxObject) {
                    var currBox = boxMap[boxObject.boxKey];
                    if (_.isReal(currBox)) {
                        if (boxObject.confidenceInSuggestion > algoProperties.lowerBoundthreashHold) {
                            boxMap[boxObject.boxKey].rankingFactors[algoName] = {
                                original: boxObject.confidenceInSuggestion,
                                processed: processedWeight
                            };
                            boxMap[boxObject.boxKey].rank += boxObject.confidenceInSuggestion * algoProperties.weighting
                        }
                    } else if (boxObject.confidenceInSuggestion > algoProperties.lowerBoundthreashHold) {
                        var rankingFactors = {};
                        var processedWeight = boxObject.confidenceInSuggestion * algoProperties.weighting;
                        rankingFactors[algoName] = {
                            original: boxObject.confidenceInSuggestion,
                            processed: processedWeight
                        };
                        boxMap[boxObject.boxKey] = {
                            box: boxObject.box,
                            rank: processedWeight,
                            rankingFactors: rankingFactors
                        }
                    }
                })
            });
            return self.processAndCombineBoxesIntoSortedArray(boxMap).reverse()
        },
        generateSourceText: function (sourceofAlgo) {
            var self = this;
            var setences = [];
            _.each(sourceofAlgo, function (values, algoName) {
                setences.push(" - " + self.algosAndWeighting[algoName].sourceReason)
            });
            return setences.join("<br />")
        },
        extractOrgs: function (threadsInfo) {
            var orgMap = {};
            _.each(threadsInfo.emailAddresses, function (count, email) {
                var org = email.split("@")[1].toLowerCase();
                if (_.contains(self.blackListOrgs, org)) return;
                var orgs = [org, org.split(".")[0]];
                _.each(orgs, function (theOrg) {
                    if (orgMap[theOrg]) orgMap[theOrg] +=
                        count;
                    else orgMap[theOrg] = count
                })
            });
            return orgMap
        },
        blackListOrgs: _.clone(Streak.BentoBox.Constants.EMAIL_BLACK_LIST),
        getMainOrg: function (orgsMap) {
            var maxOrg;
            var maxCount = 0;
            _.each(orgsMap, function (count, orgName) {
                if (count > maxCount) {
                    maxCount = count;
                    maxOrg = orgName
                }
            });
            return maxOrg
        },
        orgsAlgo: function (threadsInfo) {
            var orgsCount = _.size(threadsInfo.orgs);
            if (orgsCount === 0) return [];
            var self = this;
            var setOfmatchedBoxes = [];
            var boxes = Streak.BentoBox.Data.getAllBoxes();
            var mainOrg = self.getMainOrg(threadsInfo.orgs);
            _.each(boxes, function (box) {
                var boxOrgs = self.extractOrgsFromBox(box);
                if (_.isReal(boxOrgs[mainOrg])) {
                    var confidenceInSuggestion = boxOrgs[mainOrg] / orgsCount;
                    if (confidenceInSuggestion > 0) setOfmatchedBoxes.push({
                        box: box,
                        boxKey: box.key(),
                        confidenceInSuggestion: confidenceInSuggestion
                    })
                }
            });
            return setOfmatchedBoxes
        },
        boxOrgsCache: {},
        extractOrgsFromBox: function (box) {
            var self = this;
            var cachedOrgs = self.boxOrgsCache[box.key()];
            if (_.isReal(cachedOrgs));
            var orgs = [];
            var _orgsMap = {};
            var boxEmails = box.get("emailAddresses");
            _.each(boxEmails, function (email) {
                var org = email.split("@")[1];
                var blackListOrg = Streak.BentoBox.userEmail.split("@")[1];
                blackListOrg = blackListOrg.toLowerCase();
                org = org.toLowerCase();
                if (!_.contains(self.blackListOrgs, org) && org !== blackListOrg)
                    if (_orgsMap[org]) _orgsMap[org] += 1;
                    else {
                        _orgsMap[org] = 1;
                        orgs.push(org)
                    }
            });
            if (orgs.length > 0) self.boxOrgsCache[box.key()] = _orgsMap;
            return _orgsMap
        },
        orgNameMatchAlgo: function (threadsInfo) {
            var orgMap = threadsInfo.orgs;
            var matchedBoxObjects = [];
            var boxes = BB.Data.getAllBoxes();
            for (var ii = 0; ii < boxes.length; ii++) {
                var boxName = boxes[ii].displayName().toLowerCase();
                if (!orgMap[boxName]) continue;
                matchedBoxObjects.push({
                    box: boxes[ii],
                    boxKey: boxes[ii].key(),
                    confidenceInSuggestion: orgMap[boxName]
                })
            }
            for (var ii = 0; ii < matchedBoxObjects.length; ii++) {
                var matchedBox = matchedBoxObjects[ii];
                matchedBox.confidenceInSuggestion = matchedBox.confidenceInSuggestion / matchedBoxObjects.length
            }
            return matchedBoxObjects
        },
        storeRecentlySeenBox: function () {},
        track: function (event, prop) {
            BB.Tracker.trackStreakActive(this.trackingContext,
                prop, {
                    eventName: event
                })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "boxSuggestionsControllerInitialized",
        functionToCall: BoxSuggestionsController.init,
        functionContext: BoxSuggestionsController,
        dependentFunctionKeys: ["data.boxes.initialized", "userLoggedIn"]
    });
    BB.Modules.BoxSuggestionsController = BoxSuggestionsController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        APIRequester = Streak.APIRequester,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var self = BB.ThreadInfoController = {
        _initialized: false,
        _canHandleThreadInfoRespone: false,
        _pendingThreadInfoResponse: null,
        _threadInfoCollection: null,
        init: function (callback) {
            if (!this._initialized) {
                this._threadInfoCollection = BB.Models.ThreadInfo.createCollection();
                this._bindToEvents();
                this._initialized = true
            }
            if (callback) callback()
        },
        boxesAndPipelinesReady: function (callback) {
            this._canHandleThreadInfoRespone = true;
            if (this._pendingThreadInfoResponse) this._handleSuccessfulThreadInfoRequest(this._pendingThreadInfoResponse.threadInfoResult, this._pendingThreadInfoResponse.uniqueThreads);
            if (callback) callback()
        },
        getThreadInfoCollection: function () {
            return this._threadInfoCollection
        },
        _bindToEvents: function () {
            Gmail.observe("conversationThreadLoadedEvent", this._handleConversationLoaded.bind(this), null, 1);
            Gmail.observe("viewChanged", this._handleViewChanged.bind(this),
                null);
            Streak.NotificationCenter.addFunction({
                eventName: "newThreadsFound",
                functionToCall: this._newThreadsFound,
                functionContext: this
            });
            Streak.NotificationCenter.addFunction({
                eventName: "bentoBoxIsReady",
                functionToCall: function () {
                    if (Gmail.isConversation()) this._handleFirstLoadInConversation()
                },
                functionContext: this
            })
        },
        _handleViewChanged: function () {
            if (!this._isViewRelevantForThreadInfo()) return;
            var threads = this._getRelevantThreadInfosThatNeedToBeSynced();
            this._refreshThreadList(threads, "viewChanged")
        },
        _getRelevantThreadInfosThatNeedToBeSynced: function () {
            var threads = Streak._.pluck(BB.Threads.getCurrentRowsAndThreads(), "thread");
            return _.filter(threads, function (thread) {
                if (!thread) return false;
                var threadInfo = thread.get("threadInfo");
                if (!threadInfo) return true;
                if (threadInfo.needsToSync()) return true;
                var lastTimeSynced = threadInfo.getTimeLastSynced();
                if (!lastTimeSynced) return true;
                return Date.create(lastTimeSynced).isBefore(Date.create().addMinutes(-20))
            })
        },
        _handleConversationLoaded: function () {
            var thread =
                BB.Threads.getActiveThread();
            if (!thread) return;
            var threadInfo = this._threadInfoCollection.getByKey(thread.key());
            if (!threadInfo) {
                threadInfo = this._threadInfoCollection.add({
                    threadGmailId: thread.key()
                });
                thread.set("threadInfo", threadInfo)
            }
            threadInfo.refresh()
        },
        _handleFirstLoadInConversation: function () {
            var thread = BB.Threads.getActiveThread();
            if (!thread) return;
            var threadInfo = this._threadInfoCollection.getByKey(thread.key());
            if (!threadInfo) {
                threadInfo = this._threadInfoCollection.add({
                    threadGmailId: thread.key()
                });
                thread.set("threadInfo", threadInfo)
            }
            threadInfo.refresh()
        },
        _newThreadsFound: function (notificationParameters) {
            var threadModels = notificationParameters.threadModels;
            if (!threadModels || threadModels.length === 0) return;
            this._refreshThreadList(threadModels, "newThreadsFound")
        },
        _isViewRelevantForThreadInfo: function () {
            return Gmail.isListView() && Gmail.getLiveView() !== Gmail.Constants.Drafts
        },
        _refreshThreadList: function (threads, reason) {
            var uniqueThreads = this._getUniqueThreadObjects(threads);
            if (!uniqueThreads || uniqueThreads.length ===
                0) return;
            this._afterAllThreadsSynced(uniqueThreads, function () {
                self._getThreadInfoFromServer(uniqueThreads, reason)
            })
        },
        _afterAllThreadsSynced: function (uniqueThreads, callback) {
            var afterAllSyncedCallback = _.onceAfter(uniqueThreads.length, callback);
            for (var ii = 0; ii < uniqueThreads.length; ii++)
                if (uniqueThreads[ii] && uniqueThreads[ii].addSyncedCallback) uniqueThreads[ii].addSyncedCallback(afterAllSyncedCallback);
                else afterAllSyncedCallback()
        },
        _getUniqueThreadObjects: function (threads) {
            threads = _.uniq(threads, function (thread) {
                if (thread) return thread.key();
                else return null
            });
            return _.compact(threads)
        },
        _getThreadInfoFromServer: function (uniqueThreads, reason) {
            var encodedThreadIdList = this._getEncodedThreadIdList(uniqueThreads);
            APIRequester.post({
                msgUrl: "threadinfo",
                hexGmailThreadIdList: JSON.stringify(encodedThreadIdList),
                reason: reason,
                numberOfThreadIds: encodedThreadIdList.length
            }, function (res) {
                self._notifyThreadsServerCallDone(uniqueThreads);
                self._handleSuccessfulThreadInfoRequest(res, uniqueThreads)
            }, function (res) {
                self._notifyThreadsServerCallDone(uniqueThreads)
            })
        },
        _getEncodedThreadIdList: function (uniqueThreads) {
            var threadIds = _.map(uniqueThreads, function (thread) {
                if (thread) return thread.key();
                else return null
            });
            return _.compact(threadIds)
        },
        _handleSuccessfulThreadInfoRequest: function (threadInfoResult, uniqueThreads) {
            if (!self._isThreadInfoResultValid(threadInfoResult)) return;
            if (!self._canHandleThreadInfoRespone) {
                self._pendingThreadInfoResponse = {
                    threadInfoResult: threadInfoResult,
                    uniqueThreads: uniqueThreads
                };
                return
            }
            var threadCollection = BB.Threads.getThreadList();
            threadCollection.beginTransaction();
            self._updateThreadObjectsWithThreadInfoResult(threadInfoResult, uniqueThreads);
            threadCollection.endTransaction()
        },
        _isThreadInfoResultValid: function (threadInfoResult) {
            return _.isReal(threadInfoResult)
        },
        _updateThreadObjectsWithThreadInfoResult: function (threadInfoResult, uniqueThreads) {
            for (var ii = 0; ii < uniqueThreads.length; ii++) {
                var thread = uniqueThreads[ii];
                if (thread && thread.key()) {
                    var rawThreadInfo = threadInfoResult[thread.key()];
                    var threadInfo = this._threadInfoCollection.getByKey(thread.key());
                    if (!threadInfo) threadInfo = this._threadInfoCollection.add({
                        threadGmailId: thread.key()
                    });
                    if (rawThreadInfo) threadInfo.updateFromListCall(rawThreadInfo);
                    thread.set("threadInfo", threadInfo)
                }
            }
        },
        _notifyThreadsServerCallDone: function (threads) {
            for (var i = 0; i < threads.length; i++)
                if (threads[i] && threads[i].performNextSyncOperation) threads[i].performNextSyncOperation()
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "threadInfoControllerInitialized",
        functionToCall: BB.ThreadInfoController.init,
        functionContext: BB.ThreadInfoController,
        dependentFunctionKeys: ["gmailLoaded", "threadsInitialized", "data.pipelines.initialized", "data.boxes.initialized"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "threadInfoController.boxesAndPipelinesReady",
        functionToCall: BB.ThreadInfoController.boxesAndPipelinesReady,
        functionContext: BB.ThreadInfoController,
        dependentFunctionKeys: ["threadInfoControllerInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        APIRequester = Streak.APIRequester,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var self = BB.ThreadInfoRowUpdateController = {
        init: function (callback) {
            this._delayedRefreshAll = _.debounce(Gmail.InboxManipulator.refreshAll, 100, false);
            BB.ThreadInfoController.getThreadInfoCollection().bind("set", this._handleThreadSet);
            Gmail.observe("viewChanged", this._handleViewChanged);
            BB.Data.getAllPipelines().bind("colorChanged",
                this._delayedRefreshAll);
            if (callback) callback()
        },
        _handleViewChanged: function () {
            if (!self._areRowsVisible()) return;
            self._delayedRefreshAll()
        },
        _handleThreadSet: function () {
            var args = _.toArray(arguments);
            var property = args[0];
            var thread = _.last(args);
            if (self._isPropertyThreadInfoProperty(property) && self._areRowsVisible()) self._delayedRefreshAll()
        },
        _isPropertyThreadInfoProperty: function (property) {
            return property === "box" || property === "trackedThread" || property === "listTrackedThread"
        },
        _areRowsVisible: function () {
            return Gmail.isListView() &&
                Gmail.getLiveView() !== Gmail.Constants.Drafts
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "threadInfoRowUpdateControllerInitialized",
        functionToCall: BB.ThreadInfoRowUpdateController.init,
        functionContext: BB.ThreadInfoRowUpdateController,
        dependentFunctionKeys: ["threadInfoControllerInitialized"]
    })
})(Streak);
(function (Streak) {
    var Utils = Streak.Utils,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var superclass = Streak.Object;
    var chartsClass = Streak.Class.subclass({
        superclass: superclass,
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._loadGoogleCharts()
        },
        _loadGoogleCharts: function () {
            Utils.loadScript({
                url: "https://www.google.com/jsapi",
                callback: function () {
                    setTimeout(function () {
                            google.load("visualization", "1", {
                                "callback": "",
                                "packages": ["corechart", "table", "timeline"]
                            })
                        },
                        0)
                }
            })
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "chartsInitialized",
        functionToCall: function (callback) {
            BB.Services.Charts = new chartsClass;
            if (callback) callback()
        },
        dependentFunctionKeys: []
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var _contactCache = {};
    BB.Contacts = {
        init: function (cb) {
            this.suggestionTemplate = HTML.get("peoplePickerSuggestion");
            if (cb) cb()
        },
        makeContactRequest: function (requestObject, cb) {
            if (!requestObject.limit) limit = 15;
            APIRequester.get(requestObject, function (res) {
                if (!res) {
                    cb(null);
                    return
                } else if (_.isString(res)) try {
                    res = JSON.parse(res)
                } catch (err) {
                    cb(null);
                    return
                }
                var results = [];
                var resultArray;
                if (res && res.feed && res.feed.entry && res.feed.entry.length > 0) resultArray = res.feed.entry;
                else if (_.isArray(res)) resultArray = res;
                if (resultArray && resultArray.length > 0) $.each(resultArray, function (i, contact) {
                    var bbcon = {};
                    bbcon.id = contact.id.$t;
                    if (contact.gd$name) {
                        bbcon.fullName = contact.gd$name.gd$fullName ? contact.gd$name.gd$fullName.$t : null;
                        bbcon.givenName = contact.gd$name.gd$givenName ? contact.gd$name.gd$givenName.$t : null;
                        bbcon.familyName = contact.gd$name.gd$familyName ? contact.gd$name.gd$familyName.$t :
                            null;
                        bbcon.displayName = bbcon.fullName
                    }
                    if (contact.link)
                        for (var ci = 0, len = contact.link.length; ci < len; ci++)
                            if (contact.link[ci].type == "image/*" && _.isReal(contact.link[ci]["gd$etag"])) {
                                bbcon.imageUrl = BB.UI.getResourceURL("api/v1/contacts/photo?email=" + encodeURIComponent(BB.userEmail) + "&photoUrl=" + encodeURIComponent(contact.link[ci].href));
                                bbcon.googleImageUrl = contact.link[ci].href;
                                break
                            }
                    bbcon.lastUpdated = contact.updated ? contact.updated.$t : null;
                    if (contact.gd$email)
                        for (var ci = 0, len = contact.gd$email.length; ci <
                            len; ci++)
                            if (contact.gd$email[ci]) {
                                var clone = $.extend({}, bbcon);
                                clone.email = contact.gd$email[ci].address;
                                clone.id = bbcon.id + "_" + clone.email;
                                clone.fullName = bbcon.fullName || clone.email;
                                clone.displayName = clone.fullName;
                                results.push(clone)
                            }
                });
                results = _.uniq(results, false, function (result) {
                    return result.email
                });
                results = _.map(results, this.updateContact);
                cb(results)
            }, function () {
                cb(null);
                return true
            }, null, 0, true)
        },
        queryContacts: function (query, cb, limit) {
            BB.Contacts.makeContactRequest({
                msgUrl: "contacts/search",
                query: query,
                limit: limit
            }, function (res) {
                var results = res || [];
                results = results.sortBy(function (res) {
                    return -1 * (res.fullName.intersectionRatio(query) + res.email.intersectionRatio(query))
                });
                cb(results)
            })
        },
        getAllContacts: function (cb, limit) {
            BB.Contacts.makeContactRequest({
                entityType: "AllContacts",
                limit: limit
            }, cb)
        },
        getGroupContacts: function (group, cb, limit) {
            BB.Contacts.makeContactRequest({
                entityType: "GroupContactList",
                group: group,
                limit: limit
            }, cb)
        },
        getTopContacts: function (cb, limit) {
            BB.Contacts.makeContactRequest({
                msgUrl: "contacts/top",
                limit: limit
            }, cb)
        },
        convertStringData: function (s) {
            var bbcon = null;
            if (s.isValidEmail()) bbcon = {
                id: s,
                fullName: s,
                email: s
            };
            else bbcon = {
                id: s,
                fullName: s
            };
            return bbcon
        },
        convertResultToLiElement: function (query, data) {
            var li = $(BB.Contacts.suggestionTemplate({
                image: data.imageUrl,
                name: data.fullName ? data.fullName.escapeHTML() : data.email,
                tag: data.fullName ? data.email : "&nbsp;"
            }));
            return li
        },
        compareContactAndQuery: function (query, data) {
            var pass = false;
            if (data.fullName) pass = data.fullName.toLowerCase().indexOf(query) > -1;
            if (data.email) pass = pass || data.email.toLowerCase().indexOf(query) > -1;
            return pass
        },
        getContact: function (email) {
            if (_contactCache[email]) return _contactCache[email];
            return {
                email: email
            }
        },
        getLatestContactInformation: function (email, callback) {
            var contact = _contactCache[email];
            if (!contact) contact = {
                email: email
            };
            if (contact.updatedFromServer) {
                setTimeout(function () {
                    callback(contact)
                }, 10);
                return
            }
            Streak.Requester.getContactDetails(email, function (result) {
                    if (result && result.fullName) {
                        result.updatedFromServer = true;
                        BB.Contacts.updateContact(result)
                    }
                    callback(_contactCache[email])
                },
                function () {
                    callback(contact)
                });
            return contact
        },
        updateContact: function (contact) {
            var newContact = contact,
                cachedContact;
            if (contact.email) {
                cachedContact = _contactCache[contact.email];
                newContact = _.extend({}, cachedContact, contact);
                _contactCache[contact.email] = newContact
            }
            return newContact
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "contactsInitialized",
        functionToCall: BB.Contacts.init,
        functionContext: BB.Contacts,
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        BB = Streak.BentoBox;
    BB.Cursor = {
        defaults: {
            selectedClass: "selected",
            highlightClass: null,
            selectFunc: $.noop,
            highlightFunc: $.noop,
            dimensions: 1,
            highlightOnHover: false,
            highlightOnClick: false,
            selectOnClick: false,
            rollOver: false,
            input: null,
            noScroll: false,
            scrollStop: null,
            positionChangeFunc: $.noop,
            textSearch: false,
            aggressiveInputCapture: false
        },
        create: function (opts) {
            var options = {};
            $.extend(options, this.defaults, opts);
            if (!options.highlightClass) options.highlightClass =
                options.selectedClass;
            return new this.impl(options)
        },
        impl: function (options) {
            var position = null,
                dataset = null,
                currentEl = null,
                isPaused = false,
                initialize = function (dontSetPosition) {
                    var i, j;
                    if (dontSetPosition && position)
                        if (options.dimensions < 2) {
                            if (position[0] >= dataset.length) position[0] = dataset.length - 1
                        } else try {
                            if (position[0] >= dataset.length) position[0] = dataset.length - 1;
                            else if (position[1] >= dataset[position[0]].length) position[1] = dataset[position[0]].length - 1
                        } catch (err) {
                            position = getZeroPosition()
                        } else position =
                            getZeroPosition();
                    if (options.dimensions === 1)
                        for (i = 0; i < dataset.length; i++) setupElement($(dataset[i]), [i]);
                    else if (options.dimensions === 2)
                        for (i = 0; i < dataset.length; i++)
                            for (j = 0; j < dataset[i].length; j++) {
                                var el = dataset[i][j];
                                el.setAttribute("cursorPosition", i + "," + j)
                            }
                    updateDisplay()
                }, setupElement = function (el, pos) {
                    el.off(".bbStreakCursor");
                    if (options.highlightOnHover) {
                        el.on("mouseenter.bbStreakCursor", function (e) {
                            position = pos;
                            updateDisplay(null, el, false, true)
                        });
                        el.on("mouseleave.bbStreakCursor", function (e) {
                            el.removeClass(options.selectedClass)
                        })
                    }
                    if (options.highlightOnClick) el.on("click.bbStreakCursor",
                        function (e) {
                            updateDisplay(pos, el)
                        });
                    else if (options.selectOnClick) el.on("click.bbStreakCursor", function (e) {
                        updateDisplay(pos, el);
                        select()
                    })
                }, resetPosition = function () {
                    position = getZeroPosition()
                }, get = function (pos) {
                    if (!dataset) return null;
                    var subset = dataset;
                    for (var i = 0; i < pos.length; i++) subset = subset[pos[i]];
                    if (pos.length === options.dimensions) return $(subset);
                    else return subset
                }, getZeroPosition = function () {
                    var pos = new Array(options.dimensions);
                    for (var i = 0; i < options.dimensions; i++) pos[i] = 0;
                    return pos
                },
                updatePosition = function (direction, axis) {
                    if (!axis) axis = 0;
                    if (!dataset) return;
                    var subset = dataset;
                    if (!position) resetPosition();
                    for (var i = 0; i < axis; i++) subset = subset[position[i]];
                    if (direction === "up")
                        if (position[axis] - 1 < 0) {
                            if (options.rollOver) position[axis] = subset.length - 1
                        } else {
                            position[axis] = position[axis] - 1;
                            if (options.dimensions > 1 && axis === 1) {
                                var set = get(position.first(1));
                                if (position[axis] >= set.length) position[axis] = set.length - 2
                            }
                        } else if (direction === "down")
                        if (position[axis] + 1 >= subset.length) {
                            if (options.rollOver) position[axis] =
                                0
                        } else position[axis] = position[axis] + 1;
                    updateDisplay(position)
                }, moveToBeginning = function (axis) {
                    if (axis === 0) position[0] = 0;
                    else position[axis] = 0;
                    updateDisplay(position)
                }, moveToEnd = function (axis) {
                    if (axis === 0) position[0] = dataset.length - 1;
                    else position[axis] = get(position.first(axis)).length - 1;
                    updateDisplay(position)
                }, updateDisplay = function (pos, el, noTrigger, noScroll) {
                    options.positionChangeFunc();
                    if (pos) position = pos;
                    var dpos = _.clone(position);
                    if (options.dimensions > 1)
                        for (var i = 1; i < options.dimensions; i++) {
                            var sset =
                                get(dpos.first(i));
                            if (dpos[i] >= sset.length) dpos[i] = sset.length - 1
                        }
                    if (!el) el = get(dpos);
                    unfocus();
                    el.addClass(options.selectedClass);
                    if (!options.noScroll && !noScroll)
                        if (!el.is(".noScroll")) el.scrollintoview({
                            duration: 0,
                            scrollStop: options.scrollStop
                        });
                    currentEl = el;
                    if (!noTrigger) {
                        el.trigger("bbCursorSelect");
                        options.highlightFunc(currentEl)
                    }
                }, triggerSelect = function (el, isEnter) {
                    if (!isPaused) options.selectFunc(el, isEnter)
                }, select = function (isEnter) {
                    if (!position) resetPosition();
                    var getEl = get(position);
                    if (getEl) triggerSelect(getEl,
                        isEnter)
                }, setup = function (dSet, keepPosition) {
                    dataset = dSet.slice();
                    initialize(keepPosition)
                }, fastSetup = function (dSet) {
                    dataset = dSet
                }, focus = function () {
                    if (dataset !== null) updateDisplay()
                }, unfocus = function () {
                    if (currentEl) {
                        currentEl.removeClass(options.selectedClass);
                        currentEl.trigger("bbCursorDeselect")
                    }
                }, getCell = function () {
                    return get(position)
                }, setCursorPosition = function (el) {
                    var posAttribute = el.getAttribute("cursorPosition");
                    if (posAttribute && posAttribute.length > 0) {
                        var pos = posAttribute.split(",");
                        var coord = [parseInt(pos[0]), parseInt(pos[1])];
                        updateDisplay(coord)
                    }
                }, pause = function () {
                    isPaused = true
                }, resume = function () {
                    isPaused = false
                };
            if (options.input) {
                BB.Keyboard.bindChordToEl({
                    el: options.input,
                    chord: "up/down",
                    keyEvent: "keyup",
                    useCapture: true,
                    cb: function (e) {
                        if (!isPaused) {
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            e.stopPropagation()
                        }
                    }
                });
                BB.Keyboard.bindChordToElement(options.input, "down", function (e) {
                    if (!isPaused) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        e.stopPropagation();
                        updatePosition("down")
                    }
                });
                BB.Keyboard.bindChordToElement(options.input, "up", function (e) {
                    if (!isPaused) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        e.stopPropagation();
                        updatePosition("up")
                    }
                });
                BB.Keyboard.bindChordToElement(options.input, "home", function () {
                    moveToBeginning(0)
                }, true);
                BB.Keyboard.bindChordToElement(options.input, "end", function () {
                    moveToEnd(0)
                }, true);
                BB.Keyboard.bindChordToElement(options.input, "enter", function (e) {
                        if (!isPaused) {
                            select(true);
                            e.preventDefault();
                            e.stopImmediatePropagation()
                        }
                    }, false, false, false, "keydown",
                    options.aggressiveInputCapture)
            }
            if (options.textSearch) {
                var hInput = $(document.createElement("input"));
                hInput[0].setAttribute("type", "text");
                BB.Keyboard.bindChordToElement(options.input, "[a-z]/shift+[a-z]/backspace", function (e) {
                    clearTimeout(timeout);
                    if (Streak.jwerty.is("backspace", e)) hInput.val(hInput.val().first(hInput.val().length - 1));
                    else hInput.val(hInput.val() + String.fromCharCode(e.which));
                    setCursor();
                    timeout = setTimeout(function () {
                        hInput.val("")
                    }, 1E3)
                }, true, true, true);
                BB.Keyboard.bindChordToElement(options.input,
                    "up/down/home/end", function (e) {
                        hInput.val("");
                        if (!isPaused) {
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            e.stopPropagation()
                        }
                    });
                var setCursor = function () {
                    var val = hInput.val().toLowerCase();
                    $.each(dataset, function (index, item) {
                        if ($(item)[0].innerText.trim().toLowerCase().startsWith(val)) {
                            updateDisplay([index]);
                            return
                        }
                    })
                }
            }
            return {
                setup: setup,
                getPosition: function () {
                    return position
                },
                updatePosition: updatePosition,
                moveToBeginning: moveToBeginning,
                moveToEnd: moveToEnd,
                select: select,
                focus: focus,
                setPosition: updateDisplay,
                setCursorPosition: setCursorPosition,
                unfocus: unfocus,
                reset: resetPosition,
                getCell: getCell,
                pause: pause,
                resume: resume,
                fastSetup: fastSetup
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        BB = Streak.BentoBox;
    BB.VirtualCursorModel = {
        defaults: {
            highlightFunc: $.noop,
            selectFunc: $.noop
        },
        create: function (opts) {
            var options = {};
            $.extend(options, this.defaults, opts);
            return new this.impl(options)
        },
        impl: function (options) {
            var position = null,
                prevPosition = null,
                dataset = null,
                isPaused = false,
                noScroll = false,
                _seenClasses = {}, _cursorMap = {}, _cssClassMap = {}, resetPosition = function () {
                    position = [0, 0]
                }, getFixedPosition = function (dpos) {
                    if (!position) resetPosition();
                    if (!dpos) dpos =
                        _.clone(position);
                    var lastRow = 0;
                    if (dataset) lastRow = dataset.getLastRowNumber();
                    dpos[0] = Math.min(lastRow, dpos[0]);
                    var lastColumn = 0;
                    if (dataset) lastColumn = dataset.getLastColumnForCurrentRow([dpos[0], 0]);
                    dpos[1] = Math.min(lastColumn, dpos[1]);
                    return dpos
                }, getRawPosition = function () {
                    if (!position) resetPosition();
                    return position
                }, updatePosition = function (direction, axis) {
                    this.notToTop = true;
                    if (!axis) axis = 0;
                    if (direction === "up") {
                        if (axis === 1) position = getFixedPosition();
                        position[axis] = Math.max(position[axis] - 1, 0)
                    } else if (direction ===
                        "down") {
                        position[axis] = position[axis] + 1;
                        if (axis === 0) position[axis] = Math.min(dataset.getLastRowNumber(), position[axis]);
                        else if (axis === 1) position = getFixedPosition()
                    }
                    updateDisplay(position);
                    this.notToTop = false
                }, moveToBeginning = function (axis) {
                    this.notToTop = true;
                    getFixedPosition();
                    if (axis === 0) position[0] = 0;
                    else position[axis] = 0;
                    updateDisplay();
                    this.notToTop = false
                }, moveToEnd = function (axis) {
                    this.notToTop = true;
                    getFixedPosition();
                    if (axis === 0) position[0] = dataset.getLastRowNumber();
                    else position[axis] = dataset.getLastColumnForCurrentRow(position);
                    updateDisplay();
                    this.notToTop = false
                }, updateDisplay = function (pos) {
                    if (pos) position = pos;
                    var dpos = getFixedPosition();
                    unfocus();
                    prevPosition = _.clone(dpos);
                    options.highlightFunc(dpos)
                }, select = function () {
                    options.selectFunc(getFixedPosition())
                }, setup = function (dSet) {
                    dataset = dSet;
                    if (!position) resetPosition();
                    _cursorMap = {};
                    _cssClassMap = {}
                }, focus = function () {
                    if (dataset !== null) updateDisplay()
                }, unfocus = function () {
                    if (prevPosition) options.unhighlightFunc(getFixedPosition(prevPosition))
                }, pause = function () {
                    isPaused =
                        true
                }, resume = function () {
                    isPaused = false
                }, isCoordEqual = function (coord1, coord2) {
                    return coord1[0] === coord2[0] && coord1[1] === coord2[1]
                }, recordSeenClass = function (cssClass) {
                    _seenClasses[cssClass] = true
                }, getSeenClasses = function () {
                    var _classes = [];
                    _.each(_seenClasses, function (ii, kk) {
                        _classes.push(kk)
                    });
                    return _classes
                }, setCoordinateClass = function (coord, cssClass) {
                    _cursorMap[coord] = [cssClass];
                    recordSeenClass(cssClass)
                }, addCoordinateClass = function (coord, cssClass) {
                    recordSeenClass(cssClass);
                    if (_.isUndefined(_cursorMap[coord])) _cursorMap[coord] = [];
                    _cursorMap[coord] = _.union(_cursorMap[coord], [cssClass]);
                    if (_.isUndefined(_cssClassMap[cssClass])) _cssClassMap[cssClass] = [];
                    _cssClassMap[cssClass] = _.unionPlus(_cssClassMap[cssClass], [coord], isCoordEqual)
                }, removeAllCoordinateClasses = function (coord) {
                    _cursorMap[coord] = []
                }, removeCoordinateClass = function (coord, cssClass) {
                    _cursorMap[coord] = _.without(_cursorMap[coord], cssClass);
                    _cssClassMap[cssClass] = _.withoutPlus(_cssClassMap[cssClass], coord, isCoordEqual)
                }, removeClassForAllCoordinates = function (cssClass) {
                    var coords =
                        _.clone(_cssClassMap[cssClass]);
                    if (_.isArray(coords))
                        for (var ii = 0; ii < coords.length; ii++) removeCoordinateClass(coords[ii], cssClass)
                }, getClassesPrettyString = function (coord) {
                    if (_.isDefined(_cursorMap[coord])) return _cursorMap[coord].join(" ");
                    return ""
                }, getClassesForCoordinate = function (coord) {
                    if (_.isDefined(_cursorMap[coord])) return _cursorMap[coord].join(",");
                    return ""
                };
            return {
                setup: setup,
                updatePosition: updatePosition,
                moveToBeginning: moveToBeginning,
                moveToEnd: moveToEnd,
                select: select,
                focus: focus,
                setPosition: updateDisplay,
                unfocus: unfocus,
                reset: resetPosition,
                pause: pause,
                resume: resume,
                getPosition: getFixedPosition,
                getRawPosition: getRawPosition,
                addCoordinateClass: addCoordinateClass,
                updateDisplay: updateDisplay,
                getClassesForCoordinate: getClassesForCoordinate,
                getClassesPrettyString: getClassesPrettyString,
                removeCoordinateClass: removeCoordinateClass,
                removeAllCoordinateClasses: removeAllCoordinateClasses,
                removeClassForAllCoordinates: removeClassForAllCoordinates,
                getActiveClasses: getSeenClasses,
                setCoordinateClass: setCoordinateClass
            }
        }
    }
})(Streak);
(function (j) {
    var g = j.jQuery,
        f = j._,
        k = j.Date,
        e = j.Gmail,
        h = j.BentoBox;
    h.Threads = {
        list: null,
        byId: {},
        byUniq: {},
        byFuzzyUniq: {},
        bySubjectUniq: {},
        byOrder: [],
        current: null,
        rows: {},
        composeThread: null,
        composeThreads: {},
        recentLists: [],
        init: function (a) {
            var b = this;
            this.initThreads();
            this.detectNewThreadModelsAndNotify();
            e.observe("ajaxListRefresh", function (a) {
                a && a.viewData && b.refreshThreads(a.viewData)
            });
            e.observe("viewChanged", function () {
                b.mapRows();
                e.isCompose() && (e.view === e.Constants.Drafts ? (b.composeThreads[e.getConversationId()] ||
                    (b.composeThreads[e.getConversationId()] = h.Models.GmailThread.create({
                        threadGmailId: e.getConversationId()
                    })), b.composeThread = b.composeThreads[e.getConversationId()]) : b.composeThread = h.Models.GmailThread.create({}))
            });
            a()
        },
        getThreadList: function () {
            return this.list
        },
        getThread: function (a) {
            return this.byId[a]
        },
        requestCurrentList: function (a) {
            var b = location.hash.substring(1);
            !b || 0 === b.length ? a() : j.Requester.gmailGetCurrentList(function (b) {
                var d;
                if (b && (d = this.buildThreadList(b, "request current list")) &&
                    0 < d.length)
                    for (b = 0; b < d.length; b++) {
                        var i = d[b];
                        this.byId[i.threadGmailId] ? this.byId[i.threadGmailId].update(i) : this.list.add(i)
                    }
                a && a(d)
            }.bind(this), function () {
                a && a();
                return !0
            })
        },
        initThreads: function () {
            var a = this,
                b = g("script"),
                c = /var VIEW_DATA\=\[\[/;
            a.list = h.Models.ClientGmailThread.createCollection();
            a.list.bind("add", function (b) {
                a.byId[b.key()] = b;
                a.byUniq[b.get("uniq")] || (a.byUniq[b.get("uniq")] = []);
                a.byUniq[b.get("uniq")].push(b);
                a.byFuzzyUniq[b.get("fuzzyUniq")] || (a.byFuzzyUniq[b.get("fuzzyUniq")] = []);
                a.byFuzzyUniq[b.get("fuzzyUniq")].push(b);
                a.bySubjectUniq[b.get("subjectUniq")] || (a.bySubjectUniq[b.get("subjectUniq")] = []);
                a.bySubjectUniq[b.get("subjectUniq")].push(b);
                var c = b.get("uniq"),
                    d = b.get("fuzzyUniq"),
                    e = b.get("subjectUniq");
                b.bind("set", "uniq", function () {
                    a.byUniq[c] && a.byUniq[c].removeVal(b);
                    a.byUniq[b.get("uniq")] || (a.byUniq[b.get("uniq")] = []);
                    a.byUniq[b.get("uniq")].push(b);
                    c = b.get("uniq")
                });
                b.bind("set", "fuzzyUniq", function () {
                    if (a.byFuzzyUniq[d]) {
                        a.byFuzzyUniq[d].removeVal(b);
                        var c =
                            a.byFuzzyUniq[b.get("fuzzyUniq")] || [];
                        c.push(b);
                        a.byFuzzyUniq[b.get("fuzzyUniq")] = c
                    }
                    d = b.get("fuzzyUniq")
                });
                b.bind("set", "subjectUniq", function () {
                    if (a.bySubjectUniq[e]) {
                        a.bySubjectUniq[e].removeVal(b);
                        var c = a.bySubjectUniq[b.get("subjectUniq")] || [];
                        c.push(b);
                        a.bySubjectUniq[b.get("subjectUniq")] = c
                    }
                    e = b.get("subjectUniq")
                })
            });
            a.list.bind("remove", function (b) {
                a.byUniq[b.get("uniq")] && a.byUniq[b.get("uniq")].removeVal(b);
                a.byFuzzyUniq[b.get("fuzzyUniq")] && a.byFuzzyUniq[b.get("fuzzyUniq")].removeVal(b);
                a.bySubjectUniq[b.get("subjectUniq")] && a.bySubjectUniq[b.get("subjectUniq")].removeVal(b)
            });
            var d;
            b.each(function (b, e) {
                if (!g(e).attr("src")) {
                    var f = g(e).html();
                    c.test(f) && (d = a.buildThreadList(f.replace(/.*var VIEW_DATA=/, "").replace(/;var GM_TIMING.*/, ""), "init threads"))
                }
            });
            d && a.processThreadList(d)
        },
        detectNewThreadModelsAndNotify: function () {
            var a = [],
                b = f.debounce(function () {
                    j.NotificationCenter.notify({
                        eventName: "newThreadsFound",
                        threadModels: a
                    });
                    a.length = 0
                }, 100, !1);
            this.list.bind("add", function (c) {
                a.push(c);
                b()
            })
        },
        refreshThreads: function (a) {
            (a = this.buildThreadList(a, "refresh threads")) && this.processThreadList(a)
        },
        cleanGmailResponseText: function (a) {
            var b = a.substring(a.indexOf("[")).replace(/\];var\s.*/img, ""),
                b = "[" + b.replace(/\r|\n/img, "").replace(/,(,|\]|\})/img, ",null$1").replace(/\]\d+\[/img, "],[") + "]",
                c;
            try {
                b = b.replace(/,(,|\]|\})/img, ",null$1"), c = eval("(function(){return " + b + ";})()")
            } catch (d) {
                h.logError("error parsing clean response \n viewData:" + a, d)
            }
            return c
        },
        buildThreadList: function (a) {
            function b(a,
                d) {
                if ("object" == typeof a && a && 0 < a.length)
                    if ("tb" == a[0]) f.each(a[2], function (a) {
                        d.push(c.processJSONThread(a))
                    });
                    else if ("stu" == a[0]) f.each(a[2], function (a) {
                    d.push(c.processJSONThread(a[1]))
                });
                else
                    for (var i = 0; i < a.length; i++) try {
                        b(a[i], d)
                    } catch (e) {
                        console.log("oh snap")
                    }
            }
            var c = this,
                a = a.substring(a.indexOf("[")).replace(/\];var\s.*/img, ""),
                a = "[" + a.replace(/\r|\n/img, "").replace(/,(,|\]|\})/img, ",null$1").replace(/\]\d+\[/img, "],[") + "]",
                d, i = [];
            try {
                a = a.replace(/,(,|\]|\})/img, ",null$1"), d = eval("(function(){return " +
                    a + ";})()"), h.Threads.byOrder.length = 0, b(d, i)
            } catch (e) {}
            d = a = null;
            return i
        },
        processThreadList: function (a) {
            var b = this;
            f.each(a, function (a) {
                b.byId[a.threadGmailId] ? b.byId[a.threadGmailId].update(a, !0) : b.list.add(a)
            });
            this.recentLists.unshift(a);
            this.recentLists.length = 20
        },
        addDraftThread: function () {},
        addThread: function (a) {
            this.list.addModel(a)
        },
        getDraftUniq: function (a) {
            return a.subject.first(30) + a.date
        },
        mapRows: function () {
            this.visible = [];
            this.current = null;
            e.isConversation() && (this.current = this.getCurrent())
        },
        addJSONThreads: function (a) {
            a && f.chain(a).map(this.processJSONThread.bind(this)).compact().each(this.list.add.bind(this.list))
        },
        processJSONThread: function (a) {
            if (a) return a = {
                threadGmailId: a[0],
                subject: g.domCleanString(a[9]),
                date: g.cleanString(a[14]),
                timeString: g.cleanString(a[15]),
                emailString: a[7].replace(/zF|yP/, ""),
                timestamp: a[16] / 1E3,
                isUnread: -1 < a[9].indexOf("<b>"),
                lastEmailAddress: a[28],
                bodyString: g.cleanString(a[10])
            }, this.getThreadUniq(a, h.Threads.byOrder.length), h.Threads.byOrder.push(a), a
        },
        processRow: function (a) {
            var b = a.rowNode,
                c = {}, d = b.find("td").filter(":last").find("span");
            d && 0 < d.length ? (c.timeString = d.attr("title"), c.date = g.cleanString(d[0].innerHTML)) : (c.timeString = "", c.date = "");
            a.subjectLink && 0 < a.subjectLink.length ? (d = a.subjectLink.find(".y6 span").filter(":first"), c.subject = d[0].innerText.replaceAmpCodes(), c.isUnread = -1 < d[0].innerHTML.indexOf("<b>")) : (c.subject = "", c.isUnread = !1);
            0 < b.find(".y2").length ? (d = g.cleanString(b.find(".y2").cleanText()).trim(), "-" === d[0] && (d = d.substring(1).trim()),
                c.bodyString = d) : c.bodyString = "";
            c.names = [];
            c.emailAddresses = [];
            c.emailString = "";
            b.find("span[email]").each(function (a, b) {
                c.names.push(g(b)[0].innerHTML);
                c.emailAddresses.push(g(b).attr("email"))
            });
            0 < c.emailAddresses.length && (c.emailString = b.find("span[email]").closest("div")[0].innerHTML.replace(/zF|yP/, ""));
            0 < b.find("[streakthreadid]").length && (c.threadGmailId = b.find("[streakthreadid]").attr("streakthreadid"));
            this.getThreadUniq(c, a.rowIndex);
            return c
        },
        processRowSet: function (a) {
            var b = {}, c = a.node;
            if (0 !== c[0].find("td.apt .apm span").length) {
                b.timeString = c[0].find("td.apt .apm span").attr("title");
                b.date = g.cleanString(c[0].find("td.apt .apm span")[0].innerHTML);
                var d = c[1].find("td[role=link] span").filter(":first");
                b.subject = d[0].innerText.replaceAmpCodes();
                b.isUnread = -1 < d[0].innerHTML.indexOf("<b>");
                3 > c.length ? b.bodyString = "" : 0 < c[2].find(".y2").length && (b.bodyString = g.cleanText(c[2].find(".y2").cleanText()));
                b.names = [];
                b.emailAddresses = [];
                b.emailString = "";
                c[0].find("span[email]").each(function (a,
                    c) {
                    b.names.push(g(c)[0].innerHTML);
                    b.emailAddresses.push(g(c).attr("email"))
                });
                0 < b.emailAddresses.length && (b.emailString = c[0].find("span[email]").closest("div")[0].innerHTML.replace(/zF|yP/, ""));
                0 < c[0].find("[streakthreadid]").length && (b.threadGmailId = c[0].find("[streakthreadid]").attr("streakthreadid"));
                this.getThreadUniq(b, a.rowIndex);
                return b
            }
        },
        getThreadFromRow: function (a, b) {
            var c;
            (c = e.view === e.Constants.Drafts ? h.Threads.byOrder[a.rowIndex] : "vertical" === a.type ? this.processRowSet(a) : this.processRow(a)) &&
                (c = this.getThreadFromRowThread(c, b));
            return c
        },
        mergeThreads: function (a, b) {
            b.update(a, !0);
            return b
        },
        getThreadFromRowThread: function (a, b) {
            var c;
            if (a.threadGmailId && (c = this.byId[a.threadGmailId]) || (c = a && a.uniq && this.byUniq[a.uniq] && 1 === this.byUniq[a.uniq].length ? this.byUniq[a.uniq][0] : null) && (f.isNotReal(b) || f.isNotReal(b[a.subject]))) return c.update(a, !0), c;
            c = this.filterThreadCandidates([
                function (a, b) {
                    return a.get("subject") === b.subject
                },
                function (a, b) {
                    return a.get("emailString") === b.emailString
                },
                function (a,
                    b) {
                    return a.get("date") === b.date
                },
                function (a, b) {
                    return a.get("timeString") === b.timeString
                }
            ], this.list, a);
            if (f.isNotReal(c)) return null;
            if (1 === c.length) return c[0];
            if (f.isNotReal(b)) return null;
            var d = b[a.subject] || [];
            c = f(c).chain().filter(function (a) {
                return -1 === d.indexOf(a)
            }).value();
            return this.mergeThreads(a, c[0])
        },
        filterThreadCandidates: function (a, b, c) {
            if (0 === a.length) return b;
            var d = a.shift(),
                b = f.filter(b, function (a) {
                    return d(a, c)
                });
            switch (b.length) {
            case 0:
                return null;
            case 1:
                return b[0].update(c, !0), b;
            default:
                return this.filterThreadCandidates(a, b, c)
            }
        },
        processConversation: function () {
            var a = {};
            a.threadGmailId = e.getConversationId();
            a.subject = e.getCurrentMain().find(".Bs .ha .hP").text();
            a.names = [];
            a.emailAddresses = [];
            a.bodyString = "";
            a.isUnread = !1;
            e.getCurrentMain().find("table.Bs div.hx span.gD, table.Bs div.hx span.g2").each(function (b, d) {
                var e = g(d),
                    f = e.attr("email");
                f && e.isVisible() && (a.names.push(e.text()), a.emailAddresses.push(f))
            });
            if (e.isInSentConversation()) {
                var b = this.list.filter(function (b) {
                    return b.get("subject") ===
                        a.subject
                });
                a.threadGmailId = 0 === b.length ? null : 1 === b.length ? b[0].key() : b.sort(function (a) {
                    try {
                        return k.create(a.get("timeString")).getTime()
                    } catch (b) {
                        return -1
                    }
                }).reverse()[0].key()
            }
            return a
        },
        handleNewCompose: function (a) {
            var b = this,
                c = h.Models.ClientGmailThread.create(this.processComposeWindow(a));
            a.bind("draftSaved", function () {
                c.update(b.processComposeWindow(a), !0)
            });
            a.bind("sent", function () {
                c.update(b.processComposeWindow(a), !0)
            });
            a.thread = c
        },
        processComposeWindow: function (a) {
            var b = {};
            b.threadGmailId =
                a.getDraftId();
            b.subject = a.getSubject();
            b.timeString = "";
            b.emailString = "";
            b.names = [];
            b.emailAddresses = [];
            for (var a = a.getToContacts(), c = 0; c < a.length; c++) {
                var d = a[c];
                b.emailAddresses.push(d.emailAddress);
                d.name && b.names.push(d.name)
            }
            this.getThreadUniq(b);
            return b
        },
        processComposeWindowViewController: function (a) {
            var b = {};
            b.threadGmailId = a.getDraftId();
            b.subject = a.getSubject();
            b.timeString = "";
            b.emailString = "";
            b.names = [];
            b.emailAddresses = [];
            for (var a = a.getToContacts(), c = 0; c < a.length; c++) {
                var d = a[c];
                b.emailAddresses.push(d.emailAddress);
                d.name && b.names.push(d.name)
            }
            this.getThreadUniq(b);
            return h.Models.ClientGmailThread.create(b)
        },
        updateComposeWindowThread: function (a, b) {
            var c = {};
            c.threadGmailId = b.getDraftId();
            c.subject = b.getSubject();
            c.timeString = "";
            c.emailString = "";
            c.names = [];
            c.emailAddresses = [];
            for (var d = b.getToContacts(), e = 0; e < d.length; e++) {
                var f = d[e];
                c.emailAddresses.push(f.emailAddress);
                f.name && c.names.push(f.name)
            }
            this.getThreadUniq(c);
            a.update(c)
        },
        addRow: function (a, b) {
            this.rows[b] || (this.rows[b] = []);
            this.rows[b].push(a);
            f.uniq(this.rows[b], !1, function (a) {
                return a[0]
            })
        },
        getThreadUniq: function (a) {
            a.uniq = this.hash(a.emailString.split("(")[0] + a.subject.first(80) + a.timeString + a.bodyString);
            a.fuzzyUniq = this.hash((a.emailString.split("(")[0] || a.subject.first(80)) + a.timeString);
            a.subjectUniq = this.hash(a.subject.first(80) + a.timeString)
        },
        hash: function (a) {
            return a.replace(/\W/img, "")
        },
        getPreviewed: function () {
            var a = f.chain(this.getCurrentRowsAndThreads()).filter(function (a) {
                return a.row.previewed
            }).pluck("thread").value();
            return 0 < a.length ? a[0] :
                null
        },
        getActive: function () {
            var a = null;
            if (e.isConversation()) a = [this.getCurrent()];
            else {
                if (e.isCompose()) {
                    this.composeThread.set("subject", e.getCurrentMain().find('form [name="subject"]').val());
                    var a = [],
                        b = [];
                    this.parseInputForNames(e.getCurrentMain().find('form [name="to"]').val(), a, b);
                    this.parseInputForNames(e.getCurrentMain().find('form [name="cc"]').val(), a, b);
                    this.composeThread.set("names", a);
                    this.composeThread.set("emailAddresses", b);
                    return [this.composeThread]
                }
                a = f(this.getCurrentRowsAndThreads()).chain().filter(function (a) {
                    return a.row.checked
                }).map(function (a) {
                    return a.thread
                }).value()
            }
            return a
        },
        parseInputForNames: function (a, b, c) {
            a && 0 !== a.length && f(a.split(",")).chain().each(function (a) {
                a = a.trim();
                a.has("<") ? (a = a.split("<"), b.push(a[0].replace(/\"/img, "").trim()), c.push(a[1].replace("<", "").replace(">", "").trim())) : a.isValidEmail() && (b.push(a), c.push(a))
            })
        },
        getCurrent: function (a) {
            if (e.isConversation()) {
                a = this.processConversation();
                if (!a.threadGmailId) return h.Models.GmailThread.create(a);
                var b = this.byId[a.threadGmailId];
                b ? b.update(a, !0) : (this.list.add(a), b = this.byId[a.threadGmailId]);
                return b
            }
            if (e.isListView()) return this.processThreadRows(e.getVisibleThreadRows(a))
        },
        processThreadRows: function (a) {
            var b = this,
                c = {};
            return f.map(a, function (a) {
                try {
                    var e = b.getThreadFromRow(a, c);
                    e && (c[e.get("subject")] || (c[e.get("subject")] = []), c[e.get("subject")].push(e));
                    return e
                } catch (f) {
                    return null
                }
            })
        },
        getActiveThread: function () {
            if (e.isConversation()) return this.getCurrent();
            if (e.isPreviewPane()) return this.getPreviewed()
        },
        getCurrentRowsAndThreads: function () {
            for (var a = e.getVisibleThreadRows(), b = this.processThreadRows(a), c = [], d = 0; d < a.length; d++) c.push({
                row: a[d],
                thread: b[d]
            });
            return c
        },
        getSelectedThreads: function () {
            return f.chain(this.getCurrentRowsAndThreads()).filter(function (a) {
                return a.row.checked
            }).pluck("thread").value()
        },
        getRowForThread: function (a) {
            for (var b = this.getCurrentRowsAndThreads(), c = 0; c < b.length; c++)
                if (b[c] && b[c].thread && b[c].thread.key() === a.key()) return b[c].row
        }
    };
    j.DependencyManager.addFunction({
        functionKey: "threadsInitialized",
        functionToCall: h.Threads.init,
        functionContext: h.Threads,
        dependentFunctionKeys: ["gmailLoaded"]
    })
})(Streak);
(function (f) {
    var k = f.jQuery,
        h = f._,
        l = f.Date,
        j = f.Gmail,
        g = f.BentoBox;
    g.Threads.SentThreads = {
        pollingThreads: [],
        isChecking: !1,
        checkCounter: 0,
        init: function (a) {
            var b = this;
            j.observe("emailSent", function (a) {
                b.processEmailSentResponse(a)
            });
            a()
        },
        processEmailSentResponse: function (a) {
            var b;
            try {
                b = this.extractMessageId(a.response)
            } catch (c) {
                b = "could not extract messageId";
                a = a.response;
                try {
                    a = JSON.stringify(j.cleanGmailResponseText(a))
                } catch (d) {
                    b += "\n not parsed"
                }
                g.logError(b + ("\n" + a), c);
                return
            }
            try {
                b && this.getEncodedThreadIdFromMessageIdThenRegisterSentEmail(b,
                    a)
            } catch (e) {
                g.logError("register sent mail failed", e), b = null
            }
            b || this.pollForSentEmail(a.request)
        },
        getEncodedThreadIdFromMessageIdThenRegisterSentEmail: function (a, b) {
            var c = this;
            c.getThreadFromGmailAndExtractEncodedThreadId(a, function (a) {
                a ? c.registerSentEmail(b.request, a) : c.pollForSentEmail(b.request)
            })
        },
        getThreadFromGmailAndExtractEncodedThreadId: function (a, b) {
            var c = this;
            f.Requester.gmailGetThread(a, function (a) {
                a ? (a = j.cleanGmailResponseText(a), (a = c._getMarkerArray(a, "cs", c._isValidEncodedThreadIdMarkerArray)) ?
                    b(a[1]) : b(null)) : b(null)
            }, function () {
                b(null)
            })
        },
        registerSentEmail: function (a, b) {
            var c = g.Threads.getThread(b);
            c || (c = this.convertEmailSendParametersToThreadObject(a), c.set("threadGmailId", b));
            c.set("composeid", a.composeid);
            c.set("draftId", a.draft);
            g.Threads.addThread(c);
            j.trigger("newSentEmail", c)
        },
        extractMessageId: function (a) {
            a = this._getMarkerArray(j.cleanGmailResponseText(a), "a", this._isValidMessageIdMarkerArray);
            return !a ? null : a[3][0]
        },
        _getMarkerArray: function (a, b, c) {
            if (b = f.searchObject(a, b, 100, !1, !0))
                for (var d = 0; b.length; d++) {
                    var e = this._extractPathToMarkerArray(b[d]),
                        e = this._getArrayValueFromPath(a, e);
                    if (c(e)) return e
                }
        },
        _extractPathToMarkerArray: function (a) {
            a = h.rest(a.path.split("/"));
            return h.initial(a)
        },
        _isValidMessageIdMarkerArray: function (a) {
            return 3 < a.length && h.isArray(a[3]) && 0 < a[3].length
        },
        _isValidEncodedThreadIdMarkerArray: function (a) {
            return 20 < a.length
        },
        _getArrayValueFromPath: function (a, b) {
            for (var c = a, d = 0; d < b.length; d++) c = c[b[d]];
            return c
        },
        convertEmailSendParametersToThreadObject: function (a) {
            return g.Models.ClientGmailThread.create({
                subject: a.subject,
                emailAddresses: this._extractEmails(a),
                names: this._extractNames(a),
                draft: a.draft,
                composeid: a.composeid
            })
        },
        pollForSentEmail: function (a, b) {
            "undefined" !== a.rm && "" !== a.rm && !b || (a.timestamp = l.now(), this.checkCounter = 0, this.pollingThreads.push(a), this.isChecking || this.startChecking())
        },
        startChecking: function () {
            this.isChecking = !0;
            this.checkSentMail()
        },
        checkSentMail: function () {
            var a = this;
            f.Requester.gmailGetSentMail(function (b) {
                10 < a.checkCounter ? a.logSentEmailsCantBeFound(b) : a.processSentMailResponse(b)
            })
        },
        logSentEmailsCantBeFound: function (a) {
            var b;
            a && (b = g.Threads.buildThreadList(a, "getting sent email debug"));
            for (var a = "sent emails couldn't be found", c = 0; c < this.pollingThreads.length; c++) {
                var d = this.pollingThreads[c];
                if (!d.found && (a += "\n email subject: " + d.subject, a += " | to: " + JSON.stringify(d.to), a += " | timestamp: " + d.timestamp, b && 0 < b.length)) {
                    var e = Math.min(10, b.length),
                        a = a + ("\n recent " + e + " sent emails");
                    for (i = 0; i < e; i++) var f = this.compareSentMail(b[i], d, !0),
                    a = a + ("\n reason " + i + ": " + f + " | subject: " +
                        b[i].subject + " | emailString: " + b[i].emailString + " | timestamp: " + b[i].timestamp)
                }
            }
            g.logError(a);
            this.resetPolling()
        },
        resetPolling: function () {
            this.checkCounter = this.pollingThreads.length = 0;
            this.isChecking = !1
        },
        processSentMailResponse: function (a) {
            if (a) {
                if ((a = g.Threads.buildThreadList(a, "getting sent email")) && 0 < a.length) {
                    for (var b = 0, c = 0; c < this.pollingThreads.length; c++)
                        for (var d = this.pollingThreads[c], e = 0; e < a.length; e++)
                            if (this.compareSentMail(a[e], d)) {
                                var f = a[e];
                                a.removeAt(e);
                                d.found || (f.draft = d.draft,
                                    f.composeid = d.composeid, e = g.Threads.getThread(f.threadGmailId), e || (e = g.Threads.list.add(f), e.set("names", this._extractNames(d)), e.set("emailAddresses", this._extractEmails(d))), j.trigger("newSentEmail", e));
                                d.found = !0;
                                b++;
                                break
                            }
                    if (b === this.pollingThreads.length) {
                        this.resetPolling();
                        return
                    }
                }
                this.checkCounter++;
                setTimeout(h.bind(this.checkSentMail, this), 2E3)
            }
        },
        compareSentMail: function (a, b, c) {
            var d = !1,
                e = k.domCleanString(f.cleanupEmailSubject(b.subject)).removeWhitespace();
            e === k.domCleanString(f.cleanupEmailSubject(a.subject)).removeWhitespace() &&
                (d = !0);
            0 === e.trim().length && a.subject.match(/^\((\s|\w)*?\)$/) && (d = !0);
            if (d)
                if (h.isArray(b.to)) {
                    for (d = 0; d < b.to.length; d++)
                        if (this.compareEmailAddresses(b.to[d], a.emailString)) {
                            if (e = this.compareTimestamps(b.timestamp, a.timestamp)) return !0;
                            if (c) return "timestamps not matched"
                        }
                    if (c) return "array to not matched"
                } else {
                    if (this.compareEmailAddresses(b.to, a.emailString)) {
                        if (e = this.compareTimestamps(b.timestamp, a.timestamp)) return !0;
                        if (c) return "timestamps not matched"
                    }
                    if (c) return "single email not matched"
                } else if (c) return "subject not matched";
            return !1
        },
        compareEmailAddresses: function (a, b) {
            if (!a || !b) return !1;
            var c = a.match(/(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))/ig);
            if (c && 0 < c.length)
                for (var d = 0; d < c.length; d++) {
                    var e = c[d].toLowerCase();
                    if (-1 < b.toLowerCase().indexOf(e)) return !0
                }
            return !1
        },
        compareBodies: function (a, b, c) {
            b = b || "";
            a = k.cleanString(a || "").removeWhitespace().first(75);
            b = k.cleanString(b).removeWhitespace().first(75);
            return 0.75 <
                b.intersectionLength(a) ? !0 : c ? "bodies do not match" : !1
        },
        compareTimestamps: function (a, b) {
            var c = l.create(a),
                d = l.create(b);
            return 4 > Math.abs(c.minutesSince(d))
        },
        _extractNames: function (a) {
            var a = this._extractRecipients(a),
                b = [];
            h.each(a, function (a) {
                if (0 < a.length) {
                    var d = a.indexOf("<"),
                        a = a.substring(0, d);
                    b.push(a)
                }
            });
            return b
        },
        _extractEmails: function (a) {
            var a = this._extractRecipients(a),
                b = [];
            h.each(a, function (a) {
                0 !== a.length && (0 > a.indexOf("<") ? b.push(a) : (a = /\<.+?\>/g.exec(a), h.isReal(a) && 0 < a.length && (a = a[a.length -
                    1], a = a.substring(1, a.length - 1), b.push(a))))
            });
            return b
        },
        _extractRecipients: function (a) {
            var b = [];
            h.isArray(a.to) && (b = b.concat(a.to));
            h.isArray(a.cc) && (b = b.concat(a.cc));
            h.isArray(a.bcc) && (b = b.concat(a.bcc));
            return b
        }
    };
    f.DependencyManager.addFunction({
        functionKey: "sentThreadsInitialized",
        functionToCall: g.Threads.SentThreads.init,
        functionContext: g.Threads.SentThreads,
        dependentFunctionKeys: ["gmailLoaded"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        BB = Streak.BentoBox,
        Requester = Streak.Requester;
    var CONSTANTS = {
        MAX_BACKOFF: 10 * 60 * 1E3
    };
    BB.Realtime = {
        active: true,
        initialized: false,
        connectDelay: 1E3,
        token: null,
        handlers: {},
        connectTimeout: null,
        heartbeatArrived: false,
        heartbeatTimer: null,
        heartbeatData: null,
        currentConnectionTime: null,
        init: function (cb) {
            var self = this;
            if (!this.initialized) {
                this.setupObservers();
                this.setupChannelFramework();
                this.initialized = true;
                BB.bind("reup", function () {
                    self.connectChannel()
                })
            }
            if (cb) cb()
        },
        setupObservers: function () {
            var self = this;
            this.handlers.open = function (message) {
                self.connectDelay = 4E3;
                self.setupHeartbeat();
                realtimeConnectionEstablished()
            };
            this.handlers.error = function (message) {};
            this.handlers.close = function (message) {
                if (!self.resetting) {
                    self.token = null;
                    self.connectChannel()
                }
            };
            this.handlers.message = function (message) {
                var json = JSON.parse(message.data);
                console.log("realtime message: ", json);
                if (json.hash) {
                    self.handleHeartbeat(json.hash);
                    return
                }
                if (json.REALTIME_EVENT === "DESKTOP_NOTIFICATION") {
                    handleDesktopNotification(json);
                    return
                }
                switch (json.entityType) {
                case "Box":
                    handleCase(json);
                    break;
                case "Pipeline":
                    handleWorkflow(json);
                    break;
                case "Reminder":
                    handleReminder(json);
                    break;
                case "Comment":
                    handleComment(json);
                    break;
                case "GmailThread":
                    handleGmailThread(json);
                    break;
                case "GmailThreadIdentifier":
                    handleGmailThreadIdentifier(json);
                    break;
                case "Snippet":
                    handleSnippet(json);
                    break;
                case "User":
                    handleUser(json);
                    break;
                case "UserUISettings":
                    handleUserSettings(json);
                    break;
                default:
                    BB.logError("Realtime Error - entityType " + json.entityType +
                        " is not supported yet.");
                    break
                }
            };
            Messenger.observe("channelConnectMessage", function (message) {
                if (self.handlers[message.op]) self.handlers[message.op](message.data)
            });
            Messenger.observe("channelConnectResetTeardown", function (message) {
                self.resetting = true;
                self.oldToken = self.token
            });
            Messenger.observe("channelConnectResetReup", function (message) {
                self.resetting = false;
                self.setupChannelFramework()
            })
        },
        setupChannelFramework: function () {
            var self = this;
            Messenger.sendMessage("channelSetup", {
                src: (Streak.devRealtimeServer ||
                    Streak.server) + "/_ah/channel/jsapi",
                isDevServer: _.isReal(Streak.devRealtimeServer)
            }, "channelSetupReturn", function () {
                self.connectChannel()
            })
        },
        getToken: function (cb) {
            var self = this;
            Requester.getFile({
                msgUrl: "/realtime/createChannelToken"
            }, function (res) {
                self.token = res.message;
                if (cb) cb()
            }, function (data, xhr) {
                self.token = null;
                if (xhr.status === 401) return true;
                else if (cb) cb()
            }, null, 0, true)
        },
        connectChannel: function () {
            if (this.token) Messenger.sendMessage("channelConnect", {
                token: this.token,
                server: Streak.server
            });
            else this.backoff()
        },
        backoff: function () {
            var self = this;
            self.connectDelay = Math.min(self.connectDelay * 2, CONSTANTS.MAX_BACKOFF);
            clearTimeout(this.connectTimeout);
            this.connectTimeout = setTimeout(function () {
                self.getToken(function () {
                    self.connectChannel()
                })
            }, self.connectDelay)
        },
        setupHeartbeat: function () {
            var self = this;
            if (!this.heartbeatTimer) this.heartbeatTimer = _.repeatEvery(function () {
                if (self.token === null) {
                    self.heartbeatTimer.stop();
                    return
                }
                self.heartbeatData = Math.random() + "." + Date.now();
                self.heartbeatArrived =
                    false;
                Requester.getString({
                    msgUrl: "/ajaxcalls/realtimeHeartbeat",
                    hash: self.heartbeatData
                }, function () {
                    setTimeout(function () {
                        if (!self.heartbeatArrived) {
                            self.logBadConnection();
                            self.connectChannel()
                        }
                    }, 120 * 1E3)
                })
            }, 10 * 60 * 1E3, true);
            else {
                this.heartbeatTimer.stop();
                this.heartbeatTimer.start()
            }
            this.currentConnectionTime = Date.create()
        },
        handleHeartbeat: function (data) {
            if (data === this.heartbeatData) this.heartbeatArrived = true
        },
        logBadConnection: function () {
            BB.Modules.PerformanceModule.recordStat("realtimeConnectionLength",
                Date.create().minutesSince(this.currentConnectionTime))
        }
    };
    var handleCase = function (json) {
        var box;
        switch (json.REALTIME_EVENT) {
        case "CREATE":
            box = BB.Data.getBox(json.key);
            if (!box) BB.Data.addNewBox(json.key, function () {
                BB.Data.getBox(json.key).trigger("change")
            });
            break;
        case "DELETE":
            box = BB.Data.getBox(json.key);
            if (box) {
                var key = box.get("pipelineKey");
                box.trigger("delete");
                BB.Data.getPipelineBoxes(key).trigger("refreshed")
            }
            break;
        case "UPDATE":
            box = BB.Data.getBox(json.key);
            if (box) box.refresh();
            else BB.Data.addNewBox(json.key,
                function () {
                    BB.Data.getBox(json.key).trigger("change")
                });
            break
        }
    };
    var handleWorkflow = function (json) {
        var pipe;
        switch (json.REALTIME_EVENT) {
        case "NEW_ACL":
        case "CREATE":
        case "REMOVE_ACL":
            BB.Data.getAllPipelines().refresh();
            break;
        case "DELETE":
            BB.Data.removePipeline(json.key);
            break;
        case "UPDATE":
            pipe = BB.Data.getPipeline(json.key);
            if (pipe) pipe.refresh();
            else BB.Data.addNewPipeline(json.key);
            break;
        case "UPDATE_CASCADE":
            pipe = BB.Data.getPipeline(json.key);
            if (pipe) BB.Data.getPipelineBoxes(json.key).refresh();
            else BB.Data.addNewPipeline(json.key);
            break;
        case "CALCULATION_COMPLETE":
            pipe = BB.Data.getPipeline(json.key);
            if (!pipe) return;
            BB.Data.getPipelineBoxes(json.key).refresh(function () {
                pipe.trigger("calculationComplete")
            });
            break
        }
    };
    var handleComment = function (json) {
        var box = BB.Data.getBox(json.caseKey);
        if (box) box.refresh()
    };
    var handleReminder = function (json) {
        var box = BB.Data.getBox(json.caseKey);
        if (box);
    };
    var handleGmailThread = function (json) {
        var box = BB.Data.getBox(json.caseKey);
        if (box) BB.Data.getGmailThreadGroup(box.key()).refresh()
    };
    var handleGmailThreadIdentifier = function (json) {
        if (json.gmailThreadId) {
            var thread = BB.Threads.getThread(json.gmailThreadId);
            if (thread) {
                var threadinfo = thread.get("threadInfo");
                if (threadinfo) threadinfo.refresh()
            }
        }
    };
    var handleSnippet = function (json) {
        switch (json.REALTIME_EVENT) {
        case "CREATE":
        case "DELETE":
            BB.Data.getAllSnippets().refresh();
            break;
        case "UPDATE":
            var snippet = BB.Data.getSnippet(json.key);
            if (snippet) snippet.refresh();
            else BB.Data.getAllSnippets().refresh();
            break
        }
    };
    var handleUser = function (json) {
        var user =
            BB.getUser();
        if (user) user.refresh()
    };
    var handleUserSettings = function (json) {
        BB.UserSettings.refresh()
    };
    var requestPending = false;
    var notificationQueue = [];
    var blockNotificationTimeout = false;
    var blockTimeout = null;
    var realtimeConnectionEstablished = function () {
        clearTimeout(blockNotificationTimeout);
        blockNotificationTimeout = setTimeout(function () {
            blockNotifications = false
        }, 5 * 1E3);
        blockNotifications = true
    };
    var handleDesktopNotification = function (json) {
        if (!window.webkitNotifications) return;
        if (blockNotifications) {
            handleBlockedNotification(json);
            return
        }
        if (BB.LocalSettings.get("notifications/desktop/deniedPermission")) return;
        var permissionStatus = window.webkitNotifications.checkPermission();
        if (permissionStatus === 0) showDesktopNotification(json);
        else if (permissionStatus === 1) {
            notificationQueue.push(json);
            if (!requestPending) {
                requestPending = true;
                BB.Widgets.Modal.create({
                    title: BB.Locale.getString("notification_permission_title"),
                    inner: BB.Locale.getString("notification_permission_message"),
                    showCancel: false,
                    confirmText: BB.Locale.getString("ok"),
                    confirmFunc: function () {
                        window.webkitNotifications.requestPermission(handleDesktopNotificationPermissionChange)
                    },
                    cancelFunc: function () {
                        BB.LocalSettings.set("notifications/desktop/deniedPermission", true)
                    }
                }).show()
            }
        }
    };
    var missedNotifications = [];
    var missedNotificationTimeout = null;
    var handleBlockedNotification = function (notification) {
        if (BB.getUser().getDomain().toLowerCase() !== "streak.com") return;
        console.log("missed notification", notification);
        missedNotifications.push(notification);
        clearTimeout(missedNotificationTimeout);
        missedNotificationTimeout = setTimeout(function () {
            var notification = window.webkitNotifications.createNotification(null,
                "Missed Notifications", "You missed " + missedNotifications.length + " notifications");
            notification.show();
            missedNotifications.length = 0
        }, 5E3)
    };
    var handleDesktopNotificationPermissionChange = function () {
        var permissionStatus = window.webkitNotifications.checkPermission();
        switch (permissionStatus) {
        case 0:
            for (var ii = 0; ii < notificationQueue.length; ii++) showDesktopNotification(notificationQueue[ii]);
            break;
        case 2:
            notificationQueue.length = [];
            break
        }
    };
    var showDesktopNotification = function (json) {
        var notification = window.webkitNotifications.createNotification(json.photoUrl,
            json.title, json.message);
        notification.onclick = function () {
            BB.Tracker.trackStreakActive({
                eventName: "desktopNotificationClicked",
                entityType: json.entityType
            });
            if (_.isReal(json.entityType)) switch (json.entityType) {
            case "Case":
                var box = BB.Data.getBox(json.key);
                if (box) BB.UI.setURL(box.link());
                break;
            case "Workflow":
                var pipeline = BB.Data.getPipeline(json.key);
                if (pipeline) BB.UI.setURL(pipeline.link());
                break;
            case "GmailThread":
                Streak.Gmail.showNotice(BB.Locale.getString("loading"));
                BB.Data.getGmailThread(json.key,
                    function (thread) {
                        Streak.Gmail.hideNotice();
                        if (!thread) return;
                        if (thread.get("isRequestingUserOwner")) BB.UI.goToThread(thread.key());
                        else if (thread.get("doesRequestingUserHaveThread")) BB.UI.goToThread(thread.get("requestingUserThreadGmailId"));
                        else {
                            var url = BB.UI.linkify(thread);
                            BB.UI.setURL(url)
                        }
                    });
                break;
            case "EmailThread":
                if (json.key) BB.UI.goToThread(json.key);
                break;
            default:
            }
        };
        notification.ondisplay = function () {
            setTimeout(notification.cancel.bind(notification), 7E3)
        };
        notification.show()
    };
    Streak.DependencyManager.addFunction({
        functionKey: "realtimeInitialized",
        functionToCall: BB.Realtime.init,
        functionContext: BB.Realtime,
        dependentFunctionKeys: ["userLoggedIn"]
    })
})(Streak);
Streak.initializeData = function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    BB.Data = {};
    _.extend(BB.Data, {
        pipelines: {
            list: null,
            keyed: {}
        },
        initPipelines: function (cb) {
            var self = this;
            var once = _.once(function () {
                cb()
            });
            self.pipelines.list = BB.Models.Pipeline.createCollection(function (initializedWithData) {
                if (initializedWithData) {
                    self.pipelines.list.refresh();
                    self.initPipelineBoxCollections(once)
                } else self.pipelines.list.refresh(function () {
                    self.initPipelineBoxCollections(once)
                })
            });
            self.initPipelinesList();
            Streak.DependencyManager.notifyFunctionFinished("data.pipelines.collectionCreated")
        },
        initPipelinesList: function () {
            var self = this;
            self.pipelines.list.bind("add", function (pipeline) {
                if (pipeline.key()) {
                    self.pipelines.keyed[pipeline.key()] = pipeline;
                    self.pipelines.list.sort(function (a, b) {
                        return (a.displayName() > b.displayName()) - (a.displayName() < b.displayName())
                    })
                }
                BB.UI.addSavingNotice(pipeline)
            });
            self.pipelines.list.bind("remove", function (pipeline) {
                var boxes = _.clone(self.getPipelineBoxes(pipeline.key()));
                for (var i = 0; i < boxes.length; i++) boxes[i].trigger("delete");
                delete self.boxes.grouped[pipeline.key()];
                BB.trigger("change")
            })
        },
        initPipelineBoxCollections: function (cb) {
            var self = this;
            var after = _.onceAfter(self.pipelines.list.length, cb);
            if (self.pipelines.list.length > 0) _.each(self.pipelines.list, function (pipeline) {
                self.setupPipelineBoxCollection(pipeline.key(), function (initializedWithData) {
                    if (initializedWithData) {
                        self.getPipelineBoxes(pipeline.key()).refresh();
                        after()
                    } else self.getPipelineBoxes(pipeline.key()).refresh(after)
                })
            });
            else cb()
        },
        setupPipelineBoxCollection: function (key, initializedCallback) {
            var self = this;
            this.boxes.grouped[key] = BB.Models.Box.createCollection(key, initializedCallback);
            this.boxes.grouped[key].bind("add", function (box) {
                self.boxes.keyed[box.key()] = box;
                self.boxes.list.addModel(box);
                BB.UI.addSavingNotice(box)
            });
            this.boxes.grouped[key].bind("remove", function (box) {
                self.removeBox(box)
            })
        },
        resetPipeline: function (pipeline) {
            delete self.boxes.grouped[pipeline.key()]
        },
        createSimilarPipeline: function (fromPipeline) {
            Gmail.showNotice(BB.Locale.getString("creating_pipeline"));
            var i;
            var pipelineObject = {
                name: fromPipeline.displayName() + "*"
            };
            var fieldNames = [];
            var fieldTypes = [];
            var stageNames = fromPipeline.getStageNames();
            for (i = 0; i < fromPipeline.getFields().length; i++) {
                fieldNames.push(fromPipeline.getFields()[i].displayName());
                fieldTypes.push(fromPipeline.getFields()[i].get("type"))
            }
            var newPipeline = BB.Models.Pipeline.create(pipelineObject);
            newPipeline.set("stageNames", stageNames);
            newPipeline.set("fieldNames", fieldNames);
            newPipeline.set("fieldTypes", fieldTypes);
            newPipeline.save(function () {
                for (var i =
                    0; i < fromPipeline.getSystemColumns().length; i++) newPipeline.addSystemColumn(fromPipeline.getSystemColumns()[i], null, null, true);
                newPipeline.save(function () {
                    BB.Data.getAllPipelines().addModel(newPipeline);
                    BB.UI.setURL(newPipeline.link());
                    Gmail.hideNotice()
                })
            })
        },
        createPipelineFromTemplate: function (templatePipeline, cb) {
            templatePipeline.name = templatePipeline.name || templatePipeline.friendlyName;
            var pipeline = BB.Models.Pipeline.create(templatePipeline);
            var stageNames = [],
                i;
            var fieldNames = [];
            var fieldTypes = [];
            if (pipeline.getStageNames().length > 0) pipeline.set("stageNames", pipeline.getStageNames());
            var fields = pipeline.getFields();
            for (i = 0; i < fields.length; i++) {
                fieldNames.push(fields[i].get("name"));
                fieldTypes.push(fields[i].get("type"))
            }
            pipeline.set("fieldNames", fieldNames);
            pipeline.set("fieldTypes", fieldTypes);
            pipeline.save(function () {
                BB.Data.getAllPipelines().addModel(pipeline);
                for (var i = 0; i < templatePipeline.systemProperties.length; i++) pipeline.addSystemColumn({
                        property: templatePipeline.systemProperties[i]
                    },
                    null, null, true);
                pipeline.save(function () {
                    if (cb) cb(pipeline)
                })
            });
            return pipeline
        },
        getPipeline: function (key) {
            return this.pipelines.list.getByKey(key)
        },
        getAllPipelines: function () {
            return this.pipelines.list
        },
        addNewPipeline: function (key) {
            var self = this;
            APIRequester.get({
                msgUrl: "pipelines/" + key
            }, function (res) {
                self.pipelines.list.add(res)
            })
        },
        removePipeline: function (key) {
            if (this.getPipeline(key)) {
                this.getPipeline(key).trigger("delete");
                return true
            }
            return false
        },
        hasSharedPipelines: function () {
            var pips = BB.Data.getAllPipelines();
            if (!pips) return false;
            for (var i = 0; i < pips.length; i++)
                if (pips[i].get("shareState") !== "PRIVATE") return true;
            return false
        },
        numSharedPipelines: function () {
            var pips = BB.Data.getAllPipelines();
            var count = 0;
            if (!pips) return 0;
            for (var i = 0; i < pips.length; i++)
                if (pips[i].get("shareState") !== "PRIVATE") return count++;
            return count
        },
        numBoxesCreatedByCurrentUser: function () {
            return Streak._.filter(Streak.BentoBox.Data.getAllBoxes(), function (box) {
                return box.get("creatorKey") === Streak.BentoBox.getUser().key()
            }).length
        },
        numBoxesCreatedByCurrentUserThatContainAThread: function () {
            return Streak._.filter(Streak.BentoBox.Data.getAllBoxes(),
                function (box) {
                    return box.get("creatorKey") === Streak.BentoBox.getUser().key() && box.get("gmailThreadCount") > 0
                }).length
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "data.pipelines.initialized",
        functionToCall: BB.Data.initPipelines,
        functionContext: BB.Data,
        dependentFunctionKeys: ["userLoggedIn", "data.boxes.initialized"]
    });
    _.extend(BB.Data, {
        boxes: {
            list: null,
            keyed: {},
            grouped: {},
            byHex: {},
            hexList: {}
        },
        initBoxes: function (cb) {
            this.boxes.list = BB.Models.Box.createCollection();
            if (cb) cb()
        },
        addBox: function (rawBox) {
            if (this.getBox(rawBox.boxKey)) this.getBox(rawBox.boxKey).update(rawBox);
            else if (rawBox.pipelineKey) {
                var collection = this.getPipelineBoxes(rawBox.pipelineKey);
                if (collection) collection.add(rawBox)
            }
            return this.boxes.keyed[rawBox.boxKey]
        },
        addBoxModel: function (box, suppressUpdate, suppressCollectionChange) {
            if (this.getBox(box.key())) this.getBox(box.key()).update(box.getObj(), suppressUpdate);
            if (box.get("pipelineKey")) this.getPipelineBoxes(box.get("pipelineKey")).addModel(box, suppressCollectionChange);
            return this.boxes.keyed[box.key()]
        },
        addNewBox: function (key, cb) {
            var self = this;
            APIRequester.get({
                msgUrl: "boxes/" + key
            }, function (res) {
                self.addBox(res);
                cb()
            })
        },
        getBox: function (key) {
            var retVal = this.boxes.keyed[key];
            if (retVal) return retVal;
            retVal = this.getAllBoxes().filter(function (box) {
                return box.key() === key
            });
            if (retVal.length > 0) {
                retVal = retVal[0];
                this.boxes.keyed[key] = retVal
            } else retVal = null;
            return retVal
        },
        getAllBoxes: function () {
            return this.boxes.list
        },
        getCreatedBoxes: function () {
            return _.filter(this.boxes.list, function (box) {
                return box.get("creatorKey") === BB.getUser().key()
            })
        },
        getPipelineBoxes: function (key) {
            var boxes =
                this.boxes.grouped[key];
            if (!boxes) this.setupPipelineBoxCollection(key);
            return this.boxes.grouped[key]
        },
        removeBox: function (box) {
            var self = this;
            delete self.boxes.keyed[box.key()];
            if (self.boxes.grouped[box.get("pipelineKey")] && self.boxes.grouped[box.get("pipelineKey")].indexOf(box) >= 0) self.boxes.grouped[box.get("pipelineKey")].remove(box);
            var list = self.boxes.hexList[box.key()];
            if (list && list.length > 0) {
                _.each(list, function (hexId) {
                    delete self.boxes.byHex[hexId]
                });
                delete self.boxes.hexList[box.key()]
            }
            self.boxes.list.remove(box)
        },
        addThreadsToBox: function (box, threads, cb, forceSave) {
            var self = this;
            if (Gmail.isCompose() && !forceSave) {
                threads[0].set("box", box);
                if (cb) cb()
            } else {
                var viableThreads = _(threads).chain().filter(function (thread) {
                    return thread.key() && thread.get("threadInfo")
                }).uniq(function (thread) {
                    return thread.key()
                }).value();
                var jsonThreads = _.map(viableThreads, function (thread) {
                    return thread.getObj()
                });
                var threadInfos = _.map(viableThreads, function (thread) {
                    return thread.get("threadInfo")
                });
                if (jsonThreads.length > 0) {
                    var after =
                        _.after(jsonThreads.length, function () {
                            _.each(threadInfos, function (threadInfo) {
                                try {
                                    threadInfo.set("box", box)
                                } catch (err) {}
                            });
                            APIRequester.put({
                                msgUrl: "boxes/" + box.key() + "/threads",
                                json: JSON.stringify(jsonThreads)
                            }, function (res) {
                                BB.Logger.colorLog("adding threads", "orange");
                                _.each(viableThreads, function (thread) {
                                    try {
                                        var serverGmailThread = _.find(res, function (serverThread) {
                                            return serverThread.threadGmailId === thread.key()
                                        });
                                        if (serverGmailThread) {
                                            var serverGmailThreadModel = self.gmailThreads.list.add(serverGmailThread);
                                            thread.set("serverThread", serverGmailThreadModel);
                                            thread.get("threadInfo").set("box", box)
                                        }
                                        thread.get("threadInfo").performNextSyncOperation()
                                    } catch (err) {
                                        thread.get("threadInfo").performNextSyncOperation()
                                    }
                                });
                                if (cb) cb()
                            }, function (res) {
                                _.each(threadInfos, function (threadInfo) {
                                    try {
                                        threadInfo.performNextSyncOperation();
                                        threadInfo.set("box", null);
                                        box.trigger("removeThreads")
                                    } catch (err) {}
                                });
                                Gmail.showNotice(BB.Locale.getString("error_saving_conversations"), 5E3)
                            })
                        });
                    _.each(threadInfos, function (threadInfo) {
                        threadInfo.addSyncedCallback(after)
                    })
                } else if (cb) cb()
            }
        },
        removeThreadFromBox: function (threads, cb) {
            var self = this;
            if (Gmail.isCompose()) {
                threads[0].set("box", null);
                cb()
            } else {
                var after = _.after(threads.length, function () {
                    self.getAllBoxes().trigger("threadChange");
                    cb()
                });
                var cleanup = function (thread, box) {
                    box.trigger("removeThreads")
                };
                _.each(threads, function (thread) {
                    BB.Logger.colorLog("Removing thread", thread, thread.getObj(), "blue");
                    var threadInfo = thread.get("threadInfo");
                    if (!threadInfo) return;
                    var box = threadInfo.get("box");
                    threadInfo.set("box", null);
                    thread.set("serverThread",
                        null);
                    threadInfo.addSyncedCallback(function () {
                        threadInfo.set("box", null);
                        self.getGmailThreadByHexID(thread.key(), function (gThread) {
                            if (gThread) {
                                BB.Logger.colorLog("HexID refreshed:", gThread, gThread.getObj(), "magenta");
                                gThread.del(function () {
                                    if (box) cleanup(thread, box);
                                    after();
                                    threadInfo.performNextSyncOperation()
                                }, function () {
                                    if (box) cleanup(thread, box);
                                    after();
                                    threadInfo.performNextSyncOperation()
                                })
                            } else {
                                BB.Logger.colorLog("no gthread", "green");
                                threadInfo.performNextSyncOperation()
                            }
                        })
                    })
                })
            }
        },
        createBox: function (name,
            pipelineKey, cb) {
            var self = this;
            var box = BB.Models.Box.create({
                name: name,
                pipelineKey: pipelineKey
            });
            box.save(function () {
                self.addBoxModel(box);
                if (cb) cb(box)
            })
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "data.boxes.initialized",
        functionToCall: BB.Data.initBoxes,
        functionContext: BB.Data
    });
    _.extend(BB.Data, {
        EmailFilters: {
            grouped: {}
        },
        getEmailFilterCollection: function (boxKey) {
            if (!this.EmailFilters.grouped[boxKey]) this.EmailFilters.grouped[boxKey] = BB.Models.EmailFilter.createCollection(boxKey);
            return this.EmailFilters.grouped[boxKey]
        }
    });
    _.extend(BB.Data, {
        EmailFilterBlacklists: null,
        getEmailFilterBlacklistCollection: function () {
            if (!_.isReal(this.EmailFilterBlacklists)) this.EmailFilterBlacklists = BB.Models.EmailFilterBlacklist.createCollection();
            return this.EmailFilterBlacklists
        }
    });
    _.extend(BB.Data, {
        Files: {
            grouped: {}
        },
        getFileGroup: function (key) {
            if (!this.Files.grouped[key]) this.Files.grouped[key] = BB.Models.File.createCollection(key);
            return this.Files.grouped[key]
        }
    });
    _.extend(BB.Data, {
        gmailThreads: {
            list: null,
            grouped: {},
            keyed: {},
            encodedThreadIdMap: {}
        },
        initGmailThreads: function (cb) {
            var self = this;
            self.gmailThreads.list = BB.Models.GmailThread.createCollection();
            self.gmailThreads.list.bind("add", function (gThread) {
                if (gThread.get("caseKey")) self.getGmailThreadGroup(gThread.get("caseKey")).addModel(gThread);
                if (gThread.get("threadGmailId")) self.gmailThreads.encodedThreadIdMap[gThread.get("threadGmailId")] = gThread;
                gThread.bind("set", "threadGmailId", function () {
                    self.gmailThreads.encodedThreadIdMap[gThread.get("threadGmailId")] = gThread
                })
            });
            self.gmailThreads.list.bind("remove",
                function (gThread) {
                    delete self.gmailThreads.encodedThreadIdMap[gThread.get("threadGmailId")]
                });
            if (cb) cb()
        },
        createGmailThreadGroup: function (key) {
            this.gmailThreads.grouped[key] = BB.Models.GmailThread.createCollection(key)
        },
        getGmailThreadGroup: function (key) {
            if (!this.gmailThreads.grouped[key]) this.gmailThreads.grouped[key] = BB.Models.GmailThread.createCollection(key);
            return this.gmailThreads.grouped[key]
        },
        getGmailThreads: function (key, cb, isImmediate) {
            var self = this;
            if (isImmediate) return this.gmailThreads.grouped[key];
            if (!this.gmailThreads.grouped[key]) this.createGmailThreadGroup(key);
            this.gmailThreads.grouped[key].refresh(function () {
                cb(self.gmailThreads.grouped[key])
            })
        },
        getGmailThread: function (key, cb, isImmediate) {
            var self = this;
            var gThread = self.gmailThreads.list.get(key);
            if (gThread || isImmediate)
                if (isImmediate) return gThread;
                else cb(gThread);
                else APIRequester.get({
                    msgUrl: "threads/" + key
                }, function (res) {
                    var ret = self.gmailThreads.list.add(res);
                    cb(ret)
                })
        },
        getGmailThreadByHexID: function (hexId, cb) {
            var self = this;
            if (_.isNotReal(cb)) cb =
                $.noop;
            if (_.isReal(this.gmailThreads.encodedThreadIdMap[hexId])) cb(this.gmailThreads.encodedThreadIdMap[hexId]);
            else APIRequester.get({
                msgUrl: "threadinfo/" + hexId + "/threads"
            }, function (res) {
                var ret;
                if (res) ret = self.gmailThreads.list.add(res);
                cb(ret)
            }, function () {
                cb(null)
            }, null, null, true)
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "data.gmailThreads.initialized",
        functionToCall: BB.Data.initGmailThreads,
        functionContext: BB.Data
    });
    _.extend(BB.Data, {
        sendLaters: {
            list: null,
            keyed: {},
            byHexId: {}
        },
        initSendLaters: function (cb) {
            this.sendLaters.list =
                BB.Models.SendLater.createCollection();
            this.initSendLatersList();
            this.sendLaters.list.refresh(cb)
        },
        initSendLatersList: function (res) {
            var self = this;
            this.sendLaters.list.bind("add", function (sendLater) {
                if (sendLater.key()) self.sendLaters.keyed[sendLater.key()] = sendLater;
                else sendLater.bind("set", "sendLaterKey", function () {
                    self.sendLaters.keyed[sendLater.key()] = sendLater
                });
                var draftId = sendLater.get("gmailDraftId");
                self.sendLaters.byHexId[draftId] = sendLater;
                sendLater.bind("set", "gmailDraftId", function () {
                    if (draftId) delete self.sendLaters.byHexId[draftId];
                    draftId = sendLater.get("gmailDraftId");
                    self.sendLaters.byHexId[draftId] = sendLater
                })
            });
            this.sendLaters.list.bind("remove", function (sendLater) {
                if (sendLater.key()) delete self.sendLaters.keyed[sendLater.key()];
                if (sendLater.get("gmailDraftId")) delete self.sendLaters.byHexId[sendLater.get("gmailDraftId")]
            })
        },
        getSendLater: function (key) {
            return this.sendLaters.keyed[key]
        },
        getSendLaterByHexId: function (hexId) {
            return this.sendLaters.byHexId[hexId] || null
        },
        getSendLaterListByHexIds: function (hexIdList, cb) {
            var self =
                this;
            APIRequester.get({
                msgUrl: "sendlaters",
                hexGmailThreadIdList: JSON.stringify(hexIdList)
            }, function (res) {
                if (res && !res.error) {
                    var mres = [];
                    _.each(res, function (sl) {
                        mres.push(BB.Models.SendLater.create(sl))
                    });
                    cb(mres)
                }
            })
        },
        newSendLater: function (obj) {
            return this.sendLaters.list.add(obj || {})
        },
        getAllSendLaters: function () {
            return this.sendLaters.list
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "data.sendLaters.initialized",
        functionToCall: BB.Data.initSendLaters,
        functionContext: BB.Data,
        dependentFunctionKeys: ["userLoggedIn"]
    });
    _.extend(BB.Data, {
        snippets: {
            list: null,
            keyed: null,
            grouped: null
        },
        initSnippets: function (cb) {
            var self = this;
            self.snippets.list = BB.Models.Snippet.createCollection();
            self.snippets.grouped = {};
            self.snippets.keyed = {};
            self.initSnippetsList();
            self.snippets.list.refresh(cb)
        },
        initSnippetsList: function () {
            var self = this;
            var defP = "snippets_personal";
            this.snippets.list.bind("add", function (snippet) {
                if (snippet.key()) self.snippets.keyed[snippet.key()] = snippet;
                else snippet.bind("set", "snippetKey", function () {
                    self.snippets.keyed[snippet.key()] =
                        snippet
                });
                var pipelineKey = snippet.get("workflowKey");
                if (!pipelineKey) pipelineKey = defP;
                else {
                    var pipeline = BB.Data.getPipeline(pipelineKey);
                    if (pipeline) pipeline.bind("remove", null, function () {
                        snippet.trigger("delete")
                    })
                } if (!self.snippets.grouped[pipelineKey]) self.snippets.grouped[pipelineKey] = [];
                self.snippets.grouped[pipelineKey].push(snippet);
                BB.UI.addSavingNotice(snippet)
            });
            this.snippets.list.bind("remove", function (snippet) {
                delete self.snippets.keyed[snippet.key()];
                var pipelineKey = snippet.get("workflowKey");
                if (!pipelineKey) pipelineKey = defP;
                self.snippets.grouped[pipelineKey].removeVal(snippet)
            })
        },
        getAllSnippets: function () {
            return this.snippets.list
        },
        getSnippet: function (key) {
            return this.snippets.keyed[key]
        },
        getSnippetsByPipeline: function (key) {
            return this.snippets.grouped[key] || []
        },
        newSnippet: function (obj, cb) {
            var self = this;
            var snippet = BB.Models.Snippet.create(obj);
            self.snippets.list.addModel(snippet);
            snippet.save(function () {
                if (cb) cb()
            });
            return snippet
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "data.snippets.initialized",
        functionToCall: BB.Data.initSnippets,
        functionContext: BB.Data,
        dependentFunctionKeys: ["userLoggedIn"]
    });
    _.extend(BB.Data, {
        initStreakSettings: function (cb) {
            var self = this;
            APIRequester.get({
                msgUrl: "users/me/settings"
            }, function (res) {
                self.streakSettings = BB.Models.StreakSettings.create(res);
                cb()
            })
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "data.streakSettings.initialized",
        functionToCall: BB.Data.initStreakSettings,
        functionContext: BB.Data,
        dependentFunctionKeys: ["userLoggedIn"]
    });
    _.extend(BB.Data, {
        initOauth2Scopes: function (cb) {
            var self =
                this;
            APIRequester.get({
                msgUrl: "users/me/oauth2scopes"
            }, function (res) {
                BB.getUser().set("oauth2Scopes", res || []);
                if (cb) cb()
            })
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "data.oauth2Scopes.initialized",
        functionToCall: BB.Data.initOauth2Scopes,
        functionContext: BB.Data,
        dependentFunctionKeys: ["userLoggedIn"]
    })
};
Streak.initializeData(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var EmailAddressExtractor = function () {};
    _.extend(EmailAddressExtractor.prototype, {
        extractEmailAddressesFromCSVRows: function (rows) {
            var map = {};
            var emails = [];
            var tempEmails = null;
            for (var ii = 0; ii < rows.length; ii++) {
                tempEmails = this._extractEmailsFromRow(rows[ii]);
                this._updateMapWithEmails(map, tempEmails,
                    rows[ii]);
                _.mutate("union", emails, tempEmails)
            }
            return {
                emailAddresses: emails,
                emailAddressToRowListMap: map
            }
        },
        _extractEmailsFromRow: function (row) {
            var combined = [];
            for (var field in row) combined.push(row[field]);
            return combined.join(" ").replace(/\r|\t|\n/igm, "").match(/(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))/g)
        },
        extractEmailAddressesFromBoxes: function (extractionSettings, boxes) {
            var map = {};
            var emails = [];
            var tempEmails = null;
            for (var ii = 0; ii < boxes.length; ii++) {
                tempEmails = this._extractEmailsFromBox(extractionSettings, boxes[ii]);
                this._updateMapWithEmails(map, tempEmails, boxes[ii]);
                _.mutate("union", emails, tempEmails)
            }
            return {
                emailAddresses: emails,
                emailAddressToBoxListMap: map
            }
        },
        _extractEmailsFromBox: function (extractionSettings, box) {
            var emails = [];
            var tempEmails = null;
            if (extractionSettings.extractEmailsFrom.threads) _.mutate("union", emails, box.get("emailAddresses"));
            if (extractionSettings.extractEmailsFrom.assignedTo) {
                tempEmails =
                    this._extractEmailsFromPeopleField(box.get("assignedToSharingEntries"));
                _.mutate("union", emails, tempEmails)
            }
            if (extractionSettings.extractEmailsFrom.columns) {
                tempEmails = this._extractEmailsFromColumns(box);
                _.mutate("union", emails, tempEmails)
            }
            _.mutate("compact", emails);
            var myEmail = BB.getUser().get("email").toLowerCase();
            var domain = BB.getUser().getDomain().toLowerCase();
            return _.filter(emails, function (email) {
                if (extractionSettings.ignoreEmails.myself)
                    if (email.toLowerCase() === myEmail) return false;
                if (extractionSettings.ignoreEmails.org)
                    if (email.split("@")[1].toLowerCase() ===
                        domain) return false;
                return true
            })
        },
        _extractEmailsFromPeopleField: function (contacts) {
            if (!contacts) return [];
            return _.chain(contacts).map(function (contact) {
                return [contact.fullName, contact.email]
            }).flatten().value()
        },
        _extractEmailsFromColumns: function (box) {
            var values = [];
            values.push(box.get("notes"));
            values.push(box.get("name"));
            var fields = box.getFields();
            for (var ii = 0; ii < fields.length; ii++) {
                var value = fields[ii].get("value");
                if (fields[ii].get("type") === "PERSON") _.mutate("union", values, this._extractEmailsFromPeopleField(value));
                else if (fields[ii].get("type") === "TEXT_INPUT") values.push(value)
            }
            return values.join(" ").match(/(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))/g)
        },
        _updateMapWithEmails: function (map, emails, row) {
            if (!emails) return;
            for (var ii = 0; ii < emails.length; ii++) {
                if (!map[emails[ii]]) map[emails[ii]] = [];
                map[emails[ii]].push(row)
            }
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "emailAddressExtractorInitialized",
        functionToCall: function (callback) {
            BB.Services.EmailAddressExtractor = new EmailAddressExtractor;
            if (callback) callback()
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var TEMPLATE_REGEX = /\{\{((box|email|field)_(.+?))\}\}/ig;
    var TemplateProcessor = function () {
        this._lookupTables = {}
    };
    _.extend(TemplateProcessor.prototype, {
        getCompiledString: function (box, contact, fieldObject, template) {
            if (!template) return "";
            var lookupTable;
            if (box) lookupTable = this._getLookupTable(box.getPipeline());
            var self = this;
            return template.replace(TEMPLATE_REGEX, function () {
                return self._generateReplacementString(arguments, box, contact, fieldObject, lookupTable)
            })
        },
        _generateReplacementString: function (matchArguments, box, contact, fieldObject, lookupTable) {
            var fullMatchedTag = matchArguments[0];
            var innerMatchedTag = matchArguments[1];
            var fieldType = matchArguments[2];
            var fieldKey = matchArguments[3];
            if (fieldType === "email") {
                if (!contact) return "";
                return contact[fieldKey] || ""
            }
            if (!lookupTable) {
                if (fieldObject && fieldObject[fieldKey]) return fieldObject[fieldKey];
                return ""
            }
            if (!lookupTable[fieldKey]) return fullMatchedTag;
            var column = lookupTable[fieldKey];
            if (!column) return fullMatchedTag;
            if (column.columnType === "field") return box.getFieldDisplayValue(column.value.fieldKey);
            else return box.getDisplayValue(column.value.property)
        },
        findReferencedFields: function (pipeline) {
            var matches = [];
            var referencedFields = {
                email: {},
                box: {},
                other: {}
            };
            var templates = _.toArray(arguments).slice(1);
            for (var ii = 0; ii < templates.length; ii++)
                if (templates[ii]) _.mutate("union", matches, templates[ii].match(TEMPLATE_REGEX));
            for (var ii = 0; ii < matches.length; ii++)
                if (matches[ii]) this._updateReferencedFields(referencedFields, matches[ii], this._getLookupTable(pipeline));
            return referencedFields
        },
        _getLookupTable: function (pipeline) {
            if (!pipeline) return;
            if (this._lookupTables[pipeline.key()]) return this._lookupTables[pipeline.key()];
            this._buildReverseColumnLookup(pipeline);
            return this._lookupTables[pipeline.key()]
        },
        _buildReverseColumnLookup: function (pipeline) {
            var reverseColumnLookupTable = {};
            var columns = BB.UI.getPipelineColumnList(pipeline,
                pipeline.getAllSystemColumns());
            var self = this;
            _.each(columns, function (column) {
                reverseColumnLookupTable[column.name] = column
            });
            this._lookupTables[pipeline.key()] = reverseColumnLookupTable
        },
        _updateReferencedFields: function (referencedFields, matchedTag, lookupTable) {
            var fieldTemplate = matchedTag.replace("{{", "").replace("}}", "");
            var fieldParts = fieldTemplate.split("_");
            if (fieldParts.length < 2) return;
            var fieldType = fieldTemplate.split("_")[0];
            var fieldKey = fieldTemplate.split("_")[1];
            if (fieldType === "field") {
                if (lookupTable &&
                    lookupTable[fieldKey]) {
                    referencedFields["box"][fieldKey] = lookupTable[fieldKey];
                    return
                }
                referencedFields["other"][fieldKey] = true
            } else referencedFields[fieldType][fieldKey] = true
        }
    });
    BB.Services.TemplateProcessor = new TemplateProcessor
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        BB = Streak.BentoBox,
        HTML = Streak.HTML;
    BB.FirstRun = {
        init: function (cb) {
            this.elements = {};
            this.elements.stage2modal = HTML.get("stage2_modal", true);
            this.elements.stage3modal = HTML.get("stage2_modal", true);
            if (cb) cb()
        },
        getStage: function () {
            return 3
        },
        setupModals: function () {
            this.s2modal = BB.Widgets.Modal.create({
                title: BB.Locale.getString("stage2_modal_title"),
                confirmText: "OK",
                showCancel: false,
                inner: this.elements.stage2modal,
                confirmFunc: $.noop,
                maxHeight: "600px",
                onClose: function () {
                    BB.Modules.BoxesButton.el.css({
                        zIndex: "1"
                    })
                },
                trackingContext: {
                    widgetContext: "firstRun"
                }
            });
            this.s3modal = BB.Widgets.Modal.create({
                title: BB.Locale.getString("stage3_modal_title"),
                confirmText: "OK",
                showCancel: false,
                inner: this.elements.stage3modal,
                maxHeight: "600px",
                trackingContext: {
                    widgetContext: "firstRun"
                }
            })
        },
        showStageModal: function (stage) {
            var self = this;
            self["showStage" + (stage ? stage : self.getStage()) + "Modal"]()
        },
        showStage1Modal: function () {
            BB.Modules.LeftLink.newPipelineShow()
        },
        showStage2Modal: function () {
            if (!this.s2Modal) this.setupModals();
            BB.Modules.BoxesButton.el.css({
                zIndex: "2000"
            });
            this.s2modal.show()
        },
        showStage3Modal: function () {
            if (!this.s2Modal) this.setupModals();
            this.s3modal.show()
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "firstRunInitialized",
        functionToCall: BB.FirstRun.init,
        functionContext: BB.FirstRun,
        dependentFunctionKeys: ["HTML"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    _.extend(BB, {
        ai: function (ai, cb) {
            Gmail.showNotice("Impersonation not working right now");
            return;
            var self = this;
            this.user = null;
            self.teardown();
            Streak.ai = ai;
            Streak.userEmail = ai;
            this.userEmail = Streak.userEmail;
            this.UserSettings.active = false;
            Messenger.storeData("useremail", Streak.userEmail)
        },
        aiRandom: function () {
            var self = this;
            Requester.get({
                msgMethod: "GET",
                msgUrl: "/geckoboard",
                statType: "recentEmailAddresses"
            }, function (res) {
                if (res && res.length >
                    0) {
                    self.exploreAddresses = res.last(50).randomize();
                    self.ai(self.exploreAddresses.pop())
                }
            }, $.noop, null, 0, true)
        },
        aiExplore: function (delay) {
            var self = this;
            delay = delay || 100;
            setTimeout(function () {
                    if (!self.exploreAddresses || self.exploreAddresses.length === 0) Requester.get({
                        msgMethod: "GET",
                        msgUrl: "/geckoboard",
                        statType: "recentEmailAddresses"
                    }, function (res) {
                        if (res && res.length > 0) {
                            self.exploreAddresses = res.last(50).randomize();
                            self.exploreAccount(self.exploreAddresses.pop())
                        }
                    }, $.noop, null, 0, true);
                    else self.exploreAccount(self.exploreAddresses.pop())
                },
                delay)
        },
        exploreAccount: function (email) {
            var self = this;
            this.ai(email, function () {
                goToHeadsUp()
            });

            function goToHeadsUp() {
                var delay = 0;
                if (BentoBox.Modules.HeadsUp.el.is(":FastVisible")) delay = 1E4;
                setTimeout(goToPipeline, delay)
            }

            function goToPipeline() {
                try {
                    var pipelines = self.Data.getAllPipelines();
                    if (pipelines.length > 0) {
                        var pipeline = _.toArray(pipelines).randomize().first();
                        self.UI.setURL(pipeline.link());
                        setTimeout(goToBox, 2E4)
                    } else self.aiExplore()
                } catch (err) {
                    self.aiExplore(1E4)
                }
            }

            function goToBox() {
                try {
                    var boxes =
                        self.Modules.PipelineView.cached[Gmail.getConversationId()].spreadsheet.el.find(".boxRow:FastVisible");
                    if (boxes.length > 0) {
                        $(Streak._.toArray(boxes).randomize().first()).find("[role=link]").click();
                        setTimeout(goToCompose, 12E3)
                    } else self.aiExplore(1E4)
                } catch (err) {
                    self.aiExplore(1E4)
                }
            }

            function goToCompose() {
                self.UI.setURL("compose");
                var interval = setInterval(function () {
                    try {
                        if (self.Modules.Snippets.buttons.length > 0)
                            if (self.Modules.Snippets.buttons[0].el.is(":FastVisible(noCompute)")) {
                                clearInterval(interval);
                                self.Modules.Snippets.buttons[0].el.find(".snippetsButton").click();
                                finish()
                            }
                    } catch (err) {
                        clearInterval(interval);
                        finish()
                    }
                })
            }

            function finish() {
                setTimeout(function () {
                    Gmail.getDiscardButton().simulateRawClick();
                    self.aiExplore()
                }, 5E3)
            }
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        jwerty = Streak.jwerty,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    BB.Keyboard = {
        activeTimer: null,
        clearTime: 1E3,
        activeChords: [],
        multiChords: [],
        chordHelp: [],
        initialized: false,
        helpRendered: false,
        helpEl: null,
        init: function (cb) {
            var self = this;
            if (!this.initialized) {
                Gmail.elements.body.bind("keydown", function (e) {
                    self.handleChordKeyEntry(e)
                });
                self.bindChord("shift+/", function () {
                    setTimeout(function () {
                        self.renderHelpItems()
                    }, 20)
                });
                this.initialized = true
            }
            if (cb) cb()
        },
        bindChord: function (chord,
            cb, description) {
            var chordParts = chord.split(",");
            if (chordParts.length === 1) {
                var jfunc = jwerty.event(chord, cb);
                Gmail.elements.body.bind("keydown", function (e) {
                    if (!$(e.target).is("input,textarea,[contentEditable=true],.input")) jfunc(e)
                })
            } else this.multiChords.push({
                chord: chordParts,
                cb: cb
            }); if (description) this.addChordHelpItem(chord, description)
        },
        addChordHelpItem: function (chord, description) {
            this.chordHelp.push({
                chord: chord,
                description: description
            })
        },
        handleChordKeyEntry: function (e) {
            var i, activeChord, currentKey,
                chord;
            var self = this;
            if (!$(e.target).is("input,textarea,[contentEditable=true],.input")) {
                if (self.activeTimer) clearTimeout(self.activeTimer);
                self.activeTimer = setTimeout(function () {
                    self.activeChords = []
                }, self.clearTime);
                var active = [];
                var callbacks = [];
                for (i = 0; i < self.multiChords.length; i++) {
                    activeChord = self.multiChords[i];
                    currentKey = activeChord.chord[0];
                    if (jwerty.is(currentKey, e)) {
                        chord = activeChord.chord.slice();
                        chord.shift();
                        active.push({
                            chord: chord,
                            cb: activeChord.cb
                        })
                    }
                }
                for (i = 0; i < self.activeChords.length; i++) {
                    activeChord =
                        self.activeChords[i];
                    currentKey = activeChord.chord.shift();
                    if (jwerty.is(currentKey, e))
                        if (activeChord.chord.length === 0) callbacks.push(activeChord.cb);
                        else active.push(activeChord)
                }
                if (callbacks.length > 0) {
                    self.activeChord = [];
                    clearTimeout(self.activeTimer);
                    for (i = 0; i < callbacks.length; i++) callbacks[i](e)
                } else self.activeChords = active; if (callbacks.length > 0) {
                    e.preventDefault();
                    e.stopPropagation()
                }
            }
        },
        bindChordToElement: function (el, chord, cb, noBubble, noDefault, notOnInput, keyEvent, useCapture) {
            this.bindChordToEl({
                el: el,
                chord: chord,
                cb: cb,
                noBubble: noBubble,
                noDefault: noDefault,
                notOnInput: notOnInput,
                keyEvent: keyEvent,
                useCapture: useCapture
            })
        },
        bindChordToEl: function (options) {
            var el = options.el,
                chord = options.chord,
                cb = options.cb,
                noBubble = options.noBubble,
                noDefault = options.noDefault,
                notOnInput = options.notOnInput,
                keyEvent = options.keyEvent,
                useCapture = options.useCapture,
                delegate = options.delegate;
            if (!keyEvent) keyEvent = "keydown";
            var jfunc = jwerty.event(chord, cb);
            var eventCallbackFunction;
            var bind = function (event) {
                if (useCapture) {
                    eventCallbackFunction =
                        checkAndRun;
                    el[0].addEventListener(keyEvent, eventCallbackFunction, true)
                } else {
                    eventCallbackFunction = function (e) {
                        if (!(notOnInput && $(e.target).is("input,textarea,[contentEditable=true],.input"))) checkAndRun(e)
                    };
                    el.on(event, options.delegate, null, eventCallbackFunction)
                }
            };
            var checkAndRun = function (e) {
                jfunc(e);
                if (noBubble && jwerty.is(chord, e))
                    if (useCapture) {
                        e.stopPropagation();
                        e.stopImmediatePropagation()
                    } else e.stopPropagation();
                if (noDefault && jwerty.is(chord, e)) e.preventDefault()
            };
            if (_.isArray(keyEvent)) _.each(keyEvent,
                function (event) {
                    bind(event)
                });
            else bind(keyEvent);
            return function () {
                if (useCapture) el[0].removeEventListener(keyEvent, eventCallbackFunction, true);
                else el.off(event, options.delegate, eventCallbackFunction)
            }
        },
        renderHelpItems: function () {
            var self = this;
            var row = $(document.createElement("tr"));
            row[0].innerHTML = '<th class="Do"></th><th class="Do"><span class="boxIcon"></span>Streak</th>';
            this.getKeyboardHelpFirstColumn().append(row);
            _.each(self.chordHelp, function (help) {
                self.renderChordHelpItem(help.chord, help.description)
            })
        },
        renderSeparator: function (separator) {
            switch (separator) {
            case ",":
                return '</span> <span class="wb">then</span> ';
                break;
            case "+":
                return '</span> <span class="wb">+</span> ';
                break;
            default:
                return ""
            }
        },
        renderChordHelpItem: function (chord, description) {
            var parts = chord.split(/[,+]/g);
            var separators = chord.match(/[,+]/g);
            var row = $(document.createElement("tr"));
            var html = '<td class="wg Dn">';
            for (var i = 0; i < parts.length - 1; i++) html += '<span class="wh">' + parts[i].escapeHTML() + this.renderSeparator(separators[i]);
            html += '<span class="wh">' +
                _.last(parts) + "</span>" + " :</td>";
            html += '<td class="we Dn">' + description + "<td>";
            row[0].innerHTML = html;
            this.getKeyboardHelpFirstColumn().append(row)
        },
        getKeyboardHelpFirstColumn: function () {
            return Gmail.getKeyboardHelp().find(".cf.wd .cf").filter(":first").find("tbody")
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "keyboardInitialized",
        functionToCall: BB.Keyboard.init,
        functionContext: BB.Keyboard,
        dependentFunctionKeys: ["gmailLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Model = Streak.Model,
        BB = Streak.BentoBox;
    LocalSettings = Streak.Eventer.create({
        settings: null,
        initialized: false,
        init: function (cb) {
            if (!this.initialized) {
                this.email = Streak.userEmail;
                this.settings = Streak.ObjectPath.create(localStorage["streakLocalSettings" + this.email]);
                this.initialized = true
            }
            if (cb) cb()
        },
        get: function (path) {
            return this.settings.get(path)
        },
        setSetting: function (path, value) {
            this.set(path, value)
        },
        getItem: function (path) {
            return this.get(path)
        },
        setItem: function (path, value) {
            this.set(path, value)
        },
        set: function (path, value) {
            this.settings.set(path, value);
            this.save();
            this.trigger("localSettingsSet")
        },
        save: function () {
            localStorage["streakLocalSettings" + this.email] = this.settings.toString()
        }
    });
    BB.LocalSettings = LocalSettings;
    Streak.DependencyManager.addFunction({
        functionKey: "localSettingsInitialized",
        functionToCall: BB.LocalSettings.init,
        functionContext: BB.LocalSettings
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var performance = window.performance;
    if (!performance) performance = {};
    if (!performance.webkitNow) performance.webkitNow = function () {
        return (new Date).getTime()
    };
    BB.Logger = {
        isDebug: false,
        init: function (cb) {
            cb()
        },
        log: function () {
            if (this.isDebug) console.log.apply(console, _.toArray(arguments))
        },
        debug: function () {
            if (this.isDebug) console.debug.apply(console, _.toArray(arguments))
        },
        colorLog: function () {
            var args = _.toArray(arguments);
            var newArgs = ["%cdebug: ", "color:" + _.last(args) + ";"].concat(_.initial(args));
            this.debug.apply(this, newArgs)
        },
        output: function (activity, diff) {
            console.debug(activity + ": " + diff + " ticks")
        },
        start: function (activity) {
            return new function () {
                var sd = performance.webkitNow();
                var d = performance.webkitNow();
                var end = function (anActivity) {
                    if (BB.Logger.isDebug) BB.Logger.output(anActivity || activity, performance.webkitNow() - sd)
                };
                var mark = function (anActivity) {
                    if (BB.Logger.isDebug) {
                        BB.Logger.output(anActivity || activity, performance.webkitNow() -
                            d);
                        d = performance.webkitNow()
                    }
                };
                return {
                    end: end,
                    mark: mark
                }
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var self = MailHelper = {
        initialized: false,
        _queuedEmailLists: [],
        _currentEmailList: null,
        _nextSendTimeout: null,
        _hideComposeWindowRule: null,
        _sendingEmails: false,
        _sentCounter: 0,
        sendEmail: function (emailPackage) {
            if (self._currentEmailList.sendingEmail) self._currentEmailList.sendingEmail(emailPackage);
            Gmail.GmailComposeWindowRequester.requestNewComposeWindow(function (composeWindowViewController) {
                setTimeout(function () {
                    try {
                        self._handleComposeWindow(composeWindowViewController,
                            emailPackage)
                    } catch (err) {
                        BB.logError("mail merge sending error", err);
                        if (_.isFunction(self._currentEmailList.finishedSendingCallback)) self._currentEmailList.finishedSendingCallback();
                        Gmail.showNotice("Error with mail merge: " + self._sentCounter + " email(s) sent");
                        self._processNextEmailList()
                    }
                }, 2E3)
            })
        },
        sendMultipleEmails: function (emailListPackage) {
            if (self._currentEmailList) self._queuedEmailLists.push(emailListPackage);
            else {
                self._currentEmailList = emailListPackage;
                self._prepareSendingEmails();
                self._processEmailList()
            }
        },
        cancelSending: function () {
            if (self._currentEmailList) {
                clearTimeout(self._nextSendTimeout);
                self._processNextEmailList()
            }
        },
        isMailHelperSendingEmails: function () {
            return this._sendingEmails
        },
        _processEmailList: function () {
            if (_.isFunction(self._currentEmailList.startSendingCallback)) self._currentEmailList.startSendingCallback(self._currentEmailList.emailPackages.length);
            this._sentCounter = 0;
            self._runThroughEmailList()
        },
        _runThroughEmailList: function () {
            if (_.isArray(self._currentEmailList.emailPackages) && self._currentEmailList.emailPackages.length >
                0) {
                var delay = self._currentEmailList.delayBetweenEmails || 2E3;
                var emailPackage = self._currentEmailList.emailPackages.shift();
                emailPackage.emailSentCallback = function () {
                    if (!self._currentEmailList) {
                        self._processNextEmailList();
                        return
                    }
                    if (_.isFunction(self._currentEmailList.emailSentCallback)) self._currentEmailList.emailSentCallback(self._sentCounter, self._currentEmailList.emailPackages.length);
                    self._nextSendTimeout = setTimeout(self._runThroughEmailList, delay);
                    self._sentCounter += 1
                };
                self.sendEmail(emailPackage)
            } else {
                if (_.isFunction(self._currentEmailList.finishedSendingCallback)) self._currentEmailList.finishedSendingCallback();
                self._processNextEmailList()
            }
        },
        _processNextEmailList: function () {
            if (self._queuedEmailLists.length > 0) {
                self._prepareSendingEmails();
                self._currentEmailList = self._queuedEmailLists.shift();
                self._processEmailList()
            } else {
                self._currentEmailList = null;
                self._finishSendinEmails()
            }
        },
        _prepareSendingEmails: function () {
            this._sendingEmails = true;
            this._hideComposeWindows()
        },
        _finishSendinEmails: function () {
            this._sendingEmails = false;
            this._unhideComposeWindows()
        },
        _hideComposeWindows: function () {
            self._hideComposeWindowRule =
                Streak.CSSStyleManipulator.addRule(".Wk [role=dialog], .dw [role=dialog] {visibility: hidden;}", 0)
        },
        _unhideComposeWindows: function () {
            Streak.document.styleSheets[0].removeRule(self._hideComposeWindowsRule)
        },
        _init: function (cb) {
            if (!self.initialized) Gmail.bind("newSentEmail", self._handleNewSentMail);
            self.initialized = true;
            if (cb) cb()
        },
        _handleComposeWindow: function (composeWindowViewController, emailPackage) {
            composeWindowViewController.notify("mailHelperSendingEmails");
            if (emailPackage.toAddresses) composeWindowViewController.setToAddresses(emailPackage.toAddresses);
            if (emailPackage.subject) composeWindowViewController.setSubject(emailPackage.subject);
            if (emailPackage.body) composeWindowViewController.setEmailBody(emailPackage.body);
            if (emailPackage.attachments);
            composeWindowViewController.addDelegate({
                threadResponse: function (threadModel) {
                    if (emailPackage.boxKey) self._addEmailToBox(emailPackage, threadModel);
                    if (emailPackage.isPixelTracked) self._addEmailToTrackedThread(emailPackage, threadModel);
                    if (_.isFunction(emailPackage.emailSentCallback)) emailPackage.emailSentCallback()
                }
            });
            setTimeout(function () {
                composeWindowViewController.send()
            }, 250)
        },
        _addEmailToBox: function (emailPackage, threadModel) {
            var box = BB.Data.getBox(emailPackage.boxKey);
            if (_.isReal(box)) {
                if (!threadModel.get("threadInfo")) threadModel.set("threadInfo", BB.Models.ThreadInfo.create({
                    threadGmailId: threadModel.key()
                }));
                BB.Data.addThreadsToBox(box, [threadModel], $.noop);
                BB.Tracker.trackAssociateBoxWithThread({
                    boxType: "mailMerge"
                })
            }
        },
        _addEmailToTrackedThread: function (emailPackage, threadModel) {
            var guid = emailPackage.pixelTrackingGuid;
            var threadId = threadModel.key();
            var subject = threadModel.get("subject");
            var emails = emailPackage.toAddresses;
            var names = [""];
            Gmail.RFCMessageIdExtractor.getRFCMessageIdForThread(threadModel, function (messageId) {
                var trackedLink = new Streak.BentoBox.Models.TrackedLink({
                    "guid": guid,
                    "hexGmailThreadId": threadId,
                    "snippetKeyList": emailPackage.snippetKeyList,
                    "mailMergeId": emailPackage.mailMergeId,
                    "subject": subject,
                    "names": names,
                    "emails": emails,
                    "isMailMerge": true,
                    "rfcMessageId": messageId
                });
                trackedLink.save();
                threadModel.set("trackedLink",
                    trackedLink);
                BB.Tracker.trackStreakActive("pixel_track_email_sent", {
                    source: "mailMerge"
                });
                BB.Modules.PixelTrackerConversationImageFixer.sendIgnoreImageRequest(guid)
            })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "mailHelperInitialized",
        functionToCall: MailHelper._init,
        functionContext: MailHelper,
        dependentFunctionKeys: ["gmailLoaded"]
    });
    BB.MailHelper = MailHelper
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var self = PixelTrackingHTMLGenerator = {
        getGuid: function () {
            return Streak.guid()
        },
        injectTrackingHTML: function (composeWindowViewController) {
            var guid = this.getGuid();
            var trackingHTML = this.getTrackingHTML(guid);
            composeWindowViewController.removeSelectorFromBody("[hspace=streak-pt-mark]");
            composeWindowViewController.addHTMLToBodyBeforeQuotedText(trackingHTML);
            return guid
        },
        getTrackingHTML: function (guid) {
            if (!guid) guid = this.getGuid();
            return ['<div hspace="streak-pt-mark" style="max-height:1px;">', this._getImage(guid), this._getSearchMarker(), "</div>"].join("")
        },
        getEncodedEmailAddress: function () {
            return encodeURIComponent("a" + btoa(BB.getUser().getEmail()))
        },
        _getImage: function (guid) {
            return '<img style="width:0px; max-height:0px;" src=\'' + Streak.server + "/t?sender=" + this.getEncodedEmailAddress() + "&type=zerocontent&guid=" + guid + "'/>"
        },
        _getSearchMarker: function () {
            var self =
                this;
            return '<font color="#ffffff" size="1">' + BB.Modules.PixelTrackerSearch.CONSTANTS.TRACKED_KEY + "</font>"
        }
    };
    BB.PixelTrackingHTMLGenerator = PixelTrackingHTMLGenerator
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        GA_USER_KEY_HANDLE: "dimension1",
        GA_ORG_KEY_HANDLE: "dimension2",
        GA_EXPERIMENTS_HANDLE: "dimension3",
        GA_STREAK_CLIENT_VERSION_HANDLE: "dimension4",
        GA_IS_GOOGLE_APPS_HANDLE: "dimension5",
        GA_INSTALLED_EXTENSIONS_HANDLE: "dimension6",
        GA_ACCOUNT_AGE_HANDLE: "metric1",
        GA_NUM_SHARED_PIPELINES_HANDLE: "metric2"
    };
    BB.Tracker = {
        init: function (cb) {
            var self = this;
            self.initializeAnalytics();
            cb()
        },
        trackAssociateBoxWithThread: function (args) {
            var props = {};
            var numThreads = BB.Data.numBoxesCreatedByCurrentUserThatContainAThread();
            props.eventName = "associateBoxWithThread";
            props.numThreads = numThreads;
            props.boxType = args.boxType;
            props.source = args.source;
            props.value = numThreads;
            BB.Tracker.trackStreakActive(props);
            if (numThreads === 0) BB.Tracker.trackStreakActive({
                eventName: "boxedFirstThread"
            })
        },
        initializeStreakpanel: function () {
            streakpanel.init("streaktoken2")
        },
        initializeAnalytics: function () {
            var self = this;
            self.initializeStreakpanel()
        },
        currentTrackableViewName: function () {
            var vToUse = BB.UI.getCurrentView();
            return vToUse
        },
        addTracking: function (el, elEvent, props) {
            el.bind(elEvent, function () {
                BB.Tracker.trackStreakActive(props)
            })
        },
        addPassiveTracking: function (el, elEvent, props) {
            el.bind(elEvent, function () {
                BB.Tracker.trackStreakPassive(props)
            })
        },
        addDelegatedTracking: function (el, selector, elEvent, props) {
            el.on(elEvent, selector, function () {
                BB.Tracker.trackStreakActive(props)
            })
        },
        trackStreakActive: function () {
            var arr = _.toArray(arguments);
            arr = _.filter(arguments,
                function (arg) {
                    return arg
                });
            var props = _.extend.apply(null, arr);
            if (props !== null) {
                props.category = "StreakActive";
                BB.Tracker.recordEvent(props)
            }
        },
        trackStreakPassive: function (props) {
            if (props !== null) {
                props.category = "StreakPassive";
                BB.Tracker.recordEvent(props)
            }
        },
        track: function (eventName) {
            var eventProperties = {
                eventName: eventName
            };
            this.trackStreakActive.apply(this, [eventProperties].concat(_.toArray(arguments).slice(1)))
        },
        trackStreakPerformance: function (props) {
            if (!props) props = {};
            props.category = "ExtensionPerformance";
            BB.Tracker.recordEvent(props)
        },
        trackGmail: function (props) {
            if (props !== null) {
                props.category = "Gmail";
                props.context = BB.Tracker.currentTrackableViewName();
                BB.Tracker.recordEvent(props)
            }
        },
        getExperimentsString: function () {
            var experimentsFlat = ",";
            var experiments = Streak.BentoBox.getUser().get("experiments");
            Streak._.each(experiments, function (experimentObj, experimentName) {
                if (Streak._.isReal(experimentObj) && experimentObj.inExperiment === true) experimentsFlat += experimentName + ","
            });
            if (experimentsFlat === ",") experimentsFlat =
                "";
            return experimentsFlat
        },
        getStreakpanelSuperProperties: function () {
            var superProps = {};
            if (_.isReal(Streak.BentoBox.getUser())) superProps["experiments"] = BB.Tracker.getExperimentsString();
            if (BB.user) {
                superProps["userKey"] = BB.getUser().key();
                superProps["orgKey"] = BB.getUser().get("orgKey")
            }
            superProps["email"] = Streak.userEmail;
            superProps["clientVersion"] = Streak.clientVersion;
            superProps["extensionVersion"] = Streak.extVersion;
            superProps["language"] = BB.Locale.getCurrent();
            superProps["previewPane"] = Gmail.getPreviewPaneSettings();
            return superProps
        },
        sendStreakpanel: function (props) {
            var superProps = BB.Tracker.getStreakpanelSuperProperties();
            var streakpanelProps = _.extend(_.clone(props), superProps);
            delete streakpanelProps.eventName;
            streakpanel.track(props.eventName, streakpanelProps)
        },
        recordEvent: function (props) {
            try {
                var self = this;
                BB.Logger.log("Record event properties: " + JSON.stringify(props));
                BB.Tracker.sendStreakpanel(props)
            } catch (err) {
                BB.Logger.log(err)
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "trackerInitialized",
        functionToCall: BB.Tracker.init,
        functionContext: BB.Tracker
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        LoggedInToCurrentAccountKey: "streak__loggedInToAccountEver " + Streak.userEmail.toLowerCase()
    };
    BB.TrackerListener = {
        init: function (cb) {
            var self = this;
            self.trackStreakLoadedLoggedOut();
            self.listenForGmailEvents();
            if (cb) cb()
        },
        loggedInInit: function (callback) {
            this.listenForNewPipeline();
            this.trackStreakLoadedLoggedIn();
            if (callback) callback()
        },
        listenForNewPipeline: function () {
            BB.Data.getAllPipelines().bind("add",
                function (pipeline) {
                    var pipelineCount = BB.Data.getAllPipelines().length;
                    BB.Tracker.trackStreakPassive({
                        eventName: "pipelineCreated",
                        numPipelines: pipelineCount
                    });
                    if (pipelineCount === 1) BB.Tracker.trackStreakPassive({
                        eventName: "firstPipelineCreated"
                    })
                })
        },
        listenForGmailEvents: function () {
            Gmail.observe("viewChanged", function (view) {
                var eventName = "viewChanged";
                var lastView = BB.UI.getPreviousView();
                if (Gmail.isGmailView()) BB.Tracker.trackGmail({
                    "eventName": eventName,
                    "lastView": lastView
                });
                else BB.Tracker.trackStreakPassive({
                    "eventName": eventName,
                    "lastView": lastView,
                    "context": BB.Tracker.currentTrackableViewName()
                })
            })
        },
        trackStreakLoadedLoggedOut: function () {
            var loggedOutLabel = "hasLoggedInToCurrentAccountBefore";
            if (!localStorage["streak__loggedInEver"]) loggedOutLabel = "neverLoggedInToAnyAccountBefore";
            else if (!localStorage[CONSTANTS.LoggedInToCurrentAccountKey]) loggedOutLabel = "neverLoggedInToCurrentAccountBefore";
            BB.Tracker.trackStreakPassive({
                eventName: "StreakLoadedLoggedOut",
                status: loggedOutLabel
            })
        },
        trackStreakLoadedLoggedIn: function () {
            var loggedInLabel =
                "hasLoggedInToCurrentAccountBefore";
            if (!localStorage["streak__loggedInEver"]) {
                localStorage["streak__loggedInEver"] = true;
                loggedInLabel = "loggedInForFirstTime"
            } else if (!localStorage[CONSTANTS.LoggedInToCurrentAccountKey]) {
                localStorage[CONSTANTS.LoggedInToCurrentAccountKey] = true;
                loggedInLabel = "loggedInToCurrentAccountForFirstTime"
            }
            BB.Tracker.trackStreakPassive({
                eventName: "StreakLoadedLoggedIn",
                status: loggedInLabel
            });
            if (BB.Data.getAllPipelines().length === 0) BB.Tracker.trackStreakPassive({
                eventName: "noPipelinesWhenStreakLoaded"
            });
            if (BB.Data.numBoxesCreatedByCurrentUserThatContainAThread() === 0) BB.Tracker.trackStreakPassive({
                eventName: "noBoxesCreatedByCurrentUserThatContainAThreadWhenStreakLoaded"
            })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "trackerListenerInitialized",
        functionToCall: BB.TrackerListener.init,
        functionContext: BB.TrackerListener,
        dependentFunctionKeys: ["gmailLoaded", "trackerInitialized"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "trackerListenerLoggedInInit",
        functionToCall: BB.TrackerListener.loggedInInit,
        functionContext: BB.TrackerListener,
        dependentFunctionKeys: ["userLoggedIn", "trackerInitialized", "data.pipelines.initialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        COLORS: ["#FA573C", "#FFAD46", "#B3DC6C", "#16A765", "#9FC6E7", "#4986E7", "#7BD148", "#F83A22", "#AC725E", "#92E1C0", "#42D692", "#D06B64", "#FAD165", "#FF7537", "#9FE1E7"]
    };
    BB.UI = {
        suppressSearch: false,
        originalHash: null,
        el: null,
        interval: false,
        initialized: false,
        viewHistory: [],
        fullViewHistory: [],
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                self.el = $(document.createElement("div"));
                self.el.addClass("BltHke nH oy8Mbf");
                self.el.attr("id", "workflowArea");
                self.el.hide();
                Gmail.observe("viewChanged", function (view) {
                    self.setupViewCanvas()
                }, null, 1);
                if (!self.interval) {
                    self.interval = true;
                    $(window).bind("resize.mainResize", function () {
                        if (self.isBentoBoxView()) self.setHeight()
                    })
                }
            }
            self.initialized = true;
            if (cb) cb()
        },
        teardown: function () {
            if (this.isBentoBoxView()) {
                this.setURL(Gmail.Constants.Inbox);
                this.el.hide();
                this.el.siblings().show()
            }
        },
        destroy: function () {
            if (this.el) this.el.remove()
        },
        setHeight: function () {
            if (this.height != Gmail.getLeftBar().height()) {
                this.height =
                    Gmail.getLeftBar().height();
                this.el.height(this.height + 33 + "px")
            }
        },
        setGmailView: function () {
            this.el.hide();
            this.el.siblings().show()
        },
        setupViewCanvas: function () {
            this.fullViewHistory.push(Gmail.hash.partsString);
            this.fullViewHistory = _.last(this.fullViewHistory, 100);
            if (Gmail.isConversation()) this.viewHistory.push("conversation");
            else this.viewHistory.push(Gmail.view);
            this.viewHistory = _.last(this.viewHistory, 100);
            if (this.isBentoBoxView()) {
                Gmail.getCurrentMainContainer().prepend(this.el);
                this.el.siblings().hide();
                this.el.show();
                this.setHeight()
            } else {
                this.el.hide();
                this.el.siblings().show();
                this.el.detach();
                if (Gmail.view === Gmail.Constants.Contact) {
                    var contactNotes = Gmail.$(".acn textarea.R5").filterOutInvisible();
                    if (contactNotes && contactNotes.length > 0) {
                        var contactNotesContainer = contactNotes.closest(".nn");
                        if (contactNotesContainer.length > 0) {
                            var contactNotesContainerParent = contactNotesContainer.parent();
                            contactNotesContainer.height(contactNotesContainerParent.height())
                        }
                    }
                }
            }
            this.suppressSearch = false
        },
        goBack: function () {
            var last =
                this.fullViewHistory.pop();
            last = this.fullViewHistory.pop();
            this.setURL(last)
        },
        isBoxView: function () {
            return Gmail.view == Gmail.Constants.Box
        },
        isPipelineView: function () {
            return Gmail.view == Gmail.Constants.Pipeline
        },
        isPipelineReportsView: function () {
            return Gmail.view == Gmail.Constants.PipelineReports
        },
        isDeepLinkLoadingView: function () {
            return Gmail.view == Gmail.Constants.DeepLinkLoading
        },
        isBentoBoxView: function (view) {
            if (typeof view === "undefined") view = Gmail.view;
            return Gmail.Constants.BentoBoxViews.indexOf(view) > -1
        },
        getCanvas: function () {
            return this.el
        },
        goToThread: function (hexId) {
            this.setURL(Gmail.Constants.Inbox + "/" + hexId)
        },
        linkify: function (type, key) {
            if (type.link) return type.link();
            else if (type == "thread" || type == "GmailThread") return Gmail.Constants.GmailThread + "/" + key
        },
        setURL: function (url, callback) {
            if (this.setURLIntercept) this.setURLIntercept(function () {
                location.hash = "#" + url
            });
            else location.hash = "#" + url; if (callback) Gmail.bind("finishedExecuting_viewChanged", function () {
                callback();
                return true
            })
        },
        appendURLQuery: function (part) {
            var append =
                null;
            if (Gmail.hash.query === null) append = "?";
            else append = encodeURIComponent(",");
            location.hash = location.hash + append + part
        },
        getResourceURL: function (url) {
            return Streak.server + (url.indexOf("/") === 0 ? "" : "/") + url + (url.indexOf("?") > -1 ? "&" : "?") + "clientVersion=" + encodeURIComponent(Streak.clientVersion) + "&email=" + encodeURIComponent(Streak.userEmail)
        },
        getPreviousView: function () {
            return _.chain(this.viewHistory).last(2).first(1).value()[0]
        },
        getCurrentView: function () {
            if (this.viewHistory.length > 0) return _.last(this.viewHistory);
            return null
        },
        getFieldIndexText: function (box, pipeline, index) {
            var pipeField = pipeline.getFields()[index];
            return this.getFieldText(box, pipeField)
        },
        getFieldKeyText: function (box, pipeline, fieldKey, cleanText) {
            return this.getFieldText(box, pipeline.getField(fieldKey), cleanText)
        },
        getFieldText: function (box, field, cleanText, getEmail) {
            var text = "";
            var val = box.getFieldValue(field.key());
            switch (field.get("type")) {
            case "TEXT_INPUT":
                if (cleanText) text = $.cleanText(val);
                else text = val;
                break;
            case "DATE":
                var date = val ? Date.create(val) :
                    null,
                    dateText = val ? date.prettyDate(true) : null;
                text = dateText;
                break;
            case "PERSON":
                try {
                    var list = val;
                    if (list && list.length > 0) _.each(list, function (contact) {
                        if (getEmail && contact.email) {
                            text += text.length > 0 ? ", " : "";
                            if (contact.fullName) text += '"' + contact.fullName + '" <' + contact.email + ">";
                            else contact.email
                        } else text += (text.length > 0 ? ", " : "") + contact.fullName
                    })
                } catch (err) {}
                break
            }
            if (!text || text === "null") text = "";
            return text
        },
        dateNameConstants: ["today", "tomorrow", "this sunday", "this monday", "this tuesday", "this wednesday",
            "this thursday", "this friday", "this saturday", "this week", "this month", "this sunday", "this monday", "this tuesday", "this wednesday", "this thursday", "this friday", "this saturday", "this week", "this month"
        ],
        getAssignedToSharingEntriesForPipelineBoxes: function (pipeline) {
            var boxes = BB.Data.getPipelineBoxes(pipeline.key());
            return _(boxes).chain().filter(function (box) {
                var people = box.getAssignedToSharingEntries();
                return people && people.length > 0
            }).map(function (box) {
                return box.getAssignedToSharingEntries()
            }).flatten().uniq(function (contact) {
                return contact.email
            }).map(function (contact) {
                return {
                    display: contact.fullName ||
                        contact.email,
                    value: contact
                }
            }).value()
        },
        getFieldValues: function (pipeline, fieldKey) {
            return this.generateValueList(pipeline, fieldKey)
        },
        getPropertyValues: function (pipeline, property) {
            return this.generateValueList(pipeline, null, property)
        },
        generateValueList: function (pipeline, fieldKey, property) {
            var boxes = BB.Data.getPipelineBoxes(pipeline.key());
            var type = null;
            if (fieldKey) {
                type = pipeline.getField(fieldKey).get("type");
                if (type === "DATE") return []
            } else if (property === "assignedToSharingEntries") type = "ASSIGNED_TO";
            return _(boxes).chain().map(function (box) {
                if (type === "ASSIGNED_TO") return box.getAssignedToSharingEntries();
                else if (type === "PERSON") return box.getFieldValue(fieldKey);
                else return box.getFieldValue(fieldKey)
            }).flatten().filter(function (value) {
                if (type === "PERSON" || type === "ASSIGNED_TO") return _.isReal(value) && _.isReal(value.displayName);
                return value
            }).map(function (value) {
                var ret = {
                    value: value,
                    display: null,
                    normalized: null
                };
                switch (type) {
                case "TEXT_INPUT":
                    ret.display = ret.value.replace(/\n/img, " ");
                    ret.normalized =
                        ret.display.toLowerCase().removeWhitespace();
                    break;
                case "DATE":
                    ret.display = ret.value;
                    break;
                case "PERSON":
                case "ASSIGNED_TO":
                    ret.display = ret.value.displayName;
                    break
                }
                return ret
            }).sortBy(function (ret) {
                return ret.display.toLowerCase()
            }).uniq(false, function (ret) {
                if (type === "ASSIGNED_TO") return ret.value.email;
                else if (type === "PERSON") return ret.value.email || ret.display;
                return ret.value.trim().toLowerCase()
            }).value()
        },
        addSavingNotice: function (model) {
            model.bind("preUpdate", null, function () {
                    Gmail.showNotice(BB.Locale.getString("saving"))
                },
                "uiSavingNotice");
            model.bind("save", null, function () {
                Gmail.showNotice(BB.Locale.getString("saved"), 750)
            }, "uiSavingNotice")
        },
        processString: function (value, inLocale, inHTML) {
            var locale = inLocale || BB.Locale;
            var html = inHTML || Streak.HTML;
            if (!_.isString(value)) return value;
            else if (_.isObject(value)) {
                for (var key in value) value[key] = this.processString(value[key], locale, html);
                return value
            }
            var processed = value;
            var tempProcessed = value;
            for (var i = 0; i < 100; i++) {
                processed = tempProcessed.replace(/%\w+%/, function (match) {
                    return locale.getString(match.substring(1,
                        match.length - 1))
                }).replace(/\*\w+\*/, function (match) {
                    return html.get(match.substring(1, match.length - 1))()
                });
                if (processed === tempProcessed) break;
                else tempProcessed = processed
            }
            return processed
        },
        getPipelineColumnList: function (pipeline, systemProperties, justFields) {
            var columns = _.map(pipeline.getFields(), function (field) {
                return {
                    name: field.displayName(),
                    columnType: "field",
                    value: {
                        fieldKey: field.key(),
                        columnKey: "field|" + field.key()
                    }
                }
            });
            if (!justFields) columns = columns.concat(_.map(systemProperties, function (systemColumn) {
                return {
                    name: systemColumn.title,
                    columnType: "property",
                    value: {
                        property: systemColumn.property,
                        columnKey: "property|" + (systemColumn.uniqueKey || systemColumn.property)
                    }
                }
            }));
            return columns.sortBy(function (column) {
                return column.name
            })
        },
        getSortedVisiblePipelines: function () {
            var sortedPipelines = [];
            var sortedPipelineKeys = BB.UserSettings.get("leftLink/pipelineSort");
            if (sortedPipelineKeys)
                for (var ii = 0; ii < sortedPipelineKeys.length; ii++) {
                    var pipeline = BB.Data.getPipeline(sortedPipelineKeys[ii]);
                    if (pipeline && !pipeline.isHidden()) sortedPipelines.push(pipeline)
                }
            _.chain(BB.Data.getAllPipelines()).filter(function (pipeline) {
                return !pipeline.isHidden()
            }).filter(function (pipeline) {
                if (sortedPipelineKeys)
                    if (sortedPipelineKeys.indexOf(pipeline.key()) > -1) return false;
                return true
            }).sortBy(function (pipeline) {
                return pipeline.displayName()
            }).each(function (pipeline) {
                sortedPipelines.push(pipeline)
            });
            return sortedPipelines
        },
        getSortedPipelines: function () {
            var sortedPipelines = [];
            var sortedPipelineKeys = BB.UserSettings.get("leftLink/pipelineSort");
            if (sortedPipelineKeys)
                for (var ii = 0; ii < sortedPipelineKeys.length; ii++) {
                    var pipeline = BB.Data.getPipeline(sortedPipelineKeys[ii]);
                    if (pipeline && !pipeline.isHidden()) sortedPipelines.push(pipeline)
                }
            _.chain(BB.Data.getAllPipelines()).filter(function (pipeline) {
                return !pipeline.isHidden()
            }).filter(function (pipeline) {
                if (sortedPipelineKeys)
                    if (sortedPipelineKeys.indexOf(pipeline.key()) > -1) return false;
                return true
            }).sortBy(function (pipeline) {
                return pipeline.displayName()
            }).each(function (pipeline) {
                sortedPipelines.push(pipeline)
            });
            _.chain(BB.Data.getAllPipelines()).filter(function (pipeline) {
                return pipeline.isHidden()
            }).sortBy(function (pipeline) {
                return pipeline.displayName()
            }).each(function (pipeline) {
                sortedPipelines.push(pipeline)
            });
            return sortedPipelines
        },
        getStageColors: function (pipeline) {
            var settings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupColorSettings.load(pipeline);
            if (_.isNotReal(settings.data["stageKey"])) settings.data["stageKey"] = {};
            var colorMap = settings.data["stageKey"];
            var stageKeys = _.pluck(pipeline.getStagesAsList(), "value");
            var retVal = {};
            for (var ii = 0; ii < stageKeys.length; ii++) {
                stageKey = stageKeys[ii];
                if (colorMap[stageKey]) retVal[stageKey] = colorMap[stageKey];
                else retVal[stageKey] = {
                    backgroundColor: this.getIndexColor(ii, colorMap),
                    textColor: "white"
                }
            }
            return retVal
        },
        getIndexColor: function (index, colorMap) {
            var colors = _.pluck(_.values(colorMap), "backgroundColor");
            var maxColorLength = CONSTANTS.COLORS.length;
            var colorLength = colors.length;
            for (var ii = index; ii < 100; ii++) {
                var tempColor = CONSTANTS.COLORS[ii % CONSTANTS.COLORS.length];
                var cIndex = colors.indexOf(tempColor);
                if (cIndex === -1) return tempColor;
                if (Math.abs(index - cIndex) > 10) return tempColor
            }
            return CONSTANTS.COLORS[Number.random(0, CONSTANTS.COLORS.length - 1)]
        }
    };
    BB.UI.originalHash = location.hash;
    Streak.DependencyManager.addFunction({
        functionKey: "uiInitialized",
        functionToCall: BB.UI.init,
        functionContext: BB.UI,
        dependentFunctionKeys: ["gmailLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Model = Streak.Model,
        BB = Streak.BentoBox;
    UserSettings = Streak.Eventer.create({
        userUISettings: null,
        settings: null,
        active: true,
        saveTimeout: null,
        init: function (callback) {
            var self = this;
            this.userUISettings = BB.Models.UserUISettings.create({});
            this.userUISettings.refresh(function () {
                self.refreshSettings();
                if (callback) callback()
            })
        },
        refresh: function () {
            this.userUISettings.refresh(this.refreshSettings.bind(this))
        },
        refreshSettings: function () {
            if (this.userUISettings.get("clientJSONUISettings")) try {
                this.settings =
                    new Model(JSON.parse(this.userUISettings.get("clientJSONUISettings")))
            } catch (err) {}
            if (!this.settings) this.settings = new Model({});
            this.trigger("refresh")
        },
        getSetting: function (path) {
            var parts = path.split("/");
            var setting = this.settings.get(parts[0]);
            for (var i = 1; i < parts.length; i++)
                if (setting) setting = setting[parts[i]];
            return setting
        },
        get: function (path) {
            return this.getSetting(path)
        },
        setSetting: function (path, value) {
            var parts = path.split("/");
            if (parts.length === 1) {
                this.settings.set(parts[0], value);
                return
            }
            var osetting =
                this.settings.get(parts[0]);
            if (!osetting) osetting = {};
            var setting = osetting;
            for (var i = 1; i < parts.length - 1; i++) {
                var newSetting = setting[parts[i]];
                if (!newSetting) {
                    newSetting = {};
                    setting[parts[i]] = newSetting
                }
                setting = newSetting
            }
            setting[_.last(parts)] = value;
            this.settings.set(parts[0], osetting)
        },
        set: function (path, value) {
            this.setSetting(path, value)
        },
        saveSettings: function () {
            if (this.active) {
                var self = this;
                clearTimeout(this.saveTimeout);
                this.saveTimeout = setTimeout(function () {
                    self.userUISettings.set("clientJSONUISettings",
                        JSON.stringify(self.settings.getObj()));
                    self.userUISettings.save($.noop, 0, true)
                }, 500)
            }
        },
        save: function (shouldRefresh) {
            this.saveSettings();
            if (shouldRefresh) this.trigger("refresh")
        }
    });
    BB.UserSettings = UserSettings;
    Streak.DependencyManager.addFunction({
        functionKey: "userSettingsInitialized",
        functionToCall: BB.UserSettings.init,
        functionContext: BB.UserSettings,
        dependentFunctionKeys: ["userLoggedIn"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var TourChapterViewController = Streak.Class.subclass({
        className: "TourChapterViewController",
        superclass: UI.ViewController,
        _currentChapterViewController: null,
        _memberVariables: [{
            name: "_currentChapterDefinition",
            destroy: false
        }, {
            name: "_tourHistory",
            destroy: false
        }, {
            name: "_currentTourPageViewController",
            destroy: true
        }, {
            name: "_defaultChapterClasses",
            destroy: true
        }, {
            name: "_currentChapterClasses",
            destroy: false
        }, {
            name: "_chapters",
            destroy: false
        }, {
            name: "_tourWidgetFactory",
            destroy: true
        }, {
            name: "_pagesViewed",
            destroy: true
        }, {
            name: "_currentMark",
            destroy: false
        }, {
            name: "_isDestroyed",
            destroy: false
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this);
            this._isDestroyed = false;
            this._tourHistory = [];
            this._defaultChapterClasses = [];
            this._currentChapterClasses = [];
            this._initializeDefaultChapterClasses()
        },
        run: function (chapterDefinition, chapters) {
            if (TourChapterViewController._currentChapterViewController) TourChapterViewController._currentChapterViewController.destroy();
            if (!chapterDefinition.pages || chapterDefinition.pages.length === 0) return;
            BB.Tracker.track("helpTour started", {
                chapterName: chapterDefinition.name
            });
            TourChapterViewController._currentChapterViewController = this;
            this._chapters = chapters;
            this._currentChapterDefinition = chapterDefinition;
            this._pagesViewed =
                0;
            this._initializeTourWidgetFactory();
            this._fillInIncludes();
            this._startRunningTourChapter()
        },
        _initializeTourWidgetFactory: function () {
            this._tourWidgetFactory = Library.getInstance("BentoBox.Tour.TourWidgetFactory")
        },
        _initializeDefaultChapterClasses: function () {
            this._defaultChapterClasses.push(Library.getInstance("BentoBox.Tour.HelperClass.PipelineTourHelper"));
            this._defaultChapterClasses.push(Library.getInstance("BentoBox.Tour.HelperClass.BoxTourHelper"));
            this._defaultChapterClasses.push(Library.getInstance("BentoBox.Tour.HelperClass.ComposeTourHelper"));
            this._defaultChapterClasses.push(Library.getInstance("BentoBox.Tour.HelperClass.InboxTourHelper"))
        },
        _fillInIncludes: function () {
            var pages = this._currentChapterDefinition.pages.slice();
            var newClassNames = (this._currentChapterDefinition.classNames || []).slice();
            for (var jj = 0; jj < 1E4; jj++) {
                var includeFound = false;
                var newPages = [];
                for (var ii = 0; ii < pages.length; ii++) {
                    var page = pages[ii];
                    if (page.include) {
                        var onEnterFunctionArray = [];
                        if (page.onEnter) onEnterFunctionArray.push(page.onEnter);
                        else if (page.onEnterFunctionArray) onEnterFunctionArray =
                            page.onEnterFunctionArray;
                        includeFound = true;
                        var chapterDefinition = this._getChapterDefinition(page.include);
                        var chapterPages = chapterDefinition.pages;
                        this._addOnEnterFunctionsToIncludeChapterPages(onEnterFunctionArray, chapterPages);
                        newPages = newPages.concat(chapterPages);
                        newClassNames = newClassNames.concat(chapterDefinition.classNames)
                    } else newPages.push(page)
                }
                pages = newPages;
                if (!includeFound) break
            }
            this._currentChapterDefinition.pages = pages;
            this._currentChapterDefinition.classNames = _.uniq(newClassNames)
        },
        _addOnEnterFunctionsToIncludeChapterPages: function (onEnterFunctionArray, chapterPages) {
            for (ii = 0; ii < chapterPages.length; ii++) {
                var onEnters = _.clone(onEnterFunctionArray);
                var page = chapterPages[ii];
                if (page.onEnter) onEnters.push(page.onEnter);
                else if (page.onEnterFunctionArray) onEnters = onEnters.concat(page.onEnterFunctionArray);
                page.onEnter = null;
                page.onEnterFunctionArray = onEnters
            }
        },
        _startRunningTourChapter: function () {
            this._notifyTourStarting();
            this._resetTourState();
            this._initializeChapterClasses();
            this._loadNextChapterPage()
        },
        _notifyTourStarting: function () {
            NotificationCenter.notify("tourStarting")
        },
        _notifyTourFinished: function () {
            NotificationCenter.notify("tourFinished")
        },
        _resetTourState: function () {
            this._tourHistory.length = 0;
            this._resetChapterClasses()
        },
        _initializeChapterClasses: function () {
            this._resetChapterClasses();
            var classNames = this._currentChapterDefinition.classNames;
            if (!classNames || classNames.length === 0) return;
            for (var ii = 0; ii < classNames.length; ii++) {
                if (!classNames[ii]) continue;
                var classInstance = Library.getInstance("BentoBox.Tour.HelperClass." +
                    classNames[ii]);
                this._currentChapterClasses.push(classInstance)
            }
        },
        _resetChapterClasses: function () {
            for (var ii = 0; ii < this._currentChapterClasses.length; ii++) this._currentChapterClasses[ii].destroy();
            this._currentChapterClasses.length = 0
        },
        _loadNextChapterPage: function () {
            this._resetTourPageViewController();
            var nextEntry = this._getNextTourHistoryEntry();
            if (!nextEntry) {
                this.finish();
                return
            }
            this._tourHistory.unshift(nextEntry);
            this._setupTourPageViewController(nextEntry.pageDefinition);
            if (this._isDestroyed) return;
            BB.Tracker.track("helpTour next page", {
                chapterName: this._currentChapterDefinition.name,
                pagesViewed: this._pagesViewed,
                chapterPageIndex: nextEntry.pageDefinition.pageIndex
            })
        },
        _resetTourPageViewController: function () {
            if (this._currentTourPageViewController) {
                this._currentTourPageViewController.destroy();
                this._currentTourPageViewController = null
            }
        },
        _getNextTourHistoryEntry: function () {
            if (this._tourHistory.length === 0) return {
                chapterDefinition: this._currentChapterDefinition,
                pageIndex: 0,
                pageDefinition: this._currentChapterDefinition.pages[0]
            };
            var nextPageIndex = this._tourHistory[0].pageIndex + 1;
            if (this._currentChapterDefinition.pages.length <= nextPageIndex) return;
            return {
                chapterDefinition: this._currentChapterDefinition,
                pageIndex: nextPageIndex,
                pageDefinition: this._currentChapterDefinition.pages[nextPageIndex]
            }
        },
        _setupTourPageViewController: function (pageDefinition) {
            this._currentTourPageViewController = new BB.Tour.TourPageViewController;
            this._currentTourPageViewController.setDelegate(this);
            this._currentTourPageViewController.run(JSON.deepClone(pageDefinition),
                this._tourWidgetFactory);
            this._pagesViewed += 1
        },
        callFunction: function (functionName, functionArguments, basicTourCallbacks) {
            var functionObject = null;
            var functionReference = null;
            if (this[functionName]) return this[functionName].apply(this, [functionArguments, basicTourCallbacks]);
            var functionClasses = this._currentChapterClasses.concat(this._defaultChapterClasses);
            for (var ii = 0; ii < functionClasses.length; ii++) {
                var chapterClassInstance = functionClasses[ii];
                if (chapterClassInstance && chapterClassInstance[functionName]) return chapterClassInstance[functionName].apply(chapterClassInstance, [functionArguments, basicTourCallbacks])
            }
        },
        next: function () {
            this._loadNextChapterPage()
        },
        previous: function () {
            this._resetTourPageViewController();
            var previousEntry = this._getPreviousTourEntry();
            if (!previousEntry) {
                this.destroy();
                return
            }
            if (previousEntry.chapterDefinition.name !== this._currentChapterDefinition.name) {
                this._currentChapterDefinition = previousEntry.chapterDefinition;
                this._initializeChapterClasses()
            }
            this._setupTourPageViewController(previousEntry.pageDefinition);
            BB.Tracker.track("helpTour previous page", {
                chapterName: this._currentChapterDefinition.name,
                pagesViewed: this._pagesViewed,
                chapterPageIndex: previousEntry.pageDefinition.pageIndex
            })
        },
        _getPreviousTourEntry: function () {
            var previousEntry;
            for (var ii = 0; ii < 1E4; ii++) {
                this._tourHistory.shift();
                if (this._tourHistory.length === 0) {
                    previousEntry = null;
                    break
                }
                previousEntry = this._tourHistory[0];
                if (!previousEntry.pageDefinition.noHistory) break
            }
            return previousEntry
        },
        earlyExit: function (reason) {
            BB.Tracker.track("helpTour early exit", {
                chapterName: this._currentChapterDefinition.name,
                pagesViewed: this._pagesViewed,
                chapterPageIndex: this._tourHistory[0].pageIndex,
                reason: reason
            });
            this.destroy()
        },
        finish: function () {
            BB.Tracker.track("helpTour finish", {
                chapterName: this._currentChapterDefinition.name,
                pagesViewed: this._pagesViewed,
                chapterPageIndex: this._tourHistory[0].pageIndex
            });
            this.destroy()
        },
        changeChapter: function (chapterName, pageIndex) {
            this._resetTourPageViewController();
            var chapterDefinition = this._getChapterDefinition(chapterName);
            this._currentChapterDefinition = chapterDefinition;
            this._initializeChapterClasses();
            if (!_.isNumber(pageIndex)) pageIndex = 0;
            var historyEntry = {
                chapterDefinition: this._currentChapterDefinition,
                pageIndex: pageIndex,
                pageDefinition: this._currentChapterDefinition.pages[pageIndex]
            };
            this._tourHistory.unshift(historyEntry);
            this._setupTourPageViewController(historyEntry.pageDefinition)
        },
        _getChapterDefinition: function (chapterName) {
            var chapters = this._chapters;
            for (var ii = 0; ii < chapters.length; ii++) {
                var chapter = chapters[ii];
                if (chapter.name === chapterName) return JSON.deepClone(chapter)
            }
            return null
        },
        delay: function (delayTime) {
            return new Streak.Promise(function (resolve, reject) {
                setTimeout(resolve, delayTime)
            })
        },
        destroy: function () {
            TourChapterViewController._currentChapterViewController = null;
            this._notifyTourFinished();
            UI.ViewController.prototype.destroy.call(this);
            this._isDestroyed = true
        }
    });
    Library.set("BentoBox.Tour.TourChapterViewController", TourChapterViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var TourPageViewController = Streak.Class.subclass({
        className: "TourPageViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_widgets",
            destroy: false
        }, {
            name: "_pageDefinition",
            destroy: false
        }, {
            name: "_tourWidgetFactory",
            destroy: false
        }, {
            name: "_isDestroyed",
            destroy: false
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this);
            this._widgets = [];
            this._isDestroyed = false
        },
        run: function (pageDefinition, tourWidgetFactory) {
            this._pageDefinition = pageDefinition;
            this._tourWidgetFactory = tourWidgetFactory;
            this._loadOnEnter()
        },
        _loadOnEnter: function () {
            if (!this._pageDefinition.onEnter && !this._pageDefinition.onEnterFunctionArray) {
                this._waitForSelector();
                return
            }
            if (this._pageDefinition.onEnter) {
                this._handleOnEnter();
                return
            }
            this._handleOnEnterFunctionArray()
        },
        _handleOnEnter: function () {
            var basicTourCallbacks = this._getBasicTourCallbacks();
            var convertedFunction = this._convertWidgetFunction(this._pageDefinition.onEnter);
            var promise = convertedFunction(basicTourCallbacks);
            if (this._isDestroyed) return;
            if (!promise) {
                this._waitForSelector();
                return
            }
            promise.done(this._waitForSelector.bind(this))
        },
        _handleOnEnterFunctionArray: function () {
            var basicTourCallbacks = this._getBasicTourCallbacks();
            var promises = [];
            for (var ii = 0; ii < this._pageDefinition.onEnterFunctionArray.length; ii++) {
                var convertedFunction =
                    this._convertWidgetFunction(this._pageDefinition.onEnterFunctionArray[ii]);
                var promise = convertedFunction(basicTourCallbacks);
                if (this._isDestroyed) return;
                if (promise) promises.push(promise)
            }
            if (promises.length === 0) {
                this._waitForSelector();
                return
            }
            Streak.Promise.whenAllDone(promises, this._waitForSelector.bind(this))
        },
        _waitForSelector: function () {
            if (!this._pageDefinition.waitForSelector) {
                this._loadWidgets();
                return
            }
            var self = this;
            _.checkAndThenRun(function () {
                return self._isDestroyed || $(self._pageDefinition.waitForSelector).length >
                    0
            }, function () {
                if (self._isDestroyed) return;
                self._loadWidgets()
            }, 100)
        },
        _getBasicTourCallbacks: function () {
            var delegate = this._delegate;
            return {
                previous: function () {
                    delegate.callFunction("previous")
                },
                next: function () {
                    delegate.callFunction("next")
                },
                earlyExit: function () {
                    delegate.callFunction("earlyExit")
                },
                finish: function () {
                    delegate.callFunction("finish")
                }
            }
        },
        _loadWidgets: function () {
            var widgets = this._pageDefinition.widgets;
            if (widgets && widgets.length > 0)
                for (var ii = 0; ii < widgets.length; ii++) this._loadWidget(widgets[ii]);
            this._tourWidgetFactory.flush();
            if (!widgets) this._delegate.callFunction("next")
        },
        _loadWidget: function (widgetDefinition) {
            if (widgetDefinition.type === "COMPOSITE") {
                var widgetTypes = widgetDefinition.widgetTypes;
                for (var ii = 0; ii < widgetTypes.length; ii++) {
                    var widgetType = widgetTypes[ii];
                    var newWidgetDefinition = JSON.deepClone(widgetDefinition);
                    newWidgetDefinition.type = widgetType;
                    this._loadWidget(newWidgetDefinition)
                }
                return
            }
            var processedDefinition = this._processWidgetDefinition(JSON.deepClone(widgetDefinition));
            var widget = this._tourWidgetFactory.get(processedDefinition);
            if (!widget) return;
            this._widgets.push(widget);
            if (widget.show) widget.show()
        },
        _processWidgetDefinition: function (widgetDefinition) {
            this._processStrings(widgetDefinition);
            this._processFunctions(widgetDefinition);
            var delegate = this._delegate;
            widgetDefinition.previousFunction = function () {
                delegate.callFunction("previous")
            };
            widgetDefinition.nextFunction = function () {
                delegate.callFunction("next")
            };
            widgetDefinition.earlyExitTourFunction = function (reason) {
                delegate.callFunction("earlyExit",
                    reason)
            };
            widgetDefinition.finishFunction = function () {
                delegate.callFunction("finish")
            };
            return widgetDefinition
        },
        _processStrings: function (widgetDefinition) {
            for (var key in widgetDefinition) {
                var value = widgetDefinition[key];
                if (key === "textBody") widgetDefinition.body = value;
                else if (key === "htmlBody") widgetDefinition.body = HTML.getStringWithSelector(value);
                if (_.isObject(value)) this._processStrings(value)
            }
        },
        _processFunctions: function (widgetDefinition) {
            if (!_.isObject(widgetDefinition)) return;
            for (var key in widgetDefinition) {
                if (key.toLowerCase().indexOf("function") > -1) widgetDefinition[key] = this._convertWidgetFunction(widgetDefinition[key]);
                var value = widgetDefinition[key];
                if (_.isObject(value)) this._processFunctions(value);
                else if (_.isArray(value))
                    for (var ii = 0; ii < value.length; ii++) this._processFunctions(value[ii])
            }
        },
        _convertWidgetFunction: function (functionDefinition) {
            var delegate = this._delegate;
            var functionName = null;
            var functionArguments = null;
            if (_.isString(functionDefinition)) functionName = functionDefinition;
            else if (_.isObject(functionDefinition)) {
                functionName =
                    functionDefinition.name;
                functionArguments = functionDefinition.arguments
            }
            return function (basicTourCallbacks) {
                if (!functionArguments) functionArguments = basicTourCallbacks;
                return delegate.callFunction(functionName, functionArguments, basicTourCallbacks)
            }
        },
        destroy: function () {
            if (this._pageDefinition.onExit) {
                var convertedFunction = this._convertWidgetFunction(this._pageDefinition.onExit);
                var callbacks = this._getBasicTourCallbacks();
                convertedFunction(callbacks)
            }
            for (var ii = 0; ii < this._widgets.length; ii++) this._tourWidgetFactory.release(this._widgets[ii]);
            UI.ViewController.prototype.destroy.call(this);
            this._isDestroyed = true
        }
    });
    Library.set("BentoBox.Tour.TourPageViewController", TourPageViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var TourWidgetFactory = Streak.Class.subclass({
        className: "TourWidgetFactory",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_widgetMap",
            destroy: false
        }, {
            name: "_listOfAllReusableWidgets",
            destroy: true
        }, {
            name: "_tourSelectorHelper",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            this._widgetMap = {};
            this._listOfAllReusableWidgets = [];
            this._tourSelectorHelper = Library.getInstance("BentoBox.Tour.TourSelectorHelper")
        },
        get: function (widgetDefinition) {
            var type = widgetDefinition.type;
            var options = this._processWidgetDefinition(widgetDefinition);
            return this._getWidget(type, options)
        },
        release: function (widget) {
            if (!widget.reuse) {
                widget.destroy();
                return
            }
            if (!widget.getType) {
                widget.destroy();
                return
            }
            var type = widget.getType();
            var widgetList = this._widgetMap[type];
            if (!widgetList) {
                widgetList = [];
                this._widgetMap[type] =
                    widgetList
            }
            widgetList.push(widget);
            this._listOfAllReusableWidgets.push(widget)
        },
        flush: function () {
            for (var ii = 0; ii < this._listOfAllReusableWidgets.length; ii++) this._listOfAllReusableWidgets[ii].destroy();
            this._listOfAllReusableWidgets.length = 0
        },
        _processWidgetDefinition: function (widgetDefinition) {
            var processFunc = this["_processWidgetDefinitionFor" + widgetDefinition.type.camelize()];
            if (!processFunc) return widgetDefinition;
            return processFunc.call(this, widgetDefinition)
        },
        _processWidgetDefinitionForModal: function (widgetDefinition) {
            var options = {};
            if (typeof widgetDefinition.leftButton !== "undefined")
                if (widgetDefinition.leftButton) {
                    options.cancelFunc = widgetDefinition.leftButton.
                    function;
                    options.cancelText = widgetDefinition.leftButton.name;
                    options.cancelButtonColor = widgetDefinition.leftButton.color
                } else options.showCancel = false;
                else {
                    options.cancelFunc = widgetDefinition.previousFunction;
                    options.cancelText = "Previous"
                }
            if (typeof widgetDefinition.rightButton !== "undefined")
                if (widgetDefinition.rightButton) {
                    options.confirmFunc = widgetDefinition.rightButton.
                    function;
                    options.confirmText = widgetDefinition.rightButton.name;
                    options.doneButtonColor = widgetDefinition.rightButton.color
                } else options.showCancel = false;
                else {
                    options.confirmFunc = widgetDefinition.nextFunction;
                    options.confirmText = "Next"
                }
            options.close = false;
            options.force = true;
            options.opacity = 65;
            options.dontStack = true;
            options.escClose = false;
            options.inner = widgetDefinition.body;
            options.title = widgetDefinition.title;
            options.width = widgetDefinition.width;
            return options
        },
        _processWidgetDefinitionForHighlight: function (widgetDefinition) {
            widgetDefinition.targetSelector =
                this._tourSelectorHelper.getElement(widgetDefinition.targetSelector);
            return widgetDefinition
        },
        _processWidgetDefinitionForWaitForClick: function (widgetDefinition) {
            widgetDefinition.rawTargetSelector = widgetDefinition.targetSelector;
            widgetDefinition.targetSelector = this._tourSelectorHelper.getElement(widgetDefinition.targetSelector);
            if (!widgetDefinition.function) widgetDefinition.
            function = widgetDefinition.nextFunction;
            return widgetDefinition
        },
        _processWidgetDefinitionForWaitForEvent: function (widgetDefinition) {
            widgetDefinition.rawTargetSelector =
                widgetDefinition.targetSelector;
            widgetDefinition.targetSelector = this._tourSelectorHelper.getElement(widgetDefinition.targetSelector);
            if (!widgetDefinition.function) widgetDefinition.
            function = widgetDefinition.nextFunction;
            if (!widgetDefinition.event) widgetDefinition.event = "focusout";
            return widgetDefinition
        },
        _processWidgetDefinitionForTooltip: function (widgetDefinition) {
            widgetDefinition.targetSelector = this._tourSelectorHelper.getElement(widgetDefinition.targetSelector);
            return widgetDefinition
        },
        _processWidgetDefinitionForBar: function (widgetDefinition) {
            var options = {
                html: widgetDefinition.body
            };
            if (typeof widgetDefinition.leftButton === "undefined") {
                options.leftButtonFunction = widgetDefinition.previousFunction;
                options.leftButtonHTML = "Previous"
            } else if (widgetDefinition.leftButton) {
                options.leftButtonFunction = widgetDefinition.leftButton.
                function;
                options.leftButtonHTML = widgetDefinition.leftButton.name
            } else options.showLeft = false; if (typeof widgetDefinition.rightButton === "undefined") {
                options.rightButtonFunction = widgetDefinition.nextFunction;
                options.rightButtonHTML = "Next"
            } else if (widgetDefinition.rightButton) {
                options.rightButtonFunction =
                    widgetDefinition.rightButton.
                function;
                options.rightButtonHTML = widgetDefinition.rightButton.name
            } else options.showRight = false;
            return options
        },
        _processWidgetDefinitionForOverlay: function (widgetDefinition) {
            var options = {
                showLeftButton: false,
                showRightButton: false
            };
            if (widgetDefinition.leftButton) {
                options.leftButtonFunction = widgetDefinition.leftButton.
                function;
                options.leftButtonText = widgetDefinition.leftButton.name;
                options.leftButtonColor = widgetDefinition.leftButton.color
            }
            if (widgetDefinition.rightButton) {
                options.rightButtonFunction =
                    widgetDefinition.rightButton.
                function;
                options.rightButtonText = widgetDefinition.rightButton.name;
                options.rightButtonColor = widgetDefinition.rightButton.color
            }
            options.infoHTML = widgetDefinition.body;
            options.infoCss = widgetDefinition.bodyCSS;
            if (widgetDefinition.tips && widgetDefinition.tips.length > 0) {
                var tips = [];
                for (var ii = 0; ii < widgetDefinition.tips.length; ii++) {
                    var widgetTip = widgetDefinition.tips[ii];
                    var tip = {
                        targetElement: this._tourSelectorHelper.getElement(widgetTip.targetSelector),
                        description: widgetTip.body,
                        buttons: widgetTip.buttons
                    };
                    tips.push(tip)
                }
                options.tips = tips
            }
            return options
        },
        _processWidgetDefinitionForBottomModal: function (widgetDefinition) {
            if (widgetDefinition.backButtonFunction) return;
            widgetDefinition.backButtonFunction = widgetDefinition.finishFunction;
            return widgetDefinition
        },
        _getWidget: function (type, options) {
            var widgetList = this._widgetMap[type];
            if (widgetList && widgetList.length > 0) {
                var widget = widgetList.pop();
                widget.reuse(options);
                this._listOfAllReusableWidgets.removeVal(widget);
                return widget
            }
            return this["_create" +
                type.camelize()](options)
        },
        _createModal: function (options) {
            return BB.Widgets.Modal.create(options)
        },
        _createHighlight: function (options) {
            return BB.Widgets.Tour.Highlight.create(options)
        },
        _createTooltip: function (options) {
            var tooltip = new BB.Widgets.Tour.GmailTooltip;
            tooltip.setup(options);
            return tooltip
        },
        _createBar: function (options) {
            return BB.Widgets.Tour.Bar.create(options)
        },
        _createOverlay: function (options) {
            return BB.Widgets.Tour.Overlay.create(options)
        },
        _createWaitForClick: function (options) {
            var waitForClick =
                new BB.Widgets.Tour.WaitForClick;
            waitForClick.setup(options);
            return waitForClick
        },
        _createWaitForEvent: function (options) {
            var waitForEvent = new BB.Widgets.Tour.WaitForEvent;
            waitForEvent.setup(options);
            return waitForEvent
        },
        _createFunction: function (options) {
            options.
            function (options.callbacks)
        },
        _createBottomModal: function (options) {
            var bottomModal = new BB.Widgets.Tour.BottomModal;
            bottomModal.setup(options);
            return bottomModal
        }
    });
    Library.set("BentoBox.Tour.TourWidgetFactory", TourWidgetFactory)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var TourSelectorHelper = Streak.Class.subclass({
        className: "TourSelectorHelper",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        getElement: function (selector) {
            if (selector.indexOf(".gmail_") === -1) return $(selector);
            return this._processGmailSelector(selector)
        },
        _processGmailSelector: function (selector) {
            var matches = selector.match(/(\.gmail_.*?)(\s|$|:)/);
            if (!matches) return selector;
            var gmailElementReference = matches[1];
            var restOfSelector = selector.replace(gmailElementReference, "");
            if (gmailElementReference.indexOf("inboxRow") > -1) return this._getGmailInboxRow(gmailElementReference);
            return this._getGmailElement(gmailElementReference)
        },
        _getGmailElement: function (gmailElementReference) {
            var elementReference =
                gmailElementReference.replace(".gmail_", "");
            if (Gmail["get" + elementReference.camelize()]) return Gmail["get" + elementReference.camelize()]();
            return this["_getGmail" + elementReference.camelize()]()
        },
        _getGmailInboxRow: function () {
            return Gmail.getVisibleThreadRows()[0].rowNode
        }
    });
    Library.set("BentoBox.Tour.TourSelectorHelper", TourSelectorHelper)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var BoxTourHelper = Streak.Class.subclass({
        className: "BoxTourHelper",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        skipPageIfAnyBoxExists: function (basicTourCallbacks) {
            var boxes = BB.Data.getAllBoxes();
            if (boxes && boxes.length > 0) basicTourCallbacks.next()
        },
        skipPageIfBoxExists: function (basicTourCallbacks) {
            var pipelineKey = Gmail.getConversationId();
            var boxes = BB.Data.getPipelineBoxes(pipelineKey);
            if (boxes && boxes.length > 0) basicTourCallbacks.next()
        },
        skipPageIfOnBoxView: function (basicTourCallbacks) {
            if (BB.UI.isBoxView()) basicTourCallbacks.next()
        }
    });
    Library.set("BentoBox.Tour.HelperClass.BoxTourHelper", BoxTourHelper)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ComposeTourHelper = Streak.Class.subclass({
        className: "ComposeTourHelper",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_composeWindowViewController",
            destroy: false
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        openComposeWindow: function () {
            var self =
                this;
            var promise = new Streak.Promise(function (resolve, reject) {
                Gmail.GmailComposeWindowRequester.requestNewComposeWindow(function (composeWindowViewController) {
                    self._composeWindowViewController = composeWindowViewController;
                    resolve()
                })
            });
            return promise
        },
        closeComposeWindow: function () {
            if (!this._composeWindowViewController.isDestroyed()) try {
                this._composeWindowViewController.close()
            } catch (err) {}
        },
        ensureTrackingIsOff: function () {
            this._composeWindowViewController.notify("turnOffTracking")
        },
        contactUs: function (callbacks) {
            Gmail.GmailComposeWindowRequester.requestNewComposeWindow(function (composeWindowViewController) {
                composeWindowViewController.setToAddresses(["support@streak.com"]);
                callbacks.doneFunction()
            })
        }
    });
    Library.set("BentoBox.Tour.HelperClass.ComposeTourHelper", ComposeTourHelper)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PipelineTourHelper = Streak.Class.subclass({
        className: "PipelineTourHelper",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_newPipelineModal",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        skipPageIfPipelineExists: function (basicTourCallbacks) {
            if (BB.Data.getAllPipelines().length >
                0) basicTourCallbacks.next()
        },
        skipPageIfOnPipelineView: function (basicTourCallbacks) {
            if (BB.UI.isPipelineView()) basicTourCallbacks.next()
        },
        ensurePipelineListVisible: function (basicTourCallbacks) {
            BB.Modules.LeftLink.open()
        },
        createPipeline: function (callbacks) {
            this._newPipelineModal = BB.Widgets.NewPipelineModal.create({
                title: BB.FirstRun.getStage() === 1 ? BB.Locale.getString("left_link_setup_first") : BB.Locale.getString("left_link_make_new"),
                noPipelineChosenCallback: callbacks.noPipelineCreatedFunction,
                pipelineSavedCallback: callbacks.pipelineCreatedFunction
            });
            this._newPipelineModal.show()
        },
        goToPipelineView: function () {
            if (BB.UI.isPipelineView()) return;
            var pipeline = BB.Data.getAllPipelines()[0];
            var promise = new Streak.Promise(function (resolve, reject) {
                BB.UI.setURL(pipeline.link(), resolve)
            });
            return promise
        },
        bringUpPipelineSearchBox: function () {
            BB.Modules.PipelineView.activePipelineView.showSearchBox();
            var promise = new Streak.Promise(function (resolve, reject) {
                setTimeout(resolve, 500)
            });
            return promise
        },
        closePipelineSearchBox: function () {
            BB.Modules.PipelineView.activePipelineView.hideSearchBox()
        }
    });
    Library.set("BentoBox.Tour.HelperClass.PipelineTourHelper", PipelineTourHelper)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var InboxTourHelper = Streak.Class.subclass({
        className: "InboxTourHelper",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        goToInboxView: function () {
            BB.UI.setURL(Gmail.Constants.Inbox);
            var self =
                this;
            var promise = new Streak.Promise(function (resolve, reject) {
                _.checkAndThenRun(function () {
                    return Gmail.getCurrentMain().find("[gh=tl]").length > 0
                }, resolve, 100)
            });
            return promise
        },
        skipPageIfGmailSettingsVisible: function (basicTourCallbacks) {
            if (Gmail.getGearButton().is(":FastVisible")) basicTourCallbacks.next()
        },
        skipPageIfOnGmailSettings: function (basicTourCallbacks) {
            if (Gmail.view === Gmail.Constants.Settings) basicTourCallbacks.next()
        },
        skipPageIfOnStreakSettings: function (basicTourCallbacks) {
            if (Gmail.view ===
                "settingsStreak") basicTourCallbacks.next()
        },
        skipPageIfInboxRowsPresent: function (basicTourCallbacks) {
            if (Gmail.getVisibleThreadRows().length > 0) basicTourCallbacks.next()
        },
        goToInboxViewAndWaitForSettings: function (callbacks) {
            BB.UI.setURL(Gmail.Constants.Inbox);
            _.checkAndThenRun(function () {
                return Gmail.getGearButton().is(":FastVisible")
            }, callbacks.nextFunction, 100)
        },
        waitForGmailSettingsVisible: function (callbacks) {
            var promise = new Streak.Promise(function (resolve, reject) {
                _.checkAndThenRun(function () {
                        return Gmail.getGearButton().is(":FastVisible")
                    },
                    resolve, 500)
            });
            return promise
        }
    });
    Library.set("BentoBox.Tour.HelperClass.InboxTourHelper", InboxTourHelper)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var EmailTrackingTourHelper = Streak.Class.subclass({
        className: "EmailTrackingTourHelper",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            this._searchValue = null
        },
        ensureTrackedSearchLinkVisible: function () {
            if (!Streak.$(".streak__pixelTrackerSearchLink").is(":visible")) Streak.$(".streak__pt_sentMailExpando").simulateRawClick();
            var promise = new Streak.Promise(function (resolve, reject) {
                setTimeout(resolve, 100)
            });
            return promise
        },
        showHasTrackingInSearch: function (callback) {
            this._searchValue = Gmail.getSearchInput().val();
            Gmail.getSearchInput().val("has:tracking")
        },
        restoreSearch: function () {
            Gmail.getSearchInput().val(this._searchValue)
        },
        showUnlockPixelTracking: function (callbacks) {
            var shareModal = Streak.Library.getInstance("BentoBox.Modules.PixelTrackingShareModalViewController");
            shareModal.show(callbacks.doneFunction)
        }
    });
    Library.set("BentoBox.Tour.HelperClass.EmailTrackingTourHelper",
        EmailTrackingTourHelper)
})(Streak);
(function (Streak) {
    var _ = Streak._;
    var self = FileStore = {
        RESERVATION_SIZE: 50 * 1024 * 1024,
        init: function (callback) {
            this._isActive = false;
            this._validEmailPath = "/" + Streak.userEmail.replace("@", "_").replace(".", "_") + "/";
            this._filer = new Streak.Filer;
            try {
                this._filer.init({
                    persistent: false,
                    size: this.RESERVATION_SIZE
                }, function (fileSystem) {
                    self._isActive = true;
                    self._callCallback(callback)
                }, function () {
                    console.error("not initialized!!!");
                    self._callCallback(callback)
                })
            } catch (err) {
                this._isActive = false;
                this._callCallback(callback)
            }
        },
        isEnabled: function () {
            return this._isActive
        },
        load: function (path, callback) {
            if (!this._isActive) this._callCallback(callback, null);
            var fullPath = this._validEmailPath + path;
            this._filer.open(fullPath, function (file) {
                self._readAndParseJSONFile(file, callback)
            }, function () {
                self._callCallback(callback, null)
            })
        },
        store: function (path, value, callback) {
            if (!path) {
                this._callCallback(callback);
                return
            }
            var fullPath = this._validEmailPath + path;
            this._makeDirectory(fullPath, function () {
                self._writeFile(fullPath, value, callback)
            })
        },
        remove: function (path, callback) {
            if (!_.isFunction(callback)) callback = function () {};
            this._filer.rm(this._validEmailPath + path, callback)
        },
        _makeDirectory: function (fullPath, callback) {
            var dirPath = _.initial(fullPath.split("/")).join("/");
            this._filer.mkdir(dirPath, false, callback, this._logError)
        },
        _writeFile: function (fullPath, value, callback) {
            this._filer.write(fullPath, {
                data: value,
                type: "text",
                append: false
            }, function (fileEntry, fileWriter) {
                self._callCallback(callback, fileEntry)
            }, this._logError)
        },
        _readAndParseJSONFile: function (file,
            callback) {
            if (!file) {
                this._callCallback(callback, null);
                return
            }
            var reader = new FileReader;
            reader.onload = function () {
                var result;
                if (reader.result) try {
                    result = JSON.parse(reader.result)
                } catch (err) {
                    self._logError(err)
                }
                self._callCallback(callback, result)
            };
            reader.onerror = this._logError;
            reader.readAsText(file, "UTF-8")
        },
        _callCallback: function (callback) {
            if (callback) callback.apply(null, _.rest(arguments))
        },
        _logError: function (err) {
            Streak.BentoBox.logError("problem with file store", err)
        }
    };
    Streak.FileStore = FileStore;
    Streak.DependencyManager.addFunction({
        functionKey: "fileStoreLoaded",
        functionToCall: FileStore.init,
        functionContext: FileStore
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var Widget = function (options) {
        this.options = null;
        this.setOptions(options)
    };
    _.extend(Widget.prototype, {
        defaults: {},
        initialized: false,
        init: function (cb) {
            if (!this.initialized && this.initializeWidget) this.initializeWidget(cb);
            else if (cb) cb()
        },
        setOptions: function (options) {
            this.options = _.extend({}, this.defaults, this.options, options);
            for (var key in this.options) this.options[key] =
                BB.UI.processString(this.options[key])
        },
        destroy: function () {}
    });
    BB.Widgets.Widget = Widget;
    BB.Widgets.UIControllers = {}
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var SearchSimpleVC = function () {
        Streak.ViewControllerBase.call(this);
        this._view = new BB.Widgets.SearchSimpleView;
        this._view.addDelegate(this)
    };
    SearchSimpleVC.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(SearchSimpleVC.prototype, {
        reset: function () {
            this._view.reset()
        },
        focus: function () {
            this._view.focus()
        },
        getFocusElement: function () {
            return this._view.getFocusElement()
        },
        setPlaceholder: function (placeholder) {
            this._view.setPlaceholder(placeholder)
        },
        clearQuery: function () {
            this._view.clearQuery();
            this.queryChange("")
        },
        setQuery: function (query) {
            this._view.setQuery(query)
        },
        getView: function () {
            return this._view
        },
        queryChange: function (query) {
            this._callDelegateFunction("queryChange", query)
        },
        getQuery: function () {
            return this._view.getQuery()
        },
        keyPressed: function (keyCode, isCursorAtEnd) {
            this._callDelegateFunction("keyPressed", keyCode, isCursorAtEnd)
        },
        keydown: function (event) {
            this._callDelegateFunction("keydown",
                event)
        },
        destroy: function () {
            Streak.ViewControllerBase.prototype.destroy.call(this);
            this._view.destroy()
        },
        inputFocus: function (e) {
            this._callDelegateFunction("inputFocus", e)
        },
        inputBlur: function (e) {
            this._callDelegateFunction("inputBlur", e)
        },
        isEmpty: function () {
            return this._view.isEmpty()
        }
    });
    BB.Widgets.SearchSimpleVC = SearchSimpleVC
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var SearchSimpleView = function (options) {
        Streak.ViewControllerBase.call(this);
        this._el = $(HTML.get("simpleSearchMain")());
        this._initInput()
    };
    SearchSimpleView.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(SearchSimpleView.prototype, {
        _initInput: function () {
            this._input = this._el.find(".streak__simpleinput");
            this._setupKeybinding();
            this._setupFocusBlurEvents()
        },
        _setupKeybinding: function () {
            var self = this;
            this._input.off("keyup");
            this._input.on("keyup", function (e) {
                if (self._currValue !== self._input.val()) self._queryChange(self._input.val());
                self._callDelegateFunction("keyPressed", e.which, self._isCursorAtEnd());
                e.stopPropagation()
            });
            this._input.on("keydown", function (e) {
                self._callDelegateFunction("keydown", e);
                if (Streak.jwerty.is("down/up", e)) e.preventDefault()
            })
        },
        _setupFocusBlurEvents: function () {
            var self = this;
            this._input.on("focus", function (e) {
                self._callDelegateFunction("inputFocus",
                    e);
                self._el.addClass("acm");
                self._el.removeClass("aco")
            });
            this._input.on("blur", function (e) {
                self._callDelegateFunction("inputBlur", e);
                self._el.addClass("aco");
                self._el.removeClass("acm")
            })
        },
        setPlaceholder: function (placeholder) {
            if (!_.isReal(placeholder)) return;
            this._input[0].setAttribute("placeholder", placeholder)
        },
        getEl: function () {
            return this._el
        },
        getElement: function () {
            return this._el
        },
        getFocusElement: function () {
            return this._input
        },
        focus: function () {
            this._input.focus()
        },
        clearQuery: function () {
            this._input.val("");
            this._currValue = ""
        },
        setQuery: function (query) {
            this._input.val(query);
            this._queryChange(query)
        },
        getQuery: function () {
            return this._input.val()
        },
        reset: function () {
            this._setupKeybinding();
            this.clearQuery()
        },
        _queryChange: function (query) {
            this._currValue = query;
            this._callDelegateFunction("queryChange", query)
        },
        _isCursorAtEnd: function () {
            return this._input.caret().start >= this._input.val().length
        },
        isEmpty: function () {
            return this._input.val().length === 0
        },
        destroy: function () {
            Streak.ViewControllerBase.prototype.destroy.call(this);
            this._el.remove()
        }
    });
    BB.Widgets.SearchSimpleView = SearchSimpleView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        jwerty = Streak.jwerty,
        Date = Streak.Date;
    var CursorController = function () {
        Streak.ViewControllerBase.call(this)
    };
    CursorController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(CursorController.prototype, {
        keyPressed: function (keycode, isCursorAtEnd) {
            if (keycode === jwerty.KEYS.keys.enter) this._callDelegateFunction("cursorEnter");
            if (keycode === jwerty.KEYS.keys.up) this._callDelegateFunction("cursorUp");
            if (keycode === jwerty.KEYS.keys.down) this._callDelegateFunction("cursorDown");
            if (keycode === jwerty.KEYS.keys.right) this._callDelegateFunction("cursorRight", isCursorAtEnd);
            if (keycode === jwerty.KEYS.keys.left) this._callDelegateFunction("cursorLeft")
        }
    });
    BB.Modules.CursorController = CursorController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var BoxesDetailsVC = function () {
        var self = this;
        self._delegates = [];
        self._view = new BB.Widgets.BoxesDetailsView
    };
    _.extend(BoxesDetailsVC.prototype, {
        setModel: function (model) {
            var self = this;
            self._model = model;
            self._view.setModel(model)
        },
        getView: function () {
            var self = this;
            return self._view
        },
        hideView: function () {
            var self = this;
            self._view.hide()
        },
        addDelegate: function (delegate) {
            var self =
                this;
            self._delegates.push(delegate)
        }
    });
    BB.Widgets.BoxesDetailsVC = BoxesDetailsVC
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var BoxesDetailsView = function () {
        var self = this;
        self._delegates = [];
        self._el = $(HTML.get("boxesDetailsPaneHolder")({}));
        self._templates = {};
        self._templates.boxDetails = HTML.get("boxesDetailsPane")
    };
    _.extend(BoxesDetailsView.prototype, {
        getEl: function () {
            return this._el
        },
        getElement: function () {
            return this._el
        },
        setModel: function (model) {
            var self = this;
            self._model = model;
            self._refresh()
        },
        hide: function () {
            var self = this;
            self._el.hide()
        },
        _refresh: function () {
            var self = this;
            self._el.show();
            var boxNameEl = self._el.find(".streak__boxname");
            self._el.empty();
            var details = self._displayBox(self._model);
            self._el.append(details)
        },
        addDelegate: function (delegate) {
            var self = this;
            self._delegates.push(delegate)
        },
        _displayBox: function (box) {
            var self = this;
            var pipeline = box.getPipeline();
            var details = $(self._templates.boxDetails());
            details.find(".boxName").text(box.get("name"));
            details.find(".pipelineName").text(BB.Locale.getString("in") +
                " " + pipeline.displayName());
            if (box.get("notes")) {
                details.find(".boxNotes").show();
                details.find(".boxNotes").plainText(box.get("notes"))
            } else details.find(".boxNotes").hide();
            var text = "<b>" + BB.Locale.getString("stage") + ":</b>" + box.getStageName();
            for (var i = 0; i < pipeline.getFields().length; i++) {
                var val = BB.UI.getFieldIndexText(box, pipeline, i);
                if (val) {
                    if (text.length > 0) text += "<br />";
                    text += "<b>" + pipeline.getFields()[i].displayName() + ":</b>" + val
                }
            }
            details.find(".boxFieldValues")[0].innerHTML = text;
            return details
        },
        fdsfsd8fff: null
    });
    BB.Widgets.BoxesDetailsView = BoxesDetailsView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    BB.Widgets.SidebarAssignedTo = {
        templates: {},
        defaults: {
            imgHeight: 25,
            imgWidth: 25,
            numPerRow: -1,
            border: "never",
            model: null,
            delayedBind: false,
            bindTab: false
        },
        init: function (cb) {
            this.templates.wrapper = HTML.get("peoplePicker");
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.SidebarAssignedTo.impl(o)
        }
    };
    BB.Widgets.SidebarAssignedTo.impl =
        function (options) {
            var newOptions = _.extend(options, {
                model: options.box,
                property: "assignedToSharingEntries",
                existingList: BB.UI.getPropertyValues(options.pipeline, "assignedToSharingEntries"),
                jsonified: false,
                onlyValidEmailAddress: true
            });
            return BB.Widgets.PeoplePicker.create(newOptions)
    };
    Streak.DependencyManager.addFunction({
        functionKey: "widgets.sidebarAssignedTo.initialized",
        functionToCall: BB.Widgets.SidebarAssignedTo.init,
        functionContext: BB.Widgets.SidebarAssignedTo,
        dependentFunctionKeys: ["htmlLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ButtonFactory = function () {};
    _.extend(ButtonFactory.prototype, {
        createButton: function (options) {
            options.buttonType = this._getButtonType(options);
            return BB.Widgets.Buttons.NewButton.create(options)
        },
        createToggleButton: function (options) {
            options.buttonType = this._getButtonType(options);
            return BB.Widgets.Buttons.ToggleButton.create(options)
        },
        createMenuButton: function (options) {
            options.buttonType = this._getButtonType(options);
            var button;
            if (options.isFixedPosition) button = BB.Widgets.Buttons.FixedPositionMenuButton.create(options);
            else button = BB.Widgets.Buttons.MenuButton.create(options);
            return button
        }
    });
    _.extend(ButtonFactory.prototype, {
        _getButtonType: function (options) {
            return new BB.Widgets.Buttons.ButtonTypes[options.type + "ButtonType"](options)
        }
    });
    BB.Widgets.Buttons = {
        ButtonTypes: {}
    };
    DependencyManager.addFunction({
        functionKey: "buttonFactoryInitialized",
        functionToCall: function (callback) {
            BB.Widgets.Buttons.ButtonFactory = new ButtonFactory;
            if (callback) callback()
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var Button = {
        classes: {
            normal: {
                inactive: "T-I-ax7",
                hover: "T-I-JW",
                active: "T-I-Kq"
            },
            blue: {
                inactive: "T-I-atl",
                hover: "T-I-JW",
                active: "T-I-JO"
            },
            red: {
                inactive: "T-I-KE",
                hover: "T-I-JW",
                active: "T-I-JO"
            },
            icon: {
                inactive: "J-Z-I",
                hover: "J-Z-I-JW",
                active: "J-Z-I-KO"
            }
        },
        defaults: {
            button: {
                name: null,
                isRefresh: false,
                isToggle: false,
                enableDepressedState: true,
                onFunc: $.noop,
                offFunc: $.noop,
                color: "normal",
                hasButtonToLeft: false,
                hasButtonToRight: false,
                customButton: null,
                onClass: null,
                hoverClass: null,
                isDropdown: false,
                isOn: false,
                iconClassName: undefined,
                tooltip: undefined,
                tabIndex: 2001
            },
            group: {}
        },
        templates: {
            button: null,
            group: null,
            refresh: null
        },
        init: function (cb) {
            Button.templates.refresh = HTML.get("refreshButton");
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults.button, options);
            return new this.impl(o)
        },
        createGroup: function (options) {
            var o = {};
            _.extend(o, this.defaults.group, options);
            return new this.groupImpl(o)
        }
    };
    Button.impl = function (o) {
        var options = o,
            isOn = options.isOn;
        var el = null;
        var innerEl = null;
        var disabled = false;
        if (options.customButton) el = $(options.customButton);
        else {
            el = $(document.createElement("div"));
            innerEl = $(document.createElement("div"));
            el.append(innerEl);
            if (_.isDefined(options.tooltip)) el.attr("data-tooltip", options.tooltip);
            if (_.isDefined(options.iconClassName)) {
                var iconDiv = $("<div class='bbIcon' ></div>");
                iconDiv.addClass(options.iconClassName);
                el.prepend(iconDiv);
                if (options.name) {
                    iconDiv.attr("style",
                        "vertical-align: middle; padding-top:2px;padding-right: 4px;");
                    innerEl.attr("style", "vertical-align: middle; display: inline-block;")
                } else {
                    iconDiv.attr("style", "vertical-align: middle;");
                    el[0].setAttribute("style", "min-width: 0px; padding-right: 10px; padding-left: 10px")
                }
            }
            el[0].setAttribute("class", "T-I J-J5-Ji ar7 L3 J-Zh-I bbButton");
            el[0].setAttribute("tabindex", options.tabIndex);
            if (options.isRefresh) innerEl[0].innerHTML = Button.templates.refresh();
            else innerEl.append(options.name); if (options.isDropdown) innerEl.append('<div class="downArrow G-asx T-I-J3 J-J5-Ji">&nbsp;</div>')
        }
        var on =
            function (dontCallback, e) {
                if (disabled) return;
                var butName = options.isRefresh ? "refresh" : $.trim(el.text());
                butName = options.overridenTrackingName ? options.overridenTrackingName : butName;
                if (o.isToggle) {
                    if (o.enableDepressedState)
                        if (options.customButton) el.addClass(options.onClass);
                        else el.addClass("J-Zh-I-Jo").addClass("J-Zh-I-Kq").addClass("bbActive").addClass(Button.classes[options.color].active);
                    isOn = true;
                    if (options.enableDepressedState) el.trigger("hold")
                }
                if (!dontCallback) options.onFunc(e)
        }, setOnFunc = function (fxn) {
                options.onFunc =
                    fxn
            }, off = function (dontCallback, e) {
                if (isOn)
                    if (!dontCallback) options.offFunc(e);
                isOn = false;
                el.trigger("unhold");
                if (o.enableDepressedState)
                    if (options.customButton) el.removeClass(options.onClass);
                    else el.removeClass("J-Zh-I-Jo").removeClass("J-Zh-I-Kq").removeClass("bbActive").removeClass(Button.classes[options.color].active)
            };
        if (options.hasButtonToRight) el.addClass("T-I-Js-IF");
        if (options.hasButtonToLeft) el.addClass("T-I-Js-Gs");
        if (options.customButton) {
            if (options.hoverClass) el.easyHoverClass(options.hoverClass)
        } else {
            el.addClass(Button.classes[options.color].inactive);
            el.easyHoverClass(Button.classes[options.color].hover + " J-Zh-I-JW")
        }
        el.click(function (e) {
            if (isOn) off(false, e);
            else on(false, e)
        });
        BB.Keyboard.bindChordToElement(el, "enter/space", function () {
            if (isOn) off();
            else on()
        }, true, true);
        return {
            setOnFunc: setOnFunc,
            el: el,
            innerEl: innerEl,
            on: on,
            off: off,
            getElement: function () {
                return el
            },
            changeIconByClass: function (oldClass, newClass) {
                if (_.isDefined(iconDiv)) {
                    iconDiv.removeClass(oldClass);
                    iconDiv.addClass(newClass)
                }
            },
            toggleRoundLeft: function () {
                var className = "T-I-Js-Gs";
                if (_.isDefined(el) && el.hasClass(className)) el.removeClass(className);
                else if (_.isDefined(el)) el.addClass(className)
            },
            toggleRoundRight: function () {
                var className = "T-I-Js-IF";
                if (_.isDefined(el) && el.hasClass(className)) el.removeClass(className);
                else if (_.isDefined(el)) el.addClass(className)
            },
            disable: function () {
                if (!options.customButton) el.addClass("T-I-JE");
                el.trigger("disabled");
                disabled = true
            },
            enable: function () {
                if (!options.customButton) el.removeClass("T-I-JE");
                el.trigger("enabled");
                disabled = false
            },
            destroy: function () {
                innerEl.remove();
                el.remove()
            }
        }
    };
    Button.groupImpl = function (o) {
        var options = o,
            el = $(document.createElement("div"));
        el[0].setAttribute("class", "VP5otc-HT6HAf J-J5-Ji G-Ni bbButtonGroup");
        return {
            el: el,
            destroy: function () {
                el.remove()
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "widgets.button.initialized",
        functionToCall: Button.init,
        functionContext: Button,
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded"]
    });
    BB.Widgets.Button = Button
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var _defaults = {
        text: "click me",
        clickFunction: $.noop,
        stopPropagation: true,
        preventDefault: true
    };
    var _template = _.template('<span class="streak__linkButton bbButton" tabindex="-1"><%= text %></span>');
    var LinkButton = function (options) {
        this.el = $(_template({
            text: options.text
        }));
        this.el.on("click", function (e) {
            options.clickFunction();
            if (options.preventDefault) e.preventDefault();
            if (options.stopPropagation) e.stopPropagation()
        });
        var self = this;
        BB.Keyboard.bindChordToEl({
            el: this.el,
            chord: "enter/space",
            cb: function () {
                setTimeout(function () {
                    self.el.click()
                }, 150)
            },
            noDefault: true,
            noBubble: true,
            useCapture: true
        });
        this.getElement = function () {
            return this.el
        }
    };
    _.extend(LinkButton.prototype, {
        getElement: function () {
            return this.el
        },
        destroy: function () {
            this.el.remove()
        }
    });
    LinkButton.create = function (options) {
        var o = _.extend({}, _defaults, options);
        return new LinkButton(o)
    };
    BB.Widgets.LinkButton = LinkButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    BaseButtonType = function () {
        this._element = null;
        this._setupElement()
    };
    _.extend(BaseButtonType.prototype, {
        _setupElement: function () {
            throw new Error("_setupElement not defined");
        },
        getElement: function () {
            return this._element
        },
        setText: function (text) {
            this.changeText(text)
        },
        changeText: function (newText) {
            this._element[0].innerHTML =
                newText
        },
        addClass: function (className) {
            this._element.addClass(className)
        },
        removeClass: function (className) {
            this._element.removeClass(className)
        },
        setTooltip: function (tooltip) {
            this._element[0].setAttribute("data-tooltip", tooltip)
        },
        activate: function () {},
        deactivate: function () {},
        setEnabled: function () {},
        setDisabled: function () {},
        destroy: function () {
            this._element.remove()
        }
    });
    BB.Widgets.Buttons.ButtonTypes.BaseButtonType = BaseButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var IconButtonType = function (options) {
        BB.Widgets.Buttons.ButtonTypes.BaseButtonType.call(this);
        this.addClass(options.iconClass)
    };
    IconButtonType.prototype = Object.create(BB.Widgets.Buttons.ButtonTypes.BaseButtonType.prototype);
    _.extend(IconButtonType.prototype, {
        _setupElement: function () {
            this._element = $(document.createElement("div"));
            this._element.addClass("streak__iconButtonType")
        }
    });
    BB.Widgets.Buttons.ButtonTypes.IconButtonType = IconButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailButtonType = function (options) {
        this._innerElement = null;
        this._color = options.color || "default";
        BB.Widgets.Buttons.ButtonTypes.BaseButtonType.call(this);
        this.changeText(options.text);
        if (options.hasButtonToRight) this.addClass("T-I-Js-IF");
        if (options.hasButtonToLeft) this.addClass("T-I-Js-Gs")
    };
    GmailButtonType.prototype =
        Object.create(BB.Widgets.Buttons.ButtonTypes.BaseButtonType.prototype);
    _.extend(GmailButtonType.prototype, {
        classes: {
            "default": {
                INACTIVE_CLASS: "T-I-ax7",
                HOVER_CLASS: "T-I-JW",
                ACTIVE_CLASS: "T-I-Kq"
            },
            blue: {
                INACTIVE_CLASS: "T-I-atl",
                HOVER_CLASS: "T-I-JW",
                ACTIVE_CLASS: "T-I-JO"
            },
            red: {
                INACTIVE_CLASS: "T-I-KE",
                HOVER_CLASS: "T-I-JW",
                ACTIVE_CLASS: "T-I-JO"
            },
            icon: {
                INACTIVE_CLASS: "J-Z-I",
                HOVER_CLASS: "J-Z-I-JW",
                ACTIVE_CLASS: "J-Z-I-KO"
            }
        },
        _setupElement: function () {
            this._element = $(document.createElement("div"));
            this._innerElement =
                $(document.createElement("div"));
            this._element.append(this._innerElement);
            this._element[0].setAttribute("class", "T-I J-J5-Ji ar7 L3 J-Zh-I bbButton " + this.classes[this._color].INACTIVE_CLASS);
            this._setupHoverEvents()
        },
        _setupHoverEvents: function () {
            this._element.easyHoverClass(this.classes[this._color].HOVER_CLASS)
        },
        getElement: function () {
            return this._element
        },
        setText: function (text) {
            this.changeText(text)
        },
        changeText: function (newText) {
            this._innerElement[0].innerHTML = newText
        },
        activate: function () {
            this.addClass(this.classes[this._color].ACTIVE_CLASS +
                " " + this.classes[this._color].HOVER_CLASS)
        },
        deactivate: function () {
            this.removeClass(this.classes[this._color].ACTIVE_CLASS + " " + this.classes[this._color].HOVER_CLASS)
        },
        setEnabled: function () {
            this._element.css("opacity", "")
        },
        setDisabled: function () {
            this._element.css("opacity", 0.55)
        },
        destroy: function () {
            this._innerElement.remove();
            this._element.remove()
        }
    });
    BB.Widgets.Buttons.ButtonTypes.GmailButtonType = GmailButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailIconButtonType = function (options) {
        this._innerElement = null;
        BB.Widgets.Buttons.ButtonTypes.GmailButtonType.call(this, options);
        this.changeIconClass(options.iconClass)
    };
    GmailIconButtonType.prototype = Object.create(BB.Widgets.Buttons.ButtonTypes.GmailButtonType.prototype);
    _.extend(GmailIconButtonType.prototype, {
        _setupElement: function () {
            this._element = $(document.createElement("div"));
            this._element[0].setAttribute("class", "T-I J-J5-Ji ar7 L3 J-Zh-I bbButton G-Ni " + this.classes[this._color].INACTIVE_CLASS);
            this._innerElement = $(document.createElement("div"));
            this._rawIconElement = document.createElement("div");
            this._rawIconElement.innerHTML = "&nbsp;";
            this._element.append(this._innerElement);
            this._innerElement.append(this._rawIconElement);
            this._setupHoverEvents()
        },
        changeText: function () {},
        changeIconClass: function (className) {
            this._rawIconElement.setAttribute("class",
                className)
        }
    });
    BB.Widgets.Buttons.ButtonTypes.GmailIconButtonType = GmailIconButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailArrowButtonType = function (options) {
        this._innerElement = null;
        BB.Widgets.Buttons.ButtonTypes.GmailButtonType.call(this, options);
        this.changeText(options.text)
    };
    GmailArrowButtonType.prototype = Object.create(BB.Widgets.Buttons.ButtonTypes.GmailButtonType.prototype);
    _.extend(GmailArrowButtonType.prototype, {
        _setupElement: function () {
            this._element =
                $(document.createElement("div"));
            this._element[0].setAttribute("class", "T-I J-J5-Ji ar7 L3 J-Zh-I bbButton streak__GmailArrowButtonType G-Ni " + this.classes[this._color].INACTIVE_CLASS);
            this._innerElement = $(document.createElement("div"));
            this._innerElement[0].innerHTML = '<div class="downArrow G-asx T-I-J3 - J-J5-Ji">&nbsp;</div>';
            this._element.append(this._innerElement);
            this._rawTextElement = document.createElement("span");
            this._rawTextElement.setAttribute("class", "Ykrj7b");
            this._innerElement.prepend(this._rawTextElement);
            this._setupHoverEvents()
        },
        changeText: function (text) {
            this._rawTextElement.innerHTML = text
        }
    });
    BB.Widgets.Buttons.ButtonTypes.GmailArrowButtonType = GmailArrowButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailIconArrowButtonType = function (options) {
        this._innerElement = null;
        BB.Widgets.Buttons.ButtonTypes.GmailButtonType.call(this, options);
        this.changeIconClass(options.iconClass);
        this.changeText(options.text)
    };
    GmailIconArrowButtonType.prototype = Object.create(BB.Widgets.Buttons.ButtonTypes.GmailButtonType.prototype);
    _.extend(GmailIconArrowButtonType.prototype, {
        _setupElement: function () {
            this._element = $(document.createElement("div"));
            this._element[0].setAttribute("class", "T-I J-J5-Ji ar7 L3 J-Zh-I bbButton streak__gmailIconArrowButtonType G-Ni " + this.classes[this._color].INACTIVE_CLASS);
            this._innerElement = $(document.createElement("div"));
            this._innerElement[0].innerHTML = '<div class="downArrow G-asx T-I-J3 - J-J5-Ji">&nbsp;</div>';
            this._element.append(this._innerElement);
            this._rawIconElement = document.createElement("span");
            this._rawTextElement = document.createElement("span");
            this._rawTextElement.setAttribute("class", "Ykrj7b");
            this._innerElement.prepend(this._rawTextElement);
            this._innerElement.prepend(this._rawIconElement);
            this._setupHoverEvents()
        },
        changeText: function (text) {
            this._rawTextElement.innerHTML = text
        },
        changeIconClass: function (className) {
            this._rawIconElement.setAttribute("class", className)
        }
    });
    BB.Widgets.Buttons.ButtonTypes.GmailIconArrowButtonType = GmailIconArrowButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    TextButtonType = function (options) {
        BB.Widgets.Buttons.ButtonTypes.BaseButtonType.call(this);
        this.changeText(options.text);
        this.setColor(options.color)
    };
    TextButtonType.prototype = Object.create(BB.Widgets.Buttons.ButtonTypes.BaseButtonType.prototype);
    _.extend(TextButtonType.prototype, {
        classes: {
            "blue": "streak__textButton_blue",
            cornflowerblue: "streak__textButton_cornflowerBlue",
            lightblue: "streak__textButton_lightBlue"
        },
        _setupElement: function () {
            this._element = $(document.createElement("span"));
            this._element.addClass("streak__textButton");
            this._element.css({
                "text-decoration": "underline",
                "cursor": "pointer"
            })
        },
        setColor: function (color) {
            if (!color) return;
            this._element.addClass(this.classes[color])
        }
    });
    BB.Widgets.Buttons.ButtonTypes.TextButtonType = TextButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    XButtonType = function (options) {
        BB.Widgets.Buttons.ButtonTypes.BaseButtonType.call(this)
    };
    XButtonType.prototype = Object.create(BB.Widgets.Buttons.ButtonTypes.BaseButtonType.prototype);
    _.extend(XButtonType.prototype, {
        _setupElement: function () {
            this._element = $(document.createElement("span"));
            this._element.addClass("Kj-JD-K7-Jq");
            this._element.addClass("streak__littleX")
        }
    });
    BB.Widgets.Buttons.ButtonTypes.XButtonType = XButtonType
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var ButtonMenu = {
        templates: {},
        defaults: {
            css: {
                left: "0px",
                width: "auto"
            },
            buttonCss: {},
            buttonInner: "",
            showButtonArrow: true,
            menuInner: "",
            onFunc: $.noop,
            postOnFunc: $.noop,
            offFunc: $.noop,
            postOffFunc: $.noop,
            color: "normal",
            closeOnSelect: true,
            customButton: null,
            onClass: null,
            hoverClass: null,
            justMenu: false,
            dynamicPosition: false,
            fixedPosition: false,
            rightAligned: false,
            bottomAligned: false,
            menu: null,
            isLast: false,
            identityClass: null,
            attachTo: null
        },
        init: function (cb) {
            this.templates.menu = HTML.get("buttonMenuMenu");
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    ButtonMenu.impl = function (o) {
        var options = o,
            group = BB.Widgets.Button.createGroup(),
            menu = options.menu || $(ButtonMenu.templates.menu({
                inner: options.menuInner
            })),
            justMenu = options.justMenu,
            visible = false,
            menuOff = null,
            menuOn = null;
        if (options.trackingContext) options.trackingContext.widgetContext = "/buttonMenu";
        group.el.addClass(options.identityClass);
        var on = function (e) {
            visible = true;
            if (!options.onFunc(e)) {
                menu.show();
                if (options.dynamicPosition);
                else if (options.fixedPosition) menu.css({
                    position: "fixed",
                    left: "auto"
                });
                else if (options.isLast) menu.css({
                    left: -1 * menu.width()
                });
                if (options.bottomAligned)
                    if (options.fixedPosition) menu.css("bottom", Gmail.elements.body[0].clientHeight - buttonEl.offset().top + "px");
                    else menu.css("bottom", button.el.outerHeight() + "px");
                    else if (options.fixedPosition) menu.css("top", buttonEl.offset().top +
                    buttonEl.outerHeight() + "px");
                if (options.rightAligned) {
                    var anchorEl = options.justMenu ? button : button.el;
                    var left;
                    if (options.dynamicPosition) left = anchorEl.position().left;
                    else if (options.fixedPosition) left = anchorEl.offset().left;
                    menu.css({
                        left: left + (anchorEl.outerWidth() - menu.outerWidth())
                    });
                    menu.css({
                        minWidth: menu.width()
                    })
                }
                if (options.fixedPosition) menu.containByScreen(buttonEl);
                if (options.postOnFunc) options.postOnFunc(e);
                if (e) e.stopPropagation();
                menu.bodyCloseAndStop({
                    closeFunction: function () {
                        if (visible && !justMenu) button.off();
                        else if (visible && justMenu) off()
                    },
                    body: Gmail.elements.body,
                    stop: justMenu ? button[0] : group.el[0]
                })
            }
        }, off = function (e) {
                visible = false;
                options.offFunc(e);
                menu.hide();
                if (options.postOffFunc) options.postOffFunc(e);
                if (e) e.stopPropagation();
                menu.unbindBodyCloseAndStop()
            }, isOn = function () {
                return visible
            }, button = null,
            buttonEl = null;
        if (justMenu) {
            menuOff = off;
            menuOn = on;
            button = options.customButton;
            button.click(function (e) {
                if (visible) off();
                else on()
            });
            buttonEl = button
        } else {
            button = BB.Widgets.Button.create({
                name: options.buttonInner,
                isToggle: true,
                onFunc: function (e) {
                    on(e)
                },
                offFunc: function (e) {
                    off(e)
                },
                color: options.color,
                hasButtonToLeft: options.hasButtonToLeft,
                hasButtonToRight: options.hasButtonToRight,
                customButton: options.customButton,
                onClass: options.onClass,
                hoverClass: options.hoverClass,
                isDropdown: options.showButtonArrow
            });
            buttonEl = button.el;
            button.el.css(options.buttonCss);
            group.el.append(button.el);
            if (options.attachTo) options.attachTo.append(menu);
            else group.el.append(menu)
        }
        menu.hide();
        menu.css(options.css);
        menu.click(function (e) {
            if (options.closeOnSelect) button.off();
            e.stopPropagation()
        });
        return {
            el: group.el,
            group: group,
            button: button,
            menu: menu,
            on: menuOn || button.on,
            off: menuOff || button.off,
            isOn: isOn,
            getElement: function () {
                return group.el
            },
            getButtonElement: function () {
                return buttonEl
            },
            updateOptions: function (newOptions) {
                _.extend(options, newOptions)
            },
            destroy: function () {
                if (_.isFunction(button.destroy)) button.destroy();
                menu.remove();
                group.destroy()
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "widgets.buttonMenu.initialized",
        functionToCall: ButtonMenu.init,
        functionContext: ButtonMenu,
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded"]
    });
    BB.Widgets.ButtonMenu = ButtonMenu
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var defaults = {
        buttonType: null,
        onFunction: $.noop
    };
    var NewButton = function (inOptions) {
        var options = _.extend({}, defaults, inOptions);
        BB.Widgets.Widget.call(this, options);
        this._isDisabled = false;
        this._buttonType = options.buttonType;
        this._setupEventBindings()
    };
    NewButton.prototype = Object.create(BB.Widgets.Widget.prototype);
    _.extend(NewButton.prototype, {
        on: function () {
            if (this._isDisabled) {
                this.getElement().simulateHover();
                return
            }
            if (this.options.onFunction) this.options.onFunction()
        },
        enable: function () {
            if (!this._isDisabled) return;
            this._isDisabled = false;
            this._buttonType.setEnabled()
        },
        disable: function () {
            if (this._isDisabled) return;
            this._isDisabled = true;
            this._buttonType.setDisabled()
        },
        setText: function (text) {
            this.changeText(text)
        },
        changeText: function (text) {
            this._buttonType.changeText(text)
        },
        addClass: function (className) {
            this._buttonType.addClass(className)
        },
        removeClass: function (className) {
            this._buttonType.removeClass(className)
        },
        setTooltip: function (tooltip) {
            this._buttonType.setTooltip(tooltip)
        },
        destroy: function () {
            this._buttonType.destroy()
        },
        getElement: function () {
            return this._buttonType.getElement()
        },
        _setupEventBindings: function () {
            var self = this;
            this.getElement()[0].addEventListener("click", function (e) {
                self._buttonClicked();
                e.preventDefault();
                e.stopImmediatePropagation()
            }, true);
            BB.Keyboard.bindChordToEl({
                el: this.getElement(),
                chord: "enter/space",
                cb: function () {
                    setTimeout(function () {
                        self._buttonClicked()
                    }, 150)
                },
                noDefault: true,
                noBubble: true,
                useCapture: true
            })
        },
        _buttonClicked: function () {
            this.on()
        }
    });
    NewButton.create = function (inOptions) {
        return new NewButton(inOptions)
    };
    NewButton.classes = {
        normal: {
            inactive: "T-I-ax7",
            hover: "T-I-JW",
            active: "T-I-Kq"
        },
        blue: {
            inactive: "T-I-atl",
            hover: "T-I-JW",
            active: "T-I-JO"
        },
        red: {
            inactive: "T-I-KE",
            hover: "T-I-JW",
            active: "T-I-JO"
        },
        icon: {
            inactive: "J-Z-I",
            hover: "J-Z-I-JW",
            active: "J-Z-I-KO"
        }
    };
    BB.Widgets.Buttons.NewButton = NewButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var defaults = {
        holdOnState: true
    };
    var ToggleButton = function (inOptions) {
        var options = _.extend({}, defaults, inOptions);
        BB.Widgets.Buttons.NewButton.call(this, options);
        this._isOn = false
    };
    ToggleButton.prototype = Object.create(BB.Widgets.Buttons.NewButton.prototype);
    _.extend(ToggleButton.prototype, {
        on: function () {
            if (this._isDisabled) {
                this.getElement().simulateHover();
                return
            }
            this._isOn = true;
            BB.Widgets.Buttons.NewButton.prototype.on.call(this);
            this._buttonType.activate()
        },
        off: function () {
            if (this._isDisabled) {
                this.getElement().simulateHover();
                return
            }
            this._isOn = false;
            this._buttonType.deactivate();
            if (this.options.offFunction) this.options.offFunction()
        },
        _buttonClicked: function () {
            if (this._isOn) this.off();
            else this.on()
        }
    });
    ToggleButton.create = function (inOptions) {
        return new ToggleButton(inOptions)
    };
    BB.Widgets.Buttons.ToggleButton = ToggleButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var defaults = {
        menu: null,
        preOnFunction: null,
        postOnFunction: null,
        preOffFunction: null,
        postOffFunction: null,
        doesEscapeCloseMenu: true
    };
    var MenuButton = function (inOptions) {
        if (!inOptions.menu) throw new Error("need a menu widget");
        var options = _.extend({}, defaults, inOptions);
        BB.Widgets.Buttons.ToggleButton.call(this, options);
        this._escapeUnbinder
    };
    MenuButton.prototype = Object.create(BB.Widgets.Buttons.ToggleButton.prototype);
    _.extend(MenuButton.prototype, {
        on: function () {
            if (this._isDisabled) {
                this.getElement().simulateHover();
                return
            }
            if (this.options.preOnFunction)
                if (this.options.preOnFunction()) return;
            BB.Widgets.Buttons.ToggleButton.prototype.on.call(this);
            this._showMenu();
            if (this.options.postOnFunction) this.options.postOnFunction();
            this._registerGlobalClickBinding()
        },
        _showMenu: function () {
            this._buttonType.getElement().after(this.options.menu.getElement());
            this.options.menu.getElement().show();
            this.options.menu.getElement().css({
                position: "",
                top: "",
                bottom: "",
                left: "",
                right: ""
            })
        },
        off: function () {
            if (this._isDisabled) {
                this.getElement().simulateHover();
                return
            }
            if (this.options.preOffFunction)
                if (this.off.preOffFunction()) return true;
            BB.Widgets.Buttons.ToggleButton.prototype.off.call(this);
            this.options.menu.getElement().detach();
            if (this.options.postOffFunction) this.options.postOffFunction();
            this._unregisterGlobalClickBinding()
        },
        _registerGlobalClickBinding: function () {
            var self =
                this;
            this.options.menu.getElement().bodyCloseAndStop({
                closeFunction: function () {
                    self.off()
                },
                body: Gmail.elements.body,
                stop: this._buttonType.getElement()
            });
            if (this.options.doesEscapeCloseMenu) this._escapeUnbinder = BB.Keyboard.bindChordToEl({
                el: this.options.menu.getElement(),
                chord: "escape",
                noBubble: true,
                noDefault: true,
                cb: function () {
                    self.off()
                }
            })
        },
        _unregisterGlobalClickBinding: function () {
            this.options.menu.getElement().unbindBodyCloseAndStop();
            if (this.options.doesEscapeCloseMenu && this._escapeUnbinder) this._escapeUnbinder()
        },
        destroy: function () {
            if (this._isOn) this.off();
            BB.Widgets.Buttons.ToggleButton.prototype.destroy.call(this)
        }
    });
    MenuButton.create = function (inOptions) {
        if (!inOptions.menu) throw new Error("need a menu widget");
        return new MenuButton(inOptions)
    };
    BB.Widgets.Buttons.MenuButton = MenuButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var defaults = {
        isBottomAligned: false,
        isRightAligned: false
    };
    var FixedPositionMenuButton = function (inOptions) {
        if (!inOptions.menu) throw new Error("need a menu widget");
        var options = _.extend({}, defaults, inOptions);
        BB.Widgets.Buttons.MenuButton.call(this, options)
    };
    FixedPositionMenuButton.prototype = Object.create(BB.Widgets.Buttons.MenuButton.prototype);
    _.extend(FixedPositionMenuButton.prototype, {
        _showMenu: function () {
            var menuElement = this.options.menu.getElement();
            var element = this._buttonType.getElement();
            Gmail.elements.body.append(menuElement);
            menuElement[0].style.position = "fixed";
            menuElement.containByScreen(element, this.options)
        }
    });
    FixedPositionMenuButton.create = function (options) {
        return new FixedPositionMenuButton(options)
    };
    BB.Widgets.Buttons.FixedPositionMenuButton = FixedPositionMenuButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        HOVER_CLASS: "aco",
        FOCUS_CLASS: "acm"
    };
    BB.Widgets.Calendar = {
        dateFormat: "{Month} {ord}, {year} {h}:{mm}{tt}",
        template: '<input type="text" />',
        defaults: {
            model: null,
            fieldIndex: -1,
            property: null,
            parent: null,
            border: "always",
            delayedBind: false,
            autoSave: true,
            includeTime: false
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.Calendar.impl(o)
        }
    };
    BB.Widgets.Calendar.impl =
        function (options) {
            var outerEl = $("<div><input /></div>"),
                el = outerEl.find("input"),
                datetime = null,
                date = null,
                dateText = null,
                bound = false,
                currentValue = null,
                setTab = function (prev, next) {
                    el.easyTab({
                        prev: prev,
                        next: next
                    })
                }, getValue = function () {
                    return options.model.get(options.property) || ""
                }, setValue = function () {
                    if (el.val().length > 0) {
                        var d = Date.ccreate(el.val());
                        if (d.isValid()) updateValue(d.getTime());
                        else clear()
                    } else updateValue("")
                }, updateValue = function (date) {
                    date = date + "";
                    if (currentValue !== date) {
                        options.model.set(options.property,
                            date);
                        currentValue = date;
                        if (options.autoSave) options.model.save(function () {
                            BB.Tracker.trackStreakActive(_.extend({
                                property: options.property,
                                widget: "calendar"
                            }, options.trackingContext))
                        })
                    }
                }, updateDisplay = function () {
                    var datetime = getValue();
                    var date = datetime ? Date.create(datetime) : null;
                    var dateText = datetime ? date.prettyDate(true) : "";
                    if (options.includeTime && datetime) dateText = date.format(BB.Widgets.Calendar.dateFormat);
                    el.val(dateText);
                    el.data("time", date ? date.getTime() : null);
                    if (options.border === "hover")
                        if (date) {
                            outerEl.removeClass(CONSTANTS.HOVER_CLASS);
                            outerEl.trigger("unhold")
                        } else {
                            outerEl.trigger("hold");
                            outerEl.addClass(CONSTANTS.HOVER_CLASS)
                        }
                }, clear = function () {
                    el.val("");
                    updateValue("")
                }, focus = function () {
                    currentValue = getValue();
                    arrowMode = false;
                    el.focus()
                }, set = function (val) {
                    el.val(val);
                    focus();
                    arrowMode = true
                }, bind = function () {
                    if (!bound) {
                        el.will_pickdate({
                            animationDuration: 100,
                            body: Gmail.elements.body,
                            appendTo: outerEl,
                            allowEmpty: true,
                            timePicker: options.includeTime,
                            useFixedPosition: true,
                            onSelect: function (aDate) {
                                el.trigger("escapePressed")
                            },
                            onClose: function (isEnter) {
                                setValue();
                                if (isEnter) el.trigger("enterPressed");
                                if (el.is(":focus")) el.blur();
                                el.removeClass("active");
                                if (options.border === "hover") outerEl.removeClass(CONSTANTS.FOCUS_CLASS)
                            },
                            onClear: function () {
                                updateValue("")
                            }
                        });
                        BB.Keyboard.bindChordToElement(el, "escape", function (e) {
                            var date = currentValue ? Date.create(currentValue) : null;
                            var dateText = currentValue ? date.prettyDate(true) : "";
                            if (options.includeTime)
                                if (currentValue) dateText = date.format(BB.Widgets.Calendar.dateFormat);
                            el.val(dateText);
                            el.data("time", date ? date.getTime() :
                                null)
                        });
                        BB.Keyboard.bindChordToElement(el, "tab", function (e) {
                            el.trigger("tabPressed");
                            el.trigger("onblur")
                        });
                        BB.Keyboard.bindChordToElement(el, "shift+tab", function (e) {
                            el.trigger("shitTabPressed");
                            el.trigger("onblur")
                        });
                        BB.Keyboard.bindChordToElement(el, "up", function (e) {
                            if (arrowMode) {
                                el.trigger("upPressed");
                                el.trigger("onblur")
                            }
                        });
                        BB.Keyboard.bindChordToElement(el, "down", function (e) {
                            if (arrowMode) {
                                el.trigger("downPressed");
                                el.trigger("onblur")
                            }
                        });
                        BB.Keyboard.bindChordToElement(el, "right", function (e) {
                            if (el.caret().start ===
                                el.val().length) {
                                e.preventDefault();
                                e.stopPropagation()
                            }
                            if (arrowMode)
                                if (el.caret().start === el.val().length) {
                                    el.trigger("rightPressed");
                                    el.trigger("onblur")
                                }
                        });
                        BB.Keyboard.bindChordToElement(el, "left", function (e) {
                            if (el.caret().start === 0) {
                                e.preventDefault();
                                e.stopPropagation()
                            }
                            if (arrowMode)
                                if (el.caret().start === 0) {
                                    el.trigger("leftPressed");
                                    el.trigger("onblur")
                                }
                        });
                        bound = true;
                        el.addClass("bbBound")
                    }
                }, arrowMode = false;
            el[0].setAttribute("type", "text");
            el[0].setAttribute("class", "smartInput calendar");
            el[0].setAttribute("tabindex",
                "-1");
            el[0].style.position = "relative";
            if (options.border === "hover") el.addClass("R5");
            var focusing = false;
            el.focus(function (e) {
                if (focusing) {
                    bind();
                    currentValue = getValue();
                    el.addClass("active");
                    el.trigger("onfocus");
                    focusing = false;
                    if (options.border === "hover") outerEl.addClass(CONSTANTS.FOCUS_CLASS)
                } else {
                    focusing = true;
                    setTimeout(function () {
                        el.focus()
                    }, 1)
                }
            });
            outerEl.focus(function (e) {
                focus()
            });
            switch (options.border) {
            case "never":
                el.addClass("calendarNoborder");
                break;
            case "hover":
                outerEl.easyHoverClass(CONSTANTS.HOVER_CLASS,
                    null, true);
                break;
            case "always":
                el.addClass("calendarBorder");
                break
            }
            var uniq = "calendarUpdateDisplay" + (new Date).getTime();
            options.model.bind("set", options.property, updateDisplay, uniq);
            updateDisplay();
            el.bind("unbind", function () {
                options.model.unbind("set", options.property, uniq)
            });
            return {
                el: outerEl,
                setTab: setTab,
                clear: clear,
                focus: focus,
                set: set,
                getElement: function () {
                    return outerEl
                },
                destroy: function () {
                    options.model.unbind("set", options.property, uniq);
                    outerEl.find("*").unbind();
                    outerEl.empty();
                    outerEl.remove()
                }
            }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    CollapseSection = {
        templates: {},
        defaults: {
            title: "Section",
            bodyEl: null,
            startOpen: true,
            openFunc: $.noop,
            closeFunc: $.noop,
            localToggleStateKey: null,
            titleClick: true
        },
        init: function (cb) {
            this.templates.main = HTML.get("collapseSection");
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.CollapseSection.impl(o)
        }
    };
    CollapseSection.impl =
        function (options) {
            var title = options.title,
                bodyEl = options.bodyEl,
                localToggleStateKey = options.localToggleStateKey,
                isOpen = (localToggleStateKey && _.isReal(BB.LocalSettings.get(localToggleStateKey)) ? BB.LocalSettings.get(localToggleStateKey) : options.startOpen) || false,
                el = $(document.createElement("div")),
                updateDisplay = function () {
                    el.toggleClass("open", isOpen);
                    if (isOpen) el.find(".bbIndicator").removeClass("Wo").addClass("Wq");
                    else el.find(".bbIndicator").removeClass("Wq").addClass("Wo")
                }, toggle = function (forceState) {
                    if (_.isReal(forceState)) isOpen =
                        forceState;
                    else isOpen = !isOpen;
                    updateDisplay();
                    if (localToggleStateKey) BB.LocalSettings.set(localToggleStateKey, isOpen);
                    if (isOpen) options.openFunc();
                    else options.closeFunc()
                }, updateTitle = function (ptitle) {
                    title = ptitle;
                    el.find(".titleSection .title").text(title)
                }, addToRightOfTitle = function (element) {
                    el.find(".streak__titleRight").remove();
                    var wrapper = $(document.createElement("div"));
                    wrapper.addClass("streak__titleRight");
                    wrapper.append(element);
                    el.find(".titleSection").append(wrapper)
                };
            el.addClass("collapseSection");
            el[0].innerHTML = CollapseSection.templates.main();
            var titleSection = el.find(".titleSection");
            var bodySection = el.find(".bodySection");
            bodySection.append(bodyEl);
            var events = "bbCursorClick";
            if (options.titleClick) events += " click";
            el.find(".titleSection").on(events, function (e) {
                toggle()
            });
            updateDisplay();
            updateTitle(title);
            return {
                el: el,
                titleSection: titleSection,
                bodySection: bodySection,
                toggle: toggle,
                updateTitle: updateTitle,
                addToRightOfTitle: addToRightOfTitle,
                isOpen: function () {
                    return isOpen
                },
                destroy: function () {
                    el.remove()
                }
            }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "widgets.collapseSection.initialized",
        functionToCall: CollapseSection.init,
        functionContext: CollapseSection,
        dependentFunctionKeys: ["htmlLoaded"]
    });
    BB.Widgets.CollapseSection = CollapseSection
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var ColorPicker = {
        templates: {},
        defaults: {
            label: "Pick a color",
            previewText: "preview",
            color: {
                backgroundColor: null,
                textColor: null
            },
            colorChosenFunc: function (color) {},
            showRemove: false,
            removeColorFunc: function () {}
        },
        init: function (cb) {
            this.templates.container = HTML.get("colorPickerMenuContainer");
            this.templates.menu = HTML.get("colorPickerMenuInner")();
            this.templates.modal =
                HTML.get("colorPickerModal")();
            this.initStaticPicker();
            if (cb) cb()
        },
        initStaticPicker: function () {
            var self = this;
            this.currentOptions = null;
            this.modal = null;
            this.selectedText = null;
            this.selectedBg = null;
            this.elements = {};
            this.elements.innerMenu = $(this.templates.menu);
            this.elements.innerModal = $(this.templates.modal);
            this.elements.modalPreviewEl = this.elements.innerModal.find(".previewTextBox");
            this.elements.modalPreviewTextEl = this.elements.modalPreviewEl.find(".previewText");
            this.elements.innerModal.find(".background").on("click",
                "[role=gridcell]", function (e) {
                    self.selectBackgroundColor($(this))
                });
            this.elements.innerModal.find(".text").on("click", "[role=gridcell]", function (e) {
                self.selectTextColor($(this))
            })
        },
        updateSelected: function () {
            if (this.currentOptions.color.backgroundColor && this.currentOptions.color.textColor) {
                var cells = this.elements.innerMenu.find("[role=gridcell]");
                for (var i = 0; i < cells.length; i++) {
                    var cell = cells[i].children[0];
                    var backgroundColor = cell.style.backgroundColor;
                    var textColor = cell.style.color;
                    if (backgroundColor ===
                        this.currentOptions.color.backgroundColor && textColor === this.currentOptions.color.textColor) {
                        cell.innerHTML = "";
                        $(cells[i]).addClass("JA-Kn-Jr-Kw-Jn-KO")
                    } else {
                        cell.innerHTML = "a";
                        $(cells[i]).removeClass("JA-Kn-Jr-Kw-Jn-KO")
                    }
                }
            }
        },
        openModal: function () {
            var self = this;
            $.modal.close();
            this.modal = BB.Widgets.Modal.create({
                title: BB.Locale.getString("color_add_custom"),
                confirmText: BB.Locale.getString("apply"),
                cancelText: BB.Locale.getString("modal_cancel"),
                inner: this.elements.innerModal,
                persist: true,
                width: "364px",
                confirmFunc: function () {
                    self.currentOptions.colorChosenFunc(self.currentOptions.color);
                    BB.Tracker.trackStreakActive(self.currentOptions.trackingContext, {
                        eventName: "choseColor",
                        type: "modal"
                    })
                }
            });
            this.modal.show();
            this.updateModalPreview()
        },
        updateModalPreview: function () {
            if (this.currentOptions.color.backgroundColor && this.currentOptions.color.textColor) {
                this.elements.modalPreviewEl[0].style.backgroundColor = this.currentOptions.color.backgroundColor;
                this.elements.modalPreviewEl[0].style.borderColor = this.currentOptions.color.backgroundColor;
                this.elements.modalPreviewEl[0].children[0].style.borderColor = this.currentOptions.color.backgroundColor;
                this.elements.modalPreviewTextEl[0].style.color = this.currentOptions.color.textColor
            }
        },
        selectTextColor: function (cell) {
            if (this.selectedText) this.selectedText.removeClass("ajZ-Jn-KO");
            this.selectedText = cell;
            this.selectedText.addClass("ajZ-Jn-KO");
            this.currentOptions.color.textColor = $(this.selectedText[0].children[0]).css("background-color");
            this.updateModalPreview()
        },
        selectBackgroundColor: function (cell) {
            var length,
                testIndex;
            if (this.selectedBg) this.selectedBg.removeClass("ajZ-Jn-KO");
            this.selectedBg = cell;
            this.selectedBg.addClass("ajZ-Jn-KO");
            this.currentOptions.color.backgroundColor = $(this.selectedBg[0].children[0]).css("background-color");
            var group = cell.closest(".ajZ")[0].getAttribute("group");
            if (group === "blackAndWhite") {
                var testBW = this.elements.innerModal.find(".text [group=blackAndWhite] td");
                var index = cell.index();
                length = testBW.length;
                testIndex = 0;
                if (length / 2 > index) testIndex = length - 1;
                this.selectTextColor($(testBW[testIndex]))
            } else if (group ===
                "solidColors") this.selectTextColor($(this.elements.innerModal.find(".text [group=gradients] tr").filter(":last").find("td")[cell.index()]));
            else if (group === "gradients") {
                var rowIndex = cell.closest("tr").index();
                var colIndex = cell.index();
                var rows = this.elements.innerModal.find(".text [group=gradients] tr");
                length = rows.length;
                testIndex = 0;
                if (length / 2 > rowIndex) testIndex = length - 1;
                this.selectTextColor($($(rows[testIndex]).find("td")[colIndex]))
            }
        },
        updateOptions: function (options) {
            this.currentOptions = options;
            this.selectedText = null;
            this.selectedBg = null;
            if (options.showRemove) this.elements.innerMenu.filter(".removeColor").show();
            else this.elements.innerMenu.filter(".removeColor").hide();
            this.elements.innerModal.find(".previewText")[0].innerHTML = options.previewText
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    ColorPicker.impl = function (o) {
        var options = o;
        var el = $(ColorPicker.templates.container({
            label: options.label
        }));
        el.filter(".removeColor").easyHoverClass("J-N-JT");
        el.filter(".removeColor").click(function (e) {
            options.removeColorFunc()
        });
        el.filter(".customColor").easyHoverClass("J-N-JT");
        el.filter(".customColor").click(function (e) {
            ColorPicker.openModal()
        });

        function showMenu() {
            ColorPicker.updateOptions(options);
            ColorPicker.updateSelected();
            el.filter(".colorGrid").append(ColorPicker.elements.innerMenu);
            el.find("[role=grid]").on({
                mouseenter: function () {
                    $(this).addClass("JA-Kn-Jr-Kw-Jn-JW")
                },
                mouseleave: function () {
                    $(this).removeClass("JA-Kn-Jr-Kw-Jn-JW")
                }
            }, "[role=gridcell]");
            el.find("[role=grid]").on("click", "[role=gridcell]", function (e) {
                var cell = $(this).find("div");
                var backgroundColor = cell.css("background-color");
                var textColor = cell.css("color");
                options.color.backgroundColor = backgroundColor;
                options.color.textColor = textColor;
                ColorPicker.updateSelected();
                options.colorChosenFunc(options.color);
                e.stopImmediatePropagation();
                BB.Tracker.trackStreakActive(options.trackingContext, {
                    eventName: "choseColor",
                    type: "grid"
                })
            })
        }
        return {
            el: el,
            showMenu: showMenu,
            updateColor: function (newColor,
                previewText) {
                options.color = newColor;
                options.previewText = previewText
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "widgets.colorPicker.initialized",
        functionToCall: ColorPicker.init,
        functionContext: ColorPicker,
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded"]
    });
    BB.Widgets.ColorPicker = ColorPicker
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    $.fn.ContactAutoSuggest = function (config) {
        var defaults = {
            doneCB: $.noop,
            listChangeFunc: $.noop,
            suggestionTemplate: $.noop,
            list: [],
            el: null,
            immediateDone: false,
            onlyValidEmailAddress: false
        };
        var options = {};
        $.extend(options, defaults, config);
        return this.each(function () {
            var input = $(this);
            input.MultipleAutoSuggest(_.extend({
                data: options.list,
                wrapperCss: {
                    display: "inline-block",
                    verticalAlign: "middle"
                },
                clickStop: options.el,
                clickBody: Gmail.elements.body,
                immediateDone: options.immediateDone,
                noResultsFoundText: BB.Locale.getString("auto_suggest_no_results"),
                doneFunc: options.doneFunc,
                listChangeFunc: options.listChangeFunc,
                existingList: options.existingList,
                onlyValidEmailAddress: options.onlyValidEmailAddress
            }, BB.Widgets.PersonPicker.ContactAutoSuggestFunctions))
        })
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        StateMachine = Streak.StateMachine,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var DrivePickerButton = {
        templates: {},
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    DrivePickerButton.impl = function (o) {
        var options = o;
        var self = this;
        var box = options.box;
        var fileCollection = options._fileCollection;
        var showSelectionDialog = function () {
            var params = "caseKey=" + encodeURIComponent(box.key()) + "&email=" + encodeURIComponent(BB.getUser().get("email")) +
                "&serverURL=" + encodeURIComponent(Streak.server);
            var url = Streak.server + "/drivePicker.jsp#" + params;
            var width = 800;
            var height = 600;
            var top = window.screenY + (window.outerHeight / 2 - height / 2);
            var left = window.screenX + (window.outerWidth / 2 - width / 2);
            var win = window.open(url, "Drive Picker", "height=" + height + ",width=" + width + ",top=" + top + ",left=" + left + ",toolbar=0,resizable=0,menubar=0,location=0,status=0,scrollbars=0");
            var closeChecker = _.repeatEvery(function () {
                if (win && win.closed) {
                    closeChecker.stop();
                    Gmail.showNotice(BB.Locale.getString("loading_drive_files"));
                    fileCollection.refresh(function () {
                        Gmail.hideNotice()
                    })
                }
            }, 500)
        };
        var submitComplete = function (filesChanged) {
            $.modal.close()
        };
        var _readyBound = false;

        function checkAndOpenDrive() {
            if (BB.getUser().get("oauth2Scopes").indexOf("https://www.googleapis.com/auth/drive") === -1) {
                addDriveFile.disable();
                BB.Widgets.Modal.confirm(BB.Locale.getString("streak_reauthorize_title"), BB.Locale.getString("streak_reauthorize_body"), function () {
                    addDriveFile.disable();
                    BB.Modules.TopNav.startOauth();
                    if (!_readyBound) BB.bind("userReady",
                        function () {
                            BB.Data.initOauth2Scopes(function () {
                                checkAndOpenDrive()
                            })
                        })
                }, function () {}, $.noop, BB.Locale.getString("streak_reauthorize_button"))
            } else {
                addDriveFile.enable();
                showSelectionDialog()
            }
        }
        var addDriveFile = BB.Widgets.Button.create({
            color: "blue",
            name: BB.Locale.getString("add_drive_file"),
            onFunc: checkAndOpenDrive
        });
        $(addDriveFile.el).addClass("boxDriveButtons");
        return {
            destroy: function () {
                clearTimeout(self.timeOutId);
                $.modal.close();
                $(self.divHolder).remove();
                $(self.iframe).remove();
                $(addDriveFile.el).remove();
                Gmail.hideNotice()
            },
            el: addDriveFile.el
        }
    };
    BB.Widgets.DrivePickerButton = DrivePickerButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var KeyboardCaptureWidget = function () {
        Streak.ViewControllerBase.call(this);
        this._element = null;
        this._setupUIElement()
    };
    KeyboardCaptureWidget.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(KeyboardCaptureWidget.prototype, {
        _setupUIElement: function () {
            this._element = $(document.createElement("input"));
            this._element[0].setAttribute("type", "text");
            this._element[0].style.height = "0px";
            this._element[0].style.width = "0px";
            this._element[0].style.border = "0";
            this._element[0].style.position = "absolute";
            this._element[0].style.outline = "none";
            this.setupKeyBinding()
        },
        setupKeyBinding: function () {
            var self = this;
            this._element.off("keydown");
            this._element.on("keydown", function (e) {
                e.preventDefault();
                self._callDelegateFunction("keyPressed", e.which)
            })
        },
        getElement: function () {
            return this._element
        },
        focus: function () {
            this._element.focus()
        },
        destroy: function () {
            this._element.remove()
        }
    });
    BB.Widgets.KeyboardCaptureWidget = KeyboardCaptureWidget
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var IconButton = {
        templates: {},
        defaults: {},
        create: function (options) {
            this._init();
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        _init: function () {
            if (!this.templates.button) this.templates.button = HTML.get("iconButton")
        }
    };
    IconButton.impl = function (o) {
        var options = o,
            innerHTML = IconButton.templates.button({
                "iconClass": options["iconClass"]
            });
        options.name = innerHTML;
        options.color = "icon";
        return BB.Widgets.Button.create(options)
    };
    BB.Widgets.IconButton = IconButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var Modal = {
        templates: {},
        defaults: {
            title: null,
            canSubmitFunc: function () {
                return true
            },
            confirmFunc: $.noop,
            cancelFunc: $.noop,
            showCancel: true,
            cancelText: null,
            showConfirm: true,
            confirmText: null,
            width: "400px",
            minHeight: null,
            onClose: $.noop,
            inner: "",
            showTitle: true,
            doneButtonColor: "blue",
            cancelButtonColor: "normal",
            showLink: false,
            linkText: null,
            linkFunc: $.noop,
            persist: false,
            escClose: true,
            close: true
        },
        create: function (options) {
            this._init();
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        _init: function () {
            if (!this.defaults.cancelText) {
                this.defaults.cancelText = BB.Locale.getString("modal_cancel");
                this.defaults.confirmText = BB.Locale.getString("modal_done");
                this.templates.modal = HTML.get("modalModal")
            }
        },
        confirm: function (title, message, cb, cancelFunction, closeFunction, confirmText, noFocus) {
            var modal = Modal.create({
                title: title,
                inner: message,
                confirmFunc: cb,
                cancelFunc: cancelFunction,
                onClose: closeFunction,
                doneButtonColor: "red",
                confirmText: confirmText || BB.Locale.getString("ok"),
                trackingContext: {
                    eventName: "confirmModal"
                }
            });
            modal.show();
            if (noFocus) return modal;
            setTimeout(function () {
                modal.getOkButton().el.focus()
            }, 100);
            return modal
        },
        simpleConfirm: function (title, message) {
            var modal = Modal.create({
                title: title,
                inner: message,
                showCancel: false,
                doneButtonColor: "red",
                confirmText: BB.Locale.getString("ok"),
                trackingContext: {
                    eventName: "confirmModal"
                }
            });
            modal.show()
        },
        confirmDelete: function (item, cb, extraText, cancelFunction) {
            var delTitle = BB.Locale.getString("confirm_delete_title", {
                item: item
            });
            var message = BB.Locale.getString("confirm_delete_message", {
                item: "<strong>" + item + "</strong>"
            });
            if (extraText) message += "<br /><br />" + extraText;
            BB.Widgets.Modal.confirm(delTitle, message, cb, cancelFunction, null, null, true)
        },
        textboxModal: function (options) {
            var title = options.title;
            var subheading = options.subheading;
            var extraText = options.extraText;
            var callback = options.callback;
            var cancelCallback = options.cancelCallback;
            var allowEmpty = options.allowEmpty;
            var placeholderText = options.placeholderText ||
                "";
            var startingText = options.startingText;
            var innerDiv = $(document.createElement("div"));
            innerDiv.addClass("streak__textboxModalInner");
            if (_.isReal(subheading)) {
                var subheadingDiv = $(document.createElement("div"));
                subheadingDiv[0].innerHTML = subheading;
                innerDiv.append(subheadingDiv)
            }
            var input = $('<input type="text" placeholder="' + placeholderText + '">');
            innerDiv.append(input);
            if (_.isReal(extraText)) {
                var extraTextDiv = $(document.createElement("div"));
                extraTextDiv[0].innerHTML = extraText;
                innerDiv.append(extraTextDiv)
            }
            if (_.isReal(startingText)) input.val(startingText);
            var modal = Modal.create({
                title: title,
                inner: innerDiv,
                confirmFunc: function () {
                    if (input.val().trim().length === 0 && !allowEmpty) return true;
                    if (_.isFunction(callback)) callback(input.val().trim())
                },
                cancelFunc: function () {
                    if (_.isFunction(cancelCallback)) cancelCallback()
                },
                showCancel: _.isFunction(cancelCallback)
            });
            modal.show();
            input.on("keydown", function (e) {
                if (Streak.jwerty.is("enter", e)) modal.confirm()
            });
            var tabArray = [input];
            if (modal.getOkButton()) tabArray.push(modal.getOkButton().el);
            if (modal.getCancelButton()) tabArray.push(modal.getCancelButton().el);
            $.tabChain(tabArray);
            setTimeout(function () {
                input.focus()
            }, 100)
        }
    };
    Modal.impl = function (o) {
        var options = o,
            linkButton = null,
            okButton = null,
            cancelButton = null,
            el = null;
        if (options.trackingContext) {
            options.trackingContext.widgetContext += "/modal";
            options.trackingContext.widget = "modal"
        }
        var track = function (eventName) {
            BB.Tracker.trackStreakActive(options.trackingContext, {
                eventName: eventName
            })
        }, checkCanSubmit = function () {
                if (options.canSubmitFunc()) {
                    okButton.enable();
                    return true
                } else {
                    okButton.disable();
                    return false
                }
            },
            create = function () {
                el = $(Modal.templates.modal({
                    title: options.title,
                    confirm: options.confirmText
                }));
                el.find(".inner").append(options.inner);
                if (!options.showTitle) el.find(".title").hide();
                el.width(options.width);
                if (!options.showCancel && !options.showConfirm) el.find(".buttonArea").hide();
                if (options.showLink) {
                    linkButton = BB.Widgets.LinkButton.create({
                        text: options.linkText,
                        clickFunction: function () {
                            options.linkFunc()
                        }
                    });
                    el.find(".buttonArea").append(linkButton.el)
                }
                if (options.showCancel) {
                    cancelButton = BB.Widgets.Button.create({
                        name: options.cancelText,
                        onFunc: function () {
                            track("cancelButtonPressed");
                            options.cancelFunc();
                            Gmail.currentVisibleModal = "";
                            close()
                        },
                        isToggle: false,
                        color: options.cancelButtonColor,
                        trackingContext: _.clone(options.trackingContext)
                    });
                    el.find(".buttonArea").append(cancelButton.el)
                }
                if (options.showConfirm) {
                    okButton = BB.Widgets.Button.create({
                        name: options.confirmText,
                        onFunc: function () {
                            track("confirmButtonPressed");
                            if (options.confirmFunc)
                                if (options.confirmFunc()) return;
                            Gmail.currentVisibleModal = "";
                            close()
                        },
                        isToggle: false,
                        color: options.doneButtonColor,
                        trackingContext: _.clone(options.trackingContext)
                    });
                    el.find(".buttonArea").append(okButton.el);
                    checkCanSubmit()
                }
                if (options.close) el.find(".close").click(function (e) {
                    options.cancelFunc();
                    close()
                });
                else el.find(".close").css("display", "none"); if (options.escClose) BB.Keyboard.bindChordToElement(el, "escape", function () {
                    options.cancelFunc();
                    close()
                });
                el.on("keydown", function (e) {
                    e.stopPropagation()
                });
                if (cancelButton && okButton) {
                    cancelButton.el.easyTab({
                        prev: okButton.el,
                        next: okButton.el
                    });
                    okButton.el.easyTab({
                        prev: cancelButton.el,
                        next: cancelButton.el
                    })
                }
            }, show = function (dontStack) {
                Gmail.currentVisibleModal = options.title;
                if (!el) create();
                el.bbmodal({
                    appendTo: Gmail.elements.body,
                    onClose: function () {
                        Gmail.currentVisibleModal = "";
                        if (options.onClose) options.onClose()
                    },
                    dontStack: dontStack,
                    overlayCss: options.overlayCss
                });
                el.focus()
            };
        var getEl = function () {
            if (!el) create();
            return el
        };
        var close = function () {
            if (el)
                if (el.is(":FastVisible")) $.modal.close()
        };
        return {
            show: show,
            checkCanSubmit: checkCanSubmit,
            confirm: function () {
                okButton.on()
            },
            getEl: getEl,
            getOkButton: function () {
                return okButton
            },
            getCancelButton: function () {
                return cancelButton
            },
            destroy: function () {
                close()
            },
            close: close,
            getType: function () {
                return "MODAL"
            }
        }
    };
    BB.Widgets.Modal = Modal
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var templates = {};
    var pipelineTemplates = [];
    var initialized = false;

    function init(callback) {
        if (!initialized) {
            templates.newPipelineItem = HTML.get("newPipelineItem");
            templates.group = HTML.get("newPipelineListGroup");
            APIRequester.get({
                    msgUrl: "templates"
                }, function (res) {
                    pipelineTemplates = res;
                    if (callback) callback()
                }, function (res, xhr) {
                    if (callback) callback()
                },
                null, 1, true);
            initialized = true
        }
    }
    var NewPipelineModal = function (options) {
        BB.Widgets.Widget.call(this, options);
        this.newModalInner = HTML.get("newPipelineModal", true);
        this.options.inner = this.newModalInner;
        this.options.cancelFunc = this.options.noPipelineChosenCallback;
        this.newModal = BB.Widgets.Modal.create(this.options)
    };
    NewPipelineModal.prototype = Object.create(BB.Widgets.Widget.prototype);
    _.extend(NewPipelineModal.prototype, {
        show: function (options) {
            this.newModal.show();
            this.loadPipelineTemplates();
            if (options) this.setOptions(options);
            this.newModalInner.find(".subHeadingText")[0].innerHTML = this.options.subHeadingText;
            this.newModal.getEl().find("span.title")[0].innerHTML = this.options.title;
            Streak.NotificationCenter.notify("newPipelineModalShowing")
        },
        loadPipelineTemplates: function () {
            this.newModalInner.find(".templateList").empty();
            var self = this;
            var groups = {};
            _.each(pipelineTemplates, function (template) {
                var group = groups[template.categoryType];
                if (!group) group = self.renderGroup(template.categoryType);
                groups[template.categoryType] = group;
                var t = self.renderTemplate(template);
                group.find(".list").append(t)
            });
            this.loaded = true
        },
        renderGroup: function (group) {
            var el = $(templates.group({
                name: group
            }));
            this.newModalInner.find(".templateList").append(el);
            return el
        },
        renderTemplate: function (template) {
            var self = this;
            var el = $(templates.newPipelineItem({
                name: template.templateTitle,
                description: template.shortDescription,
                src: BB.UI.getResourceURL(template.templateImageUrl)
            }));
            el.click(function (e) {
                self.createNewPipeline(template);
                $.modal.close()
            });
            return el
        },
        createNewPipeline: function (template) {
            var self = this;
            Gmail.showNotice(BB.Locale.getString("creating_pipeline"));
            if (self.options.pipelineChosenCallback) self.options.pipelineChosenCallback();
            APIRequester.get({
                msgUrl: "templates/" + template.templateType
            }, function (res) {
                var prePipeline = BB.Data.createPipelineFromTemplate(res, function (pipeline) {
                    if (self.options.pipelineSavedCallback) self.options.pipelineSavedCallback(pipeline);
                    Gmail.hideNotice()
                });
                if (prePipeline && self.options.pipelinePrecreateCallback) self.options.pipelinePrecreateCallback(prePipeline)
            })
        },
        close: function () {
            this.newModal.close()
        },
        defaults: {
            title: "%left_link_make_new%",
            subHeadingText: "",
            cancelText: "%modal_done%",
            noPipelineChosenCallback: $.noop,
            pipelineChosenCallback: $.noop,
            pipelinePrecreateCallback: $.noop,
            pipelineSavedCallback: $.noop,
            showConfirm: false,
            width: "725px",
            maxHeight: "600px",
            minHeight: "600px",
            destroy: function () {
                this.newModal.close();
                this.newModalInner.remove()
            }
        }
    });
    NewPipelineModal.create = function (options) {
        return new NewPipelineModal(options)
    };
    BB.Widgets.NewPipelineModal = NewPipelineModal;
    Streak.DependencyManager.addFunction({
        functionKey: "newPipelineModalInitialized",
        functionToCall: init,
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded", "userLoggedIn"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var NewComposeInspiredModal = {
        templates: {},
        defaults: {
            isSoftCloseEnabled: true,
            topbar_text: "",
            closeCallback: $.noop,
            "startOpen": true,
            minimizeCallback: $.noop
        },
        create: function (options) {
            this._init();
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        _init: function () {
            if (!this.templates.NewComposeInspiredModal) this.templates.NewComposeInspiredModal =
                HTML.get("NewComposeInspiredModal")
        }
    };
    NewComposeInspiredModal.impl = function (o) {
        var options = o;
        var outerHTML = $(NewComposeInspiredModal.templates.NewComposeInspiredModal({
            topbar_text: options.topbar_text
        }));
        var contentArea = outerHTML.find(".streak_NCIModalContent");
        contentArea.append(o.innerHTML);
        var toggle = true;
        var minimizeButton = outerHTML.find(".streak_NCIMinimizeButton");
        if (options.startOpen) {
            contentArea.show();
            outerHTML.removeClass("streak_NCIModalCollapsed")
        } else {
            contentArea.hide();
            outerHTML.addClass("streak_NCIModalCollapsed")
        }
        var minimizeFunction =
            function () {
                options.minimizeCallback();
                if (toggle) {
                    contentArea.hide();
                    outerHTML.addClass("streak_NCIModalCollapsed")
                } else {
                    contentArea.show();
                    outerHTML.removeClass("streak_NCIModalCollapsed")
                }
                toggle = !toggle
        };
        minimizeButton.click(function (e) {
            e.stopPropagation();
            minimizeFunction()
        });
        var topBar = outerHTML.find(".streak_NCIModalTopBar");
        topBar.click(minimizeFunction);
        var closeFunction = function (e) {
            if (options.isSoftCloseEnabled) outerHTML.hide();
            else outerHTML.remove()
        };
        var closeButton = outerHTML.find(".streak_NCICloseButton");
        closeButton.click(function (e) {
            options.closeCallback();
            closeFunction();
            e.stopPropagation()
        });
        return {
            el: outerHTML,
            getElement: function () {
                return outerHTML
            },
            destroy: function () {
                outerHTML.remove();
                options = null
            },
            close: closeFunction
        }
    };
    BB.Widgets.NewComposeInspiredModal = NewComposeInspiredModal
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var templates = {};
    var pipelineTemplates = [];
    var initialized = false;

    function init(callback) {
        if (!initialized) {
            templates.newPipelineItem = HTML.get("newPipelineItem");
            templates.group = HTML.get("newPipelineListGroup");
            APIRequester.get({
                    msgUrl: "templates"
                }, function (res) {
                    pipelineTemplates = res;
                    if (callback) callback()
                }, function (res, xhr) {
                    if (callback) callback()
                },
                null, 1, true);
            initialized = true
        }
    }
    var NewPipelineModal = function (options) {
        BB.Widgets.Widget.call(this, options);
        this.newModalInner = HTML.get("newPipelineModal", true);
        this.options.inner = this.newModalInner;
        this.options.cancelFunc = this.options.noPipelineChosenCallback;
        this.newModal = BB.Widgets.Modal.create(this.options)
    };
    NewPipelineModal.prototype = Object.create(BB.Widgets.Widget.prototype);
    _.extend(NewPipelineModal.prototype, {
        show: function (options) {
            this.newModal.show();
            this.loadPipelineTemplates();
            if (options) this.setOptions(options);
            this.newModalInner.find(".subHeadingText")[0].innerHTML = this.options.subHeadingText;
            this.newModal.getEl().find("span.title")[0].innerHTML = this.options.title;
            Streak.NotificationCenter.notify("newPipelineModalShowing")
        },
        loadPipelineTemplates: function () {
            this.newModalInner.find(".templateList").empty();
            var self = this;
            var groups = {};
            _.each(pipelineTemplates, function (template) {
                var group = groups[template.categoryType];
                if (!group) group = self.renderGroup(template.categoryType);
                groups[template.categoryType] = group;
                var t = self.renderTemplate(template);
                group.find(".list").append(t)
            });
            this.loaded = true
        },
        renderGroup: function (group) {
            var el = $(templates.group({
                name: group
            }));
            this.newModalInner.find(".templateList").append(el);
            return el
        },
        renderTemplate: function (template) {
            var self = this;
            var el = $(templates.newPipelineItem({
                name: template.templateTitle,
                description: template.shortDescription,
                src: BB.UI.getResourceURL(template.templateImageUrl)
            }));
            el.click(function (e) {
                self.createNewPipeline(template);
                $.modal.close()
            });
            return el
        },
        createNewPipeline: function (template) {
            var self = this;
            Gmail.showNotice(BB.Locale.getString("creating_pipeline"));
            if (self.options.pipelineChosenCallback) self.options.pipelineChosenCallback();
            APIRequester.get({
                msgUrl: "templates/" + template.templateType
            }, function (res) {
                var prePipeline = BB.Data.createPipelineFromTemplate(res, function (pipeline) {
                    if (self.options.pipelineSavedCallback) self.options.pipelineSavedCallback(pipeline);
                    Gmail.hideNotice()
                });
                if (prePipeline && self.options.pipelinePrecreateCallback) self.options.pipelinePrecreateCallback(prePipeline)
            })
        },
        close: function () {
            this.newModal.close()
        },
        defaults: {
            title: "%left_link_make_new%",
            subHeadingText: "",
            cancelText: "%modal_done%",
            noPipelineChosenCallback: $.noop,
            pipelineChosenCallback: $.noop,
            pipelinePrecreateCallback: $.noop,
            pipelineSavedCallback: $.noop,
            showConfirm: false,
            width: "725px",
            maxHeight: "600px",
            minHeight: "600px",
            destroy: function () {
                this.newModal.close();
                this.newModalInner.remove()
            }
        }
    });
    NewPipelineModal.create = function (options) {
        return new NewPipelineModal(options)
    };
    BB.Widgets.NewPipelineModal = NewPipelineModal;
    Streak.DependencyManager.addFunction({
        functionKey: "newPipelineModalInitialized",
        functionToCall: init,
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded", "userLoggedIn"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var NewMultiPipelineModal = function (options) {
        BB.Widgets.Widget.call(this, options);
        this.pipelineChoices = [];
        this.newModalInner = HTML.get("newMultiPipelineModal", true);
        this.options.inner = this.newModalInner;
        this.options.confirmFunc = this.pipelinesChosen.bind(this);
        this.newModal = BB.Widgets.Modal.create(this.options);
        this.loaded = false
    };
    NewMultiPipelineModal.prototype =
        Object.create(BB.Widgets.Widget.prototype);
    _.extend(NewMultiPipelineModal.prototype, {
        initializeWidget: function (cb) {
            var self = this;
            if (cb) cb()
        },
        show: function (options) {
            if (!this.loaded) this.loadPipelineTemplates();
            this.newModal.show();
            if (options) this.setOptions(options);
            this.newModalInner.find(".subHeadingText")[0].innerHTML = this.options.subHeadingText;
            this.newModal.getEl().find("span.title")[0].innerHTML = this.options.title
        },
        loadPipelineTemplates: function (cb) {
            var self = this;
            _.each(this.options.pipelineTemplates,
                function (pipelineTemplatePath) {
                    var pipelineTemplate = BB.Models.Pipeline.Templates.get(pipelineTemplatePath);
                    var templateElement = HTML.get("newMultiPipelineModalItem", true);
                    var pipelineCheckbox = Gmail.widgets.getCheckbox(pipelineTemplate.friendlyName);
                    templateElement.append(pipelineCheckbox);
                    self.newModalInner.find(".choice_list").append(templateElement);
                    self.pipelineChoices.push({
                        checkbox: pipelineCheckbox,
                        template: pipelineTemplate
                    })
                })
        },
        pipelinesChosen: function () {
            var self = this;
            var checkedPipelines = [];
            for (var i = 0; i < this.pipelineChoices.length; i++)
                if (this.pipelineChoices[i].checkbox.isChecked()) checkedPipelines.push(this.pipelineChoices[i].template);
            if (checkedPipelines.length === 0) {
                self.options.noPipelineChosenCallback();
                return
            } else {
                if (self.options.pipelineChosenCallback) self.options.pipelineChosenCallback();
                var createdPipelines = [];
                Gmail.showNotice(BB.Locale.getString("saving"));
                var after = _.after(checkedPipelines.length, function () {
                    self.options.pipelineSavedCallback(createdPipelines)
                });
                for (var i =
                    0; i < checkedPipelines.length; i++) {
                    var aTemplate = checkedPipelines[i];
                    var prePipeline = BB.Data.createPipelineFromTemplate(aTemplate, after);
                    createdPipelines.push(prePipeline)
                }
                if (self.options.pipelinePrecreateCallback) self.options.pipelinePrecreateCallback(createdPipelines)
            }
        },
        close: function () {
            this.newModal.close()
        },
        defaults: {
            title: "Choose What Pipelines To Make",
            subHeadingText: "",
            confirmText: "%modal_done%",
            pipelineTemplates: [],
            noPipelineChosenCallback: $.noop,
            pipelineChosenCallback: $.noop,
            pipelineSavedCallback: $.noop,
            pipelinePrecreateCallback: $.noop,
            showCancel: false,
            close: false,
            escClose: false,
            maxHeight: "600px",
            minHeight: "600px"
        }
    });
    NewMultiPipelineModal.create = function (options) {
        return new NewMultiPipelineModal(options)
    };
    BB.Widgets.NewMultiPipelineModal = NewMultiPipelineModal
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    BB.Widgets.PeopleList = {
        template: '<div class="peopleList"></div>',
        defaults: {
            imgHeight: 30,
            imgWidth: 30,
            numPerRow: -1,
            border: "always",
            display: "grid",
            includeNames: false
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.PeopleList.impl(o)
        }
    };
    BB.Widgets.PeopleList.impl = function (o) {
        var el = $(BB.Widgets.PeopleList.template),
            options = o,
            setTab = function (prev, next) {
                el.easyTab({
                    prev: prev,
                    next: next
                })
            }, updateDisplay = function (list) {
                el.empty();
                if (list && list.length > 0) {
                    _.each(list, function (contact) {
                        contact = BB.Contacts.updateContact(contact);
                        var span, div;
                        var name = contact.displayName || contact.fullName || contact.email;
                        var iUrl = contact.imageUrl ? contact.imageUrl : contact.image;
                        iUrl = iUrl ? iUrl : Streak.server + Streak.combinedPath + "images/unknownContact.png";
                        var img = document.createElement("img");
                        img.setAttribute("height", options.imgHeight);
                        img.setAttribute("width", options.imgWidth);
                        img.setAttribute("src",
                            iUrl);
                        img.setAttribute("title", name.escapeHTML());
                        switch (options.display) {
                        case "grid":
                            if (options.includeNames) {
                                div = $(document.createElement("div"));
                                div.addClass("imgItem");
                                var emailString = "";
                                if (contact.email) emailString = 'email="' + contact.email + '"';
                                span = $(document.createElement("span"));
                                span.addClass("people");
                                if (contact.email) span.attr("email", contact.email);
                                span.text(name);
                                div.append(img);
                                div.append(span);
                                el.append(div)
                            } else el.append(img);
                            break;
                        case "list":
                            div = $(document.createElement("div"));
                            div[0].setAttribute("class",
                                "item");
                            span = $(document.createElement("div"));
                            span.text(name);
                            if (contact.email) span.attr("email", contact.email);
                            div.append(img).append(span);
                            el.append(div);
                            break
                        }
                    });
                    el.append('<div style="clear:both;"></div>')
                } else el.html("&nbsp;")
            };
        if (options.numPerRow > -1) el.width(options.imgWidth * options.numPerRow + "px");
        switch (options.border) {
        case "never":
            el.addClass("peopleListNoborder");
            break;
        case "hover":
            break;
        case "always":
            el.addClass("peopleListBorder");
            break
        }
        return {
            el: el,
            setTab: setTab,
            updateDisplay: updateDisplay,
            destroy: function () {
                el.empty();
                el.remove()
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        HOVER_CLASS: "aco",
        FOCUS_CLASS: "acm"
    };
    BB.Widgets.PeoplePicker = {
        templates: {},
        defaults: {
            imgHeight: 25,
            imgWidth: 25,
            numPerRow: -1,
            border: "never",
            model: null,
            delayedBind: false,
            bindTab: false,
            existingList: [],
            jsonified: false,
            parent: null,
            onlyValidEmailAddress: false,
            neverShowRead: false
        },
        create: function (options) {
            this._init();
            var o = {};
            _.extend(o, this.defaults,
                options);
            return new BB.Widgets.PeoplePicker.impl(o)
        },
        _init: function () {
            if (!this.templates.wrapper) this.templates.wrapper = HTML.get("peoplePicker")
        }
    };
    BB.Widgets.PeoplePicker.impl = function (options) {
        var el = null,
            peoplePicker = null,
            input = null,
            bound = false,
            saveValue = null,
            editVisible = false,
            inUse = false,
            peopleList = BB.Widgets.PeopleList.create({
                imgHeight: options.imgHeight,
                imgWidth: options.imgWidth,
                numPerRow: options.numPerRow,
                border: options.hover,
                includeNames: options.includeNames
            }),
            setupElement = function () {
                if (el) el.remove();
                el = $(document.createElement("div"));
                el[0].innerHTML = BB.Widgets.PeoplePicker.templates.wrapper();
                el[0].setAttribute("class", "smartInput peoplePickerWrapper");
                el[0].setAttribute("tabindex", "-1");
                el.append(peopleList.el);
                peoplePicker = el.find(".peoplePicker");
                el.click(function (e) {
                    if (!editVisible) setupWidget();
                    else input.focus()
                });
                el.focus(function () {
                    if (!editVisible) {
                        Gmail.elements.body.trigger("bodyCloseAndStop");
                        setTimeout(function () {
                            setupWidget()
                        }, 10)
                    }
                });
                switch (options.border) {
                case "never":
                    el.addClass("peoplePickerNoborder");
                    break;
                case "hover":
                    peopleList.el.addClass("R5");
                    peoplePicker.addClass("R5");
                    el.easyHoverClass(CONSTANTS.HOVER_CLASS, null, true);
                    break;
                case "always":
                    el.addClass("peoplePickerBorder");
                    break
                }
                if (options && options.model) {
                    options.model.bind("set", options.property, bindUpdate, uniq);
                    updateDisplay(true);
                    showRead();
                    bind(true)
                }
            }, setTab = function (prev, next) {
                el.easyTab({
                    prev: prev,
                    next: next
                })
            }, getValue = function () {
                return options.model.get(options.property)
            }, getParsedValue = function () {
                var list = getValue();
                if (options.jsonified) list =
                    list && list.length > 0 ? JSON.parse(list) : null;
                return list
            }, updateValue = function () {
                var currList = getValue();
                if (!JSON.isEqual(currList, saveValue)) {
                    if (_.isNotReal(saveValue)) saveValue = [];
                    options.model.set(options.property, saveValue);
                    options.model.save(function () {
                        BB.Tracker.trackStreakActive({
                            property: options.property,
                            widget: "peoplePickerInstance"
                        }, options.trackingContext)
                    })
                }
            }, updateDisplay = function (force) {
                if (force || !JSON.isEqual(currentValue, getValue())) {
                    currentValue = getValue();
                    peopleList.updateDisplay(getParsedValue())
                }
            },
            clear = function () {
                updateValue("")
            }, showRead = function () {
                if (options.neverShowRead) return;
                peopleList.updateDisplay(getParsedValue());
                peoplePicker.hide();
                peopleList.el.show();
                el.removeClass("active");
                if (options.border === "hover") {
                    el.removeClass(CONSTANTS.FOCUS_CLASS);
                    if (getParsedValue() && getParsedValue().length > 0) el.trigger("unhold");
                    else el.trigger("hold")
                } else el.trigger("unhold");
                editVisible = false
            }, showEdit = function () {
                input.data("peopleList", getParsedValue());
                input.data("existingList", options.existingList);
                input.trigger("setPeopleList");
                peopleList.el.hide();
                peoplePicker.show();
                if (options.border === "hover") el.addClass(CONSTANTS.FOCUS_CLASS);
                el.addClass("active");
                editVisible = true;
                inUse = true
            }, attachAutoSuggest = function (list) {
                input.ContactAutoSuggest({
                    list: list,
                    el: _.isReal(options.parent) ? options.parent : el,
                    immediateDone: true,
                    listChangeFunc: function (list) {
                        if (options.jsonified) saveValue = list && list.length > 0 ? JSON.stringify(list) : "";
                        else saveValue = list
                    },
                    doneFunc: function (list) {
                        if (!inUse) return;
                        updateValue();
                        showRead()
                    },
                    onlyValidEmailAddress: options.onlyValidEmailAddress,
                    existingList: options.existingList
                })
            }, setupWidget = function () {
                bind();
                showEdit();
                input.val("");
                input.focus();
                input.attr("size", 1);
                input.trigger("bbFocus");
                if (options.border == "hover") el.trigger("hold");
                currentValue = getValue();
                saveValue = currentValue
            }, setup = function (newOptions) {
                options.model = newOptions.model;
                options.property = newOptions.property;
                options.parent = newOptions.parent;
                options.existingList = newOptions.existingList;
                setupElement()
            }, set =
                function (val) {
                    setupWidget();
                    input.val(val);
                    input[0].setArrowMode(true)
            }, focus = function () {
                setupWidget();
                input[0].setArrowMode(false)
            }, bind = function (force) {
                if (!bound || force) {
                    peoplePicker[0].innerHTML = '<div><input type="text" /></div>';
                    input = el.find("input");
                    attachAutoSuggest(getParsedValue());
                    input.keydown(function (e) {
                        if (e.which === 27);
                        else if (e.which === 9);
                        else if (e.which !== 9) e.stopPropagation()
                    });
                    input.bind("escapePressed", function (e) {
                        input.data("peopleList", getParsedValue());
                        input.trigger("setPeopleList");
                        showRead()
                    });
                    input.spreadsheetArrow(["up", "down"]);
                    bound = true;
                    el.addClass("bbBound")
                }
            }, currentValue = null;
        var uniq = "peoplePickerUpdateDisplay" + Date.create().getTime();
        var bindUpdate = function () {
            if (editVisible) return;
            updateDisplay(true)
        };
        setupElement();
        return {
            el: el,
            getElement: function () {
                return el
            },
            setTab: setTab,
            clear: clear,
            focus: focus,
            set: set,
            setup: setup,
            updateValue: updateValue,
            done: function () {
                inUse = false
            },
            destroy: function () {
                options.model.unbind("set", options.property, uniq);
                peopleList.destroy();
                if (input) {
                    input.unbind();
                    input.remove()
                }
                el.empty();
                el.remove()
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    BB.Widgets.PersonPicker = {
        templates: {},
        defaults: {
            selectFunc: $.noop,
            allowEmail: true,
            allowName: true,
            initial: []
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.PersonPicker.impl(o)
        }
    };
    BB.Widgets.PersonPicker.ContactAutoSuggestFunctions = {
        dataFunc: BB.Contacts.queryContacts,
        stringDataFunc: BB.Contacts.convertStringData,
        convertFunc: BB.Contacts.convertResultToLiElement,
        compareFunc: BB.Contacts.compareContactAndQuery
    };
    BB.Widgets.PersonPicker.impl = function (options) {
        var input = $('<input type="text" placeholder="' + BB.Locale.getString("person_picker_input_placeholder") + '"/>'),
            el = $("<div></div>"),
            setTab = function (prev, next) {
                el.easyTab({
                    prev: prev,
                    next: next
                })
            }, setup = function () {
                input.val("");
                input.focus()
            }, excluded = [];
        el.addClass("personPicker");
        el.append(input);
        el.focus(function (e) {
            input.val("");
            input.focus()
        });
        input.AutoSuggest(_.extend({
            noResultsFoundText: BB.Locale.getString("auto_suggest_no_results"),
            loadingResultsText: BB.Locale.getString("auto_suggest_loading_results"),
            selectFunc: function (person) {
                if (person) options.selectFunc(person)
            },
            getExcludedIDsFunc: function () {
                return _.pluck(excluded, "email")
            },
            isRightAligned: false
        }, BB.Widgets.PersonPicker.ContactAutoSuggestFunctions));
        return {
            el: el,
            setTab: setTab,
            focus: setup,
            setExcluded: function (list) {
                excluded = list
            },
            getElement: function () {
                return el
            },
            destroy: function () {
                el.remove()
            },
            selectItem: function () {
                el.find("input").trigger("bbSelect")
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var RadioList = {
        defaults: {
            changeCallback: $.noop
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    RadioList.impl = function (o) {
        var options = o,
            renderedList = [],
            renderedRadios = [],
            list = [],
            el = $(document.createElement("div"));
        el.addClass("streakRadioList");

        function addOption(text, key) {
            var container = $(document.createElement("span"));
            var radio = $('<input type="radio" />');
            container.append(radio);
            container.append(text);
            container.on("click", function (e) {
                setSelected(key);
                if (options.changeCallback) options.changeCallback(key)
            });
            renderedList.push(container);
            renderedRadios.push(radio);
            list.push(key);
            el.append(container)
        }

        function setSelected(key) {
            for (var ii = 0; ii < renderedRadios.length; ii++)
                if (list[ii] === key) renderedRadios[ii][0].checked = true;
                else renderedRadios[ii][0].checked = false
        }
        return {
            el: el,
            addOption: addOption,
            setSelected: setSelected
        }
    };
    BB.Widgets.RadioList = RadioList
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        jwerty = Streak.jwerty,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var CustomDropdown = {
        templates: {},
        defaults: {
            overrideTab: false,
            list: [{
                name: "Default",
                value: "Default"
            }],
            currentIndex: 0,
            maxHeight: 200,
            extraText: null,
            unselectedDisplayText: null,
            fixPosition: false,
            border: null,
            changeFunc: function (newItem) {},
            comparisonFunction: function (listItemValue, potentialSelectedItemValue) {
                return listItemValue === potentialSelectedItemValue
            }
        },
        create: function (options) {
            this._init();
            var o = {};
            _.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        _init: function () {
            if (!this.templates.menu) {
                this.templates.menu = HTML.get("smartDropdownMenu");
                this.templates.item = HTML.get("smartDropdownItem")
            }
        }
    };
    CustomDropdown.impl = function (o) {
        var options = o,
            el = $(document.createElement("div")),
            span = options.span || $(document.createElement("span")),
            extraText = options.extraText || "",
            prefix = options.prefix || "",
            hInput = $(document.createElement("input")),
            menu = $(CustomDropdown.templates.menu()),
            bound = false,
            isActive =
                true,
            current = null,
            updateDisplay = function () {
                span[0].innerHTML = prefix + (current.name || current.display) + extraText
            }, focus = function () {
                if (!isActive) return;
                bind();
                hInput.val("");
                arrowMode = false;
                menu.show();
                if (options.fixPosition) {
                    var elOffset = _.clone(el.offset());
                    elOffset.top += parseFloat(el.height());
                    menu.position({
                        top: 0,
                        left: 0
                    });
                    menu.offset(elOffset)
                } else menu.show()
            }, hide = function () {
                menu.hide()
            }, bind = function () {
                if (!bound) {
                    renderMenu();
                    el.bind("blur", function (e) {
                        menu.hide();
                        el.trigger("menuClosed")
                    });
                    BB.Keyboard.bindChordToElement(el,
                        "[a-z]/shift+[a-z]/backspace", function (e) {
                            clearTimeout(timeout);
                            if (jwerty.is("backspace", e)) hInput.val(hInput.val().first(hInput.val().length - 1));
                            else hInput.val(hInput.val() + String.fromCharCode(e.which));
                            setCursor();
                            timeout = setTimeout(function () {
                                hInput.val("")
                            }, 1E3)
                        }, true, true);
                    BB.Keyboard.bindChordToElement(el, "up/down/home/end", function (e) {
                        hInput.val("")
                    }, true, true);
                    BB.Keyboard.bindChordToElement(el, "escape", function (e) {
                        menu.hide();
                        el.trigger("menuClosed")
                    }, true, true, true);
                    if (options.overrideTab) {
                        BB.Keyboard.bindChordToElement(el,
                            "tab", function (e) {
                                cursor.select();
                                el.trigger("innerTabPressed")
                            }, true, true, true);
                        BB.Keyboard.bindChordToElement(el, "shift+tab", function (e) {
                            cursor.select();
                            el.trigger("innerShiftTabPressed")
                        }, true, true, true)
                    }
                    bound = true;
                    el.addClass("bbBound")
                }
            }, renderMenu = function (list) {
                if (list) {
                    if (list.length > 0)
                        if (current.value !== "__unselected") current = list[0];
                    options.list = list
                }
                menu.find(".bb_menu_inner").empty();
                _.each(options.list, function (item) {
                    if (item === "__separator") {
                        var separator = document.createElement("div");
                        separator.setAttribute("class", "J-Kh");
                        separator.setAttribute("role", "separator");
                        menu.find(".bb_menu_inner").append(separator)
                    } else {
                        var name = item.name || item.display;
                        var itemEl = $(CustomDropdown.templates.item({
                            name: name.escapeHTML()
                        }));
                        itemEl.data("itemValue", item);
                        menu.find(".bb_menu_inner").append(itemEl)
                    }
                });
                cursor.setup(menu.find(".item"), menu.find(".item"));
                cursor.setPosition([options.currentIndex])
            }, setCursor = function () {
                var val = hInput.val().toLowerCase();
                for (var ii = 0; ii < options.list.length; ii++) {
                    var item =
                        options.list[ii];
                    if ((item.name || item.display || "").toLowerCase().startsWith(val)) {
                        cursor.setPosition([ii]);
                        return
                    }
                }
            }, setSelected = function (selectedValue) {
                selectedValue = selectedValue || null;
                current = _.find(options.list, function (item) {
                    if (item === "__separator") return false;
                    if (options.comparisonFunction) return options.comparisonFunction(item.value, selectedValue)
                });
                if (_.isNotReal(current)) {
                    deselect();
                    return
                }
                updateDisplay()
            }, deselect = function () {
                if (_.isReal(options.unselectedDisplayText)) current = {
                    name: options.unselectedDisplayText,
                    value: "__unselected"
                };
                else if (options.list.length > 0) setSelected(options.list[0].value);
                updateDisplay()
            }, cursor = BB.Cursor.create({
                selectedClass: "J-N-JT",
                selectOnClick: true,
                aggressiveInputCapture: true,
                selectFunc: function (itemEl) {
                    current = itemEl.data("itemValue");
                    updateDisplay();
                    options.changeFunc(current);
                    hide();
                    el.trigger("itemSelected")
                },
                highlightOnHover: true,
                rollOver: true,
                input: el
            }),
            arrowMode = false;
        el[0].setAttribute("class", "dropdown smartInput customDropdown");
        span.addClass("input");
        hInput[0].setAttribute("type",
            "text");
        el.append(span);
        if (_.isNotReal(options.span)) {
            el[0].setAttribute("tabindex", "-1");
            el.append('<div class="downArrow G-asx T-I-J3 J-J5-Ji">&nbsp;</div>')
        }
        el.append(menu);
        el.bind("bbCursorSelect", function (e) {
            e.stopPropagation()
        });
        el.bind("focus", function (e) {
            focus()
        });
        if (options.border === "alwaysGmail") el.addClass("R5");
        menu[0].style.maxHeight = options.maxHeight + "px";
        var timeout = null;
        current = options.list[options.currentIndex];
        updateDisplay();
        bind();
        return {
            el: el,
            focus: focus,
            menu: menu,
            setMenuList: renderMenu,
            setSelected: setSelected,
            deselect: deselect,
            getSelected: function () {
                return current
            },
            disable: function () {
                isActive = false
            },
            enable: function () {
                isActive = true
            },
            getElement: function () {
                return el
            },
            destroy: function () {
                el.remove()
            },
            hide: hide
        }
    };
    BB.Widgets.CustomDropdown = CustomDropdown
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var ButtonCustomDropdown = {
        defaults: {
            buttonColor: "normal",
            autoClose: true,
            overrideTab: false,
            list: [{
                name: "Default",
                value: "Default"
            }],
            currentIndex: 0,
            maxHeight: 200,
            changeFunc: function (newItem) {},
            comparisonFunction: function (listItemValue, potentialSelectedItemValue) {
                return listItemValue === potentialSelectedItemValue
            }
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    ButtonCustomDropdown.impl = function (o) {
        var options = o;
        var bodyClosed = false;
        options.trackingContext.widgetContext += "/ButtonCustomDropdown";
        var button;
        button = BB.Widgets.Button.create({
            trackingContext: options.trackingContext,
            color: options.buttonColor,
            isToggle: true,
            onFunc: function (e) {
                customDropdown.focus();
                customDropdown.menu.containByScreen(button.el)
            },
            offFunc: function (e) {
                customDropdown.hide();
                button.el.focus()
            },
            isDropdown: true,
            hasButtonToRight: options.hasButtonToRight,
            hasButtonToLeft: options.hasButtonToLeft
        });
        options.span = button.el;
        options.extraText = '<div class="downArrow G-asx T-I-J3 J-J5-Ji">&nbsp;</div>';
        options.fixPosition = true;
        var customDropdown = BB.Widgets.CustomDropdown.create(options);
        customDropdown.el.bind({
            "menuClosed": function () {
                button.off()
            },
            "itemSelected": function () {
                button.off()
            },
            "innerTabPressed": function () {
                button.off();
                button.el.trigger("tabPressed")
            },
            "innerShiftTabPressed": function () {
                button.off();
                button.el.trigger("shiftTabPressed")
            }
        });
        customDropdown.menu.css("position", "fixed");
        button.el.bodyCloseAndStop({
            closeFunction: function () {
                button.off();
                button.el.blur()
            },
            body: Gmail.elements.body,
            stop: customDropdown.el[0]
        });
        customDropdown.disable = button.disable;
        customDropdown.enable = button.enable;
        customDropdown.el.addClass("TI");
        customDropdown.destroy = function () {
            customDropdown.el.remove();
            button.destroy()
        };
        return customDropdown
    };
    BB.Widgets.ButtonCustomDropdown = ButtonCustomDropdown
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        jwerty = Streak.jwerty,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var SmartDropdown = {
        templates: {},
        defaults: {
            borderOnHover: false,
            property: null,
            fieldIndex: -1,
            model: null,
            list: null,
            autoSave: true,
            delayedBind: false,
            overrideTab: false,
            extraText: null
        },
        create: function (options) {
            this._init();
            var o = {};
            _.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        _init: function () {
            if (!this.templates.menu) {
                this.templates.menu = HTML.get("smartDropdownMenu");
                this.templates.item = HTML.get("smartDropdownItem")
            }
        }
    };
    SmartDropdown.impl = function (o) {
        var options = o,
            el = $(document.createElement("div")),
            span = options.span || $(document.createElement("span")),
            extraText = options.extraText || "",
            hInput = $(document.createElement("input")),
            menu = $(SmartDropdown.templates.menu()),
            bound = false,
            menuRendered = false,
            uniq = "smartDropdown" + (new Date).getTime(),
            getValue = function () {
                if (options.property) return options.model.get(options.property);
                else if (options.fieldKey) return options.model.getField(options.fieldKey)
            },
            getItem = function () {
                var index = options.list.findIndex(function (anItem) {
                    return (anItem.value ? anItem.value : anItem) === getValue()
                });
                return options.list[index]
            }, updateDisplay = function () {
                var index = options.list.findIndex(function (anItem) {
                    return (anItem.value ? anItem.value : anItem) === getValue()
                });
                if (index > -1) {
                    var theItem = options.list[index];
                    if (cursor) cursor.setPosition([index]);
                    span.data("itemValue", theItem);
                    span[0].innerHTML = (theItem.text ? theItem.text : theItem) + extraText
                }
            }, updateValue = function () {
                var newValue = span.data("itemValue");
                if (newValue != currentValue) {
                    var value = newValue.value ? newValue.value : newValue;
                    if (options.property) options.model.set(options.property, value);
                    if (options.autoSave) options.model.save(function () {
                        BB.Tracker.trackStreakActive({
                            property: options.property,
                            widget: "smartDropdown"
                        }, options.trackingContext)
                    });
                    currentValue = newValue
                }
            }, clear = function () {}, focus = function () {
                bind();
                hInput.val("");
                el.focus();
                arrowMode = false
            }, set = function (val) {
                focus();
                hInput.val(val);
                setCursor();
                arrowMode = true
            }, hide = function () {
                menu.hide()
            },
            bind = function () {
                if (!bound) {
                    basicBind();
                    BB.Keyboard.bindChordToElement(el, "[a-z]/shift+[a-z]/backspace", function (e) {
                        clearTimeout(timeout);
                        if (jwerty.is("backspace", e)) hInput.val(hInput.val().first(hInput.val().length - 1));
                        else hInput.val(hInput.val() + String.fromCharCode(e.which));
                        setCursor();
                        timeout = setTimeout(function () {
                            hInput.val("")
                        }, 1E3)
                    }, true, true);
                    BB.Keyboard.bindChordToElement(el, "up/down/home/end", function (e) {
                        hInput.val("")
                    }, true, true);
                    BB.Keyboard.bindChordToElement(el, "right", function (e) {
                        if (arrowMode) {
                            el.trigger("rightPressed");
                            cursor.select()
                        }
                    });
                    BB.Keyboard.bindChordToElement(el, "left", function (e) {
                        if (arrowMode) {
                            el.trigger("leftPressed");
                            cursor.select()
                        }
                    });
                    BB.Keyboard.bindChordToElement(el, "escape", function (e) {
                        menu.hide();
                        el.trigger("menuClosed")
                    }, true, true, true);
                    if (options.overrideTab) {
                        BB.Keyboard.bindChordToElement(el, "tab", function (e) {
                            setTimeout(function () {
                                el.trigger("innerTabPressed")
                            }, 10)
                        }, true, true, true);
                        BB.Keyboard.bindChordToElement(el, "shift+tab", function (e) {
                            setTimeout(function () {
                                    el.trigger("innerShiftTabPressed")
                                },
                                10)
                        }, true, true, true)
                    }
                    bound = true;
                    el.addClass("bbBound")
                }
            }, basicBind = function () {
                menu.unbind(".smartDropdown");
                span.unbind(".smartDropdown");
                menu.bind("click.smartDropdown", function (e) {
                    cursor.select()
                });
                el.bind("focus", function (e) {
                    renderMenu();
                    menu.show()
                });
                if (!options.overrideTab) el.bind("blur", function (e) {
                    menu.hide();
                    el.trigger("menuClosed")
                })
            }, renderMenu = function (list) {
                if (list) {
                    options.list = list;
                    menuRendered = false;
                    return
                }
                if (menuRendered) return;
                list = options.list;
                menu.find(".bb_menu_inner").empty();
                _.each(options.list, function (item) {
                    var text = item.text ? item.text : item;
                    var itemEl = $(SmartDropdown.templates.item({
                        name: text
                    }));
                    itemEl.data("itemValue", item);
                    menu.find(".bb_menu_inner").append(itemEl)
                });
                cursor = BB.Cursor.create({
                    selectedClass: "J-N-JT",
                    selectFunc: function (itemEl) {
                        var item = itemEl.data("itemValue");
                        span.data("itemValue", itemEl.data("itemValue"));
                        updateValue();
                        el.trigger("itemSelected")
                    },
                    highlightOnHover: true,
                    rollOver: true,
                    input: el,
                    noScroll: true
                });
                cursor.setup(menu.find(".item"), menu.find(".item"));
                updateDisplay()
            }, setCursor = function () {
                var val = hInput.val().toLowerCase();
                $.each(options.list, function (index, item) {
                    if ((item.text ? item.text : item).toLowerCase().startsWith(val)) {
                        cursor.setPosition([index]);
                        return
                    }
                })
            }, cursor = null,
            currentValue = getValue(),
            arrowMode = false;
        el[0].setAttribute("class", "dropdown smartInput");
        el[0].setAttribute("tabindex", "-1");
        span.addClass("input");
        hInput[0].setAttribute("type", "text");
        el.append(span);
        el.append(menu);
        el.bind("bbCursorSelect", function (e) {
            e.stopPropagation()
        });

        function updateAllDisplay() {
            span.data("itemValue", getItem());
            updateDisplay()
        }
        options.model.bind("set", options.property, updateAllDisplay);
        var timeout = null;
        if (!options.delayedBind) bind();
        updateDisplay();
        var reset = function (list) {
            options.list = list;
            basicBind()
        };
        return {
            el: el,
            clear: clear,
            focus: focus,
            set: set,
            reset: reset,
            renderMenu: renderMenu,
            hide: hide,
            destroy: function () {
                options.model.unbind("set", options.property, null, updateAllDisplay);
                menu.remove();
                el.remove();
                if (hInput) hInput.remove();
                if (span) span.remove()
            }
        }
    };
    BB.Widgets.SmartDropdown = SmartDropdown
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        BB = Streak.BentoBox;
    BB.Widgets.SmartInput = {
        create: function (type, options) {
            switch (type) {
            case "TEXT_INPUT":
                if (options.isSpreadsheet) return BB.Widgets.SpreadsheetTextarea.create(options);
                else return BB.Widgets.SidebarTextarea.create(options);
                break;
            case "DATE":
                if (options.isSpreadsheet) return BB.Widgets.SpreadsheetCalendar.create(options);
                else return BB.Widgets.Calendar.create(options);
                break;
            case "PERSON":
                if (options.isSpreadsheet) return BB.Widgets.SpreadsheetPeoplePicker.create(options);
                else return BB.Widgets.PeoplePicker.create(options);
                break
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        HOVER_CLASS: "aco",
        FOCUS_CLASS: "acm"
    };
    BB.Widgets.SidebarTextarea = {
        template: '<div contentEditable="true" class="textAreaBaseStyle edit"></div>',
        defaults: {
            model: null,
            property: null,
            border: "always",
            enter: false,
            placeholder: null,
            autoSave: true,
            readHTML: false,
            existingList: []
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.SidebarTextarea.impl(o)
        }
    };
    BB.Widgets.SidebarTextarea.impl =
        function (o) {
            var options = o;
            var el = $('<div><div class="sidebarTextareaRead"></div></div>');
            var readEl = el.find("div");
            var property = options.property;
            var model = options.model;
            var autoSave = options.autoSave;
            var currentValue = null;
            var bound = false;
            var editValue = null;
            var saveTimeout = null;
            var valueChanged = false;
            var changedValueSaved = false;
            var modelUnbinder = false;
            var getValue = function () {
                return model.get(property) || ""
            };
            var getCleanValue = function () {
                return $.cleanText(getValue(), true).escapeHTML()
            };
            var updateValue =
                function () {
                    var val = getValue();
                    editEl.find(".bbAutocomplete").hide();
                    var editValue = editEl.plainText();
                    editEl.find(".bbAutocomplete").show();
                    if (editValue.length === 0)
                        if (!editEl.is(":FastVisible")) editValue = el.plainText();
                    model.set(property, editValue);
                    clearTimeout(saveTimeout);
                    saveTimeout = setTimeout(saveValue, 500);
                    if (currentValue !== editValue) valueChanged = true;
                    currentValue = editValue
            };
            var saveValue = function () {
                updateValue();
                clearTimeout(saveTimeout);
                saveTimeout = null;
                if (!valueChanged) return;
                changedValueSaved =
                    true;
                if (autoSave) model.save();
                valueChanged = false
            };
            var updateDisplay = function () {
                if (getValue() !== currentValue) {
                    if (el.is(".active")) return
                } else return;
                showRead()
            };
            var showRead = function () {
                editEl.trigger("detach");
                editEl.detach();
                if (options.readHTML) readEl.setPlainText(getValue());
                else readEl[0].innerHTML = getCleanValue();
                el.removeClass("active");
                el.empty();
                el.append(readEl);
                editEl.unbindBodyCloseAndStop();
                if (options.border === "hover") {
                    el.removeClass(CONSTANTS.FOCUS_CLASS);
                    if (getCleanValue()) {
                        el.removeClass(CONSTANTS.HOVER_CLASS);
                        el.trigger("unhold")
                    } else {
                        el.trigger("hold");
                        el.addClass(CONSTANTS.HOVER_CLASS)
                    }
                } else if (options.border === "alwaysGmail") el.removeClass(CONSTANTS.FOCUS_CLASS)
            };
            var showEdit = function () {
                if (editEl.is(":focus")) return;
                readEl.detach();
                editEl.detach();
                editEl.setPlainText(getValue());
                currentValue = getValue();
                el.append(editEl);
                el.addClass("active");
                if (options.border === "hover" || options.border === "alwaysGmail") el.addClass(CONSTANTS.FOCUS_CLASS);
                bind();
                setTimeout(function () {
                    bindToBodyClick()
                }, 10);
                editEl[0].setAutoCompleteList(options.existingList);
                editEl.focus();
                setCursor()
            };
            var setCursor = function () {
                setTimeout(function () {
                    var sel, range;
                    var doc = Streak.document;
                    if (doc.createRange) {
                        range = doc.createRange();
                        range.selectNodeContents(editEl[0]);
                        range.collapse(false);
                        sel = doc.getSelection();
                        sel.removeAllRanges();
                        sel.addRange(range)
                    }
                }, 1)
            };
            var editEl = $(BB.Widgets.SidebarTextarea.template);
            var bind = function () {
                if (!bound) {
                    editEl[0].addEventListener("keydown", function (e) {
                        if (e.which === 13)
                            if (e.metaKey || e.ctrlKey) e.stopImmediatePropagation()
                    }, true);
                    editEl.on("escapePressed",
                        function (e) {
                            editEl.setPlainText(currentValue);
                            showRead();
                            el.trigger("blurred")
                        });
                    BB.Keyboard.bindChordToEl({
                        el: editEl,
                        chord: "tab/shift+tab",
                        useCapture: true,
                        cb: function (e) {
                            saveValue();
                            showRead()
                        }
                    });
                    editEl.delayedSave({
                        saveFunction: updateValue,
                        delay: 0,
                        saveOnBlur: false,
                        enter: true
                    });
                    editEl.autoComplete("plainText");
                    bound = true
                }
            };

            function bindToBodyClick() {
                el.bodyCloseAndStop({
                    closeFunction: function () {
                        if (editEl.isVisible()) {
                            updateValue();
                            saveValue();
                            showRead()
                        }
                    },
                    stop: el,
                    body: Gmail.elements.body,
                    useCapture: true
                })
            }
            el.addClass("smartInput sidebarTextarea");
            el[0].setAttribute("tabindex", -1);
            el.click(function () {
                if (!editEl.is(":FastVisible(noCompute)")) setTimeout(showEdit, 50)
            });
            el.focus(function () {
                if (!editEl.is(":FastVisible(noCompute)")) {
                    Gmail.elements.body.trigger("bodyCloseAndStop");
                    setTimeout(showEdit, 50)
                }
            });
            switch (options.border) {
            case "never":
                el.addClass("noTextareaBorder");
                break;
            case "hover":
                readEl.addClass("R5");
                editEl.addClass("R5");
                el.easyHoverClass(CONSTANTS.HOVER_CLASS);
                break;
            case "always":
                el.addClass("textareaBorder");
                break;
            case "alwaysGmail":
                readEl.addClass("R5");
                editEl.addClass("R5");
                el.addClass(CONSTANTS.HOVER_CLASS)
            }
            if (model) {
                modelUnbinder = model.bind("set", property, updateDisplay);
                showRead()
            }
            if (options.placeHolder) el.attr("placeholder", options.placeHolder);
            return {
                el: el,
                getElement: function () {
                    return el
                },
                focus: function () {
                    el.focus()
                },
                focusAndSelect: function () {
                    el.focus();
                    setTimeout(function () {
                        editEl.selectContents()
                    }, 150)
                },
                setModelAndProperty: function (inModel, inProperty) {
                    if (modelUnbinder) modelUnbinder();
                    model = inModel;
                    property = inProperty;
                    modelUnbinder = model.bind("set", property, null, updateDisplay);
                    editEl.setPlainText("");
                    updateDisplay()
                },
                destroy: function () {
                    el.unbindBodyCloseAndStop();
                    model.unbind("set", property, null, updateDisplay);
                    readEl.remove();
                    editEl.find("*").unbind();
                    editEl.remove();
                    el.empty();
                    el.remove();
                    if (changedValueSaved) BB.Tracker.trackStreakActive({
                        eventName: "boxDataEdited",
                        property: options.property,
                        widget: "sidebarTextarea"
                    }, options.trackingContext)
                }
            }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        HOVER_CLASS: "aco",
        FOCUS_CLASS: "acm"
    };
    BB.Widgets.SmartTextarea = {
        template: '<div class="streak__smartTextarea"><div class="R5" contentEditable="true"></div></div>',
        defaults: {
            model: null,
            property: null,
            useRawHTML: false,
            border: "always",
            enter: false,
            autoSave: true,
            trackingContext: {
                widget: "smartTextarea"
            }
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.SmartTextarea.impl(o)
        }
    };
    BB.Widgets.SmartTextarea.impl = function (o) {
        var options = o,
            valueChanged = false,
            outerEl = $(BB.Widgets.SmartTextarea.template),
            saveTimeout = null,
            modelUnbinder = null,
            setTab = function (prev, next) {
                el.easyTab({
                    prev: prev,
                    next: next
                })
            }, updateValue = function () {
                var val = options.model.get(options.property);
                var text = null;
                if (options.useRawHTML) text = el.html();
                else text = el.plainText(); if (val !== text) {
                    options.model.set(options.property, text);
                    clearTimeout(saveTimeout);
                    saveTimeout = setTimeout(saveValue, 1);
                    valueChanged = true
                }
            }, saveValue =
                function () {
                    if (!valueChanged) return;
                    clearTimeout(saveTimeout);
                    saveTimeout = null;
                    valueChanged = false;
                    options.model.save(function () {
                        BB.Tracker.trackStreakActive(_.extend({
                            property: options.property,
                            widget: "smartTextarea"
                        }, options.trackingContext))
                    })
            }, getValue = function () {
                var val = options.model.get(options.property);
                return $.trim(val)
            }, updateDisplay = function () {
                if (!outerEl.is("." + CONSTANTS.FOCUS_CLASS))
                    if (options.useRawHTML) el.html(getValue());
                    else el.setPlainText(getValue());
                if (options.border === "hover")
                    if (options.model.get(options.property)) {
                        outerEl.removeClass(CONSTANTS.HOVER_CLASS);
                        el.trigger("unhold")
                    } else {
                        el.trigger("hold");
                        outerEl.addClass(CONSTANTS.HOVER_CLASS)
                    }
                if (options.placeholder)
                    if (!options.model.get(options.property)) outerEl.append(placeholderEl);
                    else placeholderEl.detach()
            };
        var el = outerEl.find(".R5");
        outerEl[0].setAttribute("tabindex", -1);
        el.addClass("textAreaBaseStyle");
        if (options.useRawHTML) el.addClass("streak__textArea_rawHTML");
        el[0].setAttribute("tabindex", -1);
        el.delayedSave({
            delay: 4E3,
            saveFunction: function () {
                updateValue()
            },
            enter: options.enter
        });
        var placeholderEl =
            $('<div class="smartTextareaPlaceholder"></div>');
        if (options.placeholder) placeholderEl[0].innerHTML = options.placeholder;
        outerEl.focus(function () {
            el.focus()
        });
        el.focus(function () {
            placeholderEl.detach();
            outerEl.addClass(CONSTANTS.FOCUS_CLASS)
        });
        el.blur(function () {
            updateValue();
            updateDisplay();
            outerEl.removeClass(CONSTANTS.FOCUS_CLASS)
        });
        el.click(function () {
            el.focus()
        });
        switch (options.border) {
        case "never":
            el.addClass("noTextareaBorder");
            break;
        case "hover":
            outerEl.addClass("noTextareaBorder");
            el.easyHoverClass(CONSTANTS.HOVER_CLASS,
                null, true, outerEl);
            break;
        case "always":
            el.addClass("textareaBorder");
            break;
        case "alwaysHover":
            outerEl.addClass(CONSTANTS.HOVER_CLASS);
            break
        }
        if (options.model) {
            modelUnbinder = options.model.bind("set", options.property, null, updateDisplay);
            updateDisplay()
        }
        return {
            el: outerEl,
            getElement: function () {
                return el
            },
            focus: function () {
                el.focus()
            },
            destroy: function () {
                options.model.unbind("set", options.property, null, updateDisplay);
                outerEl.find("*").unbind();
                outerEl.empty();
                outerEl.remove()
            },
            setModelAndProperty: function (inModel,
                inProperty) {
                if (modelUnbinder) modelUnbinder();
                options.model = inModel;
                options.property = inProperty;
                modelUnbinder = options.model.bind("set", options.property, null, updateDisplay);
                updateDisplay()
            },
            placeholderEl: placeholderEl,
            setTab: setTab
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        HOVER_CLASS: "aco",
        FOCUS_CLASS: "acm"
    };
    BB.Widgets.SmartTextbox = {
        template: '<div><input type="textbox"></div>',
        defaults: {
            model: null,
            border: "hover",
            enter: true,
            property: null,
            autoSave: true,
            onlyEnter: false,
            autoGrow: false,
            delay: 300,
            delayedBind: false,
            allowEmpty: true
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.SmartTextbox.impl(o)
        }
    };
    BB.Widgets.SmartTextbox.impl =
        function (options) {
            var outerEl = $(BB.Widgets.SmartTextbox.template),
                el = outerEl.find("input"),
                bound = false,
                valueChanged = false,
                setTab = function (prev, next) {
                    el.easyTab({
                        prev: prev,
                        next: next
                    })
                }, getValue = function () {
                    return options.model.get(options.property)
                }, updateValue = function () {
                    if (!el.val() && !currentValue) return;
                    if (el.val() === currentValue) return;
                    if (!options.allowEmpty && !el.val()) {
                        updateDisplay(true);
                        return
                    }
                    currentValue = el.val();
                    options.model.set(options.property, el.val().trim());
                    valueChanged = true
                }, saveValue =
                    function () {
                        if (!valueChanged) return;
                        valueChanged = false;
                        options.model.save(function () {
                            BB.Tracker.trackStreakActive({
                                property: options.property,
                                widget: "smartTextbox"
                            }, options.trackingContext)
                        })
                }, updateDisplay = function (force) {
                    if (force || getValue() !== currentValue) {
                        if (el.is(":focus")) return;
                        el.val(getValue());
                        el.change()
                    }
                }, clear = function () {
                    el.val("");
                    updateValue()
                }, focus = function () {
                    bind();
                    currentValue = getValue();
                    el.focus();
                    arrowMode = false
                }, set = function (val) {
                    el.val(val);
                    focus();
                    arrowMode = true
                }, bind = function () {
                    if (!bound) {
                        el.focus(function (e) {
                            outerEl.addClass(CONSTANTS.FOCUS_CLASS)
                        });
                        el.blur(function () {
                            updateValue();
                            saveValue();
                            outerEl.removeClass(CONSTANTS.FOCUS_CLASS)
                        });
                        if (options.autoGrow) el.autoGrowInput();
                        BB.Keyboard.bindChordToElement(el, "escape", function (e) {
                            el.val(currentValue)
                        });
                        BB.Keyboard.bindChordToElement(el, "enter", function (e) {
                            el.blur();
                            el.trigger("enterPressed")
                        }, true, true);
                        BB.Keyboard.bindChordToElement(el, "up", function (e) {
                            if (arrowMode) el.trigger("upPressed")
                        });
                        BB.Keyboard.bindChordToElement(el, "down", function (e) {
                            if (arrowMode) el.trigger("downPressed")
                        });
                        BB.Keyboard.bindChordToElement(el,
                            "right", function (e) {
                                if (el.caret().start === el.val().length) {
                                    e.preventDefault();
                                    e.stopPropagation()
                                }
                                if (arrowMode)
                                    if (el.caret().start === el.val().length) el.trigger("rightPressed")
                            });
                        BB.Keyboard.bindChordToElement(el, "left", function (e) {
                            if (el.caret().start === 0) {
                                e.preventDefault();
                                e.stopPropagation()
                            }
                            if (arrowMode)
                                if (el.caret().start === 0) el.trigger("leftPressed")
                        });
                        el.addClass("bbBound");
                        bound = true
                    }
                }, currentValue = getValue(),
                arrowMode = false;
            outerEl[0].setAttribute("class", "smartInput streak__smartTextbox");
            outerEl[0].setAttribute("tabindex", "-1");
            var uniq = "smartTextbox" + (new Date).getTime();
            options.model.bind("set", options.property, updateDisplay, uniq);
            if (!options.persist) el.bind("unbind", function (e) {
                options.model.unbind("set", options.property, uniq)
            });
            updateDisplay(true);
            switch (options.border) {
            case "never":
                outerEl.addClass("textboxNoborder");
                break;
            case "hover":
                outerEl.addClass("textboxNoborder");
                outerEl.easyHoverClass("textboxBorder");
                break;
            case "gmailHover":
                el.addClass("R5");
                outerEl.easyHoverClass(CONSTANTS.HOVER_CLASS);
                break;
            case "always":
                outerEl.addClass("textboxBorder");
                break
            }
            if (!options.delayedBind) bind();
            outerEl.focus(function (e) {
                focus()
            });
            if (options.autoSave) BB.UI.addSavingNotice(options.model);
            return {
                el: outerEl,
                setTab: setTab,
                clear: clear,
                focus: focus,
                set: set,
                getElement: function () {
                    return outerEl
                },
                destroy: function () {
                    options.model.unbindAll(uniq);
                    outerEl.remove()
                }
            }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        docMimeType: ["application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
        excelMimeType: ["application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"],
        pptMimeType: ["application/vnd.ms-powerpoint", "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            "application/vnd.openxmlformats-officedocument.presentationml.template"
        ],
        pdfMimeType: ["application/pdf", "application/postscript", "text/pdf", "text/postscript"]
    };
    BB.Widgets.FileList = {
        templates: {},
        defaults: {
            width: "50px",
            showTitle: true
        },
        init: function (cb) {
            this.templates.mainView = HTML.get("fileListWidget");
            this.templates.fileRow = HTML.get("fileListRow");
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.FileList.impl(o)
        }
    };
    BB.Widgets.FileList.impl = function (options) {
        var el =
            $(BB.Widgets.FileList.templates.mainView());
        var title = el.find(".fileListTitle");
        var table = el.find(".bb_file_list");
        var box = options.box;
        var _fileCollection = BB.Data.getFileGroup(box.key());
        var addDriveFile = BB.Widgets.DrivePickerButton.create({
            box: box,
            _fileCollection: _fileCollection
        });
        el.append(addDriveFile.el);
        var bindUniq = "fileList." + Math.random() + Date.now();
        _fileCollection.bind("collectionChange", function (e) {
            updateDisplay()
        }, bindUniq);
        if (options.showTitle) title.show();
        else title.hide();
        var sizeFormat =
            function readableFileSize(size) {
                var units = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
                var i = 0;
                while (size >= 1024) {
                    size /= 1024;
                    ++i
                }
                return (new Number(size)).toFixed(1) + " " + units[i]
        };

        function isPDF(mimeType) {
            return _.contains(CONSTANTS.pdfMimeType, mimeType)
        }

        function isImage(mimeType) {
            return mimeType.indexOf("image") === 0
        }

        function shouldDownloadFile(mimeType) {
            return !isPDF(mimeType) && !isImage(mimeType)
        }

        function getIconUrlForMimeType(mimeType) {
            var base = Streak.server + Streak.combinedPath + "images/fileimages/";
            if (_.contains(CONSTANTS.docMimeType, mimeType)) return base + "doc.gif";
            if (_.contains(CONSTANTS.excelMimeType, mimeType)) return base + "xls.gif";
            if (_.contains(CONSTANTS.pptMimeType, mimeType)) return base + "ppt.gif";
            if (isPDF(mimeType)) return base + "pdf.gif";
            if (mimeType.indexOf("audio") === 0) return base + "sound.gif";
            if (isImage(mimeType)) return base + "image.gif";
            return base + "generic.gif"
        }

        function renderText(_text, force) {
            if (table.children().length === 0 || force === true) {
                table.empty();
                var empty = $(document.createElement("tr"));
                empty.addClass("asd ja empty leftAlignDrive");
                empty[0].innerHTML = _text;
                table.append(empty)
            }
        }

        function updateDisplay() {
            var list = _fileCollection;
            if (list && list.length > 0) {
                table.empty();
                var nameLengthLimit = 13;
                _.each(list, function (f) {
                    var row, file, fileName, imgUrl, url;
                    file = f.getObj();
                    if (file.fileType === "DRIVE") {
                        imgUrl = file.driveIconUrl;
                        url = file.driveUrl;
                        row = $(BB.Widgets.FileList.templates.fileRow({
                            imgUrl: imgUrl,
                            mimeType: file.mimeType,
                            fileName: file.fileName,
                            url: url,
                            size: BB.Locale.getString("remove_file")
                        }));
                        var removeBtn = row.find(".bb_filesize");
                        removeBtn.addClass("removeDrvieLink");
                        removeBtn.click(function (e) {
                            f.del()
                        })
                    } else {
                        imgUrl = getIconUrlForMimeType(file.mimeType);
                        url = Streak.server + "/api/v1/files/" + file.fileKey + "/redirect";
                        if (Streak.ai) url += "?ai=true&email=" + encodeURIComponent(Streak.ai);
                        else url += "?email=" + encodeURIComponent(Streak.userEmail) + "&clientVersion=" + Streak.clientVersion;
                        row = $(BB.Widgets.FileList.templates.fileRow({
                            imgUrl: imgUrl,
                            mimeType: file.mimeType,
                            fileName: file.fileName,
                            url: url,
                            size: sizeFormat(file.size)
                        }))
                    }
                    row.attr("alt",
                        file.fileName);
                    table.append(row)
                })
            } else if (list && list.length === 0) renderText(BB.Locale.getString("no_files"), true)
        }

        function refresh() {
            _fileCollection.refresh(updateDisplay)
        }
        renderText(BB.Locale.getString("loading"));
        refresh();
        BB.Tracker.addDelegatedTracking(el, ".fileListRow", "click", {
            eventName: "FileDownloaded"
        });
        return {
            el: el,
            destroy: function () {
                _fileCollection.unbindAll(bindUniq);
                addDriveFile.destroy()
            },
            refresh: refresh
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "widgets.fileList.initialized",
        functionToCall: BB.Widgets.FileList.init,
        functionContext: BB.Widgets.FileList,
        dependentFunctionKeys: ["htmlLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    FilterableGroupList = {
        templates: {},
        defaults: {
            searchInput: null,
            closedSectionList: [],
            openFunc: $.noop,
            closeFunc: $.noop,
            selectFunc: $.noop,
            compareFunc: $.noop,
            parentHeaderClass: "titleSection",
            itemClass: "menuItem",
            selectedClass: "J-N-JT",
            highlightClass: "J-N-JT"
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new FilterableGroupList.impl(o)
        }
    };
    FilterableGroupList.impl =
        function (options) {
            var el = $(document.createElement("div"));
            var data = null;
            var cursor = BB.Cursor.create({
                selectedClass: options.selectedClass,
                selectFunc: function (el, isEnter) {
                    if (el.hasClass("titleSection")) el.trigger("bbCursorClick");
                    else options.selectFunc(el.data("groupListData"))
                },
                highlightOnHover: true,
                selectOnClick: true,
                rollOver: true,
                input: options.searchInput
            });
            var filterText = "";
            var closedSectionList = options.closedSectionList || [];

            function render() {
                el.empty();
                _.each(data, function (index, key) {
                    var added = [];
                    var collapsable = BB.Widgets.CollapseSection.create({
                        title: data[key].title,
                        startOpen: closedSectionList.indexOf(key) === -1,
                        titleClick: false,
                        openFunc: function () {
                            closedSectionList.removeVal(key);
                            options.openFunc(closedSectionList);
                            collapsable.bodySection.find("." + options.itemClass).addClass("cursorItem");
                            setupCursor()
                        },
                        closeFunc: function () {
                            closedSectionList = _.union(closedSectionList, [key]);
                            options.closeFunc(closedSectionList);
                            collapsable.bodySection.find(".cursorItem").removeClass("cursorItem");
                            setupCursor()
                        }
                    });
                    var isOpen = closedSectionList.indexOf(key) === -1;
                    collapsable.titleSection.addClass("cursorItem");
                    var list = data[key].list;
                    for (var ii = 0; ii < list.length; ii++) {
                        if (!options.compareFunc(filterText, list[ii].data)) continue;
                        var item = BB.Widgets.Menu.createItem(list[ii].display);
                        item.data("groupListData", list[ii].data);
                        item.addClass(options.itemClass);
                        if (isOpen) item.addClass("cursorItem");
                        collapsable.bodySection.append(item);
                        added.push(item)
                    }
                    if (added.length > 0) {
                        el.append(collapsable.el);
                        collapsable.titleSection.find(".bbResults").remove();
                        collapsable.titleSection.find(".title").append('<span class="bbResults">(' + added.length + ")</span>")
                    }
                });
                setupCursor()
            }

            function setData(inData, inClosedSectionList) {
                data = inData;
                filterText = "";
                closedSectionList = inClosedSectionList || [];
                render()
            }

            function addSection(section) {
                _.extend(data, section);
                render()
            }

            function setupCursor() {
                var position = cursor.getPosition();
                cursor.setup(el.find(".cursorItem"));
                cursor.setPosition(position)
            }
            options.searchInput.delayedSave({
                delay: 100,
                saveFunction: function (isEnter) {
                    if (!isEnter) {
                        filterText =
                            options.searchInput.val();
                        render()
                    }
                },
                dontPropagate: true
            });
            return {
                el: el,
                render: render,
                setData: setData
            }
    };
    BB.Widgets.FilterableGroupList = FilterableGroupList
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    BB.Widgets.FirstPipelinePromo = {
        templates: {},
        defaults: {
            width: "300px",
            useBentoBoxTitle: false,
            buttonFirst: false,
            showBottomBorder: false
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.FirstPipelinePromo.impl(o)
        }
    };
    BB.Widgets.FirstPipelinePromo.impl = function (options) {
        var el = HTML.get("firstPipelinePromo", true);
        el.css("width", options.width);
        if (options.useBentoBoxTitle) el.find(".firstPipelineTitle").html("Streak");
        else el.find(".firstPipelineTitle").hide(); if (options.showBottomBorder) el.find(".am6").show();
        if (options.buttonFirst) {
            var buttonContainer = el.find(".newPipelineContainer");
            buttonContainer.detach();
            buttonContainer.insertAfter(el.find(".firstPipelineTitle"))
        }
        var createButton = BB.Widgets.Button.create({
            name: BB.Locale.getString("create_first_pipeline"),
            onFunc: function () {
                BB.FirstRun.showStageModal(1)
            },
            isToggle: false,
            color: "blue"
        });
        el.find(".newPipelineContainer").append(createButton.el);
        return {
            el: el
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var PipelineHashPrefix = "#pipeline/";
    FeedList = {
        templates: {},
        data: null,
        defaults: {
            width: "50px",
            model: null,
            isMiniStyle: false,
            filterToComments: false
        },
        init: function (cb) {
            this.templates.mainView = HTML.get("feedList");
            this.templates.feedRow = HTML.get("feedListRow");
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.FeedList.impl(o)
        }
    };
    FeedList.impl = function (options) {
        var el = $(BB.Widgets.FeedList.templates.mainView());
        var feedListRows = el.find(".feedListRows");
        var model = options.model;
        var feedListData = null;
        var refreshTimeout = null;
        var refreshTimeoutDelay = 1E3;
        var isPipeline = false;
        var feedListItemMap = {};
        var getImageForNoun = function (noun, specific) {
            if (specific != "ADD_COMMENT") return Streak.server + Streak.combinedPath + "images/feedimages/" + noun + ".png";
            else return Streak.server + Streak.combinedPath + "images/feedimages/COMMENT.png"
        };
        var getImageForVerb =
            function (verb, specific) {
                if (specific != "ADD_COMMENT") return Streak.server + Streak.combinedPath + "images/feedimages/" + verb + ".png";
                else return Streak.server + Streak.combinedPath + "images/feedimages/CREATE.png"
        };
        var setupPipelineLink = function (link) {
            var key = link.attr("workflowKey");
            link.click(function (e) {
                e.preventDefault();
                BB.UI.setURL(BB.Data.getPipeline(key).link())
            });
            link.addClass("pipelineLink")
        };
        var setupBoxLink = function (link) {
            var key = link.attr("caseKey");
            var box = BB.Data.getBox(key);
            if (box) {
                link.click(function (e) {
                    e.preventDefault();
                    BB.UI.setURL(BB.Data.getBox(key).link())
                });
                link.addClass("boxLink")
            } else {
                link.after(link.text() + " (" + BB.Locale.getString("deleted") + ")");
                link.remove()
            }
        };
        var replaceTimeTags = function (string) {
            if (!string) return "";
            var result = string;
            var matches = string.match(/<time[^>]*>/g);
            if (matches && matches.length > 0) matches.forEach(function (timeTag) {
                var start = Streak.kmp(timeTag, 'datetime="') + 'datetime="'.length,
                    end = start + timeTag.substring(start).indexOf('"'),
                    time = timeTag.substring(start, end);
                result = result.replace(/<time[^>]*>/,
                    "<span>" + Streak.Date.ccreate(time).format("{Weekday} {Mon} {dd}, {yyyy}") + "</span>")
            });
            return result
        };
        var updateDisplay = function (list) {
            for (var key in oldMap) oldMap[key].detach();
            if (list && list.length > 0) {
                var oldMap = _.clone(feedListItemMap);
                for (var i = list.length - 1; i >= 0; i--) {
                    var newsfeedKey = list[i].newsfeedItemKey || list[i].newsfeedEntryKey;
                    if (oldMap[newsfeedKey]) {
                        feedListRows.prepend(oldMap[newsfeedKey]);
                        delete oldMap[newsfeedKey]
                    } else renderFeedItem(list[i])
                }
                for (var key in oldMap) oldMap[key].remove()
            } else feedListRows.html("&nbsp;")
        };
        var renderFeedItem = function (item) {
            var storyBox = BB.Data.getBox(item.boxKey);
            if (!isPipeline && !storyBox) return;
            var storyPipeline = BB.Data.getPipeline(item.pipelineKey);
            if (!storyPipeline) return;
            var storyObject = item.specificVariables;
            var story;
            if (isPipeline) story = item.storyTextPipeline;
            else story = item.storyTextBox;
            switch (storyObject.FIELD_TYPE) {
            case "DATE":
                var value = storyObject.FIELD_VALUE;
                if (!value) storyObject.FIELD_VALUE = "";
                else storyObject.FIELD_VALUE = Date.create(storyObject.FIELD_VALUE).customFormat("shortDate");
                break;
            case "PERSON":
                try {
                    var list = JSON.parse(item.specificVariables.FIELD_VALUE);
                    var arr = [];
                    for (var i = 0; i < list.length; i++) arr.push(list[i].displayName.escapeHTML());
                    storyObject.FIELD_VALUE = arr.join(", ")
                } catch (err) {
                    storyObject.FIELD_VALUE = ""
                }
                break
            }
            storyObject.BOX = '<a href="#" class="streak__newsfeed_box">BOX</a>';
            storyObject.PIPELINE = '<a href="#" class="streak__newsfeed_pipeline">PIPELINE</a>';
            storyObject.STORY_AUTHOR_DISPLAY_NAME = "<strong>" + storyObject.STORY_AUTHOR_DISPLAY_NAME + "</strong>";
            story =
                story.replace(/\</igm, "<%=").replace(/\>/img, "%>");
            story = _.template(story)(storyObject);
            if (!item.userImageUrl) item.userImageUrl = Streak.server + Streak.combinedPath + "images/unknownContact.png";
            var storyDateTime = Date.create(item.timestamp).getGmailFormatted(true);
            try {
                story = JSON.parse('"' + story.replace(/"/igm, '\\"') + '"')
            } catch (err) {}
            var row = $(document.createElement("div"));
            row[0].setAttribute("class", "bb_feeditem");
            row[0].innerHTML = BB.Widgets.FeedList.templates.feedRow({
                datetime: storyDateTime,
                story: story,
                userImageUrl: item.userImageUrl
            });
            var detailText = "";
            if (item.detailText) {
                var detailTextKey = item.detailText.replace("<", "").replace(">", "");
                detailText = item.specificVariables[detailTextKey];
                if (detailTextKey === "COMMENT") {
                    row.find(".comment").show();
                    row.find(".bb_feedcomment").plainText(detailText)
                } else {
                    row.find(".bb_feeddetail").show();
                    row.find(".bb_feeddetail").plainText(detailText)
                }
            }
            var boxLink = row.find(".streak__newsfeed_box");
            if (boxLink.length > 0) {
                if (storyBox) boxLink[0].innerHTML = storyBox.displayName();
                boxLink[0].innerHTML = item.specificVariables.BOX_NAME;
                boxLink.on("click", function (e) {
                    if (storyBox) BB.UI.setURL(storyBox.link());
                    e.preventDefault();
                    e.stopPropagation()
                })
            }
            var pipelineLink = row.find(".streak__newsfeed_pipeline");
            if (pipelineLink.length > 0) {
                pipelineLink[0].innerHTML = storyPipeline.displayName();
                pipelineLink.on("click", function (e) {
                    BB.UI.setURL(storyPipeline.link());
                    e.preventDefault();
                    e.stopPropagation()
                })
            }
            var newsfeedSpecific = item.newsfeedItemSpecific || item.newsfeedEntrySpecific;
            if (options.filterToComments &&
                newsfeedSpecific !== "ADD_COMMENT") row.hide();
            feedListRows.prepend(row);
            setTimeout(function () {
                row.addClass("loaded")
            }, 5);
            var newsfeedKey = item.newsfeedItemKey || item.newsfeedEntryKey;
            feedListItemMap[newsfeedKey] = row
        };
        var convertPropertyMap = function (map, specificVariables) {
            if (!map) return {};
            var hash = {};
            for (var key in map)
                if (specificVariables[map[key]])
                    if (specificVariables[map[key]].escapeHTML) hash[key] = specificVariables[map[key]].escapeHTML();
                    else hash[key] = specificVariables[map[key]];
            return hash
        };
        var getNewsfeedSetting =
            function (filterOption) {
                var setting = BB.UserSettings.getSetting("newsFeed/pipeline/" + options.model.key() + "/" + filterOption);
                if (setting === undefined || setting === "") {
                    setting = BB.UserSettings.getSetting("newsFeed/pipeline/global/" + filterOption);
                    return setting === undefined || setting === "" ? true : setting
                } else return setting
        };
        var getWhoParams = function () {
            var me = getNewsfeedSetting("myUpdates");
            var everyoneElse = getNewsfeedSetting("everyoneElseUpdates");
            if (me && everyoneElse) return {
                activityFrom: "ALL"
            };
            else if (me) return {
                activityFrom: "JUST_ME"
            };
            else if (everyoneElse) return {
                activityFrom: "JUST_OTHERS"
            };
            else return {}
        };
        var getWhatParams = function () {
            var additional = getNewsfeedSetting("additionalUpdates");
            if (additional || model.typeName == "box") return {
                detailLevel: "ALL"
            };
            else return {
                detailLevel: "CONDENSED"
            }
        };
        var modelChangedRefresh = function (cb) {
            if (!model) return;
            var who = getWhoParams();
            var what = getWhatParams();
            var params = $.extend({}, who, what);
            var apiURL = [];
            if (model.typeName === "box") apiURL.push("boxes");
            else apiURL.push("pipelines");
            apiURL.push(model.key());
            apiURL.push("newsfeed");
            params.msgUrl = apiURL.join("/");
            APIRequester.get(params, function (data) {
                if (data) {
                    feedListData = data;
                    updateDisplay(data)
                }
                if (cb && _.isFunction(cb)) cb()
            }, function () {
                if (cb && _.isFunction(cb)) cb()
            })
        };
        var modelChanged = function (cb, force) {
            if (!model || !model.key()) {
                el.remove();
                return true
            }
            if (!el.isVisible() && !force) {
                if (cb && Streak._.isFunction(cb)) cb();
                return
            }
            clearTimeout(refreshTimeout);
            refreshTimeout = setTimeout(function () {
                modelChangedRefresh(cb)
            }, refreshTimeoutDelay)
        };
        model.bind("save",
            null, modelChanged);
        model.bind("set", "commentKeys", function () {
            modelChanged(function () {
                Gmail.hideNotice()
            })
        });
        model.bind("remove", null, function () {
            model = null;
            el.remove()
        });
        model.bind("newComment", null, function () {
            modelChanged(function () {
                Gmail.hideNotice();
                model.trigger("commentRendered")
            })
        });
        model.bind("deleteComment", null, function () {
            modelChanged(function () {
                Gmail.hideNotice()
            })
        });
        modelChanged();
        var refreshData = function (cb, dontForce) {
            modelChanged(cb, !dontForce)
        };
        var showAll = function () {
            feedListRows.find(".bb_feeditem").show();
            options.filterToComments = false
        };
        var showOnlyComments = function () {
            options.filterToComments = true;
            if (!feedListData) return;
            for (var i = 0; i < feedListData.length; i++) {
                var newsfeedSpecific = feedListData[i].newsfeedItemSpecific || feedListData[i].newsfeedEntrySpecific;
                if (newsfeedSpecific != "ADD_COMMENT") $(feedListRows.find(".bb_feeditem")[i]).hide()
            }
        };
        var updateView = function () {
            var choice = BB.UserSettings.get("newsFeed/box/global");
            if (choice == "viewAll") showAll();
            else if (choice == "viewCommentsOnly") showOnlyComments()
        };
        if (model.typeName === "box") BB.UserSettings.bind("newsFeed/box/global/update", updateView);
        else isPipeline = true;
        BB.Tracker.addDelegatedTracking(el, ".boxLink", "click", {
            eventName: "BoxClicked",
            widget: "Newsfeed"
        });
        BB.Tracker.addDelegatedTracking(el, ".pipelineLink", "click", {
            eventName: "PipelineClicked",
            widget: "Newsfeed"
        });
        BB.UserSettings.bind("newsFeedPipelineSettingsChange", function (pipelineKey) {
            if (pipelineKey === options.model.key()) refreshData(function () {
                Gmail.hideNotice()
            })
        });
        return {
            el: el,
            refreshData: refreshData,
            showAll: showAll,
            showOnlyComments: showOnlyComments,
            updatedisplay: updateDisplay
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "widgets.feedList.initialized",
        functionToCall: FeedList.init,
        functionContext: FeedList,
        dependentFunctionKeys: ["htmlLoaded"]
    });
    BB.Widgets.FeedList = FeedList
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var IframeBridge = function (options) {
        var self = this;
        self._path = options.path;
        self._cssClass = options.cssClass;
        self._uniqueId = (Math.random() + "").replace(".", "_");
        self._rawIframe = null;
        self._iframe = null;
        self._iframeLoaded = false;
        self._messageQueue = [];
        self._constructIframe()
    };
    _.extend(IframeBridge.prototype, {
        _constructIframe: function () {
            var self = this;
            var iframe = Streak.$('<iframe class="' +
                this._cssClass + '"  src="' + Streak.server + "/clientiFrames/" + self._path + '.jsp"></iframe>');
            self._rawIframe = iframe[0];
            self._iframe = iframe;
            self._iframe.load(function () {
                self._iframeLoaded = true;
                self.handleQueuedMessages()
            })
        },
        sendMessage: function (functionName, jsonObj) {
            var self = this;
            var encodedObj = {
                "functionName": functionName,
                "args": jsonObj
            };
            self.handleMessage(encodedObj)
        },
        handleQueuedMessages: function (message) {
            self = this;
            for (var i = 0; i < self._messageQueue.length; i++) self.postMessageToIframe(self._messageQueue[i])
        },
        handleMessage: function (message) {
            var self = this;
            if (self._iframeLoaded) self.postMessageToIframe(message);
            else self._messageQueue.push(message)
        },
        postMessageToIframe: function (message) {
            this._rawIframe.contentWindow.postMessage(message, this._rawIframe.src)
        },
        addHandlerForIncomingMessages: function (callback) {
            var self = this
        },
        getFrameElement: function () {
            return this._iframe
        },
        destroy: function () {
            this._iframe.remove()
        },
        _handleMessage: function (event) {
            var self = this
        },
        fff: function () {}
    });
    BB.Widgets.IframeBridge = IframeBridge
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var Menu = {
        templates: {},
        defaults: {
            css: null,
            maxHeight: 350,
            bodyMaxHeight: 350
        },
        init: function (callback) {
            this.templates.menu = HTML.get("menuMenu");
            this.templates.item = HTML.get("menuMenuItem");
            this.templates.checkItem = HTML.get("menuCheckItem");
            this.templates.radioItem = HTML.get("menuRadioItem");
            if (callback) callback()
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        createItem: function (html) {
            var item = $(document.createElement("div"));
            item[0].innerHTML = this.templates.item();
            item = item.children();
            item.find(".text").empty().append(html);
            return item
        }
    };
    Menu.impl = function (o) {
        var options = o,
            menu = $(document.createElement("div")),
            header = null,
            body = null,
            footer = null;
        var isLast = options.isLast;
        var subMenus = [];
        var addItem = function (html, cb, prepend) {
            var item = createItem(html, cb);
            addItemToBody(item, prepend);
            return item
        }, createItem = function (html, cb) {
                var item = $(document.createElement("div"));
                item[0].innerHTML = Menu.templates.item();
                item = item.children();
                item.find(".text").empty().append(html);
                if (cb) item.click(function (e) {
                    cb(e)
                });
                item.superEasyHoverClass("J-N-JT");
                return item
            }, addItemToHeader = function (item, prepend) {
                if (prepend) header.prepend(item);
                else header.append(item)
            }, addItemToBody = function (item, prepend) {
                if (prepend) body.prepend(item);
                else body.append(item)
            }, addItemToFooter = function (item, prepend) {
                if (prepend) footer.prepend(item);
                else footer.append(item)
            }, addSeparator = function (prepend) {
                var item =
                    createSeparator();
                addItemToBody(item, prepend);
                return item
            }, createSeparator = function () {
                var item = document.createElement("div");
                item.setAttribute("class", "J-Kh");
                item.setAttribute("role", "separator");
                return $(item)
            }, addCheckItem = function (html, cb, startChecked) {
                var item = createCheckItem(html, cb, startChecked);
                addItemToBody(item);
                return item
            }, createCheckItem = function (html, cb, startChecked) {
                var isChecked = startChecked;
                var item = $(document.createElement("div"));
                item[0].innerHTML = Menu.templates.checkItem();
                item =
                    item.children();
                item.find(".text").html(html);
                if (isChecked) item.addClass("J-LC-JR-Jp");
                if (cb) item.click(function (e) {
                    isChecked = !isChecked;
                    if (!isChecked) item.removeClass("J-LC-JR-Jp");
                    else item.addClass("J-LC-JR-Jp");
                    cb(isChecked, e)
                });
                item.superEasyHoverClass("J-N-JT");
                item.setCheckboxState = function (checkboxState) {
                    isChecked = checkboxState;
                    item.toggleClass("J-LC-JR-Jp", isChecked)
                };
                return item
            }, addRadioGroup = function (groupName) {
                var item = createRadioGroup(groupName);
                addItemToBody(item);
                return item
            }, createRadioGroup =
                function (groupName) {
                    var item = $(document.createElement("div"));
                    item.addClass(groupName);
                    item.addClass("J-awr");
                    return item
            };
        addRadioItem = function (html, radioGroup, cb, startChecked) {
            var isChecked = startChecked;
            var item = $(document.createElement("div"));
            item[0].innerHTML = Menu.templates.radioItem();
            item = item.children();
            item.find(".text").html(html);
            if (isChecked) item.addClass("J-Ks-KO");
            if (cb) item.click(function (e) {
                radioGroup.find(".radioItem").removeClass("J-Ks-KO");
                item.addClass("J-Ks-KO");
                isChecked = true;
                cb(isChecked, e)
            });
            item.superEasyHoverClass("J-N-JT");
            radioGroup.append(item);
            return item
        }, addSubMenu = function (phtml, psubMenu) {
            var html = phtml,
                subMenu = psubMenu,
                menuClicked = false,
                item = addItem(html, function (e) {
                    if (!menuClicked) e.stopPropagation();
                    menuClicked = false
                });
            subMenus.push(subMenu);
            subMenu.setIsLast(isLast);
            subMenu.el.click(function () {
                menuClicked = true
            });
            subMenu.el[0].style.position = "fixed";
            item.addClass("subMenuItem");
            item.append('<span class="outerMenuArrow"><span class="menuArrow"></span></span>');
            item.append(subMenu.el);
            var hideTimeout;
            item.hover(function () {
                subMenu.el.show();
                clearTimeout(hideTimeout);
                var pos = {
                    top: item.offset().top,
                    left: item.offset().left + menu.outerWidth() - 5
                };
                if (isLast) pos.left += -1 * (menu.outerWidth() + subMenu.el.outerWidth()) + 5;
                subMenu.el.css(pos);
                subMenu.el.containByScreen(item, {
                    isAligned: true,
                    isTopAligned: true,
                    forceFit: true
                })
            }, function () {
                hideTimeout = setTimeout(function () {
                    subMenu.el.hide()
                }, 100)
            });
            return item
        }, addSection = function (html) {
            addItemToBody(html);
            return html
        }, hideHeader =
            function () {
                header.hide()
        }, hideBody = function () {
            body.hide()
        }, hideFooter = function () {
            footer.hide()
        }, showHeader = function () {
            header.show()
        }, showBody = function () {
            body.show()
        }, showFooter = function () {
            footer.show()
        }, addSection = function (html, prepend) {
            if (prepend) body.prepend(html);
            else body.append(html)
        }, empty = function () {
            header.empty();
            body.empty();
            footer.empty()
        }, reset = function () {
            menu.find(".J-N-JT").removeClass("J-N-JT");
            menu.find(".hover").removeClass("hover");
            menu.find(".bb_menu").hide();
            menu.find(".J-LC-JR-Jp").removeClass("J-LC-JR-Jp")
        };
        menu.addClass("J-M uEPqDe bb_menu");
        if (options.css) menu.css(options.css);
        menu[0].innerHTML = Menu.templates.menu();
        header = menu.find(".menuHeader");
        body = menu.find(".menuBody");
        footer = menu.find(".menuFooter");
        if (options.maxHeight) menu.css("max-height", options.maxHeight);
        if (options.bodyMaxHeight) body.css("max-height", options.bodyMaxHeight);
        return {
            el: menu,
            addItem: addItem,
            addItemToBody: addItemToBody,
            addItemToHeader: addItemToHeader,
            addItemToFooter: addItemToFooter,
            addCheckItem: addCheckItem,
            addSubMenu: addSubMenu,
            addSeparator: addSeparator,
            addSection: addSection,
            addRadioGroup: addRadioGroup,
            addRadioItem: addRadioItem,
            createCheckItem: createCheckItem,
            createItem: createItem,
            createRadioGroup: createRadioGroup,
            createSeparator: createSeparator,
            hideHeader: hideHeader,
            hideBody: hideBody,
            hideFooter: hideFooter,
            showHeader: showHeader,
            showBody: showBody,
            showFooter: showFooter,
            empty: empty,
            reset: reset,
            getElement: function () {
                return menu
            },
            setIsLast: function (pIsLast) {
                isLast = pIsLast;
                for (var ii = 0; ii < subMenus.length; ii++)
                    if (subMenus[ii] &&
                        subMenus[ii].setIsLast) subMenus[ii].setIsLast(isLast)
            },
            destroy: function () {
                menu.remove()
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "menuInitialized",
        functionToCall: Menu.init,
        functionContext: Menu,
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded"]
    });
    BB.Widgets.Menu = Menu
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        UI = Streak.UI,
        Reports = Streak.BentoBox.Widgets,
        Locale = Streak.Locale;
    var superclass = UI.ViewController;
    BB.Widgets.MultiselectMenuViewController = Streak.Class.subclass({
        className: "MultiselectMenuViewController",
        superclass: superclass,
        memberVariables: [{
            "name": "_menuButton",
            destroy: true
        }, {
            "name": "_menu",
            destroy: true
        }, {
            "name": "_collapseItem",
            destroy: false
        }, {
            "name": "_expandItem",
            destroy: false
        }, {
            "name": "_items",
            destroy: false
        }, {
            "name": "_headerSeparator",
            destroy: false
        }, {
            "name": "_footerSeparator",
            destroy: false
        }, {
            "name": "_collapsed",
            destroy: false
        }, {
            "name": "_buttonPrefix",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._items = {};
            this._collapsed = false
        },
        create: function (options) {
            var self = this;
            var menuOptions = options.menuOptions || {};
            if (menuOptions.bodyMaxHeight === undefined) menuOptions = _.extend(menuOptions, {
                bodyMaxHeight: 150
            });
            this._menu = BB.Widgets.Menu.create(menuOptions);
            this._buttonPrefix = options.buttonPrefix || "";
            this._menuButton =
                BB.Widgets.Buttons.ButtonFactory.createMenuButton(_.extend(options.buttonOptions, {
                    menu: this._menu
                }));
            var headerGroup = this._menu.createRadioGroup("header");
            this._menu.addItemToHeader(headerGroup);
            this._collapseItem = {
                label: options.collapseItem.label,
                value: options.collapseItem.value
            };
            this._expandItem = {
                label: options.expandItem.label
            };
            this._menu.addRadioItem(options.collapseItem.label, headerGroup, _.bind(this._collapseItemChanged, this), true);
            this._menu.addRadioItem(options.expandItem.label, headerGroup,
                _.bind(this._expandItemChanged, this), false);
            this._headerSeparator = this._menu.createSeparator();
            this._menu.addItemToHeader(this._headerSeparator);
            this._footerSeparator = this._menu.createSeparator();
            this._menu.addItemToFooter(this._footerSeparator);
            var selectAllItem = this._menu.createItem(options.selectAllItem.label, _.bind(this._selectAllChosen, this));
            this._menu.addItemToFooter(selectAllItem);
            var selectNoneItem = this._menu.createItem(options.selectNoneItem.label, _.bind(this._deselectAllChosen, this));
            this._menu.addItemToFooter(selectNoneItem);
            var items = options.items;
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                var checkboxItem = this._menu.addCheckItem(item.label, _.bind(this._selectionChangedFunction(item.value), this), item.selected);
                this._items[item.value] = {
                    "label": item.label,
                    "value": item.value,
                    "checkbox": checkboxItem,
                    "selected": item.selected
                }
            }
            this._collapse();
            this._view.addSubview(this._menuButton);
            return this
        },
        _collapseItemChanged: function (isChecked) {
            if (isChecked) {
                this._collapse();
                this._menuButton.off();
                this._reportChange()
            }
        },
        _expandItemChanged: function (isChecked) {
            if (isChecked) {
                this._expand();
                this._reportChange()
            }
        },
        _selectionChangedFunction: function (value) {
            var self = this;
            return function (isChecked) {
                self._items[value].selected = isChecked;
                self._reportChange()
            }
        },
        _selectAllChosen: function () {
            this._selectAll();
            this._reportChange()
        },
        _selectAll: function () {
            for (var value in this._items) {
                this._items[value].checkbox.setCheckboxState(true);
                this._items[value].selected = true
            }
        },
        _deselectAllChosen: function () {
            this._deselectAll();
            this._reportChange()
        },
        _deselectAll: function () {
            for (var value in this._items) {
                this._items[value].checkbox.setCheckboxState(false);
                this._items[value].selected = false
            }
        },
        _collapse: function () {
            if (this._collapsed) return;
            this._collapsed = true;
            this._headerSeparator.hide();
            this._menu.hideBody();
            this._menu.hideFooter();
            this._refreshButtonText()
        },
        _expand: function () {
            if (!this._collapsed) return;
            this._selectAll();
            this._collapsed = false;
            this._headerSeparator.show();
            this._menu.showBody();
            this._menu.showFooter();
            this._refreshButtonText()
        },
        _refreshButtonText: function () {
            var buttonText = "";
            if (this._collapsed) buttonText = this._collapseItem.label;
            else {
                var selections =
                    this._getSelections();
                if (selections.length === 1) buttonText = this._items[selections[0]].label;
                else buttonText = selections.length ? Locale.getString("number_selected", {
                    number: selections.length
                }) : Locale.getString("none_selected")
            }
            this._menuButton.setText(this._buttonPrefix + buttonText)
        },
        _getSelections: function () {
            if (this._collapsed) return this._collapseItem.value;
            else {
                selectedValues = [];
                for (value in this._items)
                    if (this._items[value].selected) selectedValues.push(value)
            }
            return selectedValues
        },
        _reportChange: function () {
            this._callDelegateFunction("multiselectMenuSelectionsChanged", {
                "delegator": this,
                "selections": this._getSelections()
            });
            if (this._menuButton) this._refreshButtonText()
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Library = Streak.Library,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var ListViewViewController = function () {
        Streak.ViewControllerBase.call(this);
        this._dataSource = null;
        this._view = new BB.Widgets.ListView.ListViewView;
        this._view.addDelegate(this);
        this._sectionsInfo = [];
        this._currentSection = 0;
        this._currentRow = 0;
        this._selectedSection = 0;
        this._selectedRow = 0;
        this._rowSelectionLocked = false;
        this._cursor = new BB.Modules.CursorController;
        this._cursor.addDelegate(this);
        var self = this;
        this._delayedUnblockMouseEvents = _.debounce(function () {
            if (!self._view) return;
            self._view.unblockMouseEvents()
        }, 500)
    };
    ListViewViewController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(ListViewViewController.prototype, {
        getView: function () {
            return this._view
        },
        keyPressed: function (keycode, isCursorAtEnd) {
            this._cursor.keyPressed(keycode, isCursorAtEnd)
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource;
            this._view.setDataSource(dataSource);
            dataSource.addDelegate(this);
            if (this._dataSource.getWrapperClass) this._view.getElement().addClass(this._dataSource.getWrapperClass())
        },
        _highlightCurrentRow: function () {
            this._highlightRow(this._currentSection, this._currentRow)
        },
        _highlightRow: function (sectionIndex, rowIndex) {
            this._view.highlightRow(sectionIndex, rowIndex)
        },
        _unhighlightCurrentRow: function () {
            this._unhighlightRow(this._currentSection, this._currentRow)
        },
        _unhighlightRow: function (sectionIndex, rowIndex) {
            this._view.unhighlightRow(sectionIndex,
                rowIndex)
        },
        _selectRow: function () {
            this._selectedSection = this._currentSection;
            this._selectedRow = this._currentRow;
            this._view.selectRow(this._currentSection, this._currentRow)
        },
        _deselectRow: function () {
            this._view.deselectRow(this._selectedSection, this._selectedRow)
        },
        _selectNextRow: function () {
            if (this._rowSelectionLocked) return;
            this._unhighlightCurrentRow();
            this._moveToNextRow();
            this._highlightCurrentRow()
        },
        _selectPreviousRow: function () {
            if (this._rowSelectionLocked) return;
            this._unhighlightCurrentRow();
            this._moveToPreviousRow();
            this._highlightCurrentRow()
        },
        _moveToNextRow: function () {
            if (this._rowSelectionLocked) return;
            this._currentRow++;
            if (this._currentRow >= this._dataSource.numberOfRowsForSection(this._currentSection)) {
                this._currentRow = 0;
                this._currentSection++;
                if (this._currentSection >= this._dataSource.numberOfSections()) this._currentSection = 0
            }
        },
        _moveToPreviousRow: function () {
            this._currentRow--;
            if (this._currentRow < 0) {
                this._currentSection--;
                if (this._currentSection < 0) this._currentSection = this._dataSource.numberOfSections() - 1;
                this._currentRow = this._dataSource.numberOfRowsForSection(this._currentSection) - 1
            }
        },
        _resetCursor: function () {
            this._currentRow = 0;
            this._currentSection = 0
        },
        _getRowInfo: function (sectionIndex, rowIndex) {
            sectionIndex = _.isReal(sectionIndex) ? sectionIndex : this._currentSection;
            rowIndex = _.isReal(rowIndex) ? rowIndex : this._currentRow;
            return this._dataSource.infoForRow(sectionIndex, rowIndex)
        },
        rowHovered: function (sectionIndex, rowIndex) {
            if (this._rowSelectionLocked) return;
            this._currentSection = sectionIndex;
            this._currentRow =
                rowIndex;
            this._highlightCurrentRow();
            var rowInfo = this._getRowInfo();
            this._callDelegateFunction("rowFocused", rowInfo)
        },
        rowUnhovered: function (sectionIndex, rowIndex) {
            if (this._rowSelectionLocked) return;
            this._unhighlightRow(sectionIndex, rowIndex);
            this._callDelegateFunction("rowUnfocused", this._getRowInfo(sectionIndex, rowIndex))
        },
        rowPressed: function (sectionIndex, rowIndex) {
            if (this._rowSelectionLocked) return;
            if (this._dataSource.rowsAreNotSelectable && this._dataSource.rowsAreNotSelectable()) return;
            this._currentSection =
                sectionIndex;
            this._currentRow = rowIndex;
            this._deselectRow();
            this._selectRow();
            this._callDelegateFunction("rowPressed", this._getRowInfo())
        },
        rowMetaActionPressed: function (sectionIndex, rowIndex) {
            this._callDelegateFunction("rowMetaActionPressed", this._getRowInfo(sectionIndex, rowIndex))
        },
        cursorDown: function () {
            var self = this;
            this._view.blockMouseEvents();
            this._delayedUnblockMouseEvents();
            this._selectNextRow();
            this._callDelegateFunction("rowFocused", this._getRowInfo())
        },
        cursorEnter: function () {
            this._deselectRow();
            this._selectRow();
            this._callDelegateFunction("rowPressed", this._getRowInfo())
        },
        cursorUp: function () {
            var self = this;
            this._view.blockMouseEvents();
            this._delayedUnblockMouseEvents();
            this._selectPreviousRow();
            this._callDelegateFunction("rowFocused", this._getRowInfo())
        },
        cursorLeft: function () {
            this._callDelegateFunction("cursorLeft", this._getRowInfo())
        },
        cursorRight: function (isCursorAtEnd) {
            this._callDelegateFunction("cursorRight", this._getRowInfo(), isCursorAtEnd)
        },
        dataChanged: function () {
            this._unhighlightCurrentRow();
            this._refresh();
            this._resetCursor();
            if (this._dataSource.dontHighlightOnDataChange && this._dataSource.dontHighlightOnDataChange()) return;
            if (this._dataSource.numberOfSections() === 0) return;
            this._highlightCurrentRow();
            this._callDelegateFunction("rowFocused", this._getRowInfo())
        },
        select: function () {
            this._unhighlightCurrentRow();
            this.cursorEnter();
            this._highlightCurrentRow()
        },
        highlightPosition: function (position) {
            this._unhighlightCurrentRow();
            this._currentSection = position.sectionIndex;
            this._currentRow = position.rowIndex;
            this._moveToNextRow();
            this._moveToPreviousRow();
            this._highlightCurrentRow()
        },
        selectPosition: function (position) {
            this._unhighlightCurrentRow();
            this._deselectRow();
            this._currentSection = position.sectionIndex;
            this._currentRow = position.rowIndex;
            this._moveToNextRow();
            this._moveToPreviousRow();
            this._highlightCurrentRow();
            this._selectRow()
        },
        reset: function () {
            this._deselectRow();
            this._unhighlightCurrentRow()
        },
        lockRowSelection: function () {
            this._rowSelectionLocked = true;
            this._selectRow()
        },
        unlockRowSelection: function () {
            this._rowSelectionLocked =
                false;
            this._deselectRow()
        },
        _refresh: function () {
            this._view.hide();
            this._view.empty();
            var numSections = this._dataSource.numberOfSections();
            for (var ii = 0; ii < numSections; ii++) this._renderSection(ii);
            this._view.show()
        },
        _renderSection: function (sectionIndex) {
            if (!this._dataSource.sectionShouldShow(sectionIndex)) return;
            var sectionTitle, sectionTitleClass, sectionIconClass, doesSectionToggle, extraTitleText;
            if (this._dataSource.sectionTitle) sectionTitle = this._dataSource.sectionTitle(sectionIndex);
            if (this._dataSource.sectionTitleClass) sectionTitleClass =
                this._dataSource.sectionTitleClass(sectionIndex);
            if (this._dataSource.sectionIconClass) sectionIconClass = this._dataSource.sectionIconClass(sectionIndex);
            if (this._dataSource.doesSectionToggle) doesSectionToggle = this._dataSource.doesSectionToggle(sectionIndex);
            if (this._dataSource.sectionTitleExtraText) extraTitleText = this._dataSource.sectionTitleExtraText(sectionIndex);
            this._view.addSection(sectionIndex, sectionTitle, sectionTitleClass, sectionIconClass, doesSectionToggle, extraTitleText);
            this._renderSectionRows(sectionIndex)
        },
        _renderSectionRows: function (sectionIndex) {
            var rowCount = this._dataSource.numberOfRowsForSection(sectionIndex);
            for (var ii = 0; ii < rowCount; ii++) this._renderRow(sectionIndex, ii)
        },
        _renderRow: function (sectionIndex, rowIndex) {
            var rowInfo = this._dataSource.infoForRow(sectionIndex, rowIndex);
            var rowEl = null;
            if (rowInfo.viewController) {
                rowInfo.viewController.setListViewController(this);
                this._view.addViewRow(rowInfo.viewController.getView(), sectionIndex, rowIndex)
            } else this._view.renderBasicListRow(rowInfo, sectionIndex,
                rowIndex)
        }
    });
    Library.set("BentoBox.Widgets.ListView.ListViewViewController", ListViewViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var ListViewView = function () {
        Streak.ViewControllerBase.call(this);
        this._dataSource = null;
        this._sectionsInfo = [];
        this._scrollOnHighlight = true;
        this._el = HTML.get("listViewMain", true);
        this._listItemHoverElement = $('<div class="streak__listView_hoverItem"></div>');
        this._rows = {};
        this._sections = {};
        this._rowTemplate = HTML.get("listViewRow");
        this._sectionTemplate = HTML.get("listViewSection");
        this._mouseEventsBlocked = false
    };
    ListViewView.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(ListViewView.prototype, {
        getEl: function () {
            return this._el
        },
        getElement: function () {
            return this._el
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource
        },
        hide: function () {
            this._el.fastHide()
        },
        show: function () {
            this._el.fastShow()
        },
        empty: function () {
            this._el.empty();
            this._rows = {};
            this._sections = {}
        },
        blockMouseEvents: function () {
            this._mouseEventsBlocked = true
        },
        unblockMouseEvents: function () {
            this._mouseEventsBlocked =
                false
        },
        addSection: function (sectionIndex, sectionTitle, titleClass, titleIconClass, doesSectionToggle, extraTitleText) {
            var sectionEl = $(document.createElement("div"));
            sectionEl[0].setAttribute("class", "streak__listViewSection");
            sectionEl[0].innerHTML = this._sectionTemplate({
                title: sectionTitle
            });
            var sectionTitleElement = sectionEl.find(".streak__listViewHeader");
            if (_.isReal(titleIconClass)) {
                var iconEl = sectionTitleElement.find(".streak__bbIcon");
                iconEl.css("display", "");
                iconEl.addClass(titleIconClass)
            }
            sectionTitleElement.add(titleClass);
            if (!_.isReal(titleClass) && !_.isReal(sectionTitle)) sectionTitleElement.remove();
            if (doesSectionToggle) {
                sectionTitleElement.find(".streak__openCloseExpando")[0].style.display = "";
                this._addSectionHeaderOpenCloseEvents(sectionTitleElement, sectionEl)
            } else sectionTitleElement.find(".streak__openCloseExpando")[0].style.display = "none"; if (extraTitleText) {
                sectionTitleElement.find(".streak__titleExtra")[0].innerHTML = extraTitleText;
                sectionTitleElement.find(".streak__titleExtra").show()
            } else sectionTitleElement.find(".streak__titleExtra").hide();
            this._el.append(sectionEl);
            this._sections[sectionIndex] = sectionEl
        },
        _addSectionHeaderOpenCloseEvents: function (sectionTitle, sectionEl) {
            var isOn = true;
            sectionTitle[0].addEventListener("click", function () {
                isOn = !isOn;
                if (isOn) {
                    sectionTitle.find(".streak__openCloseExpando").removeClass("Wo").addClass("Wq");
                    sectionEl.find(".streak__listViewTable")[0].style.display = ""
                } else {
                    sectionTitle.find(".streak__openCloseExpando").removeClass("Wq").addClass("Wo");
                    sectionEl.find(".streak__listViewTable")[0].style.display =
                        "none"
                }
            })
        },
        addViewRow: function (view, sectionIndex, rowIndex) {
            var rowEl = $(document.createElement("div"));
            rowEl[0].setAttribute("class", "streak__listViewRow");
            rowEl.append(view.getElement());
            this._setupRowBindings(rowEl, sectionIndex, rowIndex);
            this._rows["" + sectionIndex + "_" + rowIndex] = rowEl;
            this._sections[sectionIndex].find(".streak__listViewTable").append(rowEl)
        },
        renderBasicListRow: function (rowInfo, sectionIndex, rowIndex) {
            var rowEl = $(document.createElement("div"));
            rowEl[0].setAttribute("class", "streak__listViewRow  J-N J-LC-Jz");
            rowEl[0].innerHTML = this._rowTemplate({
                text: rowInfo.text
            });
            if (rowInfo.hasRightArrow) {
                rowEl.find(".streak__menuArrow").show();
                rowEl.find(".streak__menuArrow").css("visibility", "visible")
            }
            if (rowInfo.hasLeftArrow) {
                rowEl.find(".streak__menuArrowLeft").show();
                rowEl.find(".streak__menuArrowLeft").css("visibility", "visible")
            }
            this._setupRowBindings(rowEl, sectionIndex, rowIndex);
            this._rows["" + sectionIndex + "_" + rowIndex] = rowEl;
            this._sections[sectionIndex].find(".streak__listViewTable").append(rowEl)
        },
        _setupRowBindings: function (el,
            sectionIndex, rowIndex) {
            var self = this;
            el.mouseenter(function () {
                if (self._mouseEventsBlocked) return;
                self._callDelegateFunction("rowHovered", sectionIndex, rowIndex);
                if (self._doesHaveItemMetaClass(sectionIndex, rowIndex)) self._addHoverItemElement(el, sectionIndex, rowIndex)
            });
            el.mouseleave(function () {
                if (self._mouseEventsBlocked) return;
                self._callDelegateFunction("rowUnhovered", sectionIndex, rowIndex);
                if (self._doesHaveItemMetaClass(sectionIndex, rowIndex)) self._listItemHoverElement.remove()
            });
            el.click(function (e) {
                self._callDelegateFunction("rowPressed",
                    sectionIndex, rowIndex);
                e.stopPropagation()
            })
        },
        _doesHaveItemMetaClass: function (sectionIndex, rowIndex) {
            return this._dataSource.getItemMetaClass && this._dataSource.getItemMetaClass(sectionIndex, rowIndex)
        },
        _addHoverItemElement: function (listItemElement, sectionIndex, rowIndex) {
            var self = this;
            this._listItemHoverElement.addClass(this._dataSource.getItemMetaClass(sectionIndex, rowIndex));
            listItemElement.append(this._listItemHoverElement);
            this._listItemHoverElement.off(".listView");
            this._listItemHoverElement.on("click.listView",
                function (e) {
                    self._callDelegateFunction("rowMetaActionPressed", sectionIndex, rowIndex);
                    e.stopPropagation()
                })
        },
        unhighlightRow: function (sectionIndex, rowIndex) {
            this._el.find(".streak__listViewRowHover").removeClass("streak__listViewRowHover");
            var rowEl = this._rows["" + sectionIndex + "_" + rowIndex];
            if (_.isReal(rowEl)) rowEl.removeClass("streak__listViewRowHover")
        },
        highlightRow: function (sectionIndex, rowIndex) {
            var rowEl = this._rows["" + sectionIndex + "_" + rowIndex];
            if (_.isReal(rowEl)) {
                rowEl.addClass("streak__listViewRowHover");
                if (!this._dataSource.dontScrollOnHighlight || !this._dataSource.dontScrollOnHighlight()) rowEl.scrollintoview({
                    duration: 0
                })
            }
        },
        selectRow: function (sectionIndex, rowIndex) {
            var rowEl = this._rows["" + sectionIndex + "_" + rowIndex];
            if (_.isReal(rowEl)) rowEl.addClass("streak__listViewRowSelected")
        },
        deselectRow: function (sectionIndex, rowIndex) {
            var rowEl = this._rows["" + sectionIndex + "_" + rowIndex];
            if (_.isReal(rowEl)) rowEl.removeClass("streak__listViewRowSelected")
        }
    });
    Streak.Library.set("BentoBox.Widgets.ListView.ListViewView",
        ListViewView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var superClass = Streak.UI.Delegator;
    var ListViewBaseModel = Streak.Class.subclass({
        superclass: superClass,
        _memberVariables: [{
            name: "_sections",
            destroy: true
        }],
        _initialize: function () {
            superClass.prototype._initialize.call(this);
            this._sections = [];
            return this
        },
        removeAllSections: function () {
            this._sections.length = 0;
            this._callDelegateFunction("dataChanged")
        },
        addSection: function (section) {
            this._sections.push(section);
            this._callDelegateFunction("dataChanged");
            return this._sections.length - 1
        },
        numberOfSections: function () {
            return this._sections.length
        },
        numberOfRowsForSection: function (sectionIndex) {
            var section = this._sections[sectionIndex];
            if (!section) return -1;
            return section.rows.length
        },
        sectionShouldShow: function (sectionIndex) {
            return true
        },
        infoForRow: function (sectionIndex, row) {
            if (this._sections.length === 0) return;
            return this._sections[sectionIndex].rows[row]
        },
        sectionTitle: function (sectionIndex) {
            return this._sections[sectionIndex].name
        },
        sectionTitleClass: function (sectionIndex) {},
        sectionIconClass: function (sectionIndex) {},
        doesSectionToggle: function (sectionIndex) {
            return this._sections[sectionIndex].doesSectionToggle
        },
        sectionTitleExtraText: function (sectionIndex) {
            return this._sections[sectionIndex].extraHeaderText
        }
    });
    Streak.Library.set("BentoBox.Widgets.ListView.ListViewBaseModel", ListViewBaseModel)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var SmartButtonMenu = {
        templates: {},
        defaults: {
            list: null,
            model: null,
            property: null,
            fieldIndex: -1,
            autoSave: true,
            buttonColor: "normal",
            autoClose: false
        },
        create: function (options) {
            this._init();
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        _init: function (cb) {
            if (!this.templates.button) this.templates.button = HTML.get("smartButtonMenuButton")
        }
    };
    SmartButtonMenu.impl = function (o) {
        var options =
            o;
        var bodyClosed = false;
        options.trackingContext.widgetContext += "/smartButtonMenu";
        var button = BB.Widgets.Button.create({
            trackingContext: options.trackingContext,
            color: options.buttonColor,
            isToggle: true,
            onFunc: function (e) {
                sdm.focus()
            },
            offFunc: function (e) {
                sdm.hide();
                button.el.focus()
            },
            isDropdown: true
        });
        options.span = button.el;
        options.extraText = button.innerEl[0].innerHTML;
        var sdm = BB.Widgets.SmartDropdown.create(options);
        sdm.el.bind({
            "menuClosed": function () {
                button.off()
            },
            "itemSelected": function () {
                button.off()
            },
            "innerTabPressed": function () {
                button.off();
                button.el.trigger("tabPressed")
            },
            "innerShiftTabPressed": function () {
                button.off();
                button.el.trigger("shiftTabPressed")
            }
        });
        if (options.autoClose) button.el.bodyCloseAndStop({
            closeFunction: function () {
                button.off();
                button.el.blur()
            },
            body: Gmail.elements.body,
            stop: sdm.el[0]
        });
        sdm.getElement = function () {
            return sdm.el
        };
        var _destroy = sdm.destroy;
        sdm.destroy = function () {
            if (_.isFunction(_destroy)) _destroy();
            button.el.unbindBodyCloseAndStop();
            button.destroy()
        };
        return sdm
    };
    BB.Widgets.SmartButtonMenu =
        SmartButtonMenu
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var StageButton = {
        defaults: {
            pipeline: null,
            box: null
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    StageButton.impl = function (o) {
        var options = o;
        options.trackingContext.widgetContext += "/stageButton";
        var sbm = BB.Widgets.SmartButtonMenu.create({
            list: options.pipeline.getStagesAsList(),
            model: options.box,
            property: "stageKey",
            overrideTab: true,
            autoClose: true,
            trackingContext: options.trackingContext
        });
        var updateMenu =
            function () {
                sbm.renderMenu(options.pipeline.getStagesAsList())
        };
        options.pipeline.bind("stageChange", null, updateMenu);
        var _destroy = sbm.destroy;
        sbm.destroy = function () {
            if (_destroy) _destroy();
            options.pipeline.unbind("stageChange", null, null, updateMenu)
        };
        return sbm
    };
    BB.Widgets.StageButton = StageButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        BB = Streak.BentoBox,
        Locale = Streak.Locale;
    var CONSTANTS = {
        columnPadding: 5
    };
    var self, Spreadsheet;
    self = Spreadsheet = {
        numMap: {
            1: "!",
            2: "@",
            3: "#",
            4: "$",
            5: "%",
            6: "^",
            7: "&",
            8: "*",
            9: "(",
            "0": ")"
        },
        templates: {},
        defaults: {},
        trackingContext: {
            widgetContext: "pipelineView/spreadsheet",
            eventName: "SpreadsheetCellEdit"
        },
        activeSpreadsheet: null,
        init: function (cb) {
            this.templates.spreadsheet = HTML.get("spreadsheetSheet");
            this.templates.group =
                HTML.get("spreadsheetGroup")();
            this.templates.row = HTML.get("spreadsheetRow")();
            this.inputOptions = {
                trackingContext: this.trackingContext,
                delayedBind: true
            };
            this.columnMenu = BB.Widgets.Spreadsheet.ColumnMenu;
            this.groupColumnMenu = BB.Widgets.Spreadsheet.GroupColumnMenu;
            BB.Keyboard.addChordHelpItem("<Ctrl>+b", Locale.getString("keyboard_create_new_box"));
            BB.Keyboard.addChordHelpItem("<Ctrl>+d", Locale.getString("keyboard_delete_selected_boxes"));
            $(window).resize(function () {
                if (self.activeSpreadsheet && self.activeSpreadsheet.el &&
                    self.activeSpreadsheet.el.isVisible()) self.activeSpreadsheet.redraw()
            });
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            self.activeSpreadsheet = new this.impl(o);
            return self.activeSpreadsheet
        }
    };
    Spreadsheet.impl = function (o) {
        var inputs = {
            TEXT: BB.Widgets.SpreadsheetTextbox.create(Spreadsheet.inputOptions),
            TEXT_INPUT: BB.Widgets.SpreadsheetTextarea.create(Spreadsheet.inputOptions),
            DROPDOWN: BB.Widgets.SpreadsheetSmartDropdown.create(Spreadsheet.inputOptions),
            DATE: BB.Widgets.SpreadsheetCalendar.create(Spreadsheet.inputOptions),
            PERSON: BB.Widgets.PeoplePicker.create(Spreadsheet.inputOptions),
            ASSIGNED_TO: BB.Widgets.SpreadsheetAssignedTo.create(Spreadsheet.inputOptions),
            LINKED_BOXES: new BB.Widgets.SpreadsheetLinkedBoxesViewController
        };
        var options = o,
            dataSource = o.dataSource,
            dataTable = dataSource.dataWrapper.cellTable,
            dataCursor = dataSource.dataWrapper.cursor,
            el = $(document.createElement("div")),
            cursorDiv = $(document.createElement("div")),
            renderQueued = false,
            loaded = false,
            renderSettings = {
                height: 24,
                paddingBottom: 0,
                viewportBuffer: 4,
                physicalRows: [],
                orderedPhysicalRows: [],
                cells: [],
                widthConstants: {
                    col1: 36,
                    col2: 41,
                    table: 82
                },
                groupRowNameWidth: 0,
                totalWidth: 0,
                widthMap: [],
                columnStartingPosition: [],
                visibleColumnRange: {
                    start: 0,
                    end: -1
                },
                previousVisibleColumnRange: null,
                visibleColumns: 0,
                currentCell: null,
                currentCoord: null,
                cursorAtTop: false,
                highlightCell: null,
                headCollapse: null,
                headCheckbox: null,
                headCheckboxInput: null,
                currentInputBoundingBox: {
                    top: null,
                    left: null,
                    right: null,
                    bottom: null
                }
            }, render = function () {
                el.find(".thead").detach();
                el[0].innerHTML = '<div class="thead bb_tr"></div><div class="spreadsheetContainer"><div class="overflowtBody"><div class="tbody"></div></div></div>';
                renderSettings.physicalRows = [];
                renderSettings.spreadsheetContainer = el.find(".spreadsheetContainer");
                renderSettings.overflowBody = el.find(".overflowtBody");
                renderSettings.tbody = el.find(".tbody");
                renderSettings.thead = el.find(".thead");
                renderSettings.left = 0;
                renderSettings.top = 0;
                renderSettings.highlightCell = null;
                renderSettings.currentCoord = [0, 0];
                renderSettings.currentColumnCutoff = -1;
                el.append(cursorDiv);
                renderHead();
                generateWidthMap();
                redraw();
                renderSettings.overflowBody[0].onscroll = function () {
                    dataSource.registerScrollPosition(renderSettings.overflowBody[0].scrollTop);
                    redraw()
                };
                renderSettings.overflowBody.bodyCloseAndStop({
                    body: Gmail.elements.body,
                    stop: null,
                    useCapture: true,
                    closeFunction: function (e) {
                        if (el.isVisible())
                            if ($(e.target).parents().filter(el).length === 0) blur()
                    }
                });
                Gmail.hideNotice(100);
                loaded = true;
                focus();
                if (renderSettings.highlightCell) {
                    var coord = extractCellPosition(renderSettings.highlightCell[0]);
                    if (dataSource) {
                        dataSource.setCursorPosition(coord);
                        setTimeout(function () {
                            dataSource.cursorSelect(coord);
                            renderSettings.highlightCell = null
                        }, 20)
                    }
                }
            }, blur = function () {
                dataSource.unfocusCursor();
                if (cursorDiv.isVisible()) cursorDiv.fastHide();
                closeMenus();
                el.blur()
            };
        var renderHead = function () {
            var i, index = 0;
            var hidden = false;
            var head = el.find("div.thead");
            head[0].innerHTML = '<div class="bb_th first-child cell cellExpando" tabindex="-1"></div><div class="bb_th firstHidden second-child cell" tabindex="-1" role="checkbox"><input type="checkbox" tabindex="-1" /></div>';
            var prevVisible = el.find(".thead .firstHidden");
            var divs = head.children();
            renderSettings.headCollapse = divs[0];
            renderSettings.headCheckbox =
                divs[1];
            renderSettings.headCheckboxInput = $(divs[1]).find("input")[0];
            for (i = 2, index = 0; i < dataTable.getTotalColumnCount() + 2; i++) {
                if (dataTable.isColumnNotPresent(i)) continue;
                if (dataTable.isColumnVisible(i)) {
                    var th = renderHeadCell(index, i);
                    head[0].appendChild(th[0]);
                    prevVisible = th;
                    hidden = false;
                    index++;
                    if (dataTable.isColumnNew(i)) renderSettings.highlightCell = prevVisible
                } else if (!hidden) renderHeadHiddenCell(prevVisible, i)
            }
            renderSettings.visibleColumns = index;
            head.append("<br />");
            head.find(".headCell").columnReorder({
                body: renderSettings.tbody,
                doneReorder: function (oldIndex, newIndex, isAfter) {
                    dataTable.columnReorder(oldIndex, newIndex, isAfter);
                    BB.Tracker.trackStreakActive(Spreadsheet.trackingContext, {
                        eventName: "ColumnOrderChanged"
                    })
                }
            })
        }, renderHeadCell = function (visibleIndex, columnIndex) {
                var cIndex = visibleIndex + 2;
                var th = $(document.createElement("div"));
                var inner = $(document.createElement("div"));
                inner.addClass("name");
                th[0].setAttribute("class", "bb_th headCell");
                th[0].setAttribute("tabindex", "-1");
                th[0].setAttribute("cellPosition", "0," + cIndex);
                if (dataTable.isColumnRenameable(columnIndex)) th.addClass("th_editable");
                var columnWidth = dataTable.getColumnWidth(columnIndex);
                th.css({
                    minWidth: columnWidth,
                    width: columnWidth,
                    maxWidth: columnWidth
                });
                th.colResizable({
                    onResize: function (width) {
                        dataTable.setColumnWidth(columnIndex, width)
                    },
                    doneResize: function () {
                        dataTable.saveColumnWidth(columnIndex)
                    }
                });
                inner.append(dataTable.getValue([0, cIndex]));
                var settingsDiv = $('<div class="settings"><div class="afM"></div></div>');
                var menuButton = settingsDiv.find(".afM");
                menuButton.easyHoverClass("afN");

                function renderMenu(force) {
                    if (settingsDiv.find(".bb_menu").length > 0) {
                        if (settingsDiv.find(".bb_menu").is(":FastVisible")) closeMenus()
                    } else {
                        cursorDiv.fastHide();
                        settingsDiv.append(Spreadsheet.columnMenu.menu.el);
                        Spreadsheet.columnMenu.setColumnData(dataTable.getColumnData(columnIndex), dataTable.getPipeline(), th)
                    }
                }
                menuButton.click(function (e) {
                    renderMenu();
                    BB.Tracker.trackStreakActive(Spreadsheet.trackingContext, {
                        eventName: "ColumnMenuArrowClick"
                    });
                    e.stopPropagation();
                    e.preventDefault()
                });
                th.customBind("showMenu", function () {
                    renderMenu(true)
                });
                th[0].oncontextmenu = function () {
                    BB.Tracker.trackStreakActive(Spreadsheet.trackingContext, {
                        eventName: "ColumnRightClick"
                    });
                    renderMenu(true);
                    return false
                };
                th.append(inner);
                th.append(settingsDiv);
                return th
            }, generateWidthMap = function () {
                renderSettings.widthMap = [];
                renderSettings.groupRowNameWidth = -1 * CONSTANTS.columnPadding;
                renderSettings.columnStartingPosition.length = 0;
                var currentWidth = renderSettings.widthConstants.col1 + renderSettings.widthConstants.col2;
                for (var i = 2, index = 0; i < dataTable.getTotalColumnCount() + 2; i++) {
                    if (dataTable.isColumnNotPresent(i)) continue;
                    if (dataTable.isColumnVisible(i)) {
                        renderSettings.columnStartingPosition.push(currentWidth);
                        var cIndex = index + 2;
                        var columnWidth = dataTable.getColumnWidth(i);
                        renderSettings.widthMap[cIndex] = columnWidth;
                        renderSettings.groupRowNameWidth += renderSettings.widthMap[cIndex] + CONSTANTS.columnPadding;
                        index += 1;
                        currentWidth += columnWidth + CONSTANTS.columnPadding
                    }
                }
                renderSettings.visibleColumnRange.start = 0;
                renderSettings.visibleColumnRange.end =
                    renderSettings.widthMap.length;
                renderSettings.totalWidth = _.reduce(renderSettings.widthMap, function (item, val) {
                    return item + val + CONSTANTS.columnPadding
                }, renderSettings.widthConstants.col1 + renderSettings.widthConstants.col2)
            }, updateHeadCell = function (coord) {
                if (coord[1] < 2) {
                    redrawHead();
                    return
                }
                var state = dataTable.getState(coord);
                var cell = $(renderSettings.thead.children()[coord[1]]);
                if (!cell || cell.length === 0) return;
                switch (state) {
                case "DEFAULT":
                case "HIGHLIGHT":
                    cell.removeClass("active bigEdit selected");
                    cell.find(".name").text(dataTable.getValue(coord));
                    cell.children().fastShow("block");
                    if (state === "HIGHLIGHT") renderSettings.currentCell = cell;
                    break;
                case "EDIT":
                    var cellData = dataTable.getData(coord);
                    if (Streak._.isUndefined(cellData.model)) cell.addClass("bigEdit selected");
                    else {
                        cell.children().fastHide();
                        cell.addClass("active bigEdit selected");
                        cellData.parent = cell;
                        currentInput = inputs[cellData.type];
                        currentInput.setup(cellData);
                        cell.append(currentInput.getElement());
                        currentInput.focus();
                        renderSettings.currentCell =
                            cell
                    }
                    break
                }
                renderStylesForCell(cell[0], coord)
            }, renderStylesForCell = function (cell, coord) {
                var cursorStyles = dataCursor.getClassesPrettyString(coord);
                if (_.isDefined(cursorStyles) && cursorStyles.length > 0) $.fastAddClassToRaw(cell, cursorStyles);
                else $.removeClassFromRaw(cell, dataCursor.getActiveClasses())
            }, renderHeadHiddenCell = function (th, columnIndex) {
                var hidden = $(document.createElement("div"));
                hidden[0].innerHTML = '<div class="streak__hiddenContainer"></div><div class="streak__hiddenContainerTwo"><div class="left"></div><div class="right"></div></div>';
                hidden.addClass("hiddenCell");
                th.append(hidden);
                hidden.click(function (e) {
                    dataTable.action([0, columnIndex]);
                    e.stopPropagation()
                })
            }, redrawHead = function () {
                renderCell(renderSettings.headCollapse, [0, 0]);
                renderCheckboxCell(renderSettings.headCheckbox, renderSettings.headCheckboxInput, [0, 1])
            }, ensure = function (desired) {
                var boxRowHTML = Spreadsheet.templates.row;
                for (var i = 2; i < renderSettings.visibleColumns + 2; i++) boxRowHTML += '<div class="cell boxCell" tabindex="-1" style="width:' + renderSettings.widthMap[i] + "px; left:" +
                    renderSettings.columnStartingPosition[i - 2] + 'px;"></div>';
                while (renderSettings.physicalRows.length < desired) {
                    var group = document.createElement("div");
                    group.setAttribute("class", "bb_row bb_tr group bb_hbox");
                    groupHTML = Spreadsheet.templates.group;
                    for (var i = 2; i < renderSettings.visibleColumns + 2; i++) groupHTML += ['<div class="cell groupCell" tabindex="-1" style="width:' + renderSettings.widthMap[i] + "px; left:" + renderSettings.columnStartingPosition[i - 2] + 'px;">', '<div class="groupText"></div>', '<div class="settings"><div class="afM"></div></div>',
                        "</div>"
                    ].join("");
                    group.innerHTML = groupHTML;
                    group = $(group);
                    group.fastHide();
                    setupGroupRow(group);
                    var box = document.createElement("div");
                    box.setAttribute("class", "boxRow bb_row");
                    box.style.width = renderSettings.totalWidth + "px";
                    box.innerHTML = boxRowHTML;
                    box = $(box);
                    box.fastHide();
                    var row = {
                        group: group,
                        box: box,
                        boxCells: box.findReturnRaw(".boxCell"),
                        boxFirstChild: box.findReturnRaw(".first-child")[0],
                        boxCheckbox: box.findReturnRaw("[role=checkbox]")[0],
                        boxCheckboxInput: box.findReturnRaw("[role=checkbox] input")[0],
                        groupFirstChild: group.findReturnRaw(".first-child")[0],
                        groupCheckbox: group.findReturnRaw("[role=checkbox]")[0],
                        groupCheckboxInput: group.findReturnRaw("[role=checkbox] input")[0],
                        groupCells: group.find(".groupCell")
                    };
                    renderSettings.physicalRows.unshift(row);
                    renderSettings.tbody.prepend(row.group);
                    renderSettings.tbody.prepend(row.box)
                }
            }, setupGroupRow = function (groupRow) {
                var settingsMenus = groupRow.find(".settings");
                _.each(settingsMenus, function (settingsDivElement, index) {
                    var settingsDiv = $(settingsDivElement);
                    var cell = $(settingsDivElement.parentNode);
                    var menuButton = settingsDiv.find(".afM");
                    menuButton.superEasyHoverClass("afN");

                    function renderMenu(force) {
                        if (settingsDiv.find(".bb_menu").length > 0) {
                            if (settingsDiv.find(".bb_menu").is(":FastVisible")) closeMenus()
                        } else {
                            var coord = extractCellPosition(cell[0]);
                            dataSource.setCursorPosition(coord);
                            cursorDiv.fastHide();
                            settingsDiv.append(Spreadsheet.groupColumnMenu.menu.el);
                            Spreadsheet.groupColumnMenu.setGroupColumnData(dataTable.getGroupColumnData(coord), dataTable.getPipeline(),
                                cell)
                        }
                    }
                    menuButton.fastOnClick(function (e) {
                        renderMenu();
                        BB.Tracker.trackStreakActive(Spreadsheet.trackingContext, {
                            eventName: "GroupColumnMenuArrowClick"
                        });
                        e.stopPropagation();
                        e.preventDefault()
                    });
                    cell.customBind("showMenu", function () {
                        renderMenu(true)
                    });
                    cell[0].oncontextmenu = function () {
                        if (!settingsDiv.is(":FastVisible")) return;
                        BB.Tracker.trackStreakActive(Spreadsheet.trackingContext, {
                            eventName: "GroupColumnRightClick"
                        });
                        renderMenu(true);
                        return false
                    }
                })
            }, redraw = function (forceRefresh) {
                var cellh = renderSettings.height;
                renderSettings.offsetHeight = el[0].offsetHeight;
                renderSettings.tbody[0].style.width = renderSettings.widthConstants.table + renderSettings.groupRowNameWidth + 200 + "px";
                var oheight = renderSettings.offsetHeight;
                var top = renderSettings.overflowBody[0].scrollTop;
                var left = renderSettings.overflowBody[0].scrollLeft;
                var currentWidth = renderSettings.overflowBody.width();
                var topRow = ~~ (top / cellh);
                var len = dataTable.getLastRowNumber();
                renderSettings.tbody[0].style.height = len * cellh + renderSettings.paddingBottom + "px";
                var slosh =
                    renderSettings.viewportBuffer;
                var desiredRows = ~~ (oheight / cellh + slosh);
                ensure(desiredRows);
                var start = Math.max(topRow - slosh / 2, 0);
                var end = Math.min(len, start + desiredRows);
                start = Math.max(0, end - desiredRows);
                var rows = renderSettings.physicalRows;
                renderSettings.orderedPhysicalRows.length = 0;
                var widthStart = left - 20;
                var widthEnd = left + currentWidth + 20;
                renderSettings.previousVisibleColumnRange = _.clone(renderSettings.visibleColumnRange);
                renderSettings.visibleColumnRange.start = 0;
                for (var ii = 0; ii < renderSettings.columnStartingPosition.length; ii++) {
                    var colPosition =
                        renderSettings.columnStartingPosition[ii];
                    if (colPosition < widthStart) renderSettings.visibleColumnRange.start = ii;
                    if (widthEnd > colPosition) renderSettings.visibleColumnRange.end = ii
                }
                var newVisibleColumns = getNewVisibleColumns();
                var newHiddenColumns = getNewHiddenColumns();
                renderSettings.left = left;
                renderSettings.top = top;
                renderSettings.bottom = top + oheight;
                for (var i = start; i < start + rows.length; i++) {
                    var row = rows[i % rows.length];
                    if (i < len) {
                        renderRow(row, i + 1, forceRefresh, newVisibleColumns, newHiddenColumns);
                        renderSettings.orderedPhysicalRows.push(row);
                        row.el[0].style.display = "block"
                    } else {
                        row.group[0].style.display = "none";
                        row.box[0].style.display = "none"
                    }
                }
                renderSettings.thead[0].style.left = -1 * left + "px";
                redrawCursor();
                redrawHead();
                if (currentInput && renderSettings.currentInputBoundingBox.top > renderSettings.top && renderSettings.currentInputBoundingBox.bottom < renderSettings.bottom && renderSettings.currentInputBoundingBox.left > renderSettings.left && renderSettings.currentInputBoundingBox.right < renderSettings.totalWidth) currentInput.focus(true)
            }, getNewVisibleColumns =
                function () {
                    var ii, newColumns = [];
                    for (ii = renderSettings.visibleColumnRange.start; ii < renderSettings.previousVisibleColumnRange.start; ii++) newColumns.push(ii);
                    for (ii = renderSettings.visibleColumnRange.end; ii > renderSettings.previousVisibleColumnRange.end; ii--) newColumns.push(ii);
                    return newColumns
            }, getNewHiddenColumns = function () {
                var ii, newColumns = [];
                for (ii = renderSettings.previousVisibleColumnRange.start; ii < renderSettings.visibleColumnRange.start; ii++) newColumns.push(ii);
                for (ii = renderSettings.previousVisibleColumnRange.end; ii >
                    renderSettings.previousVisibleColumnRange.end; ii--) newColumns.push(ii);
                return newColumns
            }, renderRow = function (row, index, forceRefresh, newVisibleColumns, newHiddenColumns) {
                var ii, colIndex, el = null,
                    hash = dataTable.getRowHash(index),
                    cells;
                if (row.hash === hash && !forceRefresh) {
                    el = row.el;
                    if (newVisibleColumns.length + newHiddenColumns.length > 0) {
                        if (row.isGroup) cells = row.groupCells;
                        else cells = row.boxCells;
                        for (ii = 0; ii < newHiddenColumns.length; ii++) {
                            colIndex = newHiddenColumns[ii];
                            if (_.isReal(cells[colIndex])) cells[colIndex].style.display =
                                "none"
                        }
                        for (ii = 0; ii < newVisibleColumns.length; ii++) {
                            colIndex = newVisibleColumns[ii];
                            if (_.isReal(cells[colIndex])) {
                                renderCell(cells[colIndex], [index, colIndex + 2], dataTable.isGroup([index, 0]));
                                cells[colIndex].style.display = "block"
                            }
                        }
                    }
                } else {
                    if (dataTable.isGroup([index, 0])) {
                        row.box.fastHide();
                        el = row.group;
                        renderCell(row.groupFirstChild, [index, 0], true);
                        renderCheckboxCell(row.groupCheckbox, row.groupCheckboxInput, [index, 1]);
                        cells = row.groupCells;
                        if (cells.length > 0)
                            for (ii = renderSettings.visibleColumnRange.start; ii <=
                                renderSettings.visibleColumnRange.end; ii++)
                                if (_.isReal(cells[ii])) {
                                    renderCell(cells[ii], [index, ii + 2], true);
                                    cells[ii].style.display = "block"
                                }
                        row.isBox = false;
                        row.isGroup = true
                    } else {
                        row.group.fastHide();
                        el = row.box;
                        renderCell(row.boxFirstChild, [index, 0]);
                        renderCheckboxCell(row.boxCheckbox, row.boxCheckboxInput, [index, 1]);
                        cells = row.boxCells;
                        if (cells.length > 0)
                            for (ii = renderSettings.visibleColumnRange.start; ii <= renderSettings.visibleColumnRange.end; ii++)
                                if (_.isReal(cells[ii])) {
                                    renderCell(cells[ii], [index, ii +
                                        2
                                    ]);
                                    cells[ii].style.display = "block"
                                }
                        row.isBox = true;
                        row.isGroup = false
                    }
                    el[0].style.display = "block";
                    el[0].style.top = renderSettings.height * (index - 1) + "px";
                    row.hash = hash;
                    row.rowIndex = index;
                    var children = el.children();
                    $(children[children.length - 1]).addClass("last-child")
                }
                el[0].setAttribute("rowIndex", index);
                row.el = el
            }, renderCell = function (cell, coord, isGroup) {
                if (!cell) return;
                cell.setAttribute("cellPosition", coord[0] + "," + coord[1]);
                var cellElement = cell;
                if (isGroup && coord[1] > 0) cellElement = $(cell).find(".groupText")[0];
                if (!cellElement) cellElement = cell;
                var newHTML, html;
                var state = dataTable.getState(coord);
                switch (state) {
                case "DEFAULT":
                    $.removeClassFromRaw(cell, "active bigEdit selected");
                    html = cellElement.innerHTML.unescapeHTML();
                    newHTML = dataTable.getValue(coord);
                    if (html !== newHTML) cellElement.innerHTML = newHTML;
                    break;
                case "HIGHLIGHT":
                    $.removeClassFromRaw(cell, "active bigEdit selected");
                    $.fastAddClassToRaw(cell, "selected");
                    html = cellElement.innerHTML.unescapeHTML();
                    newHTML = dataTable.getValue(coord);
                    if (html !== newHTML) cellElement.innerHTML =
                        newHTML;
                    renderSettings.currentCell = cell;
                    break;
                case "EDIT":
                    var jCell = $(cell);
                    if (jCell.is(".bigEdit")) return;
                    jCell.addClass("active bigEdit selected");
                    var cellData = dataTable.getData(coord);
                    cellData.parent = jCell;
                    currentInput = inputs[cellData.type];
                    currentInput.setup(cellData);
                    if (_.isUndefined(currentInput)) jCell.removeClass("active");
                    else {
                        jCell.empty();
                        jCell.append(currentInput.getElement());
                        renderSettings.currentCell = cell;
                        renderSettings.currentInputBoundingBox.top = renderSettings.height * (coord[0] - 1);
                        renderSettings.currentInputBoundingBox.bottom = renderSettings.currentInputBoundingBox.top + renderSettings.height;
                        renderSettings.currentInputBoundingBox.left = renderSettings.columnStartingPosition[coord[1] - 2];
                        renderSettings.currentInputBoundingBox.right = renderSettings.currentInputBoundingBox.left + renderSettings.widthMap[coord[1]]
                    }
                    break
                }
                if (isGroup)
                    if (dataTable.isGroupColumnCalculable(coord)) $(cell).find(".settings").fastShow("block");
                    else $(cell).find(".settings").fastHide();
                renderStylesForCell(cell, coord);
                if (state === "EDIT") return currentInput
            }, renderCheckboxCell = function (cell, input, coord) {
                cell.setAttribute("cellPosition", coord[0] + "," + coord[1]);
                if (dataTable.getActionType(coord) === "CHECKBOX") {
                    input.style.display = "inline-block";
                    input.checked = dataTable.isChecked(coord)
                } else input.style.display = "none";
                renderStylesForCell(cell, coord)
            }, saveCellChanges = function () {
                if (currentInput) {
                    var saveInput = currentInput;
                    currentInput = null;
                    if (saveInput.preDetach) saveInput.preDetach();
                    saveInput.getElement().detach();
                    saveInput.updateValue();
                    if (saveInput.done) saveInput.done()
                }
            }, focus = function () {
                el.focus();
                cursorDiv.fastShow();
                redrawCursor()
            }, unfocus = function () {
                cursorDiv.fastHide();
                closeMenus();
                el.blur()
            }, resetCursor = function () {
                cursor.reset()
            };
        var getRowsForHash = function (hash) {
            var ret = [];
            for (var i = 0; i < renderSettings.physicalRows.length; i++)
                if (renderSettings.physicalRows[i].hash === hash) ret.push(renderSettings.physicalRows[i]);
            return ret
        };
        var renderCursor = function (coord, noXScroll, toTop, noScroll) {
            var left = -2;
            var scrollRectangle = {};
            if (coord[0] ===
                0) {
                cursorDiv[0].style.top = Math.max(renderSettings.height * (coord[0] - 1) - 2, -1) + "px";
                cursorDiv[0].style.zIndex = 3;
                scrollRectangle.top = 0;
                renderSettings.cursorAtTop = true;
                cursorDiv[0].style.pointerEvents = "none"
            } else {
                renderSettings.cursorAtTop = false;
                if (renderSettings.orderedPhysicalRows.length === 0) return;
                var topRowIndex = renderSettings.orderedPhysicalRows[0].el[0].getAttribute("rowIndex");
                var topRowHeight = parseInt(renderSettings.orderedPhysicalRows[0].el[0].style.top, 10);
                var diffIndex = coord[0] - topRowIndex +
                    1;
                cursorDiv[0].style.top = renderSettings.height * diffIndex + (topRowHeight - renderSettings.top) - 1 + "px";
                if (renderSettings.top > 0) cursorDiv[0].style.zIndex = 1;
                scrollRectangle.top = (coord[0] - 1) * renderSettings.height;
                cursorDiv[0].style.pointerEvents = ""
            } if (coord[1] === 0) cursorDiv[0].style.width = renderSettings.widthConstants.col1 + "px";
            else if (coord[1] === 1) {
                left += renderSettings.widthConstants.col1;
                cursorDiv[0].style.width = renderSettings.widthConstants.col2 + "px"
            } else {
                left += renderSettings.widthConstants.col1 + renderSettings.widthConstants.col2;
                for (var i = 2; i < coord[1]; i++) left += renderSettings.widthMap[i] + CONSTANTS.columnPadding;
                cursorDiv[0].style.width = renderSettings.widthMap[coord[1]] + CONSTANTS.columnPadding + "px"
            }
            cursorDiv[0].style.left = left - renderSettings.left + "px";
            if (!noScroll) {
                scrollRectangle.bottom = scrollRectangle.top + renderSettings.height + 100;
                scrollRectangle.left = parseInt(cursorDiv[0].style.left, 10);
                scrollRectangle.right = scrollRectangle.left + parseInt(cursorDiv[0].style.width, 10);
                renderSettings.tbody.scrollintoview({
                    duration: 0,
                    direction: noXScroll ?
                        "y" : "both",
                    toTop: toTop,
                    rectangle: scrollRectangle,
                    scroller: renderSettings.overflowtBody
                })
            }
            renderSettings.currentCoord = coord
        }, redrawCursor = function () {
                if (cursorDiv[0].style.display !== "none") renderCursor(dataSource.getCursorPosition(), false, false, true)
            };
        cursorDiv.click(function () {
            dataSource.cursorSelect()
        });
        var closeMenus = function () {
            Spreadsheet.columnMenu.close();
            Spreadsheet.columnMenu.menu.el.detach();
            Spreadsheet.groupColumnMenu.close();
            Spreadsheet.groupColumnMenu.menu.el.detach()
        };
        cursorDiv[0].oncontextmenu =
            function () {
                if (renderSettings.currentCoord[0] === 0)
                    if (renderSettings.currentCoord[1] > 1) {
                        renderSettings.currentCell.customTrigger("showMenu");
                        return false
                    }
        };
        dataSource.bind("tableChange", function () {
            render()
        });
        dataSource.bind("redraw", function () {
            redraw(true)
        });
        dataSource.bind("widthChange", function (columnIndex) {
            generateWidthMap();
            for (var i = 0; i < renderSettings.physicalRows.length; i++) {
                var row = renderSettings.physicalRows[i];
                if (row.group) {
                    var children = row.group.children();
                    var childrenLength = children.length;
                    for (var jj = 0; jj < childrenLength; jj++) {
                        children[jj].style.width = renderSettings.widthMap[jj] + "px";
                        children[jj].style.left = renderSettings.columnStartingPosition[jj - 2] + "px"
                    }
                }
                if (row.box) {
                    var children = row.box.children();
                    var childrenLength = children.length;
                    for (var jj = 0; jj < childrenLength; jj++) {
                        children[jj].style.width = renderSettings.widthMap[jj] + "px";
                        children[jj].style.left = renderSettings.columnStartingPosition[jj - 2] + "px"
                    }
                }
            }
            renderSettings.tbody[0].style.width = renderSettings.widthConstants.table + renderSettings.groupRowNameWidth +
                1 + "px";
            redrawCursor()
        });
        dataSource.bind("rowChange", function (rowIndex) {
            if (rowIndex === 0) {
                for (var ii = 0; ii < dataTable.getNumberOfVisibleColumnsForRow([0, 0]); ii++) updateHeadCell([0, ii]);
                return
            }
            var hash = dataTable.getRowHash(rowIndex);
            var rows = getRowsForHash(hash);
            for (var i = 0; i < rows.length; i++) renderRow(rows[i], rows[i].rowIndex, true)
        });
        dataSource.bind("cellChange", function (coord) {
            if (coord[0] === 0) updateHeadCell(coord);
            else {
                var hash = dataTable.getRowHash(coord[0]);
                var rows = getRowsForHash(hash);
                for (var i = 0; i <
                    rows.length; i++) {
                    var row = rows[i];
                    if (row.el[0].style.display === "none") continue;
                    var cellDiv = row.el.children()[coord[1]];
                    if (dataTable.getActionType(coord) === "CHECKBOX") renderCheckboxCell(cellDiv, cellDiv.querySelectorAll("input")[0], [row.rowIndex, coord[1]]);
                    else {
                        var cellInput = renderCell(cellDiv, [row.rowIndex, coord[1]], row.isGroup);
                        if (cellInput) cellInput.focus()
                    }
                }
            }
        });
        dataSource.bind("cursorChange", function (coord, noXScroll, isVisible, toTop, noScroll) {
            saveCellChanges();
            if (isVisible) {
                cursorDiv.fastShow("block");
                renderCursor(coord, noXScroll, toTop, noScroll)
            } else cursorDiv.fastHide()
        });
        dataSource.bind("focus", function () {
            focus()
        });
        dataSource.bind("setScrollPosition", function (position) {
            renderSettings.overflowBody[0].scrollTop = position
        });

        function extractCellPosition(cell) {
            var position = cell.getAttribute("cellPosition");
            var coord;
            if (position && position.length > 0) {
                var pos = position.split(",");
                coord = [parseInt(pos[0], 10), parseInt(pos[1], 10)]
            }
            return coord
        }
        var map = {};
        map["click.bbCursor"] = function (e) {
            e.stopPropagation();
            var td = e.currentTarget;
            var coord = extractCellPosition(td);
            closeMenus();
            dataSource.cursorSelect(coord, e.shiftKey)
        };
        map["enterPressed.bbEvent"] = function (e) {
            dataSource.updateCursorPosition("down");
            el.focus()
        };
        map["escapePressed.bbEvent"] = function (e) {
            dataSource.setCursorPosition();
            el.focus()
        };
        map["tabPressed.bbEvent"] = function (e) {
            dataSource.updateCursorPosition("down", 1);
            el.focus()
        };
        map["shiftTabPressed.bbEvent"] = function (e) {
            dataSource.updateCursorPosition("up", 1);
            el.focus()
        };
        map["keypress.bbEvent"] = function (e) {
            if (e.which ===
                13) {
                e.stopPropagation();
                e.preventDefault()
            }
        };
        el.on(map, ".cell, .headCell");
        var currentInput = null;
        el[0].setAttribute("class", "spreadsheet scrollable");
        el[0].setAttribute("tabindex", "-1");
        el.on("click", "input[type=checkbox]", function (e) {
            el.focus()
        });
        cursorDiv[0].setAttribute("class", "cursor");
        BB.Keyboard.bindChordToElement(el, "tab", function (e) {
            dataSource.updateCursorPosition("down", 1);
            el.focus()
        }, true, true);
        BB.Keyboard.bindChordToElement(el, "shift+tab", function (e) {
            dataSource.updateCursorPosition("up",
                1);
            el.focus()
        }, true, true);
        BB.Keyboard.bindChordToElement(el, "down", function (e) {
            dataSource.updateCursorPosition("down", 0)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "up", function (e) {
            dataSource.updateCursorPosition("up", 0)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "right", function (e) {
            dataSource.updateCursorPosition("down", 1)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "left", function (e) {
            dataSource.updateCursorPosition("up", 1)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el,
            "home", function (e) {
                dataSource.updateCursorToBeginning(1)
            }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "end", function (e) {
            dataSource.updateCursorToEnd(1)
        }, true, true, true);
        el.bind({
            upPressed: function (e) {
                dataSource.updateCursorPosition("up", 0);
                el.focus()
            },
            rightPressed: function (e) {
                dataSource.updateCursorPosition("down", 1);
                el.focus()
            },
            downPressed: function (e) {
                dataSource.updateCursorPosition("down", 0);
                el.focus()
            },
            leftPressed: function (e) {
                dataSource.updateCursorPosition("up", 1);
                el.focus()
            },
            click: function (e) {
                blur()
            }
        });
        BB.Keyboard.bindChordToElement(el, "ctrl+down/meta+down", function (e) {
            dataSource.updateCursorToEnd(0)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "ctrl+up/meta+up", function (e) {
            dataSource.updateCursorToBeginning(0)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "ctrl+right/meta+right", function (e) {
            dataSource.updateCursorToEnd(1)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "ctrl+left/meta+left", function (e) {
            dataSource.updateCursorToBeginning(1)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el,
            "ctrl+home/meta+home", function (e) {
                dataSource.updateCursorToBeginning(0);
                dataSource.updateCursorToBeginning(1)
            }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "ctrl+end/meta+end", function (e) {
            dataSource.updateCursorToEnd(0);
            dataSource.updateCursorToEnd(1)
        }, true, true, true);
        BB.Keyboard.bindChordToElement(el, "ctrl+b/meta+b", function (e) {
            el.trigger("newBox")
        }, true, true, false, null, true);
        BB.Keyboard.bindChordToElement(el, "ctrl+d/meta+d", function (e) {
            el.trigger("deleteBox")
        }, true, true, false, null, true);
        BB.Keyboard.bindChordToElement(el,
            "escape", function (e) {}, true, true, true);
        var inputOptions = {
            el: el,
            noBubble: true,
            noDefault: true,
            notOnInput: true
        };
        inputOptions.chord = "space";
        inputOptions.cb = function (e) {
            e.preventDefault();
            e.stopPropagation();
            dataSource.cursorSelect(null, e.shiftKey)
        };
        BB.Keyboard.bindChordToEl(inputOptions);
        inputOptions.chord = "enter";
        inputOptions.cb = function (e) {
            e.preventDefault();
            e.stopPropagation();
            dataSource.cursorSelect(null, e.shiftKey)
        };
        BB.Keyboard.bindChordToEl(inputOptions);
        inputOptions.chord = "[a-z]/[0-9]/shift+[a-z]/shift+[0-9]";
        inputOptions.cb = function (e) {
            dataSource.cursorSelect();
            if (currentInput) {
                var s = String.fromCharCode(e.which);
                if (e.shiftKey)
                    if (Spreadsheet.numMap[s]) s = Spreadsheet.numMap[s];
                    else s = s.toUpperCase();
                    else {
                        s = s.toUpperCase();
                        s = s.toLowerCase()
                    }
                currentInput.set(s)
            }
            e.preventDefault();
            e.stopPropagation()
        };
        BB.Keyboard.bindChordToEl(inputOptions);
        inputOptions.chord = "delete/del/backspace";
        inputOptions.cb = function (e) {
            e.preventDefault();
            e.stopPropagation()
        };
        BB.Keyboard.bindChordToEl(inputOptions);
        el[0].addEventListener("paste",
            function (e) {
                if ($(e.target).is("input")) return;
                if (currentInput) return;
                var data = e.clipboardData.getData("text/plain");
                if (_.isReal(data)) {
                    dataSource.cursorSelect();
                    if (currentInput) currentInput.set("")
                }
            });
        var copyCell = function (event) {
            if (!currentInput) {
                if (!cursorDiv.isVisible()) return;
                var cell = $(event.srcElement);
                if (cell.parents(el).length > 0) {
                    var clipboardData = event.clipboardData ? event.clipboardData : window.clipboardData;
                    clipboardData.setData("text", dataTable.getTextValue(dataSource.getCursorPosition()));
                    event.preventDefault()
                }
            }
        };
        window.addEventListener("copy", copyCell);
        el.bind("keydown", function (e) {
            e.stopPropagation()
        });
        return {
            el: el,
            render: render,
            redraw: redraw,
            focus: focus,
            resetCursor: resetCursor,
            destroy: function () {
                closeMenus();
                renderSettings.overflowBody.unbindBodyCloseAndStop();
                el.remove();
                window.removeEventListener("copy", copyCell)
            }
        }
    };
    BB.Widgets.Spreadsheet = Spreadsheet;
    Streak.DependencyManager.addFunction({
        functionKey: "spreadsheetInitialized",
        functionToCall: Spreadsheet.init,
        functionContext: Spreadsheet,
        dependentFunctionKeys: ["columnMenuInitialized", "groupColumnMenuInitialized", "keyboardInitialized", "htmlLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Gmail = Streak.Gmail,
        Locale = BB.Locale;
    var self, ColumnMenu;
    self = ColumnMenu = {
        menu: null,
        linkedBoxPipelineMenu: null,
        columnData: null,
        pipeline: null,
        parentElement: null,
        filterValueChanged: false,
        menuItems: {},
        trackingContext: {
            widgetContext: "pipelineView/spreadsheet",
            widget: "columnMenu"
        },
        init: function (cb) {
            self.setup();
            if (cb) cb()
        },
        setColumnData: function (columnData, pipeline, parentElement) {
            self.columnData = columnData;
            self.pipeline =
                pipeline;
            self.parentElement = parentElement;
            self.toggleItems()
        },
        setup: function () {
            var menu = BB.Widgets.Menu.create({
                css: {
                    position: "fixed",
                    overflow: "visible",
                    minWidth: "200px"
                }
            });
            this._addSortOptions(menu);
            menu.addSeparator();
            this._addFilterOptions(menu);
            this._addGroupByOption(menu);
            menu.addSeparator();
            this._addMoveOptions(menu);
            menu.addSeparator();
            this._addInsertColumnOptions(menu);
            this._addHideOption(menu);
            this._addDeleteOption(menu);
            this._addRemoveOption(menu);
            menu.el.on("click", function (e) {
                e.stopPropagation();
                e.preventDefault()
            });
            self.menu = menu
        },
        _addSortOptions: function (menu) {
            var setSort = function (isAsc, isChecked) {
                var type = "ASC";
                if (!isAsc) type = "DESC";
                if (isChecked) {
                    self.columnData.changeSort(type);
                    type += "_ON"
                } else {
                    self.columnData.changeSort("NONE");
                    type += "_OFF"
                }
                self.track("sortColumn", {
                    type: type
                })
            };
            self.menuItems.sortTextASC = menu.addCheckItem(Locale.getString("sort_asc"), function (isChecked, e) {
                setSort(true, isChecked)
            });
            self.menuItems.sortTextDESC = menu.addCheckItem(Locale.getString("sort_desc"), function (isChecked,
                e) {
                setSort(false, isChecked)
            });
            self.menuItems.sortDateASC = menu.addCheckItem(Locale.getString("sort_date_asc"), function (isChecked, e) {
                setSort(true, isChecked)
            });
            self.menuItems.sortDateDESC = menu.addCheckItem(Locale.getString("sort_date_desc"), function (isChecked, e) {
                setSort(false, isChecked)
            });
            self.menuItems.sortNumberASC = menu.addCheckItem(Locale.getString("sort_number_asc"), function (isChecked, e) {
                setSort(true, isChecked)
            });
            self.menuItems.sortNumberDESC = menu.addCheckItem(Locale.getString("sort_number_desc"),
                function (isChecked, e) {
                    setSort(false, isChecked)
                })
        },
        _addFilterOptions: function (menu) {
            self.menuItems.filterSection = $(document.createElement("div"));
            self.menuItems.filterSection.addClass("streak__filterInputSection J-N");
            self.menuItems.filterSection[0].innerHTML = '<div class="streak__filterInputTitle"></div>';
            self.menuItems.filterInput = $('<input type="text" placeholder="' + BB.Locale.getString("filter_text_placeholder") + '"></input>');
            self.menuItems.filterSection.append(self.menuItems.filterInput);
            self.menuItems.filterInput[0].oninput =
                function () {
                    self.filterValueChanged = true
            };
            self.menuItems.filterInput.on("keydown", function (e) {
                if (e.which === 13)
                    if (self.menuItems.filterInput.val().length > 0) self.close();
                    else self.columnData.clearFilter()
            });
            menu.addSection(self.menuItems.filterSection);
            self.menuItems.filterAdvanced = menu.addItem(BB.Locale.getString("column_advanced_filters"), function () {
                self.columnData.setAdvancedFilter()
            })
        },
        _addGroupByOption: function (menu) {
            self.menuItems.groupBySeparator = menu.addSeparator();
            self.menuItems.groupBy = menu.addCheckItem(Locale.getString("column_group_by"),
                function (isChecked, e) {
                    if (isChecked) self.columnData.setGroupBy();
                    else self.columnData.unGroupBy()
                })
        },
        _addMoveOptions: function (menu) {
            self.menuItems.moveLeft = menu.addItem(Locale.getString("fields_move_left"), function (e) {
                menu.el.trigger("moveLeft");
                self.columnData.moveLeft();
                self.track("moveColumn", {
                    type: "left"
                })
            });
            self.menuItems.moveRight = menu.addItem(Locale.getString("fields_move_right"), function (e) {
                menu.el.trigger("moveRight");
                self.columnData.moveRight();
                self.track("moveColumn", {
                    type: "right"
                })
            })
        },
        _addInsertColumnOptions: function (menu) {
            var addSubmenu = BB.Widgets.Menu.create({
                css: {
                    overflow: "visible"
                }
            });
            this._addInsertCustomColumnOptions(addSubmenu);
            addSubmenu.addSeparator();
            this._addInsertSystemColumnOptions(addSubmenu);
            if (BB.isFeatureEnabled("linkedBoxes")) {
                addSubmenu.addSeparator();
                this._addLinkedBoxesColumnOptions(addSubmenu)
            }
            menu.addSubMenu(BB.Locale.getString("fields_button_text"), addSubmenu)
        },
        _addInsertCustomColumnOptions: function (addSubmenu) {
            addSubmenu.addItem(BB.Locale.getString("fields_button_modal_free"),
                function () {
                    self.menu.el.hide();
                    self.columnData.addCustomColumn("TEXT_INPUT");
                    self.track("addColumn", {
                        type: "TEXT_INPUT"
                    })
                });
            addSubmenu.addItem(BB.Locale.getString("fields_button_modal_person"), function () {
                self.menu.el.hide();
                self.columnData.addCustomColumn("PERSON");
                self.track("addColumn", {
                    type: "PERSON"
                })
            });
            addSubmenu.addItem(BB.Locale.getString("fields_button_modal_date"), function () {
                self.menu.el.hide();
                self.columnData.addCustomColumn("DATE");
                self.track("addColumn", {
                    type: "DATE"
                })
            })
        },
        _addInsertSystemColumnOptions: function (addSubmenu) {
            var addSubmenuSystemBoxFields =
                BB.Widgets.Menu.create({
                    css: {
                        "overflow-y": "auto",
                        "overflow-x": "hidden"
                    }
                });
            var currGroup = null;
            _.chain(BB.Models.Pipeline.getExtraSystemProperties()).sortBy(function (systemProperty) {
                return systemProperty.group + " " + systemProperty.title
            }).each(function (systemProperty) {
                if (currGroup !== systemProperty.group) {
                    if (currGroup !== null) addSubmenuSystemBoxFields.addSeparator();
                    currGroup = systemProperty.group
                }
                addSubmenuSystemBoxFields.addItem(systemProperty.title, function () {
                    self.columnData.addSystemColumn(systemProperty)
                })
            });
            addSubmenu.addSubMenu(BB.Locale.getString("system_columns"), addSubmenuSystemBoxFields)
        },
        _addLinkedBoxesColumnOptions: function (addSubmenu) {
            self._linkedBoxPipelineMenu = BB.Widgets.Menu.create({
                css: {
                    "overflow-y": "auto",
                    "overflow-x": "hidden"
                }
            });
            addSubmenu.addSubMenu(BB.Locale.getString("linked_boxes_columns"), self._linkedBoxPipelineMenu)
        },
        _setupLinkedBoxesColumnOptions: function () {
            if (!BB.isFeatureEnabled("linkedBoxes")) return;
            self._linkedBoxPipelineMenu.empty();
            self._linkedBoxPipelineMenu.addItem(BB.Locale.getString("all_linked_boxes"),
                function () {
                    self.columnData.addSystemColumn(BB.Models.Pipeline.getLinkedBoxSystemColumn())
                });
            var pipelines = BB.UI.getSortedPipelines();
            if (pipelines.length > 1) self._linkedBoxPipelineMenu.addSeparator();
            _.each(pipelines, function (pipeline) {
                self._linkedBoxPipelineMenu.addItem(BB.Locale.getString("linked_boxes_title", {
                    pipeline: pipeline.displayName()
                }), function () {
                    self.columnData.addSystemColumn(BB.Models.Pipeline.getLinkedBoxSystemColumn(pipeline))
                })
            })
        },
        _addHideOption: function (menu) {
            menu.addItem(Locale.getString("hide"),
                function (e) {
                    self.columnData.hide();
                    self.track("hideColumn")
                })
        },
        _addDeleteOption: function (menu) {
            self.menuItems.deleteItem = menu.addItem(Locale.getString("delete"), function (e) {
                self.track("DeleteColumnAttempt");
                BB.Widgets.Modal.confirmDelete(self.columnData.getName(), function () {
                    var fieldKey = self.columnData.fieldKey;
                    if (!fieldKey) {
                        self.columnData.remove();
                        return
                    }
                    var fieldValues = BB.UI.getFieldValues(self.pipeline, fieldKey);
                    if (fieldValues.length === 0) {
                        Gmail.showNotice(BB.Locale.getString("deleting_notice", {
                            item: self.columnData.getName()
                        }));
                        self.columnData.remove();
                        self.track("DeleteColumn");
                        return
                    }
                    var del2Message = BB.Locale.getString("confirm_2_text");
                    var del2Modal = BB.Widgets.Modal.create({
                        title: BB.Locale.getString("confirm_delete_title", {
                            item: self.columnData.getName()
                        }),
                        confirmFunc: function () {
                            $.modal.close();
                            Gmail.showNotice(BB.Locale.getString("deleting_notice", {
                                item: self.columnData.getName()
                            }));
                            self.columnData.remove();
                            self.track("DeleteColumn")
                        },
                        confirmText: BB.Locale.getString("delete"),
                        inner: '<div class="superConfirm">' +
                            del2Message + "</div>",
                        doneButtonColor: "red"
                    });
                    del2Modal.show(true);
                    return true
                }, null, function () {
                    self.track("DeleteColumnCancelled")
                })
            })
        },
        _addRemoveOption: function (menu) {
            self.menuItems.removeItem = menu.addItem(Locale.getString("remove"), function (e) {
                self.track("removeSystemColumn");
                self.columnData.remove()
            })
        },
        close: function () {
            if (self.filterValueChanged) {
                self.filterValueChanged = false;
                self.columnData.setContainsFilter(self.menuItems.filterInput.val())
            }
        },
        toggleItems: function () {
            self.menu.reset();
            self.menu.el.show();
            self.filterValueChanged = false;
            var filterable = true;
            if (_.isReal(self.columnData.property)) filterable = BB.Models.Pipeline.isPropertyFilterable(self.columnData.property);
            if (filterable) {
                self.menuItems.filterSection.show();
                self.menuItems.filterAdvanced.show();
                if (self.columnData.canFilterByContains()) {
                    self.menuItems.filterInput.val("");
                    self.menuItems.filterInput.prop("disabled", false);
                    if (self.columnData.isAdvancedFiltered()) {
                        self.menuItems.filterInput.val("part of advanced filter");
                        self.menuItems.filterInput.prop("disabled",
                            true)
                    } else if (self.columnData.getContainsFilter()) self.menuItems.filterInput.val(self.columnData.getContainsFilter())
                } else self.menuItems.filterSection.hide()
            } else {
                self.menuItems.filterSection.hide();
                self.menuItems.filterAdvanced.hide()
            }
            self.menuItems.groupBySeparator.show();
            self.menuItems.groupBy.show();
            self.menuItems.groupBy.find(".text").text(BB.Locale.getString("column_group_by", {
                column: self.columnData.getName()
            }));
            if (_.isReal(self.columnData.property))
                if (BB.Models.Pipeline.isPropertyGroupable(self.columnData.property)) self.menuItems.groupBy.setCheckboxState(self.columnData.isGroupedBy());
                else {
                    self.menuItems.groupBySeparator.hide();
                    self.menuItems.groupBy.hide()
                } else self.menuItems.groupBy.setCheckboxState(self.columnData.isGroupedBy());
            var columnType;
            if (self.columnData.property) columnType = BB.Models.Pipeline.getPropertySortType(self.columnData.property);
            else if (self.columnData.fieldKey) columnType = self.pipeline.getField(self.columnData.fieldKey).get("type");
            self.menuItems.sortTextASC.hide();
            self.menuItems.sortTextDESC.hide();
            self.menuItems.sortDateASC.hide();
            self.menuItems.sortDateDESC.hide();
            self.menuItems.sortNumberASC.hide();
            self.menuItems.sortNumberDESC.hide();
            var sortMenuASC, sortMenuDESC;
            switch (columnType) {
            case "NUMBER":
                sortMenuASC = self.menuItems.sortNumberASC;
                sortMenuDESC = self.menuItems.sortNumberDESC;
                break;
            case "DATE":
                sortMenuASC = self.menuItems.sortDateASC;
                sortMenuDESC = self.menuItems.sortDateDESC;
                break;
            default:
                sortMenuASC = self.menuItems.sortTextASC;
                sortMenuDESC = self.menuItems.sortTextDESC
            }
            sortMenuASC.show();
            sortMenuDESC.show();
            sortMenuASC.setCheckboxState(self.columnData.sort ===
                "ASC");
            sortMenuDESC.setCheckboxState(self.columnData.sort === "DESC");
            self.columnData.isFirst ? self.menuItems.moveLeft.hide() : self.menuItems.moveLeft.show();
            self.columnData.isLast ? self.menuItems.moveRight.hide() : self.menuItems.moveRight.show();
            self._setupLinkedBoxesColumnOptions();
            if (self.columnData.isRemovable) self.menuItems.removeItem.show();
            else self.menuItems.removeItem.hide(); if (self.columnData.isDeletable) self.menuItems.deleteItem.show();
            else self.menuItems.deleteItem.hide();
            self.menu.setIsLast(self.columnData.isLast);
            self.menu.el.css({
                left: self.parentElement.offset().left - self.menu.el.outerWidth() + self.parentElement.outerWidth(),
                top: self.parentElement.offset().top + self.parentElement.outerHeight()
            });
            self.menu.el.containByScreen(self.parentElement, {
                isRightAligned: true
            })
        },
        track: function (event, properties) {
            BB.Tracker.trackStreakActive(this.trackingContext, properties, {
                eventName: event
            })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "columnMenuInitialized",
        functionToCall: ColumnMenu.init,
        functionContext: ColumnMenu,
        dependentFunctionKeys: ["menuInitialized", "enabledFeaturesControllerInitialized"]
    });
    BB.Widgets.Spreadsheet.ColumnMenu = ColumnMenu
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Gmail = Streak.Gmail,
        Locale = BB.Locale;
    var self, GroupColumnMenu;
    self = GroupColumnMenu = {
        menu: null,
        groupData: null,
        pipeline: null,
        parentElement: null,
        menuItems: {},
        trackingContext: {
            widgetContext: "pipelineView/spreadsheet",
            widget: "groupColumnMenu"
        },
        init: function (cb) {
            self.setup();
            if (cb) cb()
        },
        setGroupColumnData: function (groupColumnData, pipeline, parentElement) {
            self.groupColumnData = groupColumnData;
            self.pipeline = pipeline;
            self.parentElement =
                parentElement;
            self.toggleItems()
        },
        setup: function () {
            var menu = BB.Widgets.Menu.create({
                css: {
                    position: "fixed",
                    overflow: "visible",
                    minWidth: "200px"
                }
            });
            self.menuItems.MIN = menu.addCheckItem("Min", function () {
                self.groupColumnData.group.changeCalculation(self.groupColumnData.column.columnKey, "MIN")
            });
            self.menuItems.MAX = menu.addCheckItem("Max", function () {
                self.groupColumnData.group.changeCalculation(self.groupColumnData.column.columnKey, "MAX")
            });
            self.menuItems.AVERAGE = menu.addCheckItem("Average", function () {
                self.groupColumnData.group.changeCalculation(self.groupColumnData.column.columnKey,
                    "AVERAGE")
            });
            self.menuItems.SUM = menu.addCheckItem("Sum", function () {
                self.groupColumnData.group.changeCalculation(self.groupColumnData.column.columnKey, "SUM")
            });
            self.menuItems.SUM_PRODUCT = menu.addCheckItem("Sum Product", function () {
                BB.Widgets.Modal.textboxModal({
                    title: "Choose Multiplication Parameter",
                    allowEmpty: false,
                    callback: function (value) {
                        self.groupColumnData.group.changeCalculation(self.groupColumnData.column.columnKey, "SUM_PRODUCT", [value])
                    }
                })
            });
            menu.addSeparator();
            menu.addItem("No Calculation",
                function () {
                    self.groupColumnData.group.changeCalculation(self.groupColumnData.column.columnKey, null)
                });
            menu.el.on("click", function (e) {
                e.stopPropagation();
                e.preventDefault()
            });
            self.menu = menu
        },
        close: function () {},
        toggleItems: function () {
            self.menu.el.show();
            self.menu.reset();
            var calcOptions = self.groupColumnData.column.getGroupCalculationOptions();
            var currentFormula = self.groupColumnData.group.getCurrentFormula(self.groupColumnData.column.columnKey);
            for (var formula in self.menuItems)
                if (calcOptions.indexOf(formula) > -1) {
                    self.menuItems[formula].show();
                    if (currentFormula === formula) self.menuItems[formula].setCheckboxState(true)
                } else self.menuItems[formula].hide();
            self.menu.el.css({
                left: self.parentElement.offset().left - self.menu.el.outerWidth() + self.parentElement.outerWidth(),
                top: self.parentElement.offset().top + self.parentElement.outerHeight()
            });
            self.menu.el.containByScreen(self.parentElement)
        },
        track: function (event, properties) {
            BB.Tracker.trackStreakActive(this.trackingContext, properties, {
                eventName: event
            })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "groupColumnMenuInitialized",
        functionToCall: GroupColumnMenu.init,
        functionContext: GroupColumnMenu,
        dependentFunctionKeys: ["menuInitialized", "localeLoaded"]
    });
    BB.Widgets.Spreadsheet.GroupColumnMenu = GroupColumnMenu
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        BB = Streak.BentoBox;
    $.fn.spreadsheetArrow = function (disabledKeys) {
        disabledKeys = disabledKeys || [];
        return this.each(function () {
            var self = this;
            var el = $(this);
            var arrowMode = false;
            self.setArrowMode = function (isArrow) {
                arrowMode = isArrow
            };
            BB.Keyboard.bindChordToElement(el, "tab", function (e) {
                el.trigger("onblur");
                el.trigger("tabPressed")
            }, true, true);
            BB.Keyboard.bindChordToElement(el, "shift+tab", function (e) {
                el.trigger("onblur");
                el.trigger("shiftTabPressed")
            }, true, true);
            BB.Keyboard.bindChordToElement(el,
                "up", function (e) {
                    if (arrowMode && disabledKeys.indexOf("up") === -1) {
                        el.trigger("upPressed");
                        el.trigger("onblur")
                    }
                });
            BB.Keyboard.bindChordToElement(el, "down", function (e) {
                if (arrowMode && disabledKeys.indexOf("down") === -1) {
                    el.trigger("downPressed");
                    el.trigger("onblur")
                }
            });
            BB.Keyboard.bindChordToElement(el, "right", function (e) {
                var val = el.val();
                if (el.is("div")) val = el[0].innerHTML;
                if (el.caret().start === val.length) {
                    e.preventDefault();
                    e.stopPropagation()
                }
                if (arrowMode && disabledKeys.indexOf("right") === -1)
                    if (el.caret().start ===
                        val.length) {
                        el.trigger("rightPressed");
                        el.trigger("onblur")
                    }
            });
            BB.Keyboard.bindChordToElement(el, "left", function (e) {
                if (el.caret().start === 0) {
                    e.preventDefault();
                    e.stopPropagation()
                }
                if (arrowMode && disabledKeys.indexOf("left") === -1)
                    if (el.caret().start === 0) {
                        el.trigger("leftPressed");
                        el.trigger("onblur")
                    }
            })
        })
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        jwerty = Streak.jwerty,
        BB = Streak.BentoBox;
    var SpreadsheetAssignedTo = {
        templates: {},
        create: function () {
            return new this.impl
        }
    };
    SpreadsheetAssignedTo.impl = function () {
        return BB.Widgets.PeoplePicker.create({
            jsonified: false,
            delayedBind: true,
            onlyValidEmailAddress: true,
            neverShowRead: true
        })
    };
    BB.Widgets.SpreadsheetAssignedTo = SpreadsheetAssignedTo
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var SpreadsheetCalendar = {
        create: function (options) {
            return new this.impl(options)
        }
    };
    SpreadsheetCalendar.impl = function (o) {
        var outerEl = null,
            el = null,
            parentEl = null,
            currentValue = null,
            datetime = null,
            date = null,
            dateText = null,
            model = null,
            property = null,
            parent = null,
            saveValue = null,
            options = 0;
        var setupElement = function () {
            if (outerEl) outerEl.remove();
            outerEl = $(document.createElement("div"));
            el = $(document.createElement("input"));
            el[0].setAttribute("type", "text");
            el[0].setAttribute("class", "smartInput textboxNoborder");
            el[0].setAttribute("tabindex", "-1");
            outerEl.append(el);
            bind()
        }, getValue = function () {
                return model.get(property)
            }, getDisplayValue = function () {
                datetime = getValue();
                date = datetime ? Date.create(datetime) : null;
                dateText = datetime ? date.prettyDate(true) : "";
                return dateText
            }, updateValue = function () {
                var saveValue = el.val();
                if (saveValue != currentValue) {
                    if (saveValue.length > 0) {
                        saveValue = Date.ccreate(saveValue);
                        if (saveValue.isValid()) saveValue = saveValue.getTime();
                        else saveValue = ""
                    }
                    model.set(property, saveValue);
                    model.save();
                    BB.Tracker.trackStreakActive(options.trackingContext, {
                        property: property,
                        widget: "spreadsheetCalendar"
                    })
                }
            }, showEdit = function () {
                el.val(getDisplayValue());
                el.data("time", date ? date.getTime() : null);
                el.focus();
                el.trigger("onfocus");
                saveValue = currentValue
            }, focus = function () {
                bind();
                currentValue = getValue();
                showEdit();
                el[0].setArrowMode(false)
            }, set = function (val) {
                focus();
                el.val(val);
                el[0].setArrowMode(true)
            },
            setup = function (options) {
                setupElement();
                model = options.model;
                property = options.property;
                fieldIndex = options.fieldIndex;
                parentEl = options.parent
            }, bind = function () {
                el.will_pickdate({
                    animationDuration: 100,
                    body: Gmail.elements.body,
                    appendTo: outerEl,
                    allowEmpty: true,
                    timePicker: false,
                    setInput: false,
                    autoClose: false,
                    useFixedPosition: false,
                    onSelect: function (aDate) {
                        el.val(aDate.getTime());
                        el.trigger("escapePressed")
                    },
                    onClose: function (isEnter) {
                        if (isEnter) parentEl.trigger("enterPressed")
                    },
                    onClear: function () {}
                });
                BB.Keyboard.bindChordToElement(el,
                    "escape", function (e) {
                        el.val(currentValue);
                        el.trigger("onblur");
                        el.trigger("escapePressed")
                    }, true, true, true, "keydown", true);
                el.spreadsheetArrow();
                outerEl.bind("click.bbEvent", function (e) {
                    e.preventDefault();
                    e.stopPropagation()
                })
            };
        return {
            el: outerEl,
            getElement: function () {
                return outerEl
            },
            focus: focus,
            set: set,
            setup: setup,
            updateValue: updateValue
        }
    };
    BB.Widgets.SpreadsheetCalendar = SpreadsheetCalendar
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        jwerty = Streak.jwerty,
        BB = Streak.BentoBox;
    var SpreadsheetPeoplePicker = {
        templates: {},
        create: function (options) {
            return new this.impl(options)
        }
    };
    SpreadsheetPeoplePicker.impl = function (options) {
        options.neverShowRead = true;
        return BB.Widgets.PeoplePicker.create(options)
    };
    BB.Widgets.SpreadsheetPeoplePicker = SpreadsheetPeoplePicker
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        jwerty = Streak.jwerty,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var SpreadsheetSmartDropdown = {
        templates: {},
        create: function (options) {
            return new this.impl(options)
        }
    };
    SpreadsheetSmartDropdown.impl = function (o) {
        var outerEl = null,
            el = null,
            hInput = null,
            currentValue = null,
            menu = BB.Widgets.Menu.create({
                maxHeight: "250px"
            }),
            model = null,
            models = null,
            property = null,
            list = null,
            updateCallback = $.noop,
            options = o;
        var setupElement =
            function () {
                if (outerEl) outerEl.remove();
                outerEl = $(document.createElement("div"));
                el = $(document.createElement("div"));
                hInput = $(document.createElement("input"));
                outerEl[0].setAttribute("class", "dropdownWrapper");
                el[0].setAttribute("class", "dropdown smartInput");
                el[0].setAttribute("tabindex", "-1");
                el.append(menu.el);
                bind()
        }, getValue = function () {
                if (property) return model.get(property)
            }, updateValue = function (newValue) {
                if (newValue != currentValue)
                    if (property) {
                        var saveCalls = [];
                        for (var i = 0; i < models.length; i++) {
                            var value =
                                newValue.value ? newValue.value : newValue;
                            models[i].set(property, value);
                            saveCalls.push(getSaveFunction(models[i]))
                        }
                        _.chainedCallbacks(saveCalls, function () {
                            Gmail.showNotice(BB.Locale.getString("moved_boxes", {
                                number: models.length,
                                stage: newValue.text,
                                pluralize: [models.length]
                            }), 3E3, 10);
                            if (updateCallback) updateCallback()
                        });
                        BB.Tracker.trackStreakActive(options.trackingContext, {
                            property: property,
                            widget: "SpreadsheetSmartDropdown",
                            numberOfBoxes: models.length
                        })
                    }
            }, getSaveFunction = function (model, property, value) {
                var afterSavedCallback =
                    null;
                var after = _.after(2, function () {
                    model.save(afterSavedCallback);
                    model.performNextSyncOperation()
                });
                model.addSyncedCallback(after);
                return function (callback) {
                    afterSavedCallback = callback;
                    after()
                }
            }, showEdit = function () {
                var index = list.findIndex(function (item) {
                    return (item.value ? item.value : item) === getValue()
                });
                currentValue = list[index];
                outerEl[0].innerHTML = currentValue.text ? currentValue.text : currentValue;
                outerEl.append(el);
                renderMenu(index);
                el.focus()
            }, focus = function () {
                hInput.val("");
                showEdit();
                saveValue =
                    currentValue
            }, set = function (val) {
                focus();
                hInput.val(val);
                setCursor();
                arrowMode = true
            }, setup = function (options) {
                setupElement();
                model = options.model;
                models = options.models;
                property = options.property;
                list = options.list;
                updateCallback = options.updateCallback
            }, bind = function () {
                outerEl.off("bbCursorDeselect");
                outerEl.on("bbCursorDeselect", function (e) {
                    e.preventDefault();
                    e.stopPropagation()
                });
                menu.el.bind("click.smartDropdown", function (e) {
                    cursor.select();
                    e.preventDefault();
                    e.stopPropagation()
                });
                BB.Keyboard.bindChordToElement(el,
                    "[a-z]/shift+[a-z]/backspace", function (e) {
                        clearTimeout(timeout);
                        if (jwerty.is("backspace", e)) hInput.val(hInput.val().first(hInput.val().length - 1));
                        else hInput.val(hInput.val() + String.fromCharCode(e.which));
                        setCursor();
                        timeout = setTimeout(function () {
                            hInput.val("")
                        }, 1E3)
                    }, true, true);
                BB.Keyboard.bindChordToElement(el, "up/down/home/end", function (e) {
                    hInput.val("")
                }, true, true);
                BB.Keyboard.bindChordToElement(el, "right", function (e) {
                    if (arrowMode) {
                        el.trigger("rightPressed");
                        cursor.select()
                    }
                });
                BB.Keyboard.bindChordToElement(el,
                    "left", function (e) {
                        if (arrowMode) {
                            el.trigger("leftPressed");
                            cursor.select()
                        }
                    });
                BB.Keyboard.bindChordToElement(el, "escape", function (e) {
                    el.trigger("escapePressed")
                }, true, true, true);
                BB.Keyboard.bindChordToElement(el, "tab", function (e) {
                    el.trigger("tabPressed")
                }, true, true, true);
                BB.Keyboard.bindChordToElement(el, "shift+tab", function (e) {
                    el.trigger("shiftTabPressed")
                }, true, true, true);
                cursor = BB.Cursor.create({
                    selectedClass: "J-N-JT",
                    selectFunc: function (itemEl, isEnter) {
                        if (isEnter);
                        updateValue(itemEl.data("itemValue"));
                        el.trigger("escapePressed")
                    },
                    highlightOnHover: true,
                    rollOver: true,
                    input: el,
                    noScroll: true
                })
            }, renderMenu = function (index) {
                menu.empty();
                _.each(list, function (item) {
                    var text = item.text ? item.text : item;
                    var itemEl = menu.addItem(text, function () {});
                    itemEl.data("itemValue", item)
                });
                cursor.setup(menu.el.find(".menuItem"));
                cursor.setPosition([index]);
                var anchor = outerEl;
                menu.el.offset({
                    left: anchor.offset().left,
                    top: anchor.offset().top + anchor.outerHeight()
                });
                menu.el.containByScreen(outerEl)
            }, setCursor = function () {
                var val =
                    hInput.val().toLowerCase();
                $.each(list, function (index, item) {
                    var text = item.text ? item.text : item;
                    if (text.toLowerCase().startsWith(val)) {
                        cursor.setPosition([index]);
                        return
                    }
                })
            }, cursor = null,
            arrowMode = false,
            timeout = null;
        menu.el.css({
            position: "fixed",
            left: "auto"
        });
        return {
            el: outerEl,
            getElement: function () {
                return outerEl
            },
            focus: focus,
            set: set,
            setup: setup,
            updateValue: $.noop
        }
    };
    BB.Widgets.SpreadsheetSmartDropdown = SpreadsheetSmartDropdown
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var SpreadsheetTextarea = {
        templates: {},
        create: function (options) {
            return new this.impl(options)
        }
    };
    SpreadsheetTextarea.impl = function (o) {
        var el = null,
            editEl = null,
            currentValue = null,
            editValue = null,
            arrowMode = false,
            model = null,
            property = null,
            existingList = [],
            options = o;
        var setupElement = function () {
            if (el) el.remove();
            el = $(document.createElement("div"));
            el[0].innerHTML =
                '<div contentEditable="true" class="edit"></div>';
            el[0].setAttribute("class", "smartInput spreadsheetTextarea");
            el[0].setAttribute("tabindex", "-1");
            editEl = el.find(".edit");
            bind()
        }, getValue = function () {
                return model.get(property) || ""
            }, updateValue = function () {
                var val = getValue();
                if (val !== editValue) {
                    currentValue = editValue;
                    model.set(property, editValue);
                    model.save();
                    BB.Tracker.trackStreakActive(options.trackingContext, {
                        property: property,
                        widget: "spreadsheetTextarea"
                    })
                }
            }, showEdit = function () {
                if (editEl.is(":focus")) return;
                editEl.setPlainText(getValue());
                editEl[0].setAutoCompleteList(existingList);
                editEl.focus();
                focusEnd()
            }, focus = function () {
                currentValue = getValue();
                editValue = currentValue;
                showEdit();
                editEl[0].setArrowMode(false)
            }, focusEnd = function () {
                setTimeout(function () {
                    editEl.caret().goToEnd()
                }, 1)
            }, set = function (val) {
                currentValue = getValue();
                focus();
                editEl.setPlainText(val);
                editEl[0].setArrowMode(true);
                editEl.trigger("input")
            }, setup = function (options) {
                setupElement();
                model = options.model;
                property = options.property;
                existingList =
                    options.existingList
            }, preDetach = function () {
                editEl.trigger("preDetach")
            }, bind = function () {
                editEl.bind("escapePressed", function (e) {
                    editValue = getValue();
                    editEl.setPlainText(editValue)
                });
                editEl.bind("enterPressed", function (e) {
                    editValue = editEl.plainText()
                });
                BB.Keyboard.bindChordToElement(editEl, "meta+enter/ctrl+enter", function (e) {
                    e.stopPropagation()
                }, true, false, false, "keypress");
                editEl.delayedSave({
                    saveFunction: function () {
                        editValue = editEl.plainText()
                    },
                    delay: 1
                });
                editEl.on("autoCompleteSet", function (e) {
                    editValue =
                        editEl.plainText()
                });
                editEl.autoComplete("plainText");
                editEl.spreadsheetArrow()
            };
        return {
            el: el,
            getElement: function () {
                return el
            },
            focus: focus,
            set: set,
            setup: setup,
            updateValue: updateValue,
            preDetach: preDetach
        }
    };
    BB.Widgets.SpreadsheetTextarea = SpreadsheetTextarea
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    BB.Widgets.SpreadsheetTextbox = {
        create: function (options) {
            return new BB.Widgets.SpreadsheetTextbox.impl(options)
        }
    };
    BB.Widgets.SpreadsheetTextbox.impl = function (o) {
        var el = null,
            property = null,
            model = null,
            td = null,
            options = o,
            currentValue = null;
        var setupElement = function () {
            if (el) el.remove();
            el = $(document.createElement("input"));
            el[0].setAttribute("type", "text");
            el[0].setAttribute("class", "smartInput textboxNoborder");
            el[0].setAttribute("tabindex", "-1");
            bind()
        }, getValue = function () {
                return model.get(property)
            }, updateValue = function () {
                try {
                    if (!el.val() && !currentValue) return
                } catch (e) {
                    return
                }
                if (el.val() === currentValue) return;
                if (!el.val()) return;
                currentValue = el.val();
                model.set(property, el.val().trim());
                model.save();
                BB.Tracker.trackStreakActive(options.trackingContext, {
                    property: property,
                    widget: "spreadsheetTextbox"
                })
            }, focus = function () {
                currentValue = getValue();
                el.show();
                el.focus();
                arrowMode = false
            }, set = function (val) {
                el.val(val);
                focus();
                arrowMode = true
            }, bind = function () {
                BB.Keyboard.bindChordToElement(el, "escape", function (e) {
                    el.val(currentValue);
                    el.trigger("escapePressed")
                }, true, true, true, "keydown", true);
                BB.Keyboard.bindChordToElement(el, "enter", function (e) {
                    el.trigger("enterPressed")
                }, true, true, true, "keydown", true);
                BB.Keyboard.bindChordToElement(el, "up", function (e) {
                    if (arrowMode) el.trigger("upPressed")
                });
                BB.Keyboard.bindChordToElement(el, "down", function (e) {
                    if (arrowMode) el.trigger("downPressed")
                });
                BB.Keyboard.bindChordToElement(el,
                    "right", function (e) {
                        if (el.caret().start === el.val().length) {
                            e.preventDefault();
                            e.stopPropagation()
                        }
                        if (arrowMode)
                            if (el.caret().start === el.val().length) el.trigger("rightPressed")
                    });
                BB.Keyboard.bindChordToElement(el, "left", function (e) {
                    if (el.caret().start === 0) {
                        e.preventDefault();
                        e.stopPropagation()
                    }
                    if (arrowMode)
                        if (el.caret().start === 0) el.trigger("leftPressed")
                })
            }, setup = function (options) {
                setupElement();
                model = options.model;
                property = options.property;
                fieldIndex = options.fieldIndex;
                el.val(getValue())
            }, arrowMode =
                false;
        return {
            el: el,
            getElement: function () {
                return el
            },
            focus: focus,
            set: set,
            setup: setup,
            updateValue: updateValue
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        _ = Streak._,
        BB = Streak.BentoBox;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    BB.Widgets.FollowerButton = {
        templates: {},
        defaults: {
            width: "50px",
            box: null,
            hideUnfollow: false,
            followEventCallback: $.noop,
            unfollowEventCallback: $.noop
        },
        create: function (options) {
            this._init();
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.FollowerButton.impl(o)
        },
        _init: function (cb) {
            if (!this.templates.mainView) this.templates.mainView =
                HTML.get("followerButton")
        }
    };
    BB.Widgets.FollowerButton.impl = function (options) {
        var box = options.box;
        var el = $(BB.Widgets.FollowerButton.templates.mainView());
        options.trackingContext.widgetContext += "/followerButton";
        var followButton = BB.Widgets.Button.create({
            name: BB.Locale.getString("follow_box"),
            onFunc: function () {
                track("followBox", options.trackingContext);
                var userKey = BB.getUser().get("userKey");
                var followerKeys = box.get("followerKeys");
                if (!_.isArray(followerKeys)) followerKeys = [];
                if (followerKeys.indexOf(userKey) <
                    0) {
                    followerKeys.push(userKey);
                    box.set("followerKeys", followerKeys);
                    box.save();
                    options.followEventCallback()
                }
                renderButton()
            },
            isToggle: false,
            color: "red"
        });
        var unfollowButton = BB.Widgets.Button.create({
            name: BB.Locale.getString("unfollow_box"),
            onFunc: function () {
                track("unfollowBox", options.trackingContext);
                var userKey = BB.getUser().get("userKey");
                var followerKeys = box.get("followerKeys");
                if (followerKeys.indexOf(userKey) > -1) {
                    followerKeys.removeVal(userKey);
                    box.set("followerKeys", followerKeys);
                    box.save();
                    options.unfollowEventCallback()
                }
                renderButton()
            },
            isToggle: false,
            color: "normal"
        });
        var renderButton = function () {
            if (isFollowing()) {
                followButton.el.hide();
                if (!options.hideUnfollow) unfollowButton.el.show()
            } else {
                unfollowButton.el.hide();
                followButton.el.show()
            }
        };
        var isFollowing = function () {
            return box.get("followerKeys").indexOf(BB.getUser().get("userKey")) > -1
        };
        followButton.el.hide();
        unfollowButton.el.hide();
        renderButton();
        box.bind("set", "followerKeys", renderButton);
        followButton.el.addClass("followerButton");
        unfollowButton.el.addClass("followerButton");
        el.append(followButton.el);
        el.append(unfollowButton.el);
        BB.Tracker.addTracking(followButton.el, "click", {
            eventName: "FollowPressed"
        });
        BB.Tracker.addTracking(unfollowButton.el, "click", {
            eventName: "UnfollowPressed"
        });
        return {
            el: el,
            getActiveButton: function () {
                if (isFollowing()) return unfollowButton.el;
                else return followButton.el
            },
            destroy: function () {
                box.unbind("set", "followerKeys", null, renderButton);
                followButton.destroy();
                unfollowButton.destroy();
                el.remove()
            }
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    BB.Widgets.Follower = {
        templates: {},
        defaults: {
            width: "50px",
            box: null,
            showTitle: true,
            display: "grid",
            imgHeight: 30,
            imgWidth: 30
        },
        create: function (options) {
            this._init();
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.Follower.impl(o)
        },
        _init: function () {
            if (!this.templates.mainView) this.templates.mainView = HTML.get("follower")
        }
    };
    BB.Widgets.Follower.impl =
        function (options) {
            var box = options.box;
            var el = $(BB.Widgets.Follower.templates.mainView());
            var buttonEncloser = el.find(".followerButtonWidget");
            var peopleEncloser = el.find(".followerPeopleWidget");
            var title = el.find(".followerTitle");
            var noneText = el.find(".followerNoneText");
            var followerPeopleList = BB.Widgets.PeopleList.create({
                border: "never",
                display: options.display,
                imgHeight: options.imgHeight,
                imgWidth: options.imgWidth
            });
            peopleEncloser.append(followerPeopleList.el);
            var followerButton = BB.Widgets.FollowerButton.create({
                box: box,
                trackingContext: options.trackingContext
            });
            buttonEncloser.append(followerButton.el);
            if (options.showTitle) title.show();
            else title.hide();
            var render = function () {
                if (box.get("followerKeys").length > 0) {
                    noneText.hide();
                    followerPeopleList.el.show();
                    APIRequester.get({
                        msgUrl: "users",
                        userKeyList: JSON.stringify(box.get("followerKeys"))
                    }, function (data) {
                        if (data) {
                            var contactList = _.pluckPlus(data, function (item) {
                                return {
                                    imageUrl: item.googleProfilePhotoUrl,
                                    email: item.email,
                                    displayName: item.displayName,
                                    fullName: item.googleProfileFullName
                                }
                            });
                            followerPeopleList.updateDisplay(contactList)
                        }
                    })
                } else {
                    followerPeopleList.el.hide();
                    noneText.show()
                }
            };
            render();
            box.bind("set", "followerKeys", function () {
                render()
            });
            return {
                el: el
            }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    BB.Widgets.PostComment = {
        templates: {},
        defaults: {
            box: null
        },
        create: function (options) {
            this._init();
            var o = {};
            _.extend(o, this.defaults, options);
            return new BB.Widgets.PostComment.impl(o)
        },
        _init: function () {
            if (!this.templates.mainView) this.templates.mainView = HTML.get("postComment")
        }
    };
    BB.Widgets.PostComment.impl = function (options) {
        var box = options.box;
        var el = $(BB.Widgets.PostComment.templates.mainView());
        var feedList = options.feedList;
        var postCommentField = el.find(".postCommentField");
        var postButton = BB.Widgets.Button.create({
            name: BB.Locale.getString("post_comment"),
            onFunc: function () {
                var commentText = postCommentField.plainText();
                if (commentText) {
                    postButton.disable();
                    Gmail.showNotice(BB.Locale.getString("saving"));
                    APIRequester.create({
                        msgUrl: "boxes/" + box.key() + "/comments",
                        message: commentText
                    }, function (res) {
                        postCommentField.html("");
                        postButton.enable();
                        box.trigger("newComment")
                    }, function () {
                        postButton.enable();
                        Gmail.showNotice(BB.Locale.getString("error_comment"), 5E3);
                        box.trigger("deleteComment")
                    }, null)
                }
            },
            isToggle: false,
            color: "blue"
        });
        postButton.el.addClass("postCommentButton");
        postCommentField.easyTab({
            next: postButton.el
        });
        postButton.el.easyTab({
            prev: postCommentField
        });
        el.find(".buttonWidget").append(postButton.el);
        BB.Tracker.addTracking(postButton.el, "click", {
            eventName: "CommentPosted"
        });
        return {
            el: el
        }
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        Model = Streak.Model,
        BB = Streak.BentoBox;
    var trackingContext = null;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    ReminderList = {
        templates: {},
        defaults: {
            box: null,
            pipeline: null,
            showTitle: true,
            useLinkButtonForNewReminder: false
        },
        create: function (options) {
            this._init();
            var o = {};
            _.extend(o, this.defaults,
                options);
            return new BB.Widgets.ReminderList.impl(o)
        },
        _init: function () {
            if (!this.templates.main) {
                this.templates.main = HTML.get("reminderList");
                this.templates.menu = HTML.get("reminderListMenu");
                this.templates.reminder = HTML.get("reminderItem")
            }
        }
    };
    ReminderList.impl = function (options) {
        var box = options.box,
            pipeline = options.pipeline;
        options.trackingContext.widgetContext += "/reminderList";
        trackingContext = options.trackingContext;
        var el = $(document.createElement("div"));
        el.addClass("reminderList section");
        el[0].innerHTML =
            ReminderList.templates.main();
        if (!options.showTitle) el.find(".title").hide();
        var inner = el.find(".reminderInnerList");
        var currentReminder = null;
        var binders = [];
        var inputs = [];
        var uniq = "" + Date.now();
        var createWrapperEl = el.find(".reminderCreate");
        var refresh = function () {
            renderLoading();
            destroyInputs();
            APIRequester.get({
                msgUrl: "boxes/" + box.key() + "/reminders"
            }, function (list) {
                inner.empty();
                if (list && list.length > 0) {
                    list = _.sortBy(list, function (reminder) {
                        return reminder.remindDate * -1
                    });
                    for (var i = 0; i < list.length; i++) {
                        var rem =
                            renderReminder(list[i]);
                        inner.append(rem)
                    }
                } else renderEmpty()
            });
            refreshNew()
        }, renderLoading = function () {
                inner.empty();
                var empty = $(document.createElement("tr"));
                empty.addClass("asd ja empty");
                empty[0].innerHTML = BB.Locale.getString("loading");
                inner.append(empty)
            }, renderEmpty = function () {
                inner.empty();
                var empty = $(document.createElement("tr"));
                empty.addClass("asd ja empty");
                empty[0].innerHTML = BB.Locale.getString("no_reminders");
                inner.append(empty)
            }, renderReminder = function (preminder) {
                var reminder = BB.Models.Reminder.create(preminder);
                var rem = $(ReminderList.templates.reminder());
                reminder.bind("delete", null, function () {
                    rem.remove();
                    if (inner.find(".reminderItem").length === 0) renderEmpty()
                }, uniq);
                reminder.bind("save", null, function () {
                    var newEl = $(ReminderList.templates.reminder());
                    renderReminderEl(reminder, newEl);
                    rem.after(newEl);
                    rem.remove();
                    rem = newEl
                }, uniq);
                renderReminderEl(reminder, rem);
                binders.push(reminder);
                return rem
            }, renderReminderEl = function (reminder, rem) {
                if (reminder.get("message")) {
                    rem.find(".notes").show();
                    rem.find(".notes").text(reminder.get("message"));
                    rem.find(".notes").attr("title", reminder.get("message"))
                } else rem.find(".notes").hide(); if (reminder.get("remindDate")) {
                    var d = Date.ccreate(reminder.get("remindDate"));
                    var dEl = rem.find(".date");
                    dEl.html(d.customFormat("shortWithWeekday"));
                    if (d.isBefore(Date.now())) rem.addClass("passed");
                    rem.find(".y2").show();
                    if (!reminder.get("message")) {
                        dEl.detach();
                        rem.find(".innerDetails").append(dEl);
                        rem.find(".dateSecond").hide()
                    }
                }
                if (reminder.get("remindFollowers")) rem.find(".followerText").html(BB.Locale.getString("remind_followers"));
                else rem.find(".followerText").html(BB.Locale.getString("reminders_reminding") + " " + reminder.get("creatorName"));
                var bm = BB.Widgets.ButtonMenu.create({
                    menuInner: ReminderList.templates.menu(),
                    closeOnSelect: false,
                    customButton: rem.find(".innerDetails"),
                    hoverClass: "active",
                    justMenu: true,
                    css: {
                        width: "220px"
                    },
                    fixedPosition: true,
                    rightAligned: !Gmail.isXobniInstalled(),
                    trackingContext: options.trackingContext
                });
                renderMenu(bm, reminder);
                rem.find(".innerDetails").append(bm.menu)
            };
        var renderMenu = function (bm, reminder) {
            var menu =
                bm.menu;
            var isNew = !reminder.key();
            var input = menu.find(".dateInput");
            if (reminder.get("remindDate")) {
                var d = Date.ccreate(reminder.get("remindDate"));
                input.val(d.customFormat("longDateTime"));
                bm.menu.find(".scheduledDate").text(d.customFormat("shortWithWeekday"));
                input.addClass("valid")
            }
            input.keyup(function (e) {
                if (Streak.jwerty.is("escape", e)) {
                    bm.off();
                    return
                }
                var val = input.val().trim();
                var text;
                input.removeClass("valid");
                reminder.set("remindDate", null);
                if (val === "") text = BB.Locale.getString("send_later_enter_date");
                else {
                    var date = Date.ccreate(val);
                    if (!date.isValid()) {
                        date = Date.ccreate(val, BB.Locale.getCurrent());
                        if (!date.isValid()) text = BB.Locale.getString("send_later_invalid_date")
                    } else if (date.isBefore(new Date)) text = BB.Locale.getString("send_later_future_date");
                    else {
                        input.addClass("valid");
                        saveButton.el.prop("disabled", false);
                        text = date.customFormat("shortWithWeekday");
                        reminder.set("remindDate", date.getTime());
                        if (e.which === 13) saveButton.on()
                    }
                }
                bm.menu.find(".scheduledDate").text(text)
            });
            menu.find("a").click(function (e) {
                e.preventDefault();
                var d = Date.ccreate($(this).attr("title"));
                input.val(d.customFormat("longDateTime"));
                bm.menu.find(".scheduledDate").text(d.customFormat("shortWithWeekday"));
                reminder.set("remindDate", d.getTime());
                input.addClass("valid");
                track("suggestedTimeClick")
            });
            menu.find(".notesEnter").val(reminder.get("message"));
            if (reminder.get("remindFollowers")) menu.find(".includeFollowers")[0].checked = true;
            var id = "remindFollowers" + Date.ccreate().getTime() * Math.random();
            menu.find(".includeFollowers").prop("id", id);
            menu.find(".checkbox label").prop("for",
                id);
            if (reminder.isSavedOnServer()) {
                var delButton = BB.Widgets.Button.create({
                    name: BB.Locale.getString("reminder_cancel"),
                    isToggle: false,
                    hasButtonToRight: true,
                    onFunc: function () {
                        delButton.el.trigger("delete");
                        bm.off();
                        Gmail.showNotice(BB.Locale.getString("saving"));
                        reminder.del(function () {
                            track("deleteReminder", {
                                messageLength: reminder.get("message").length,
                                remindFollowers: reminder.get("remindFollowers")
                            });
                            box.refresh(function () {
                                Gmail.hideNotice(500)
                            })
                        })
                    },
                    trackingContext: options.trackingContext
                });
                delButton.el.css({
                    "float": "left"
                });
                menu.find(".buttons").append(delButton.el)
            }
            var saveButton = BB.Widgets.Button.create({
                name: BB.Locale.getString(isNew ? "create" : "save"),
                isToggle: false,
                onFunc: function () {
                    if (reminder.get("remindDate")) {
                        reminder.set("message", menu.find(".notesEnter").val());
                        reminder.set("remindFollowers", menu.find(".includeFollowers")[0].checked === true);
                        currentReminder = reminder;
                        if (reminder.key()) saveButton.el.trigger("save");
                        else saveButton.el.trigger("create");
                        Gmail.showNotice(BB.Locale.getString("saving"));
                        bm.off();
                        reminder.save(function () {
                            track("editReminder", {
                                messageLength: reminder.get("message").length,
                                remindFollowers: reminder.get("remindFollowers")
                            });
                            box.refresh(function () {
                                Gmail.hideNotice(500)
                            })
                        })
                    }
                },
                color: "red",
                trackingContext: options.trackingContext
            });
            saveButton.el.addClass("bbLast");
            menu.find(".buttons").append(saveButton.el);
            $.tabChain([input, menu.find(".notesEnter"), menu.find(".includeFollowers"), saveButton.el]);
            bm.updateOptions({
                postOnFunc: function () {
                    input.focus()
                }
            });
            inputs.push(bm);
            inputs.push(saveButton);
            return menu
        };
        var newBm = null;
        var newReminder =
            null;
        var refreshNew = function () {
            if (newReminder) newReminder.unbindAll(uniq);
            newReminder = BB.Models.Reminder.create({
                boxKey: box.key(),
                pipelineKey: pipeline.key(),
                message: ""
            });
            createWrapperEl.empty();
            var menuButtonOptions = {
                color: "blue",
                menuInner: ReminderList.templates.menu(),
                closeOnSelect: false,
                css: {
                    width: "220px"
                },
                rightAligned: !Gmail.isXobniInstalled(),
                trackingContext: options.trackingContext,
                fixedPosition: true
            };
            if (options.useLinkButtonForNewReminder) {
                menuButtonOptions.customButton = BB.Widgets.LinkButton.create({
                    text: "+ New"
                }).getElement();
                menuButtonOptions.justMenu = true
            } else menuButtonOptions.buttonInner = BB.Locale.getString("reminder_new");
            newBm = BB.Widgets.ButtonMenu.create(menuButtonOptions);
            renderMenu(newBm, newReminder);
            newReminder.bind("create", null, createReminderCallback, uniq);
            if (options.useLinkButtonForNewReminder) {
                createWrapperEl.empty();
                createWrapperEl.append(newBm.getButtonElement());
                createWrapperEl.append(newBm.menu)
            } else {
                newBm.button.el.addClass("center");
                createWrapperEl.append(newBm.el)
            }
        };
        var createReminderCallback = function () {
            newReminder.unbindAll(uniq);
            refresh();
            track("newReminder", {
                messageLength: newReminder.get("message").length,
                remindFollowers: newReminder.get("remindFollowers")
            })
        };
        refresh();
        box.bind("reminderRefresh", null, refresh, uniq);

        function destroyInputs() {
            for (var ii = 0; ii < inputs.length; ii++)
                if (inputs[ii] && _.isFunction(inputs[ii].destroy)) inputs[ii].destroy()
        }
        return {
            el: el,
            getFocusElement: function () {
                return createWrapperEl.find(".bbButton").first()
            },
            getNewReminderButtonElement: function () {
                return createWrapperEl
            },
            refresh: refresh,
            destroy: function () {
                newReminder.unbindAll(uniq);
                box.unbindAll(uniq);
                for (var i = 0; i < binders.length; i++) binders[0].unbindAll(uniq);
                destroyInputs()
            }
        }
    };
    BB.Widgets.ReminderList = ReminderList
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var ShareStreak = function (options) {
        BB.Widgets.Widget.call(this, options);
        this.pipelines = options.pipelines;
        this.modal = $(HTML.get("shareStreakModal")({
            modal_description: this.options.modalDescription
        }));
        this.potentialPeople = [];
        this.acl = [];
        this.suggestionsFoundObj = Streak.Eventer.create();
        this.setupUI();
        this.prepareData();
        this.saved = false
    };
    ShareStreak.prototype = Object.create(BB.Widgets.Widget.prototype);
    _.extend(ShareStreak.prototype, {
        setupUI: function () {
            var self = this;
            this.personPicker = BB.Widgets.PersonPicker.create({
                selectFunc: function (person) {
                    var row = self.renderACLRow(person, true);
                    row.scrollintoview({
                        duration: 0
                    });
                    self.personPicker.setExcluded(_.pluck(self.potentialPeople, "personObject").concat({
                        email: BB.getUser().get("email")
                    }))
                },
                allowName: false
            });
            this.personPicker.setExcluded([{
                email: BB.getUser().get("email")
            }]);
            this.personPicker.el.addClass("bb_boxflex1 bb_vbox");
            this.modal.find(".sharingEnter").append(this.personPicker.el);
            var addButton = BB.Widgets.Button.create({
                color: "red",
                name: BB.Locale.getString("add"),
                onFunc: function () {
                    self.personPicker.el.find("input").trigger("bbSelect")
                }
            });
            this.modal.find(".sharingEnter").append(addButton.el);
            var defaultModalOptions = {
                title: this.options.title,
                confirmText: this.options.confirmText,
                inner: this.modal,
                confirmFunc: this.saveList.bind(this),
                cancelFunc: this.cancelFunction.bind(this),
                width: "500px"
            };
            var newModalOptions = $.extend({}, defaultModalOptions, this.options.modalOptions);
            this.shareModal =
                BB.Widgets.Modal.create(newModalOptions)
        },
        prepareData: function () {
            var self = this;
            BB.Contacts.getTopContacts(function (results) {
                    results = results || [];
                    if (results.length === 0) self.modal.find(".sharingList").html(BB.Locale.getString("share_no_contacts"));
                    else {
                        self.modal.find(".sharingList").empty();
                        _(results).chain().filter(function (person) {
                            return person.email !== BB.getUser().get("email") && person.fullName !== person.email
                        }).each(function (person) {
                            self.renderACLRow(person, false)
                        })
                    }
                    self.suggestionsFoundObj.trigger("ready")
                },
                50)
        },
        renderACLRow: function (person, checked) {
            var row = HTML.get("shareStreakItem", true);
            var personEl = $(BB.Contacts.suggestionTemplate({
                image: person.imageUrl,
                name: person.fullName || person.email,
                tag: person.fullName ? person.email : "&nbsp;"
            })).children().unwrap();
            row.find(".aclRowContent").append(personEl);
            var checkbox = Gmail.widgets.getCheckbox("", checked);
            row.find(".selectionCheckbox").append(checkbox);
            row.find(".remove").click(function (e) {
                row.remove();
                acl.removeVal(person);
                pp.setExcluded(acl.concat(pipeline.get("owner")));
                e.preventDefault()
            });
            personEl.click(function (e) {
                checkbox.click()
            });
            if (checked) this.modal.find(".sharingList").prepend(row);
            else this.modal.find(".sharingList").append(row);
            checkbox.bind("change", function () {
                row.toggleClass("bbChecked", checkbox.isChecked())
            });
            row.toggleClass("bbChecked", checkbox.isChecked());
            this.potentialPeople.push({
                row: row,
                personObject: person,
                checkbox: checkbox
            });
            return row
        },
        saveList: function () {
            var self = this;
            for (var i = 0; i < this.potentialPeople.length; i++)
                if (this.potentialPeople[i].checkbox.isChecked()) this.acl.push(this.potentialPeople[i].personObject);
            if (this.options.onPresave)
                if (this.options.onPresave(this.acl)) return;
            if (this.acl.length === 0) return;
            if (this.options.pipelines && this.options.pipelines.length > 0) this.executeSaveList()
        },
        setPipelines: function (pipelines) {
            this.options.pipelines = pipelines;
            this.executeSaveList()
        },
        executeSaveList: function () {
            var self = this;
            var after = _.onceAfter(this.options.pipelines.length, function () {
                Gmail.showNotice(BB.Locale.getString("saved"), 5E3);
                self.options.onSave()
            });
            Gmail.showNotice(BB.Locale.getString("saving"));
            _.each(this.options.pipelines,
                function (pipeline) {
                    pipeline.onCreate(function () {
                        pipeline.set("aclEntries", self.acl);
                        pipeline.save(after)
                    })
                })
        },
        cancelFunction: function () {
            if (this.options.cancelFunction) this.options.cancelFunction()
        },
        show: function (options) {
            var self = this;
            if (options) this.setOptions(options);
            self.shareModal.show();
            this.suggestionsFoundObj.ready(function () {
                Gmail.hideNotice();
                var ok = self.shareModal.getOkButton().el;
                self.personPicker.setTab(ok, ok);
                ok.easyTab({
                    next: self.personPicker.el,
                    prev: self.personPicker.el
                })
            })
        },
        close: function () {
            this.shareModal.close()
        },
        defaults: {
            pipelines: [],
            onPresave: $.noop,
            onSave: $.noop,
            modalOptions: {}
        }
    });
    ShareStreak.create = function (options) {
        return new ShareStreak(options)
    };
    BB.Widgets.ShareStreak = ShareStreak
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var trackingContext;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    var SearchBox = {
        defaults: {
            searchController: null
        },
        create: function (o) {
            this._init();
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        },
        _init: function () {
            if (!this.templates) {
                this.templates = {};
                this.templates.searchDiv = HTML.get("searchBox")
            }
        }
    };
    SearchBox.impl = function (o) {
        var searchController = o.searchController;
        var el = $(document.createElement("div"));
        var currentResultIndex = 0;
        el[0].innerHTML = SearchBox.templates.searchDiv();
        var self = this;
        self.o = o;
        var searchInput = el.find("input");
        el.find(".bbPrevButton").click(function (e) {
            searchController.selectPrevious()
        });
        el.find(".bbNextButton").click(function (e) {
            searchController.selectNext()
        });
        el.find(".bbCloseButton").click(function (e) {
            el.removeClass("showDown");
            el.addClass("hideUp");
            searchInput.val("");
            searchController.hideSearch()
        });
        var inputContainer = el.find(".searchInputContainer");
        searchInput.focus(function (e) {
            $(inputContainer).addClass("searchInputSelected")
        });
        searchInput.blur(function (e) {
            $(inputContainer).removeClass("searchInputSelected")
        });
        BB.Keyboard.bindChordToEl({
            el: searchInput,
            chord: "enter",
            noDefault: true,
            cb: function (e) {
                searchController.selectNext()
            }
        });
        BB.Keyboard.bindChordToEl({
            el: searchInput,
            chord: "shift+enter",
            noDefault: true,
            cb: function (e) {
                searchController.selectPrevious()
            }
        });
        BB.Keyboard.bindChordToEl({
            el: searchInput,
            chord: "escape",
            noDefault: true,
            cb: function (e) {
                searchInput.val("");
                el.removeClass("showDown");
                el.addClass("hideUp");
                searchController.hideSearch()
            }
        });
        searchInput.delayedSave({
            delay: 100,
            dontPropagate: true,
            saveFunction: function (e) {
                var searchVal = searchInput.val();
                self.o.searchController.searchTriggered(searchVal)
            }
        });

        function updateResultState() {
            var results = searchController.getResultState();
            el.find(".searchResultsPosition").html(results.selectedIndex);
            el.find(".searchResultsCount").html(results.total)
        }

        function hideSearchBar() {
            el.removeClass("showDown");
            el.addClass("hideUp");
            el.remove()
        }
        searchController.bind("searchResultsChanged", updateResultState);
        return {
            el: el,
            destroy: function () {
                hideSearchBar();
                searchController.hideSearch();
                searchController.unbind("searchResultsChanged", updateResultState)
            }
        }
    };
    BB.Widgets.SearchBox = SearchBox
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var TabFocusController = function () {
        Streak.ViewControllerBase.call(this);
        this._elements = []
    };
    TabFocusController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(TabFocusController.prototype, {
        addElement: function (element) {
            this._elements.push(element);
            this._resetTabs()
        },
        addElements: function (elementArray) {
            _.mutate("union",
                this._elements, elementArray);
            this._resetTabs()
        },
        removeElement: function (element) {
            this._elements.removeVal(element);
            this._resetTabs()
        },
        addView: function (view) {
            this._elements.push(view.getElement());
            this._resetTabs()
        },
        removeView: function (view) {
            this._elements.removeVal(view.getElement());
            this._resetTabs()
        },
        destroy: function () {
            this._unbind();
            this._elements.length = 0
        },
        _resetTabs: function () {
            this._unbind();
            $.tabChain(this._elements, 50, "tabFocusController")
        },
        _unbind: function () {
            for (var ii = 0; ii < this._elements.length; ii++)
                if (this._elements[ii]) this._elements[ii].off(".tabFocusController")
        }
    });
    BB.Widgets.TabFocusController = TabFocusController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var ThreadTask = {
        templates: {},
        defaults: {
            thread: null
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    ThreadTask.impl = function (o) {
        var retObj = {}, options = o,
            thread = o.thread,
            el = $(document.createElement("span"));
        var taskLabel = null;
        var taskCheckbox = null;
        var makeTaskLink = null;

        function updateDisplay(force) {
            if (!force && !el.is(":inBody")) return true;
            switch (thread.get("taskStatus")) {
            case "NOT_A_TASK":
            case "":
                renderMakeTask();
                break;
            case "NOT_DONE_TASK":
                renderAsTask(false);
                break;
            case "DONE_TASK":
                renderAsTask(true);
                break
            }
            return null
        }

        function renderMakeTask() {
            if (!makeTaskLink) {
                makeTaskLink = $(document.createElement("span"));
                makeTaskLink[0].innerHTML = '[<a href="#">' + BB.Locale.getString("make_task") + "</a>]";
                makeTaskLink.find("a").captureClick(function (e) {
                    thread.set("taskStatus",
                        "NOT_DONE_TASK");
                    thread.save();
                    e.preventDefault();
                    track("markAsTask")
                })
            }
            if (taskLabel) taskLabel.detach();
            if (taskCheckbox) taskCheckbox.detach();
            el.append(makeTaskLink)
        }

        function renderAsTask(isDone) {
            if (taskLabel && taskCheckbox) taskCheckbox.setChecked(thread.get("taskStatus") === "DONE_TASK");
            else {
                taskLabel = Gmail.widgets.getLabelActionTag({
                    backgroundColor: "rgb(254, 173, 71)",
                    textColor: "rgb(0, 0, 0)",
                    labelText: BB.Locale.getString("task"),
                    labelHelpText: BB.Locale.getString("task_help"),
                    xHelpText: BB.Locale.getString("untask_help"),
                    xCallback: function () {
                        thread.set("taskStatus", "NOT_A_TASK");
                        thread.save();
                        track("markNotTask")
                    }
                });
                taskCheckbox = Gmail.widgets.getCheckbox(BB.Locale.getString("task_done"), isDone);
                taskCheckbox.bind("change", function (e) {
                    thread.set("taskStatus", taskCheckbox.isChecked() ? "DONE_TASK" : "NOT_DONE_TASK");
                    thread.save();
                    track("threadTaskStatusChanged", {
                        isChecked: taskCheckbox.isChecked()
                    })
                })
            } if (makeTaskLink) makeTaskLink.detach();
            if (taskLabel.parents().length === 0 || taskLabel.parent()[0] !== el[0]) el.append(taskLabel);
            if (taskCheckbox.parents().length === 0 || taskCheckbox.parent()[0] !== el[0]) el.append(taskCheckbox);
            taskLabel.reset()
        }
        el.addClass("threadTask");
        el.click(function (e) {
            e.preventDefault();
            e.stopPropagation()
        });
        el.data("threadTask", retObj);
        thread.bind("set", "taskStatus", updateDisplay);
        updateDisplay(true);
        retObj.el = el;
        retObj.destroy = function () {
            el.remove();
            thread.unbind("set", "taskStatus", null, updateDisplay)
        };
        retObj.getElement = function () {
            return el
        };
        return retObj
    };
    BB.Widgets.ThreadTask = ThreadTask
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ComposeMasterControllerBase = function () {
        this._active = true;
        this._instances = [];
        Gmail.GmailComposeManager.registerModule(this)
    };
    _.extend(ComposeMasterControllerBase.prototype, {
        getViewController: function () {
            var instance = this._createNewInstanceType();
            this._instances.push(instance);
            instance.addDelegate(this);
            return instance
        },
        destroy: function (instance) {
            this._instances.removeVal(instance)
        }
    });
    BB.Modules.ComposeMasterControllerBase = ComposeMasterControllerBase
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ComposeViewControllerBase = Streak.Class.subclass({
        superclass: Streak.UI.ViewController,
        _memberVariables: [{
            name: "_composeWindowViewController",
            destroy: false
        }],
        _initialize: function () {
            Streak.UI.ViewController.prototype._initialize.call(this);
            return this
        },
        allModificationsInitialized: function () {},
        shouldProcessModification: function () {
            return true
        },
        aboutToProcessModification: function () {},
        getModificationType: function () {},
        getModificationArea: function () {},
        getModificationPlacement: function () {},
        getModificationPriority: function () {},
        getModificationElement: function () {},
        shouldModifyTabOrder: function () {
            return true
        },
        initialize: function (composeWindowViewController) {
            throw new Error("must override");
        },
        justAdded: function () {},
        getListenerType: function () {},
        getCharacterSequenceListener: function () {},
        draftSaved: function () {},
        aboutToSend: function () {},
        emailSent: function () {},
        threadResponse: function (thread) {},
        discarded: function () {}
    });
    BB.Modules.ComposeViewControllerBase = ComposeViewControllerBase
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var BoxesMenuViewController = function () {
        Streak.ViewControllerBase.call(this);
        this._view = new BB.Modules.BoxesMenu.BoxesMenuView;
        this._boxesMenuModel = new BB.Modules.BoxesMenu.BoxesMenuModel;
        this._boxDetailsVC = new BB.Widgets.BoxesDetailsVC;
        this._listViewVC = new BB.Widgets.ListView.ListViewViewController;
        this._searchbox =
            new BB.Widgets.SearchSimpleVC;
        this._keyboardCaptureWidget = new BB.Widgets.KeyboardCaptureWidget;
        this._stateViewController = new BB.Modules.BoxesMenu.BoxesMenuStateController(this._boxesMenuModel);
        this._doneCallback = null;
        this._setupDelegates();
        this._setupView()
    };
    BoxesMenuViewController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(BoxesMenuViewController.prototype, {
        _setupDelegates: function () {
            this._boxesMenuModel.addDelegate(this);
            this._boxesMenuModel.addDelegate(this._stateViewController);
            this._listViewVC.setDataSource(this._boxesMenuModel);
            this._listViewVC.addDelegate(this);
            this._listViewVC.addDelegate(this._stateViewController);
            this._searchbox.addDelegate(this._stateViewController);
            this._searchbox.addDelegate(this._listViewVC);
            this._keyboardCaptureWidget.addDelegate(this._listViewVC)
        },
        _setupView: function () {
            this._searchbox.setPlaceholder(BB.Locale.getString("search_all_boxes"));
            this._view.setSearchArea(this._searchbox.getView().getEl());
            this._view.setListSection(this._listViewVC.getView().getEl());
            this._view.setRightPane(this._boxDetailsVC.getView().getEl());
            this._view.setKeyboardCapture(this._keyboardCaptureWidget.getElement())
        },
        getElement: function () {
            return this._view.getEl()
        },
        use: function (options) {
            this._view.hideRightPane();
            this._boxesMenuModel.reset();
            this._searchbox.reset();
            this._doneCallback = options.doneCallback;
            this._boxesMenuModel.setDontAssociate(options.dontAssociate);
            if (options.threads) this._stateViewController.setThreads(options.threads)
        },
        stateChanged: function () {
            var menuState = this._boxesMenuModel.getState();
            switch (menuState) {
            case BB.Modules.BoxesMenu.BoxesMenuStateController.prototype.SEARCH_STATE:
                this._view.showSearchArea();
                this._searchbox.focus();
                break;
            case BB.Modules.BoxesMenu.BoxesMenuStateController.prototype.REMOVE_STATE:
            case BB.Modules.BoxesMenu.BoxesMenuStateController.prototype.CHOOSE_PIPELINE_STATE:
                this._searchbox.clearQuery();
                this._view.hideSearchArea();
                this._keyboardCaptureWidget.focus();
                break;
            case BB.Modules.BoxesMenu.BoxesMenuStateController.prototype.DONE_STATE:
                if (this._doneCallback) this._doneCallback(this._boxesMenuModel.getBox());
                break
            }
        },
        rowFocused: function (rowInfo) {
            if (!rowInfo) {
                this._view.hideRightPane();
                return
            }
            if (!rowInfo.data || !rowInfo.data.box) {
                this._view.hideRightPane();
                return
            }
            this._boxDetailsVC.setModel(rowInfo.data.box);
            this._view.showRightPane()
        },
        setThreads: function (threads) {
            this._stateViewController.setThreads(threads)
        },
        destroy: function () {
            this._view.destroy();
            this._boxDetailsVC.destroy();
            this._listViewVC.destroy();
            this._searchbox.destroy();
            this._stateViewController.destroy()
        }
    });
    BB.Modules.BoxesMenu = {};
    Streak.DependencyManager.addFunction({
        functionKey: "boxesMenuViewControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.BoxesMenu.BoxesMenuViewController = new BoxesMenuViewController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var BoxesMenuModel = function () {
        BB.Widgets.ListView.ListViewBaseModel.call(this);
        this._state = "default";
        this._query = null;
        this._threads = null;
        this._boxName = "";
        this._box = null;
        this._storedSections = null;
        this._dontAssociate = null
    };
    BoxesMenuModel.prototype = Object.create(BB.Widgets.ListView.ListViewBaseModel.prototype);
    _.extend(BoxesMenuModel.prototype, {
        reset: function () {
            this.removeAllSections();
            this.setThreads(null);
            this.setBoxName(null);
            this.setBox(null);
            this.setQuery(null)
        },
        setThreads: function (threads) {
            this._threads = threads
        },
        getThreads: function () {
            return this._threads
        },
        setBoxName: function (boxName) {
            this._boxName = boxName
        },
        getBoxName: function () {
            return this._boxName
        },
        setBox: function (box) {
            this._box = box
        },
        getBox: function () {
            return this._box
        },
        setState: function (state) {
            this._state = state;
            this._callDelegateFunction("stateChanged")
        },
        getState: function () {
            return this._state
        },
        setQuery: function (query) {
            this._query =
                query
        },
        getQuery: function () {
            return this._query
        },
        setDontAssociate: function (dontAssociate) {
            this._dontAssociate = dontAssociate
        },
        getDontAssociate: function () {
            return this._dontAssociate
        }
    });
    _.extend(BoxesMenuModel.prototype, {
        archiveSections: function () {
            this._storedSections = this._sections
        },
        restoreSections: function () {
            if (_.isReal(this._storedSections)) {
                this.removeAllSections();
                this._sections = this._storedSections;
                this._callDelegateFunction("dataChanged")
            }
        },
        removeAllSections: function () {
            this._sections.length = 0;
            this._callDelegateFunction("dataChanged")
        },
        addSection: function (section) {
            this._sections.push(section);
            this._callDelegateFunction("dataChanged")
        },
        numberOfSections: function () {
            return this._sections.length
        },
        numberOfRowsForSection: function (ii) {
            return this._sections[ii].rows.length
        },
        infoForRow: function (section, row) {
            return this._sections[section].rows[row]
        },
        sectionTitle: function (sectionIndex) {
            return this._sections[sectionIndex].name
        },
        sectionTitleClass: function (sectionIndex) {
            return "streak__listViewHeader2"
        },
        sectionIconClass: function (sectionIndex) {
            return this._sections[sectionIndex].sectionIconClass
        }
    });
    BB.Modules.BoxesMenu.BoxesMenuModel = BoxesMenuModel
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var BoxesMenuView = function (options) {
        this._el = $(HTML.get("bm_main_container")());
        this._listContainer = this._el.find(".streak_bm_container");
        this._searchAreaEl = this._el.find(".streak__bm_searcharea");
        this._rightPane = this._el.find(".streak__bm_right_pane")
    };
    _.extend(BoxesMenuView.prototype, {
        hideSearchArea: function () {
            this._searchAreaEl.css({
                opacity: 0,
                width: 0,
                height: 0
            })
        },
        showSearchArea: function () {
            this._searchAreaEl.css({
                opacity: 1,
                width: "",
                height: ""
            })
        },
        setKeyboardCapture: function (element) {
            this._el.append(element)
        },
        getEl: function () {
            return this._el
        },
        getElement: function () {
            return this._el
        },
        setSearchArea: function (searchArea) {
            this._el.find(".streak__bm_searcharea").empty();
            this._el.find(".streak__bm_searcharea").append(searchArea)
        },
        setListSection: function (section) {
            this._el.find(".streak__bm_top_section").empty();
            this._el.find(".streak__bm_top_section").append(section)
        },
        setRightPane: function (rightPane) {
            this._rightPane.empty();
            this._rightPane.append(rightPane)
        },
        showRightPane: function () {
            this._rightPane.show();
            this._listContainer.addClass("streak_bm_container_withRightPane")
        },
        hideRightPane: function () {
            this._listContainer.removeClass("streak_bm_container_withRightPane");
            this._rightPane.hide()
        }
    });
    BB.Modules.BoxesMenu.BoxesMenuView = BoxesMenuView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var BoxesMenuStateController = function (boxesMenuModel) {
        Streak.ViewControllerBase.call(this);
        this._boxesMenuModel = boxesMenuModel;
        this._removeStateController = new BB.Modules.BoxesMenu.RemoveStateController(boxesMenuModel);
        this._emptyQueryStateController = new BB.Modules.BoxesMenu.SearchEmptyStateContrller(this._boxesMenuModel);
        this._searchQueryStateController = new BB.Modules.BoxesMenu.SearchQueryStateController(this._boxesMenuModel);
        this._pipelineStateController = new BB.Modules.BoxesMenu.PipelineStateController(boxesMenuModel);
        this._boxAddRemoveController = new BB.Modules.BoxesMenu.BoxesMenuAddRemoveController(boxesMenuModel)
    };
    BoxesMenuStateController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(BoxesMenuStateController.prototype, {
        SEARCH_STATE: "SEARCH",
        REMOVE_STATE: "REMOVE",
        CHOOSE_PIPELINE_STATE: "CHOOSE_PIPELINE_STATE",
        DONE_STATE: "DONE",
        setThreads: function (threads) {
            this._boxesMenuModel.setThreads(threads);
            this._determineStateFromThreads()
        },
        rowPressed: function (rowInfo) {
            if (!rowInfo.type) return;
            switch (rowInfo.type) {
            case "go_back_from_pipeline":
                this._goBackFromPipeline();
                BB.Tracker.track("boxes menu go back from pipeline");
                break;
            case "existing_box":
                this._boxAddRemoveController.associateBoxWithThreads(rowInfo.data.box);
                this._boxesMenuModel.setState(this.DONE_STATE);
                BB.Tracker.track("boxes menu choose existing box");
                break;
            case "new_box_name":
                this._newBoxNameChosen(rowInfo.data.boxName);
                BB.Tracker.track("boxes menu choose new box name");
                break;
            case "pipeline":
                this._boxAddRemoveController.createNewBoxInPipelineAndAssociateThreads(rowInfo.data.pipeline);
                this._boxesMenuModel.setState(this.DONE_STATE);
                BB.Tracker.track("boxes menu choose pipeline");
                break;
            case "remove_box":
                this._boxAddRemoveController.removeThreadsFromBox();
                this._boxesMenuModel.setState(this.DONE_STATE);
                BB.Tracker.track("boxes menu remove box");
                break
            }
        },
        _determineStateFromThreads: function () {
            var threads = this._boxesMenuModel.getThreads();
            if (!threads || threads.length === 0) {
                this._boxesMenuModel.setState(this.SEARCH_STATE);
                return
            }
            for (var ii = 0; ii < threads.length; ii++)
                if (threads[ii].get("threadInfo") && threads[ii].get("threadInfo").get("box") && threads[ii].get("threadInfo").get("box").getPipeline) {
                    this._boxesMenuModel.setState(this.REMOVE_STATE);
                    return
                }
            this._boxesMenuModel.setState(this.SEARCH_STATE)
        },
        stateChanged: function () {
            var state = this._boxesMenuModel.getState();
            this._boxesMenuModel.removeAllSections();
            switch (state) {
            case this.REMOVE_STATE:
                this._removeStateController.use();
                break;
            case this.CHOOSE_PIPELINE_STATE:
                this._pipelineStateController.use();
                break;
            case this.SEARCH_STATE:
                this.queryChange("");
                break
            }
        },
        queryChange: function (query) {
            this._boxesMenuModel.removeAllSections();
            this._boxesMenuModel.setQuery(query);
            if (query === "") this._emptyQueryStateController.use();
            else this._searchQueryStateController.use()
        },
        cursorLeft: function (rowInfo) {
            if (this._boxesMenuModel.getState() === this.CHOOSE_PIPELINE_STATE) this._goBackFromPipeline()
        },
        cursorRight: function (rowInfo, isCursorAtEnd) {
            if (isCursorAtEnd && rowInfo && rowInfo.hasRightArrow) this.rowPressed(rowInfo)
        },
        _goBackFromPipeline: function () {
            this._boxesMenuModel.restoreSections();
            this._boxesMenuModel.setState(this.SEARCH_STATE)
        },
        _newBoxNameChosen: function (boxName) {
            this._boxesMenuModel.setBoxName(boxName);
            if (BB.Data.getAllPipelines().length === 1) {
                this._boxAddRemoveController.createNewBoxInPipelineAndAssociateThreads(BB.Data.getAllPipelines()[0]);
                return
            }
            this._boxesMenuModel.setState(this.CHOOSE_PIPELINE_STATE)
        }
    });
    BB.Modules.BoxesMenu.BoxesMenuStateController = BoxesMenuStateController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var BoxesMenuAddRemoveController = function (boxesMenuModel) {
        this._boxesMenuModel = boxesMenuModel
    };
    _.extend(BoxesMenuAddRemoveController.prototype, {
        associateBoxWithThreads: function (box) {
            this._associateThreads(box, this._boxesMenuModel.getThreads())
        },
        createNewBoxInPipelineAndAssociateThreads: function (pipeline) {
            var self = this;
            var boxName = this._boxesMenuModel.getBoxName();
            var threads = this._boxesMenuModel.getThreads();
            Gmail.showNotice(BB.Locale.getString("saving"));
            BB.Data.createBox(boxName, pipeline.key(), function (box) {
                Gmail.hideNotice();
                self._associateThreads(box, threads)
            })
        },
        removeThreadsFromBox: function () {
            if (this._boxesMenuModel.getDontAssociate()) {
                this._boxesMenuModel.setBox(null);
                return
            }
            Gmail.showNotice(BB.Locale.getString("saving"));
            BB.Data.removeThreadFromBox(this._boxesMenuModel.getThreads(), function () {
                Gmail.hideNotice();
                Streak.NotificationCenter.notify({
                    eventName: "streak.inboxview.removedFromBox"
                })
            })
        },
        _associateThreads: function (box, threads) {
            this._boxesMenuModel.setBox(box);
            this._boxesMenuModel.setState(BB.Modules.BoxesMenu.BoxesMenuStateController.prototype.DONE_STATE);
            if (this._boxesMenuModel.getDontAssociate()) return;
            Gmail.showNotice(BB.Locale.getString("saving"));
            BB.Data.addThreadsToBox(box, threads, function () {
                Gmail.hideNotice();
                Streak.NotificationCenter.notify({
                    eventName: "streak.inboxview.addedToBox"
                })
            })
        }
    });
    BB.Modules.BoxesMenu.BoxesMenuAddRemoveController = BoxesMenuAddRemoveController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var PipelineStateController = function (boxesMenuModel) {
        this._boxesMenuModel = boxesMenuModel
    };
    _.extend(PipelineStateController.prototype, {
        use: function () {
            this._loadGoBackButton();
            this._loadPipelines()
        },
        _loadGoBackButton: function () {
            this._boxesMenuModel.addSection({
                rows: [{
                    text: Locale.getString("go_back_from_pipeline"),
                    type: "go_back_from_pipeline",
                    hasLeftArrow: true
                }]
            })
        },
        _loadPipelines: function () {
            var self = this;
            var rows = [];
            _.each(BB.UI.getSortedVisiblePipelines(), function (pipeline) {
                rows.push({
                    text: pipeline.displayName(),
                    type: "pipeline",
                    data: {
                        pipeline: pipeline
                    }
                })
            });
            this._boxesMenuModel.addSection({
                name: Locale.getString("select_a_pipeline_for_a_new_box"),
                rows: rows
            })
        }
    });
    BB.Modules.BoxesMenu.PipelineStateController = PipelineStateController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var RemoveStateController = function (boxesMenuModel) {
        this._boxesMenuModel = boxesMenuModel
    };
    _.extend(RemoveStateController.prototype, {
        use: function () {
            var boxes = this._extractBoxesFromThreads();
            if (boxes.length === 0) return;
            if (boxes.length === 1) {
                this._removeSingleBox(boxes[0]);
                return
            }
            this._removeMultipleBoxes()
        },
        _extractBoxesFromThreads: function () {
            return _(this._boxesMenuModel.getThreads()).chain().map(function (thread) {
                return thread.get("threadInfo").get("box")
            }).filter(function (box) {
                return !!box &&
                    box.getPipeline
            }).value()
        },
        _removeSingleBox: function (box) {
            this._boxesMenuModel.addSection({
                rows: [{
                    text: Locale.getString("remove_box", {
                        box: "<strong>" + box.displayName() + "</strong>"
                    }),
                    type: "remove_box"
                }]
            })
        },
        _removeMultipleBoxes: function () {
            this._boxesMenuModel.addSection({
                rows: [{
                    text: Locale.getString("remove_all_boxes"),
                    type: "remove_box"
                }]
            })
        }
    });
    BB.Modules.BoxesMenu.RemoveStateController = RemoveStateController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var SearchEmptyStateContrller = function (boxesMenuModel) {
        this._boxesMenuModel = boxesMenuModel
    };
    _.extend(SearchEmptyStateContrller.prototype, {
        LIMIT_ENTRIES: 3,
        use: function () {
            this._loadExisting();
            this._loadSuggestedNames()
        },
        _loadExisting: function () {
            var rows = this._getExistingBoxesAsRows();
            if (_.isReal(rows) && rows.length > 0) this._boxesMenuModel.addSection({
                name: Locale.getString("suggested_existing_boxes"),
                sectionIconClass: "streak__boxAddIcon",
                rows: rows
            })
        },
        _getExistingBoxesAsRows: function () {
            var boxSuggestions = BB.Modules.BoxSuggestionsController.getBoxSuggestions(this._boxesMenuModel.getThreads());
            boxSuggestions = boxSuggestions.slice(0, self.LIMIT_ENTRIES);
            var boxSuggestionsAsRows = _.map(boxSuggestions, function (boxSourceObject) {
                return {
                    text: boxSourceObject.box.displayName(),
                    type: "existing_box",
                    data: {
                        box: boxSourceObject.box
                    }
                }
            });
            return boxSuggestionsAsRows
        },
        _loadSuggestedNames: function () {
            var names = BB.Services.SuggestedBoxNames.getSuggestions(this._boxesMenuModel.getThreads());
            names = names.slice(0, self.LIMIT_ENTRIES);
            if (!names || names.length === 0) return;
            var namesAsRows = _.map(names, function (name) {
                return {
                    text: name,
                    type: "new_box_name",
                    data: {
                        boxName: name
                    },
                    hasRightArrow: true
                }
            });
            this._boxesMenuModel.addSection({
                name: Locale.getString("suggested_names_for_box"),
                sectionIconClass: "streak__boxCreateIcon",
                rows: namesAsRows
            })
        }
    });
    BB.Modules.BoxesMenu.SearchEmptyStateContrller = SearchEmptyStateContrller
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._,
        Date = Streak.Date;
    var SearchQueryStateController = function (boxesMenuModel) {
        this._boxesMenuModel = boxesMenuModel
    };
    _.extend(SearchQueryStateController.prototype, {
        LIMIT_ENTRIES: 3,
        use: function () {
            this._loadExistingSection();
            this._loadQuerySection()
        },
        _loadQuerySection: function () {
            this._boxesMenuModel.addSection({
                name: Locale.getString("create_new_box_named"),
                sectionIconClass: "streak__boxCreateIcon",
                rows: [{
                    text: this._boxesMenuModel.getQuery(),
                    type: "new_box_name",
                    data: {
                        boxName: this._boxesMenuModel.getQuery()
                    },
                    hasRightArrow: true
                }]
            })
        },
        _loadExistingSection: function () {
            var existingBoxes = BB.Services.BoxSearcher.searchNameByQuery(this._boxesMenuModel.getQuery());
            if (!existingBoxes || existingBoxes.length === 0) return;
            var boxesAsRows = _.map(existingBoxes, function (box) {
                return {
                    text: box.displayName(),
                    type: "existing_box",
                    data: {
                        box: box
                    }
                }
            });
            this._boxesMenuModel.addSection({
                name: Locale.getString("or_add_it_to_an_existing_box"),
                sectionIconClass: "streak__boxAddIcon",
                rows: boxesAsRows
            })
        }
    });
    BB.Modules.BoxesMenu.SearchQueryStateController = SearchQueryStateController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var self = ListRowBoxesButton = {
        _isActive: false,
        _isTornDown: false,
        _buttons: [],
        init: function (callback) {
            if (BB.Data.streakSettings.settingIsEnabled("streak_it_title")) Gmail.InboxManipulator.addDataSource(self);
            if (callback) callback()
        },
        teardown: function () {
            this._isTornDown = true
        },
        reup: function () {
            this._isTornDown = false
        },
        setIsActive: function (callback) {
            this._isActive = true;
            Gmail.InboxManipulator.refreshAll();
            if (callback) callback()
        },
        getGlobalManipulation: function () {
            return {
                type: "CSS_CHANGE",
                columnName: "STAR",
                cssRule: "width: 52px"
            }
        },
        getRowManipulation: function (thread, rowObject) {
            if (this._isTornDown) return;
            if (Gmail.getPreviewPaneSettings() === "vertical") return;
            if (!thread) return;
            var manipulation = new ListRowBoxesButton.ListRowBoxesButtonInboxRowManipulation(thread, rowObject);
            if (this._isActive) manipulation.setActive();
            return manipulation
        }
    };

    function track(event, props) {
        BB.Tracker.trackStreakActive(props, {
            widgetContext: "addToBoxesButton",
            eventName: event
        })
    }
    Streak.DependencyManager.addFunction({
        functionKey: "listRowBoxesButtonInitialized",
        functionToCall: ListRowBoxesButton.init,
        functionContext: ListRowBoxesButton,
        dependentFunctionKeys: ["inboxManipulatorInitialized", "data.streakSettings.initialized", "htmlLoaded", "boxesMenuViewControllerInitialized"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "listRowBoxesButton.setIsActive",
        functionToCall: ListRowBoxesButton.setIsActive,
        functionContext: ListRowBoxesButton,
        dependentFunctionKeys: ["data.pipelines.initialized",
            "data.boxes.initialized"
        ]
    });
    BB.Modules.ListRowBoxesButton = ListRowBoxesButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ListRowBoxesButtonInboxRowManipulation = function (thread, rowObject) {
        Gmail.InboxManipulator.InboxRowManipulationBase.call(this);
        this._thread = thread;
        this._rowObject = rowObject;
        this._element = null;
        this._menuButton = null;
        this._htmlID = null;
        this._menuOpen = false;
        this._setupUIElements()
    };
    ListRowBoxesButtonInboxRowManipulation.prototype =
        Object.create(Gmail.InboxManipulator.InboxRowManipulationBase.prototype);
    _.extend(ListRowBoxesButtonInboxRowManipulation.prototype, {
        _setupUIElements: function () {
            this._element = $(document.createElement("div"));
            this._element[0].setAttribute("class", "addBoxesButtonIndicator");
            this._setupMenuButton();
            this.update();
            this._htmlID = this._rowObject.rowNode.attr("id")
        },
        _setupMenuButton: function () {
            var self = this;
            this._menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "Icon",
                iconClass: "__streak_It_Indicator",
                menu: BB.Modules.BoxesMenu.BoxesMenuViewController,
                preOnFunction: function () {
                    self._rowObject.rowNode.attr("id", "");
                    self._element.addClass("__streak_It_Indicator_hover");
                    self._menuOpen = true
                },
                postOnFunction: function () {
                    self._element.css("z-index", 2);
                    BB.Modules.BoxesMenu.BoxesMenuViewController.use({
                        threads: [self._thread],
                        doneCallback: function () {
                            self._rowObject.rowNode.attr("id", self._htmlID);
                            self._menuButton.off()
                        }
                    })
                },
                postOffFunction: function () {
                    self._element.css("z-index", "");
                    self._menuOpen = false;
                    self._rowObject.rowNode.attr("id",
                        self._htmlID);
                    self._element.removeClass("__streak_It_Indicator_hover")
                }
            });
            this._element.append(this._menuButton.getElement())
        },
        update: function () {
            if (this._thread.get("threadInfo") && this._thread.get("threadInfo").get("box") && this._thread.get("threadInfo").get("box").getPipeline) this._menuButton.addClass("__streak_selected_streakit");
            else this._menuButton.removeClass("__streak_selected_streakit")
        },
        setActive: function () {
            var self = this;
            this._element.mousedown(function (e) {
                self._rowObject.rowNode.attr("id",
                    "");
                self._element.addClass("__streak_It_Indicator_hover")
            });
            this._element.on("mouseup mouseout", function (e) {
                if (self._menuOpen) return;
                self._rowObject.rowNode.attr("id", self._htmlID);
                self._element.removeClass("__streak_It_Indicator_hover")
            })
        },
        getElement: function () {
            return this._element
        },
        getColumnName: function () {
            return "STAR"
        },
        getManipulationType: function () {
            return "APPEND_ELEMENT"
        },
        undo: function () {
            if (this._menuButton) this._menuButton.destroy();
            if (this._element) this._element.remove()
        }
    });
    BB.Modules.ListRowBoxesButton.ListRowBoxesButtonInboxRowManipulation =
        ListRowBoxesButtonInboxRowManipulation
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ListViewBoxesButtonMasterController = function () {
        this._menuButton = null;
        this._added = false;
        this._setupButton();
        this._bindToGmail();
        this._viewChanged();
        this._checkPreviewPane()
    };
    _.extend(ListViewBoxesButtonMasterController.prototype, {
        _setupButton: function () {
            var self = this;
            this._menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "GmailIconArrow",
                iconClass: "boxIcon",
                text: BB.Locale.getString("boxes_button_boxes"),
                isFixedPosition: true,
                isRightAligned: true,
                menu: BB.Modules.BoxesMenu.BoxesMenuViewController,
                postOnFunction: function () {
                    BB.Modules.BoxesMenu.BoxesMenuViewController.use({
                        threads: BB.Threads.getSelectedThreads(),
                        doneCallback: function () {
                            self._menuButton.off()
                        }
                    })
                }
            });
            this._menuButton.addClass("streak__listViewBoxesButton");
            this._menuButton.getElement().hide()
        },
        _bindToGmail: function () {
            var self = this;
            Gmail.observe("viewChanged", function (view) {
                self._viewChanged()
            });
            Gmail.observe("previewPaneChanged", function () {
                self._checkPreviewPane()
            });
            BB.Keyboard.bindChord("w,a", function () {
                if (Gmail.isPreviewPane()) return;
                if (!Gmail.isListView()) return;
                if (BB.Threads.getSelectedThreads().length === 0) return;
                setTimeout(function () {
                    self._menuButton.on()
                }, 10)
            }, BB.Locale.getString("keyboard_boxes_button_description"))
        },
        _viewChanged: function () {
            if (Gmail.isPreviewPane()) return;
            if (Gmail.isListView()) {
                var gmailMoreButton = Gmail.getCurrentMoreButton();
                if (gmailMoreButton) {
                    gmailMoreButton.parent().after(this._menuButton.getElement());
                    this._added = true
                }
            }
        },
        _checkPreviewPane: function () {
            if (Gmail.isPreviewPane()) {
                this._menuButton.getElement().detach();
                return
            }
            this._checkButtonAndReaddIfNecessary()
        },
        _checkButtonAndReaddIfNecessary: function () {
            var gmailMoreButton = Gmail.getCurrentMoreButton();
            if (!this._menuButton.getElement().is(":inBody")) {
                gmailMoreButton.parent().after(this._menuButton.getElement());
                return
            }
            if (gmailMoreButton.parent().parent()[0] !== this._menuButton.getElement().parent()[0]) {
                gmailMoreButton.parent().after(this._menuButton.getElement());
                return
            }
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "listViewBoxesButtonInitialized",
        functionToCall: function (callback) {
            BB.Modules.ListViewBoxesButtonMasterController = new ListViewBoxesButtonMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.boxes.initialized", "data.pipelines.initialized", "threadsInitialized", "boxesMenuViewControllerInitialized", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ConversationViewBoxesButtonMasterController = function () {
        this._menuButton = null;
        this._setupButton();
        this._bindToGmail();
        this._conversationLoaded()
    };
    _.extend(ConversationViewBoxesButtonMasterController.prototype, {
        _setupButton: function () {
            var self = this;
            this._menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "GmailIconArrow",
                iconClass: "boxIcon",
                text: BB.Locale.getString("boxes_button_boxes"),
                isFixedPosition: true,
                isRightAligned: true,
                menu: BB.Modules.BoxesMenu.BoxesMenuViewController,
                postOnFunction: function () {
                    BB.Modules.BoxesMenu.BoxesMenuViewController.use({
                        threads: [BB.Threads.getActiveThread()],
                        doneCallback: function () {
                            self._menuButton.off()
                        }
                    })
                }
            });
            this._menuButton.addClass("streak__conversationViewBoxesButton")
        },
        _bindToGmail: function () {
            var self = this;
            Gmail.observe("conversationThreadLoadedEvent", function (view) {
                self._conversationLoaded()
            });
            Gmail.observe("previewPaneChanged", function () {
                self._checkPreviewPane()
            });
            BB.Keyboard.bindChord("w,a", function () {
                if (Gmail.isPreviewPane()) return;
                if (!Gmail.isInConversation()) return;
                setTimeout(function () {
                    self._menuButton.on()
                }, 10)
            }, BB.Locale.getString("keyboard_boxes_button_description"))
        },
        _conversationLoaded: function () {
            if (Gmail.isPreviewPane()) return;
            if (!Gmail.isInConversation()) return;
            var gmailMoreButton = Gmail.getCurrentMoreButton();
            if (gmailMoreButton) gmailMoreButton.parent().after(this._menuButton.getElement())
        },
        _checkPreviewPane: function () {
            if (Gmail.isPreviewPane()) {
                this._menuButton.getElement().detach();
                return
            }
            if (!Gmail.isInConversation()) return;
            this._checkButtonAndReaddIfNecessary()
        },
        _checkButtonAndReaddIfNecessary: function () {
            var gmailMoreButton = Gmail.getCurrentMoreButton();
            if (!this._menuButton.getElement().is(":inBody")) {
                gmailMoreButton.parent().after(this._menuButton.getElement());
                return
            }
            if (gmailMoreButton.parent().parent()[0] !== this._menuButton.getElement().parent()[0]) {
                gmailMoreButton.parent().after(this._menuButton.getElement());
                return
            }
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "conversationViewBoxesButtonInitialized",
        functionToCall: function (callback) {
            BB.Modules.ConversationViewBoxesButtonMasterController = new ConversationViewBoxesButtonMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.boxes.initialized", "data.pipelines.initialized", "threadsInitialized", "boxesMenuViewControllerInitialized", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ComposeBoxesButtonMasterController = function () {
        Gmail.GmailComposeManager.registerModifierModule(this)
    };
    _.extend(ComposeBoxesButtonMasterController.prototype, {
        getViewControllers: function () {
            var composeBoxesButtonViewController = new BB.Modules.ComposeBoxesButtonViewController;
            var taskThreadViewController = new BB.Modules.ComposeTaskThreadViewController;
            composeBoxesButtonViewController.addDelegate(taskThreadViewController);
            return [composeBoxesButtonViewController, taskThreadViewController, new BB.Modules.ComposeBoxSidebarViewController]
        }
    });
    DependencyManager.addFunction({
        functionKey: "composeBoxesMasterControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.ComposeBoxesButtonMasterController = new ComposeBoxesButtonMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailComposeWindowMasterControllerInitialized", "data.boxes.initialized",
            "data.pipelines.initialized"
        ]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ComposeBoxesButtonViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._menuButton = null;
        this._thread = null;
        this._shouldLoad = true
    };
    ComposeBoxesButtonViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(ComposeBoxesButtonViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController =
                composeWindowViewController;
            this._setupMenuButton()
        },
        shouldProcessModification: function () {
            return this._shouldLoad
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "BOTTOM_TOOLBAR"
        },
        getModificationPlacement: function () {
            return "BEFORE_FORMATTING"
        },
        getModificationPriority: function () {
            return 1
        },
        getModificationElement: function () {
            return this._menuButton.getElement()
        },
        sendLaterScheduled: function () {
            this._menuButton.disable()
        },
        sendLaterCancelled: function () {
            this._menuButton.enable()
        },
        mailMergeActive: function () {
            if (!this._shouldLoad) return;
            this._shouldLoad = false;
            this._composeWindowViewController.reloadModification(this)
        },
        mailMergeCancelled: function () {
            if (!this._shouldLoad) return;
            this._shouldLoad = true;
            this._composeWindowViewController.reloadModification(this)
        },
        threadResponse: function (thread) {
            if (!this._thread || !this._thread.get("threadInfo") || !this._thread.get("threadInfo").get("box")) {
                this._callDelegateFunction("boxesButtonDestroyed");
                return
            }
            var self = this;
            thread.set("threadInfo",
                this._thread.get("threadInfo"));
            BB.Data.addThreadsToBox(this._thread.get("threadInfo").get("box"), [thread], function () {
                self._callDelegateFunction("gmailThreadCreated", self._thread.get("threadInfo").get("box"), thread)
            })
        },
        destroy: function () {
            this._menuButton.destroy();
            this._composeWindowViewController = null
        }
    });
    _.extend(ComposeBoxesButtonViewController.prototype, {
        _setupMenuButton: function () {
            var self = this;
            this._menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "GmailIcon",
                color: "icon",
                iconClass: "boxIconOnNewCompose",
                menu: BB.Modules.BoxesMenu.BoxesMenuViewController,
                isBottomAligned: true,
                isFixedPosition: true,
                isRightAligned: true,
                preOnFunction: function () {
                    self._prepareBoxesMenu();
                    BB.Tracker.track("boxes menu open", {
                        method: "compose"
                    })
                },
                postOnFunction: function () {
                    if (self._thread) BB.Threads.updateComposeWindowThread(self._thread, self._composeWindowViewController);
                    else self._thread = BB.Threads.processComposeWindowViewController(self._composeWindowViewController);
                    BB.Modules.BoxesMenu.BoxesMenuViewController.setThreads([self._thread])
                }
            });
            this._menuButton.setTooltip(BB.Locale.getString("add_to_box"))
        },
        _prepareBoxesMenu: function () {
            var self = this;
            BB.Modules.BoxesMenu.BoxesMenuViewController.use({
                dontAssociate: true,
                doneCallback: function (box) {
                    self._menuButton.off();
                    self._thread.set("threadInfo", BB.Models.ThreadInfo.create({}));
                    self._thread.get("threadInfo").set("box", box);
                    if (box) self._composeWindowViewController.notify("threadAddedToBox", box);
                    else self._composeWindowViewController.notify("threadRemovedFromBox")
                }
            })
        }
    });
    BB.Modules.ComposeBoxesButtonViewController =
        ComposeBoxesButtonViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ComposeBoxSidebarViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._sidebar = null;
        this._box = null;
        this._modificationParameters = null
    };
    ComposeBoxSidebarViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(ComposeBoxSidebarViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController
        },
        shouldProcessModification: function () {
            return this._box !== null
        },
        aboutToProcessModification: function () {
            if (this._box) {
                this._renderSidebar();
                return
            }
            if (this._sidebar) {
                this._sidebar.destroy();
                this._sidebar = null
            }
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "INTERNAL_SIDEBAR"
        },
        getModificationPlacement: function () {
            return "RIGHT"
        },
        getModificationElement: function () {
            if (this._sidebar) return this._sidebar.getElement()
        },
        getFirstTabFocusElement: function () {
            return this._sidebar.getFirstFocusable()
        },
        getLastTabFocusElement: function () {
            return this._sidebar.getLastFocusable()
        },
        threadAddedToBox: function (box) {
            this._box = box;
            this._composeWindowViewController.reloadModification(this);
            BB.Tracker.track("box added to compose")
        },
        threadRemovedFromBox: function () {
            this._box = null;
            this._composeWindowViewController.reloadModification(this);
            BB.Tracker.track("box removed from compose")
        },
        destroy: function () {
            this._composeWindowViewController =
                null;
            this._callDelegateFunction("destroy", this);
            if (this._sidebar) {
                this._sidebar.destroy();
                this._sidebar = null
            }
        },
        _renderSidebar: function () {
            var self = this;
            this._sidebar = BB.Modules.ConversationSidebar.BoxSidebar.create({
                box: this._box,
                keyboardTabs: true,
                blur: function () {
                    self._composeWindowViewController.getEditor().focus()
                }
            });
            this._sidebar.getElement().addClass("boxOnNewCompose")
        }
    });
    BB.Modules.ComposeBoxSidebarViewController = ComposeBoxSidebarViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ComposeTaskThreadViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._box = null;
        this._modificationParameters = null;
        this._taskThreadModel = null;
        this._threadTaskWidget = null
    };
    ComposeTaskThreadViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(ComposeTaskThreadViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController
        },
        shouldProcessModification: function () {
            return this._box !== null
        },
        aboutToProcessModification: function () {
            if (this._box) {
                this._renderThreadTask();
                return
            }
            this._removeThreadTask()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "BOTTOM"
        },
        getModificationElement: function () {
            if (this._threadTaskWidget) return this._threadTaskWidget.getElement()
        },
        threadAddedToBox: function (box) {
            this._box =
                box;
            this._composeWindowViewController.reloadModification(this)
        },
        threadRemovedFromBox: function () {
            this._box = null;
            this._composeWindowViewController.reloadModification(this)
        },
        boxesButtonDestroyed: function () {
            this._destroy()
        },
        _destroy: function () {
            this._composeWindowViewController = null;
            this._callDelegateFunction("destroy", this);
            if (this._threadTaskWidget) this._threadTaskWidget.destroy()
        },
        _removeThreadTask: function () {
            if (!this._threadTaskWidget) return;
            this._threadTaskWidget.destroy();
            this._threadTaskWidget =
                null;
            this._taskThreadModel = null
        },
        _renderThreadTask: function () {
            if (!this._taskThreadModel) {
                this._taskThreadModel = BB.Models.GmailThread.create({});
                this._taskThreadModel.save = $.noop
            }
            this._threadTaskWidget = BB.Widgets.ThreadTask.create({
                thread: this._taskThreadModel
            })
        },
        gmailThreadCreated: function (box, thread) {
            var self = this;
            BB.Data.getGmailThreads(box.key(), function (threads) {
                if (threads && threads.length > 0)
                    for (var ii = 0; ii < threads.length; ii++)
                        if (threads[ii].get("threadGmailId") === thread.get("threadGmailId")) {
                            threads[ii].set("taskStatus",
                                self._taskThreadModel.get("taskStatus"));
                            threads[ii].save();
                            break
                        }
                self._destroy()
            })
        }
    });
    BB.Modules.ComposeTaskThreadViewController = ComposeTaskThreadViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PreviewPaneBoxesButtonMasterController = function () {
        this._menuButton = null;
        this._setupButton();
        this._bindToGmail();
        this._refreshState()
    };
    _.extend(PreviewPaneBoxesButtonMasterController.prototype, {
        _setupButton: function () {
            var self = this;
            this._menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "GmailIconArrow",
                iconClass: "boxIcon",
                text: BB.Locale.getString("boxes_button_boxes"),
                isFixedPosition: true,
                isRightAligned: true,
                menu: BB.Modules.BoxesMenu.BoxesMenuViewController,
                postOnFunction: function () {
                    BB.Modules.BoxesMenu.BoxesMenuViewController.use({
                        threads: BB.Threads.getSelectedThreads(),
                        doneCallback: function () {
                            self._menuButton.off()
                        }
                    })
                }
            });
            this._menuButton.addClass("streak__conversationViewBoxesButton")
        },
        _bindToGmail: function () {
            var self = this;
            Gmail.observe("conversationThreadLoadedEvent", function (view) {
                self._refreshState()
            });
            Gmail.observe("previewPaneChanged", function () {
                self._refreshState()
            });
            Gmail.observe("viewChanged", function () {
                self._refreshState()
            });
            BB.Keyboard.bindChord("w,a", function () {
                if (!Gmail.isPreviewPane()) return;
                if (!BB.Threads.getSelectedThreads() || !BB.Threads.getSelectedThreads().length) return;
                setTimeout(function () {
                    self._menuButton.on()
                }, 10)
            }, BB.Locale.getString("keyboard_boxes_button_description"))
        },
        _refreshState: function () {
            if (!Gmail.isPreviewPane()) {
                this._menuButton.getElement().detach();
                return
            }
            this._checkButtonAndReaddIfNecessary();
            this._checkVisibility()
        },
        _checkButtonAndReaddIfNecessary: function () {
            var gmailMoreButton = Gmail.getCurrentMoreButton();
            if (!this._menuButton.getElement().is(":inBody")) {
                gmailMoreButton.parent().after(this._menuButton.getElement());
                return
            }
            if (gmailMoreButton.parent().parent()[0] !== this._menuButton.getElement().parent()[0]) {
                gmailMoreButton.parent().after(this._menuButton.getElement());
                return
            }
        },
        _checkVisibility: function () {
            if (BB.Threads.getSelectedThreads().length === 0) this._menuButton.getElement().hide();
            else this._menuButton.getElement().show()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "previewPaneBoxesButtonInitialized",
        functionToCall: function (callback) {
            BB.Modules.PreviewPaneBoxesButtonMasterController = new PreviewPaneBoxesButtonMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.boxes.initialized", "data.pipelines.initialized", "threadsInitialized", "boxesMenuViewControllerInitialized", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var OverridableHTML = {
        defaults: {
            Locale: Streak.Locale,
            fileName: null
        },
        create: function (o) {
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        }
    };
    OverridableHTML.impl = function (o) {
        var self = this;
        self.o = o;
        self.html = {};
        self.fetchHTML = function (fileName, cb) {
            var self = this;
            Streak.Requester.getString({
                msgUrl: fileName
            }, function (htmlString) {
                cb(htmlString)
            }, function (error) {})
        };
        self.loadHTML =
            function (cb) {
                var self = this;
                if (!self.o.fileName) {
                    if (cb) cb();
                    return
                }
                self.fetchHTML(self.o.fileName, function (htmlString) {
                    var htmlObj = $(htmlString);
                    htmlObj.each(function (e) {
                        var _id = $(htmlObj[e]).attr("id");
                        if (_id && _id.length > 0) {
                            var currHTML = htmlObj[e];
                            self.html[_id] = currHTML.innerHTML.unescapeHTML()
                        }
                    });
                    cb()
                })
        };
        self.substituteHTML = function (s) {
            var self = this;
            return s.replace(/<%\*([\s\S]+?)%>/g, function (match, code) {
                return self.getHelper(code.trim())
            })
        }, self.getClone = function () {
            var _html = Streak.$.extend(true, {}, self.html);
            return Streak.$.extend(true, {}, self, {
                "html": _html
            })
        };
        self.setMode = function (mode) {
            var self = this;
            mode = "__" + mode;
            var changes = [];
            Streak._.each(self.html, function (value, key) {
                var positionOfModeInkey = key.indexOf(mode);
                if (positionOfModeInkey > 0) {
                    var baseKey = key.substring(0, positionOfModeInkey);
                    changes.push({
                        "baseKey": baseKey,
                        "value": self.html[key]
                    })
                }
            });
            var changeLength = changes.length;
            for (var ii = 0; ii < changeLength; ii++) {
                var change = changes[ii];
                self.html[change.baseKey] = change.value
            }
        };
        self.getHelper =
            function (id) {
                return self.html[id]
        }, self.get = function (id) {
            var currentString = "";
            var lastString = this.substituteHTML(this.html[id]);
            for (var ii = 0; ii < 100; ii++) {
                var currentString = this.substituteHTML(lastString);
                if (lastString === currentString) break;
                else lastString = currentString
            }
            return _.template(self.o.Locale.localize(currentString))
        };
        return self
    };
    BB.Modules.OverridableHTML = OverridableHTML
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        StateMachine = Streak.StateMachine,
        jwerty = Streak.jwerty,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        APIRequester = Streak.APIRequester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var self = ContextioStatusNotifier = {
        init: function (callback) {
            self._contextioStatus = null;
            self._getContextioStatus(callback)
        },
        _getContextioStatus: function (callback) {
            APIRequester.get({
                msgUrl: "users/me/contextiostatus"
            }, function (contextioStatusResponse) {
                self._handleContextioStatusReponse(contextioStatusResponse);
                if (callback) callback()
            })
        },
        _handleContextioStatusReponse: function (contextioStatusResponse) {
            self._contextioStatus = contextioStatusResponse;
            if (self._shouldShowContextioSatusModal()) self._showContextioStatusModal()
        },
        _shouldShowContextioSatusModal: function () {
            return self._contextioStatus === "NO_ACCESS_TO_ALL_MAIL" && !BB.Modules.TourRunner.isTourRunning()
        },
        _showContextioStatusModal: function () {
            BB.Widgets.Modal.create({
                title: BB.Locale.getString("no_access_all_mail_title"),
                inner: BB.Locale.getString("no_access_all_mail_body"),
                showCancel: false,
                confirmText: BB.Locale.getString("ok")
            }).show()
        }
    };
    if (Streak.isDev) return;
    Streak.DependencyManager.addFunction({
        functionKey: "contextioStatusNotifierInitialized",
        functionToCall: ContextioStatusNotifier.init,
        functionContext: ContextioStatusNotifier,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "tourRunner.initRunTour"]
    });
    BB.Modules.ContextioStatusNotifier = ContextioStatusNotifier
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var TabbedSidebarMaster = {
        initialized: false,
        _conversationId: null,
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                self.initializeVariables();
                Gmail.observe("viewChanged", this._handleViewChanged.bind(this));
                Gmail.observe("conversationThreadLoadedEvent", this._handleConversationThread.bind(this), null, 1);
                Gmail.addTimerObserver(this._handleTimerCallback.bind(this));
                self.initialized = true
            }
            if (_.isReal(cb)) cb()
        },
        initializeVariables: function () {
            var self = this;
            self._sidebars = {}
        },
        reaup: function () {},
        teaddown: function () {},
        registerNewSidebar: function (options, conversationId) {
            var self = this;
            var activeThread = BB.Threads.getActiveThread();
            if (activeThread && conversationId === activeThread.key()) return self._addSidebar(options, conversationId)
        },
        removeSidebar: function (sidebarId) {
            var self = this;
            var activeThread = BB.Threads.getActiveThread();
            if (_.isReal(activeThread)) {
                var sidebar = self._sidebars[activeThread.key()];
                if (_.isReal(sidebar)) sidebar.removeSidebar(sidebarId)
            }
        },
        _handleViewChanged: function () {
            this.destroySidebars();
            this._conversationId = null
        },
        _handleConversationThread: function () {
            var activeThread = BB.Threads.getActiveThread();
            if (activeThread && activeThread.key() !== this._conversationId) this.destroySidebars();
            if (activeThread) this._conversationId = activeThread.key();
            else this._conversationId = null
        },
        _handleTimerCallback: function () {
            _.each(this._sidebars, function (sidebar) {
                if (sidebar._fixSidebar) sidebar._fixSidebar()
            })
        },
        _addSidebar: function (options, conversationId) {
            var sidebar =
                this._sidebars[conversationId];
            if (!_.isReal(sidebar)) {
                sidebar = new BB.Modules.TabbedSidebar;
                this._sidebars[conversationId] = sidebar
            }
            return sidebar.registerSidebar(options)
        },
        destroySidebars: function () {
            var newSidebars = {};
            _.each(this._sidebars, function (sidebar, conversationId) {
                if (!Gmail.isConversation() || conversationId !== Gmail.getConversationId()) sidebar.destroy();
                else newSidebars[conversationId] = sidebar
            });
            this._sidebars = newSidebars
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "tabbedSidebarMasterInitialized",
        functionToCall: TabbedSidebarMaster.init,
        functionContext: TabbedSidebarMaster,
        dependentFunctionKeys: ["gmailLoaded"]
    });
    BB.Modules.TabbedSidebarMaster = TabbedSidebarMaster
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        TAB_COLOR_CLASSES: ["aIf-aLe", "aKe-aLe", "aJi-aLe", "aH2-aLe", "aHE-aLe"]
    };
    var TabbedSidebar = function () {
        this.el = $(HTML.get("tabbedSidebar")());
        this._elements = {};
        this._selectedTabId = null;
        this._registeredSidebars = {};
        this._loadSidebarContainer()
    };
    _.extend(TabbedSidebar.prototype, {
        registerSidebar: function (sidebarEntry) {
            var self = this;
            if (self._registeredSidebars[sidebarEntry.id]) self.removeSidebar(sidebarEntry.id,
                true);
            var _id = "sidebar_" + Math.random();
            sidebarEntry.id = _id;
            self._registeredSidebars[_id] = sidebarEntry;
            self._elements.tabbedSidebarBody.append(sidebarEntry.sidebar.getElement());
            self._generateSelectedTab();
            self._refresh();
            self._tabStatusChanged();
            return _id
        },
        removeSidebar: function (id, noRefresh) {
            var self = this;
            if (_.isReal(self._registeredSidebars[id])) {
                if (_.isReal(self._registeredSidebars[id].destroy)) self._registeredSidebars[id].destroy();
                delete self._registeredSidebars[id]
            }
            if (self._selectedTabId ===
                id) self._generateSelectedTab();
            if (!noRefresh) {
                self._refresh();
                self._tabStatusChanged()
            }
        },
        destroy: function () {
            var self = this;
            for (key in this._registeredSidebars)
                if (this._registeredSidebars[key].sidebar && this._registeredSidebars[key].sidebar.destroy) this._registeredSidebars[key].sidebar.destroy();
            self.el.empty();
            self.el.remove()
        },
        _loadSidebarContainer: function () {
            var self = this;
            self._elements.tabbedSidebarTabs = self.el.find(".__streak_CS_tabs");
            self._elements.tabbedSidebarBody = self.el.find(".__streak_CS_body");
            self.el.hide();
            Gmail.getRightSide().prepend(self.el);
            self.hasBeenLoaded = true;
            self._refresh();
            self._fixSidebar()
        },
        _fixSidebar: function () {
            if (!this.el.isVisible()) Gmail.getRightSide().prepend(this.el);
            if (this.el.parents(".adC").length > 0) {
                var gmailSidebarContainerDiv = this.el.parents(".adC");
                if (gmailSidebarContainerDiv[0].style.position === "absolute" && !Gmail.isRapportiveInstalled()) gmailSidebarContainerDiv[0].style.position = "relative"
            }
            var siblingsNH = this.el.siblings(".nH");
            if (siblingsNH.length > 0) {
                if (siblingsNH[0].style.position ===
                    "absolute") siblingsNH[0].style.position = "relative";
                if (siblingsNH[0].style.right) siblingsNH[0].style.right = ""
            }
            if (Gmail.isXobniInstalled()) {
                this.el.height("auto");
                this.el.parent().css({
                    overflowY: "auto"
                })
            }
            if (Gmail.isRapportiveInstalled()) {
                var rapportive = Gmail.getRapportive();
                var container = rapportive.closest(".adC");
                if (container.length > 0) {
                    container.removeClass("adC");
                    if (container[0].style.position === "absolute") container[0].style.position = "static"
                }
                if (this.el.parent()[0] !== rapportive[0]) rapportive.prepend(el);
                this.el.addClass("rapportivePresent")
            }
            if (this.el.siblings(".y4").length > 0) this.el.siblings(".y4")[0].style.display = "none"
        },
        _refresh: function () {
            var self = this;
            if (!_.isReal(self._selectedTabId)) self._generateSelectedTab();
            if (!self.hasBeenLoaded) return;
            if (self._currentSidebarsCount() > 0) self.el.show();
            else self.el.hide();
            self._renderTabs(self._elements.tabbedSidebarTabs);
            self._refreshSidebarBody()
        },
        _getSelected: function () {},
        _getFirstEntry: function () {
            return _.values(this._registeredSidebars).first()
        },
        _isSelectedTab: function (sidebarEntry) {
            var self =
                this;
            return self._selectedTabId === sidebarEntry.id
        },
        _renderTabs: function (tabContainer, registeredSidebars) {
            var self = this;
            tabContainer.empty();
            var tabParent = tabContainer.parents(".__streak_CS_tabsContainer");
            tabParent.show();
            _(this._registeredSidebars).chain().values().sortBy(function (sidebarEntry) {
                return sidebarEntry.priority
            }).each(function (sidebarEntry, index) {
                if (self._shouldNotAddTab(sidebarEntry)) {
                    if (sidebarEntry.sidebar.notAddedToSidebar) sidebarEntry.sidebar.notAddedToSidebar();
                    return
                }
                if (sidebarEntry.sidebar.addedToSidebar) sidebarEntry.sidebar.addedToSidebar();
                var tabEl = self._renderTab(sidebarEntry, index);
                tabContainer.append(tabEl)
            })
        },
        _shouldNotAddTab: function (sidebarEntry) {
            if (this._registeredSidebars.length > 1 && sidebarEntry.dontShowIfOnlyTab) return true;
            if (sidebarEntry.dependentTabIdentifiers)
                if (!this._doTabIdentifiersExist(sidebarEntry.dependentTabIdentifiers)) return true;
            return false
        },
        _doTabIdentifiersExist: function (tabIdentifiers) {
            var sidebars = this._registeredSidebars;
            return _.filter(tabIdentifiers, function (tabIdentifier) {
                return _.filter(sidebars, function (sidebar) {
                    return sidebar.tabIdentifier ===
                        tabIdentifier
                }).length > 0
            }).length > 0
        },
        _renderTab: function (sidebarEntry, index) {
            var self = this;
            var tabEl = $(HTML.get("sidebarTab")({
                tabPrettyTitle: sidebarEntry.prettyTitle
            }));
            tabEl.click(function () {
                self._setSelectedTabById(sidebarEntry.id)
            });
            var innerTab = tabEl.find("[role=tab]");
            innerTab.addClass(CONSTANTS.TAB_COLOR_CLASSES[index % CONSTANTS.TAB_COLOR_CLASSES.length]);
            tabEl.hover(function (e) {
                innerTab.addClass("J-KU-Je J-KU-JW")
            }, function (e) {
                innerTab.removeClass("J-KU-Je J-KU-JW")
            });
            tabEl.find(".__streak_CS_tabIcon").addClass(sidebarEntry.iconClass);
            if (self._isSelectedTab(sidebarEntry)) {
                innerTab.addClass("J-KU-KO");
                tabEl.addClass("streak__CS_selectedTab")
            }
            return tabEl
        },
        _currentSidebarsCount: function () {
            var self = this;
            var count = 0;
            _.each(self._registeredSidebars, function () {
                count++
            });
            return count
        },
        _generateSelectedTab: function () {
            this._selectedTabId = _.chain(this._registeredSidebars).values().sortBy(function (sidebar) {
                return sidebar.priority || 100
            }).pluck("id").first().value();
            return this._selectedTabId
        },
        _getSelectedSidebarEntry: function () {
            var self = this;
            return self._registeredSidebars[self._selectedTabId]
        },
        _refreshSidebarBody: function () {
            if (!_.isReal(this._getSelectedSidebarEntry())) return;
            this._hideSidebarBodies();
            this._showSelectedSidebar()
        },
        _showSelectedSidebar: function () {
            this._getSelectedSidebarEntry().sidebar.getElement().show();
            if (this._getSelectedSidebarEntry().sidebar["sidebarShown"]) this._getSelectedSidebarEntry().sidebar["sidebarShown"]()
        },
        _hideSidebarBodies: function () {
            this._elements.tabbedSidebarBody.children().hide();
            this._callFunctionOnSidebars("sidebarHidden")
        },
        _callFunctionOnSidebars: function (functionName) {
            var self = this;
            _.each(this._registeredSidebars, function (sidebarEntry, id) {
                if (!self._shouldNotAddTab(sidebarEntry) && sidebarEntry && sidebarEntry.sidebar[functionName]) sidebarEntry.sidebar[functionName]()
            })
        },
        _setSelectedTabById: function (tabId) {
            var self = this;
            self._selectedTabId = tabId;
            self._refresh()
        },
        _tabStatusChanged: function () {
            _.each(this._registeredSidebars, function (sidebarEntry, id) {
                if (sidebarEntry && sidebarEntry.tabStatusChanged) sidebarEntry.tabStatusChanged()
            })
        }
    });
    Streak.BentoBox.Modules.TabbedSidebar = TabbedSidebar
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Eventer = Streak.Eventer,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var BoxesSidebarController = Eventer.create({
        init: function (callback) {
            this.boxSidebarView = null;
            this.currentBox = null;
            BB.Controllers.BoxesThreadController.bind("threadSetOnBox", this._handleThreadSetOnBox.bind(this));
            BB.Controllers.BoxesThreadController.bind("threadUnsetOnBox", this._handleThreadUnsetOnBox.bind(this));
            var self = this;
            Gmail.observe("viewChanged", function () {
                self.currentBox = null
            });
            Gmail.observe("conversationThreadLoadedEvent", this._handleConversationLoaded.bind(this), null);
            if (callback) callback()
        },
        _handleConversationLoaded: function () {
            var activeThread = BB.Threads.getActiveThread();
            if (!activeThread) return;
            var threadInfo = activeThread.get("threadInfo");
            if (!threadInfo) return;
            var box = threadInfo.get("box");
            if (box) this._loadBoxesSidebar();
            else this._unloadBoxesSidebar()
        },
        _handleThreadSetOnBox: function (thread,
            box) {
            var activeThread = BB.Threads.getActiveThread();
            if (!_.isReal(activeThread) || !_.isReal(thread)) return;
            if (thread.key() === activeThread.key())
                if (Gmail.isConversation() || Gmail.isListView() && Gmail.isPreviewPane()) this._loadBoxesSidebar()
        },
        _handleThreadUnsetOnBox: function (thread) {
            var activeThread = BB.Threads.getActiveThread();
            if (!_.isReal(activeThread) || !_.isReal(thread)) return;
            if (thread.key() === activeThread.key())
                if (Gmail.isConversation() || Gmail.isListView() && Gmail.isPreviewPane()) this._unloadBoxesSidebar()
        },
        _loadBoxesSidebar: function () {
            if (!_.isReal(this.boxSidebarView)) this.boxSidebarView = new BB.Modules.BoxesSidebar({
                title: BB.Locale.getString("box_tab_title")
            });
            var box = BB.Threads.getActiveThread().get("threadInfo").get("box");
            if (this.currentBox && box.key && box.key() === this.currentBox.key()) return;
            this.currentBox = box;
            this.boxSidebarView.renderBoxForThread(box, BB.Threads.getActiveThread());
            this.trigger("boxSidebarAdded")
        },
        _unloadBoxesSidebar: function () {
            if (_.isReal(this.boxSidebarView)) this.boxSidebarView.removeSidebar();
            this.currentBox = null;
            this.trigger("boxSidebarRemoved")
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "boxesSidebarControllerInitialized",
        functionToCall: BoxesSidebarController.init,
        functionContext: BoxesSidebarController,
        dependentFunctionKeys: ["boxesThreadControllerInitialized", "tabbedSidebarMasterInitialized"]
    });
    BB.Controllers.BoxesSidebarController = BoxesSidebarController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Eventer = Streak.Eventer,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var ReminderSidebarController = {
        init: function (callback) {
            var self = this;
            BB.Threads.list.bind("set", function () {
                var args = _.toArray(arguments);
                var property = args[0];
                var thread = _.last(args);
                self._handleThreadSet(property, thread)
            });
            this._reminderSidebar = null;
            if (callback) callback()
        },
        _handleThreadSet: function (property,
            thread) {
            if (property === "reminderBox") {
                var activeThread = BB.Threads.getActiveThread();
                if (thread && activeThread && thread.key() === activeThread.key()) {
                    var box = thread.get("reminderBox");
                    if (_.isReal(box) && box !== "") {
                        if (!this._reminderSidebar) this._reminderSidebar = new BB.Modules.BoxesSidebar({
                            title: BB.Locale.getString("reminder_box_tab_title"),
                            iconClass: "reminderIcon"
                        });
                        this._reminderSidebar.renderBoxForThread(box, thread)
                    }
                }
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "remindersSidebarControllerInitialized",
        functionToCall: ReminderSidebarController.init,
        functionContext: ReminderSidebarController,
        dependentFunctionKeys: ["threadsInitialized", "tabbedSidebarMasterInitialized"]
    });
    BB.Controllers.ReminderSidebarController = ReminderSidebarController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Eventer = Streak.Eventer,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var BoxesThreadController = Eventer.create({
        init: function (callback) {
            BB.ThreadInfoController.getThreadInfoCollection().bind("set", this._handleThreadInfoSet.bind(this));
            if (callback) callback()
        },
        _handleThreadInfoSet: function () {
            var args = _.toArray(arguments);
            var property = args[0];
            var threadInfo = _.last(args);
            if (property === "box") this._handleBoxSetOnThread(threadInfo)
        },
        _handleBoxSetOnThread: function (threadInfo) {
            var box = threadInfo.get("box");
            if (_.isReal(box) && threadInfo.get("box") !== "" && threadInfo.get("box").getPipeline) this.trigger("threadSetOnBox", threadInfo, box);
            else this.trigger("threadUnsetOnBox", threadInfo)
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "boxesThreadControllerInitialized",
        functionToCall: BoxesThreadController.init,
        functionContext: BoxesThreadController,
        dependentFunctionKeys: ["threadsInitialized",
            "gmailLoaded", "data.pipelines.initialized", "data.boxes.initialized", "threadInfoControllerInitialized"
        ]
    });
    BB.Controllers.BoxesThreadController = BoxesThreadController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        _ = Streak._;
    var BoxesSidebar = function (options) {
        var self = this;
        self._title = options.title;
        self._iconClass = options.iconClass || "darkBoxIcon";
        self._elements = {};
        self._box = null;
        self._thread = null;
        self._sidebarTabId = null;
        self._boxSidebars = [];
        self._el = $(HTML.get("boxesSidebarContainer")());
        self._elements.inner = self._el.find(".__streak_boxesSidebarInnerContainer")
    };
    _.extend(BoxesSidebar.prototype, {
        renderBoxForThread: function (box, thread) {
            this._removeSidebarTab();
            this._renderBoxes([box]);
            this._addToSidebar(thread)
        },
        _removeSidebarTab: function () {
            if (_.isReal(this._sidebarTabId)) BB.Modules.TabbedSidebarMaster.removeSidebar(this._sidebarTabId);
            this._destroySidebars()
        },
        getElement: function () {
            return this._el
        },
        _addToSidebar: function (thread) {
            this._sidebarTabId = Streak.BentoBox.Modules.TabbedSidebarMaster.registerNewSidebar({
                prettyTitle: this._title,
                iconClass: this._iconClass,
                sidebar: this,
                priority: 1
            }, thread.key())
        },
        _renderBoxes: function (boxes) {
            var self = this;
            _.each(boxes, function (box) {
                var boxSidebar = BB.Modules.ConversationSidebar.BoxSidebar.create({
                    box: box,
                    keyboardTabs: true,
                    trackingContext: _.clone(self.trackingContext),
                    clearIDAttributeOfMainElement: false
                });
                self._elements.inner.append(boxSidebar.el);
                self._boxSidebars.push(boxSidebar)
            })
        },
        removeSidebar: function () {
            this._removeSidebarTab()
        },
        _destroySidebars: function () {
            for (var ii = 0; ii < this._boxSidebars.length; ii++)
                if (this._boxSidebars[ii] && this._boxSidebars[ii].destroy) this._boxSidebars[ii].destroy();
            this._boxSidebars.length = 0;
            this._elements.inner.empty()
        },
        destroy: function () {
            this._destroySidebars();
            this._sidebarTabId = null
        },
        trackingContext: {
            widgetContext: "BoxesSidebar"
        },
        track: function (event, props) {
            BB.Tracker.trackStreakActive(trackingContext, props, {
                eventName: event
            })
        }
    });
    BB.Modules.BoxesSidebar = BoxesSidebar
})(Streak);
Streak.BentoBox.Modules.ConversationSidebar = {};
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.BentoBox.Locale,
        BB = Streak.BentoBox;
    var ConversationSidebar = BB.Modules.ConversationSidebar;
    var trackingContext = {
        widgetContext: "ConversationSidebar.BoxSidebar"
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    ConversationSidebar.BoxSidebar = {
        defaults: {
            box: null,
            keyboardTabs: true,
            blur: $.noop,
            trackingContext: null,
            clearIDAttributeOfMainElement: true
        },
        create: function (options) {
            var o = {};
            _.extend(o, ConversationSidebar.BoxSidebar.defaults, options);
            return new ConversationSidebar.BoxSidebar.impl(o)
        }
    };
    ConversationSidebar.BoxSidebar.impl = function (options) {
        if (!options.box || !options.box.getPipeline) return;
        ConversationSidebar.templates = {};
        ConversationSidebar.templates.normal = Streak.HTML.get("ConversationSidebar");
        ConversationSidebar.templates.field = Streak.HTML.get("ConversationSidebarField");
        this.options = options;
        this.box = this.options.box;
        this.pipeline = this.box.getPipeline();
        this.el = null;
        this.stages = null;
        this.notesArea = null;
        this.assignedTo = null;
        this.reminderSection = null;
        this.reminderList = null;
        this.followerSection = null;
        this.linkedBoxesSection = null;
        this.followers = null;
        this.columnOrder = null;
        this.columnVisibility = null;
        this._simpleBoxesMenu = null;
        this._linkedBoxesInner = null;
        this.uniq = Date.now() + "." + Math.random();
        this.inputs = [];
        this.binders = [];
        this.tabFocusController = new BB.Widgets.TabFocusController;
        this.setup()
    };
    _.extend(ConversationSidebar.BoxSidebar.impl.prototype, {
        getElement: function () {
            return this.el
        },
        setup: function () {
            this.el = $(ConversationSidebar.templates.normal({
                boxName: this.box.displayName(),
                pipelineName: this.pipeline.displayName()
            }));
            if (this.options.clearIDAttributeOfMainElement) this.el.attr("id", "");
            this.columnOrder = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.load(this.pipeline).data;
            this.columnVisibility = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings.load(this.pipeline).data;
            this.renderHeading();
            this.renderEmailFilterSuggestions();
            this.renderStages();
            this.renderAssignedTo();
            this.renderFields();
            this.renderReminders();
            this.renderEmailFilters();
            this.renderFollowers();
            this.renderLinkedBoxes();
            this.bindEvents();
            this.setupTabArray()
        },
        destroy: function () {
            this.tabFocusController.destroy();
            for (var ii = 0; ii < this.inputs.length; ii++)
                if (this.inputs[ii] && this.inputs[ii].destroy) this.inputs[ii].destroy();
            for (ii = 0; ii < this.binders.length; ii++)
                if (this.binders[ii] && this.binders[ii].unbindAll) this.binders[ii].unbindAll(this.uniq);
            if (this._emailFilterCollectionUnbinder) this._emailFilterCollectionUnbinder();
            if (this._emailFilterBlacklistCollectionUnbinder) this._emailFilterBlacklistCollectionUnbinder();
            if (this._unbindRemovedFromBox) this._unbindRemovedFromBox();
            if (this._unbindAddedToBox) this._unbindAddedToBox();
            this.el.remove()
        },
        renderHeading: function () {
            var self = this;
            this.el.find(".boxLink").click(function (e) {
                track("boxLinkClicked");
                e.preventDefault();
                BB.UI.setURL(self.box.link())
            });
            this.el.find(".pipelineLink").click(function (e) {
                track("pipelineLinkClicked");
                e.preventDefault();
                BB.UI.setURL(self.pipeline.link())
            });
            this.notesArea = BB.Widgets.SmartTextarea.create({
                model: this.box,
                property: "notes",
                borderOnHover: false,
                trackingContext: _.clone(trackingContext)
            });
            this.el.find(".boxNotes").append(this.notesArea.el);
            this.inputs.push(this.notesArea)
        },
        renderStages: function () {
            this.stages = BB.Widgets.StageButton.create({
                pipeline: this.pipeline,
                box: this.box,
                trackingContext: _.clone(trackingContext)
            });
            this.el.find(".stageButton").append(this.stages.el);
            this.inputs.push(this.stages)
        },
        renderAssignedTo: function () {
            var assignedToContainer =
                this.el.find(".assignedTo");
            this.el.find(".assignedTo *").trigger("unbind");
            assignedToContainer.empty();
            assignedToContainer.hide();
            var assignedToColumn = this.pipeline.getSystemColumnByProperty("assignedToSharingEntries");
            if (_.isNotReal(assignedToColumn)) return;
            var isVisible = this.columnVisibility["property|" + assignedToColumn.uniqueKey];
            if (_.isNotReal(isVisible) || isVisible === true) {
                assignedTo = BB.Widgets.SidebarAssignedTo.create({
                    box: this.box,
                    pipeline: this.pipeline,
                    border: "never",
                    persist: true,
                    imgHeight: 23,
                    imgWidth: 23,
                    includeNames: true,
                    delayedBind: true
                });
                var field = $(ConversationSidebar.templates.field({
                    name: BB.Locale.getString("assignedTo")
                }));
                field.find(".fieldValue").append(assignedTo.el);
                this.inputs.push(assignedTo);
                assignedToContainer.append(field);
                assignedToContainer.show();
                this.assignedTo = assignedTo
            }
        },
        renderFields: function () {
            var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(this.pipeline);
            this.el.find(".boxFields *").trigger("unbind");
            this.el.find(".boxFields").empty();
            for (var i = 0; i < this.columnOrder.length; i++) {
                var columnKey = this.columnOrder[i];
                if (columns[columnKey].field && (_.isNotReal(this.columnVisibility[columnKey]) || this.columnVisibility[columnKey])) {
                    var field = this.renderField(columns[columnKey].field.key());
                    this.el.find(".boxFields").append(field)
                }
            }
        },
        renderField: function (fieldKey) {
            var fieldModel = this.pipeline.getField(fieldKey);
            var field = $(ConversationSidebar.templates.field({
                name: fieldModel.displayName()
            }));
            var input = BB.Widgets.SmartInput.create(fieldModel.get("type"), {
                parent: field.find(".fieldValue"),
                border: fieldModel.get("type") == "PERSON" ? "never" : "always",
                model: this.box.getField(fieldModel.get("key")),
                property: "value",
                persist: true,
                bindTab: true,
                isSpreadsheet: false,
                imgHeight: 23,
                imgWidth: 23,
                includeNames: true,
                delayedBind: true,
                existingList: BB.UI.getFieldValues(this.pipeline, fieldModel.key()),
                trackingContext: _.extend({
                    eventName: "boxDataEdited"
                }, trackingContext)
            });
            if (!input) return;
            field.find(".fieldValue").append(input.el);
            this.inputs.push(input);
            fieldModel.bind("set",
                "name", function () {
                    if (field.is(":inBody")) field.find(".fieldName").text(fieldModel.displayName());
                    else return true
                }, this.uniq);
            this.binders.push(fieldModel);
            return field
        },
        renderReminders: function () {
            var self = this;
            var title = BB.Locale.getString("reminders_title");
            if (this.box.get("reminderKeys") && this.box.get("reminderKeys").length > 0) title += " (" + this.box.get("reminderKeys").length + ")";
            this.reminderList = BB.Widgets.ReminderList.create({
                box: this.box,
                pipeline: this.pipeline,
                showTitle: false,
                useLinkButtonForNewReminder: true,
                trackingContext: _.clone(trackingContext)
            });
            this.reminderSection = BB.Widgets.CollapseSection.create({
                title: title,
                bodyEl: this.reminderList.el,
                startOpen: false,
                localToggleStateKey: "boxSidebar/remindersSection"
            });
            this.el.find(".reminders").empty().append(this.reminderSection.el);
            this.inputs.push(this.reminderList);
            var element = this.reminderList.getNewReminderButtonElement();
            element.addClass("reminderList");
            this.reminderSection.addToRightOfTitle(element)
        },
        updateReminderTitle: function () {
            title = BB.Locale.getString("reminders_title");
            if (this.box.get("reminderKeys") && this.box.get("reminderKeys").length > 0) title += " (" + this.box.get("reminderKeys").length + ")";
            this.reminderSection.updateTitle(title)
        },
        renderFollowers: function () {
            this.followers = BB.Widgets.FollowerButton.create({
                box: this.box,
                trackingContext: _.clone(trackingContext)
            });
            this.el.find(".boxFollowers").append(this.followers.el);
            this.inputs.push(this.followers)
        },
        renderEmailFilters: function () {
            if (!BB.isFeatureEnabled("emailFilters")) {
                this.el.find(".streak__emailFiltersOuter").remove();
                return
            }
            if (!this._emailFilter) {
                this._emailFilter = new BB.Modules.EmailFilters.EmailFilterViewController({
                    boxKey: this.box.key(),
                    useLinkButtonForNewFilter: true,
                    showTitle: false
                });
                if (this._emailFilterCollection) this._emailFilter.setEmailFilters(this._emailFilterCollection);
                if (this._emailFilterBlacklistCollection) this._emailFilter.setEmailFilterBlacklists(this._emailFilterBlacklistCollection)
            }
            if (!this._emailFiltersSection) {
                this._emailFiltersSection = BB.Widgets.CollapseSection.create({
                    title: BB.Locale.getString("email_filters"),
                    bodyEl: this._emailFilter.getElement(),
                    startOpen: true,
                    localToggleStateKey: "boxSidebar/emailFiltersSection"
                });
                var newEmailFilterButtonElement = this._emailFilter.getNewEmailFilterButtonElement();
                this._emailFiltersSection.addToRightOfTitle(newEmailFilterButtonElement)
            }
            if (!this._emailFilterCollection) this._updateEmailFilterCollection();
            this.el.find(".streak__emailFiltersOuter").html(this._emailFiltersSection.el)
        },
        _updateEmailFilterCollection: function () {
            var emailFilterCollection = BB.Data.getEmailFilterCollection(this.box.key());
            var self = this;
            emailFilterCollection.refresh(function () {
                self._emailFilterCollection = emailFilterCollection;
                if (self._emailFilter) self._emailFilter.setEmailFilters(emailFilterCollection);
                self._emailFilterCollectionUnbinder = self._emailFilterCollection.bind("collectionChange", function () {
                    self._emailFilterCollectionUpdated()
                });
                self._emailFilterCollectionUpdated()
            })
        },
        _updateEmailFilterBlacklistCollection: function () {
            var emailFilterBlacklistCollection = BB.Data.getEmailFilterBlacklistCollection(this.box.key());
            var self = this;
            emailFilterBlacklistCollection.refresh(function () {
                self._emailFilterBlacklistCollection = emailFilterBlacklistCollection;
                if (self._emailFilter) self._emailFilter.setEmailFilterBlacklists(emailFilterBlacklistCollection);
                self._emailFilterBlacklistCollectionUnbinder = self._emailFilterBlacklistCollection.bind("collectionChange", function () {
                    self._emailFilterBlacklistCollectionUpdated()
                });
                self._emailFilterBlacklistCollectionUpdated()
            })
        },
        _emailFilterCollectionUpdated: function () {
            if (this._emailFilterCollection &&
                this._emailFilterBlacklistCollection) this.updateEmailFilterSuggestions()
        },
        _emailFilterBlacklistCollectionUpdated: function () {
            if (this._emailFilterCollection && this._emailFilterBlacklistCollection) this.updateEmailFilterSuggestions()
        },
        renderEmailFilterSuggestions: function () {
            if (!BB.isFeatureEnabled("emailFilters")) {
                this.el.find(".emailFilterSuggestions").remove();
                return
            }
            if (!this._emailFilterBlacklistCollection) this._updateEmailFilterBlacklistCollection();
            var self = this;
            this._unbindAddedToBox = Streak.NotificationCenter.addFunction({
                eventName: "streak.inboxview.addedToBox",
                functionToCall: function () {
                    self._boxCreated = true;
                    self.updateEmailFilterSuggestions()
                }
            });
            this._unbindRemovedFromBox = Streak.NotificationCenter.addFunction({
                eventName: "streak.inboxview.removedFromBox",
                functionToCall: function () {
                    self._boxCreated = false;
                    self._suggestionsHidden = false;
                    self.updateEmailFilterSuggestions()
                }
            })
        },
        createEmailFilter: function (emailAddress) {
            var newFilter = this._emailFilterCollection.add({
                type: "EMAIL_ADDRESS_FILTER",
                value: emailAddress,
                caseKey: this.box.key()
            }, function () {
                Gmail.showNotice(Locale.getString("saved"),
                    3E3)
            });
            Gmail.showNotice(Locale.getString("saving"))
        },
        createDomainFilter: function (domain) {
            var newFilter = this._emailFilterCollection.addAndSave({
                type: "DOMAIN_FILTER",
                value: domain,
                caseKey: this.box.key()
            }, function () {
                Gmail.showNotice(Locale.getString("saved"), 3E3)
            });
            Gmail.showNotice(Locale.getString("saving"))
        },
        blacklistEmailAddress: function (emailAddress) {
            var newBlacklist = this._emailFilterBlacklistCollection.addAndSave({
                blacklistEmail: emailAddress
            }, function () {
                Gmail.showNotice(Locale.getString("saved"),
                    3E3)
            });
            Gmail.showNotice(Locale.getString("saving"))
        },
        getEmailAddressesInGmailThread: function () {
            return BB.Threads.getActiveThread().get("emailAddresses")
        },
        shouldShowEmailSuggestions: function () {
            if (!this._boxCreated) return false;
            if (this._suggestionsHidden) return false;
            var shouldShow = this._shouldShowEmailSuggestionsIfBoxCreated();
            this._suggestionsHidden = !shouldShow;
            return shouldShow
        },
        _shouldShowEmailSuggestionsIfBoxCreated: function () {
            var emailsInThread = this.getEmailAddressesInGmailThread();
            var filters =
                this._emailFilterCollection,
                blacklists = this._emailFilterBlacklistCollection;
            if (_.some(emailsInThread, function (email) {
                return _.some(filters, function (filter) {
                    return filter.matches(email)
                })
            })) return false;
            var filteredEmails = _.filter(emailsInThread, function (email) {
                return !_.some(blacklists, function (blacklist) {
                    return blacklist.matches(email)
                })
            });
            filteredEmails.removeVal(BB.getUser().getEmail());
            if (filteredEmails.length == 0) {
                this._emailFilterSuggestedEmail = null;
                this._emailFilterSuggestedDomain = null;
                return false
            } else {
                this._emailFilterSuggestedEmail =
                    filteredEmails[0];
                this._emailFilterSuggestedDomain = filteredEmails[0].split("@")[1];
                return true
            }
        },
        updateEmailFilterSuggestions: function () {
            var shouldShowSuggestions = this.shouldShowEmailSuggestions();
            if (shouldShowSuggestions && !this._emailFilterSuggestions) this._setupEmailFilterSuggestions();
            else if (shouldShowSuggestions && this._emailFilterSuggestions && this._emailFilterSuggestions.is(":hidden")) this._emailFilterSuggestions.show();
            else if (!shouldShowSuggestions && this._emailFilterSuggestions && this._emailFilterSuggestions.is(":visible")) this._emailFilterSuggestions.hide()
        },
        _setupEmailFilterSuggestions: function () {
            this._emailFilterSuggestions = $(HTML.getElement("emailFilterSuggestions"));
            var emailText = BB.Locale.getString("email_suggestion_one_email", {
                email: this._emailFilterSuggestedEmail
            });
            this._emailFilterSuggestions.find(".streak_emailFilter_email").html(emailText);
            var domainText = BB.Locale.getString("email_suggestion_one_domain", {
                domain: this._emailFilterSuggestedDomain
            });
            this._emailFilterSuggestions.find(".streak_emailFilter_domain").html(domainText);
            var self = this;
            this._dontShowButton =
                BB.Widgets.Buttons.ButtonFactory.createButton({
                    type: "Text",
                    text: BB.Locale.getString("email_suggestion_dont_show_again"),
                    onFunction: function () {
                        self._dontShowClickedInSuggestions()
                    }
                });
            this._dontShowButton.addClass("dontShowButton");
            this._createFilterSuggestionButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Gmail",
                text: BB.Locale.getString("email_suggestion_create_filter"),
                color: "blue",
                css: {
                    "margin-right": "0px"
                },
                onFunction: function () {
                    self._createFilterClickedInSuggestions()
                }
            });
            this._createFilterSuggestionButton.addClass("createFilter");
            this._emailFilterSuggestions.find(".streak__emailFilterSuggestions_dont_show").html(this._dontShowButton.getElement());
            this._emailFilterSuggestions.find(".streak__emailFilterSuggestions_create_filter").html(this._createFilterSuggestionButton.getElement());
            this.el.find(".emailFilterSuggestions").html(this._emailFilterSuggestions)
        },
        _createFilterClickedInSuggestions: function () {
            var filterType = this._emailFilterSuggestions.find("input:radio:checked[name=emailFilterSuggestion]").val();
            if (filterType === "email") this.createEmailFilter(this._emailFilterSuggestedEmail);
            else if (filterType === "domain") this.createDomainFilter(this._emailFilterSuggestedDomain);
            this._emailFilterSuggestions.hide()
        },
        _dontShowClickedInSuggestions: function () {
            this.blacklistEmailAddress(this._emailFilterSuggestedEmail);
            this._emailFilterSuggestions.hide()
        },
        renderLinkedBoxes: function () {
            if (!BB.isFeatureEnabled("linkedBoxes")) {
                this.el.find(".linkedBoxes").remove();
                return
            }
            if (!this.linkedBoxesSection) this._setupLinkedBoxesSection();
            var title = BB.Locale.getString("linked_boxes");
            var numberOfLinkedBoxes =
                this.box.get("linkedBoxKeys") ? this.box.get("linkedBoxKeys").length : 0;
            if (numberOfLinkedBoxes > 0) title += " (" + numberOfLinkedBoxes + ")";
            this.linkedBoxesSection.updateTitle(title);
            this._renderLinkedBoxes()
        },
        _setupLinkedBoxesSection: function () {
            this._linkedBoxesInner = $(document.createElement("div"));
            this._linkedBoxesInner.addClass("streak__linkedBoxes");
            this._linkedBoxesList = $(document.createElement("div"));
            this._linkedBoxesList.addClass("streak__linkedBoxes_list");
            this._linkedBoxesInner.append(this._linkedBoxesList);
            var self = this;
            this._simpleBoxesMenu = Streak.Library.getInstance("BentoBox.Modules.SimpleBoxesMenu.SimpleBoxesMenuViewController");
            this._simpleBoxesMenu.addDelegate({
                boxChosen: function (chosenBox) {
                    var boxKeyArray = self.box.get("linkedBoxKeys");
                    boxKeyArray.push(chosenBox.key());
                    self.box.set("linkedBoxKeys", boxKeyArray);
                    self.box.save()
                }
            });
            this.inputs.push(this._simpleBoxesMenu);
            this._linkedBoxesInner.append(this._simpleBoxesMenu.getView().getElement());
            this.linkedBoxesSection = BB.Widgets.CollapseSection.create({
                title: BB.Locale.getString("linked_boxes"),
                bodyEl: this._linkedBoxesInner,
                startOpen: false,
                localToggleStateKey: "boxSidebar/linkedBoxesSection"
            });
            this.el.find(".linkedBoxes").append(this.linkedBoxesSection.el)
        },
        _renderLinkedBoxes: function () {
            var boxKeys = this.box.get("linkedBoxKeys");
            var groupedBoxes;
            var missingBoxCount = 0;
            this._linkedBoxesList.empty();
            var self = this;
            _.chain(boxKeys).map(function (boxKey) {
                var connectedBox = BB.Data.getBox(boxKey);
                if (connectedBox) return connectedBox;
                missingBoxCount += 1
            }).compact().sortBy(function (box) {
                return box.get("lastUpdatedTimestamp")
            }).sortBy(function (box) {
                return box.displayName()
            }).sortBy(function (box) {
                var stageOrder =
                    box.getPipeline().get("stageOrder");
                return stageOrder.indexOf(box.get("stageKey"))
            }).groupBy(function (box) {
                return box.getPipeline().key()
            }).tap(function (intermediateResults) {
                groupedBoxes = intermediateResults
            }).keys().map(function (pipelineKey) {
                return BB.Data.getPipeline(pipelineKey)
            }).sortBy(function (pipeline) {
                return pipeline.displayName()
            }).each(function (pipeline) {
                self._renderLinkedBoxSection(pipeline, groupedBoxes[pipeline.key()])
            });
            this._simpleBoxesMenu.setExcludedBoxKeys(boxKeys.concat([this.box.key()]))
        },
        _renderLinkedBoxSection: function (pipeline, boxes) {
            var sectionContainer = $(HTML.get("boxSidebarLinkedBoxes")({
                pipelineName: pipeline.displayName()
            }));
            var listBody = sectionContainer.find("ul");
            for (var ii = 0; ii < boxes.length; ii++) {
                var boxRow = this._renderLinkedBox(boxes[ii], pipeline.getColor());
                listBody.append(boxRow)
            }
            this._linkedBoxesList.append(sectionContainer)
        },
        _renderLinkedBox: function (connectedBox, color) {
            var row = $(HTML.get("boxSidebarLinkedBox")({
                boxName: connectedBox.displayName()
            }));
            row.on("click", function (e) {
                BB.UI.setURL(connectedBox.link())
            });
            var self = this;
            row.find(".ar9").on("click", function (e) {
                var boxKeyArray = self.box.get("linkedBoxKeys");
                boxKeyArray.removeVal(connectedBox.key());
                self.box.set("linkedBoxKeys", boxKeyArray);
                self.box.save();
                e.stopPropagation()
            });
            return row
        },
        bindEvents: function () {
            var self = this;
            this.pipeline.bind("set", "name", function () {
                if (self.el && self.el.find(".pipelineLink").length > 0) self.el.find(".pipelineLink").text(self.pipeline.displayName());
                else return true
            }, this.uniq);
            this.box.bind("set", "name", function () {
                if (self.el &&
                    self.el.find(".boxLink").length > 0) self.el.find(".boxLink").text(self.box.displayName());
                else return true
            }, this.uniq);
            this.pipeline.bind("set", "fields", function () {
                self.renderFields();
                self.setupTabArray()
            }, this.uniq);
            this.box.bind("set", "reminderKeys", function () {
                self.updateReminderTitle()
            }, this.uniq);
            this.box.bind("set", "linkedBoxKeys", function () {
                self.renderLinkedBoxes()
            }, this.uniq);
            BB.Keyboard.bindChordToEl({
                el: this.el,
                chord: "escape",
                noDefault: true,
                noBubble: true,
                cb: function () {
                    self.options.blur()
                }
            });
            this.el.bind("blurred", function (e) {
                self.options.blur()
            });
            this.binders.push(this.pipeline);
            this.binders.push(this.box)
        },
        setupTabArray: function () {
            if (!this.options.keyboardTabs) return;
            this.tabArray = [];
            this.tabArray.push(this.stages.el.find(".bbButton"));
            this.tabArray.push(this.notesArea.el);
            if (this.assignedTo) this.tabArray.push(this.assignedTo.el);
            var fields = this.el.find(".boxFields .smartInput");
            for (var i = 0; i < fields.length; i++) this.tabArray.push($(fields[i]));
            this.tabArray.push(this.reminderList.getFocusElement());
            if (this.linkedBoxesSection) this.tabArray.push(this._simpleBoxesMenu.getFocusElement());
            this.tabArray.push(null);
            this.tabFocusController.addElements(this.tabArray)
        },
        getFirstFocusable: function () {
            return this.stages.el.find(".bbButton")
        },
        getLastFocusable: function () {
            return this.tabArray.last(2).first()
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Eventer = Streak.Eventer,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var ServerThreadController = Eventer.create({
        init: function (callback) {
            var self = this;
            BB.Threads.list.bind("set", function () {
                var args = _.toArray(arguments);
                var property = args[0];
                var thread = _.last(args);
                self._handleThreadSet(property, thread)
            });
            BB.Controllers.BoxesSidebarController.bind("boxSidebarAdded", this._handledSidebarAdded.bind(this));
            if (callback) callback()
        },
        _handleThreadSet: function (property, thread) {
            if (property === "serverThread") this._handleServerThreadSetOnThread(thread)
        },
        _handleServerThreadSetOnThread: function (thread) {
            var serverThread = thread.get("serverThread");
            if (_.isReal(serverThread) && thread.get("serverThread") !== "") this.trigger("threadSetOnServerThread", thread, serverThread);
            else this.trigger("threadUnsetOnServerThread", thread)
        },
        _handledSidebarAdded: function () {
            var thread = BB.Threads.getActiveThread();
            if (thread && thread.get("threadInfo")) thread.get("threadInfo").addSyncedCallback(function () {
                BB.Data.getGmailThreadByHexID(thread.key(),
                    function (serverThread) {
                        thread.set("serverThread", serverThread);
                        thread.get("threadInfo").performNextSyncOperation()
                    })
            })
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "serverThreadControllerInitialized",
        functionToCall: ServerThreadController.init,
        functionContext: ServerThreadController,
        dependentFunctionKeys: ["threadsInitialized", "boxesSidebarControllerInitialized"]
    });
    BB.Controllers.ServerThreadController = ServerThreadController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Eventer = Streak.Eventer,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var ConversationTaskThreadController = Eventer.create({
        init: function (callback) {
            var self = this;
            this._threadTask = null;
            BB.Controllers.ServerThreadController.bind("threadSetOnServerThread", this._handleThreadSetOnBox.bind(this));
            BB.Controllers.ServerThreadController.bind("threadUnsetOnServerThread", this._handleThreadUnsetOnBox.bind(this));
            if (callback) callback()
        },
        _handleThreadSetOnBox: function (thread, serverThread) {
            var activeThread = BB.Threads.getActiveThread();
            if (!_.isReal(activeThread) || !_.isReal(thread)) return;
            if (thread.key() === activeThread.key())
                if (Gmail.isConversation() || Gmail.isListView() && Gmail.isPreviewPane()) this._loadThreadTask(thread, serverThread)
        },
        _handleThreadUnsetOnBox: function (thread) {
            var activeThread = BB.Threads.getActiveThread();
            if (!_.isReal(activeThread) || !_.isReal(thread)) return;
            if (thread.key() === activeThread.key())
                if (Gmail.isConversation() ||
                    Gmail.isListView() && Gmail.isPreviewPane()) this._unloadThreadTask(thread)
        },
        _loadThreadTask: function (thread, serverThread) {
            this._unloadThreadTask();
            this._threadTask = BB.Widgets.ThreadTask.create({
                thread: serverThread,
                trackingContext: {
                    widgetContext: "conversationTaskThreadController"
                }
            });
            Gmail.getConversationSubjectHeader().append(this._threadTask.el)
        },
        _unloadThreadTask: function (thread) {
            if (this._threadTask && this._threadTask.destroy) {
                this._threadTask.destroy();
                this._threadTask = null
            }
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "conversationTaskThreadControllerInitialized",
        functionToCall: ConversationTaskThreadController.init,
        functionContext: ConversationTaskThreadController,
        dependentFunctionKeys: ["serverThreadControllerInitialized", "gmailLoaded", "threadsInitialized"]
    });
    BB.Controllers.ConversationTaskThreadController = ConversationTaskThreadController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Date = Streak.Date,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var trackingContext = {
        widgetContext: "boxView"
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    var BoxView = {
        initialized: false,
        templates: {},
        activeBoxView: null,
        activeBox: null,
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                this.templates = {};
                this.templates.mainView = HTML.get("boxView");
                this.templates.emailRow =
                    HTML.get("boxViewEmailTemplate");
                this.templates.field = HTML.get("boxViewField");
                Gmail.observe("viewChanged", self.render.bind(self));
                BB.Data.getAllBoxes().bind("remove", function (box) {
                    self.remove(box.key())
                });
                BB.Keyboard.bindChord("w,tab", function () {
                    setTimeout(function () {
                        if (self.activeView) self.activeView.focusArea.focus()
                    }, 10)
                });
                self.initialized = true
            }
            if (cb) cb()
        },
        teardown: function () {
            if (this.activeBoxView) {
                this.activeBoxView.destroy();
                this.activeBoxView = null;
                this.activeBox = null
            }
        },
        render: function () {
            var self =
                this;
            if (this.activeBoxView) {
                this.activeBoxView.destroy();
                this.activeBoxView = null;
                this.activeBox = null
            }
            if (BB.UI.isBentoBoxView() && BB.UI.isBoxView()) try {
                var readyObj = null;
                var isRendered = self.renderBoxView(function () {
                    if (readyObj) readyObj.trigger("ready")
                });
                if (isRendered) readyObj = Streak.Eventer.create();
                return readyObj
            } catch (err) {
                var msg = "Box View render error";
                msg += "\nid: " + Gmail.getConversationId();
                BB.logError(msg, err)
            }
        },
        remove: function (conversation) {
            if (conversation === Gmail.getConversationId()) {
                BB.UI.setURL("inbox");
                if (_.isReal(this.activeBoxView) && _.isReal(this.activeBoxView.destroy)) this.activeBoxView.destroy();
                this.activeBoxView = null;
                this.activeBox = null
            }
        },
        renderBoxView: function (callback) {
            var self = this;
            var box = BB.Data.getBox(Gmail.getConversationId());
            if (!box) {
                BB.logError("Box does not exist \nid:" + Gmail.getConversationId());
                Gmail.showNotice(BB.Locale.getString("box_not_exist"), 5E3);
                BB.UI.setURL("inbox");
                return
            }
            var pipeline = box.getPipeline();
            if (!pipeline) {
                BB.logError("Pipeline does not exist \nid:" + Gmail.getConversationId());
                Gmail.showNotice(BB.Locale.getString("pipeline_not_exist"), 5E3);
                BB.UI.setURL("inbox");
                return
            }
            this.activeBoxView = this.createBoxView(box, pipeline, callback);
            BB.UI.getCanvas().append(this.activeBoxView.el);
            Gmail.getSearchInput().val("box:" + box.get("name"));
            box.refresh();
            return true
        },
        createBoxView: function (box, pipeline, callback) {
            var el = $(BoxView.templates.mainView({
                pipelineName: pipeline.displayName()
            }));
            var tabChain = [];
            var binders = [];
            var inputs = [];
            var trackingContext = {
                eventName: "boxDataEdited",
                widgetContext: "boxView"
            };
            var columnOrder = null,
                columnVisibility = null,
                columns = null;
            var nameTextBox = null,
                stagesButton = null,
                notesTextarea = null,
                assignedTo = null;
            var renderBoxData = function () {
                columnOrder = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.load(pipeline).data;
                columnVisibility = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings.load(pipeline).data;
                columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
                notesTextarea = BB.Widgets.SmartTextarea.create({
                    model: box,
                    property: "notes",
                    border: "alwaysHover",
                    placeholder: BB.Locale.getString("box_view_add_notes"),
                    trackingContext: trackingContext
                });
                notesTextarea.placeholderEl.addClass("d8");
                el.find(".boxNotes").append(notesTextarea.el);
                el.find(".boxNotesWrap").superEasyHoverClass("RV");
                nameTextBox = BB.Widgets.SmartTextbox.create({
                    model: box,
                    property: "name",
                    border: "hover",
                    autoGrow: false,
                    allowEmpty: false,
                    trackingContext: trackingContext
                });
                el.find(".boxName").append(nameTextBox.el);
                nameTextBox.el.addClass("bb_boxflex1");
                renderStageButton();
                postComment = BB.Widgets.PostComment.create({
                    box: box,
                    feedList: feedList,
                    trackingContext: trackingContext
                });
                el.find(".postCommentWidget").append(postComment.el);
                renderAssignedTo();
                box.bind("boxFieldsSet", null, renderFields, "boxView");
                if (BB.isFeatureEnabled("linkedBoxes")) {
                    box.bind("set", "linkedBoxKeys", renderLinkedBoxes, "boxView");
                    renderLinkedBoxes(true)
                }
            };
            var renderStageButton = function () {
                var stageContainer = el.find(".bb_stages");
                stagesButton = BB.Widgets.StageButton.create({
                    pipeline: pipeline,
                    box: box,
                    trackingContext: trackingContext
                });
                el.find(".bb_stages").append(stagesButton.el);
                var field = $(BoxView.templates.field({
                    name: BB.Locale.getString("stage")
                }));
                field.find(".fieldValue").append(stagesButton.el);
                binders.push(stagesButton);
                field.superEasyHoverClass("RV");
                stageContainer.append(field)
            };
            var renderAssignedTo = function () {
                var assignedToContainer = el.find(".bbAssignedTo");
                assignedToContainer.hide();
                var assignedToColumn = pipeline.getSystemColumnByProperty("assignedToSharingEntries");
                if (_.isNotReal(assignedToColumn)) return;
                var isVisible =
                    columnVisibility["property|" + assignedToColumn.uniqueKey];
                if (_.isNotReal(isVisible) || isVisible === true) {
                    assignedTo = BB.Widgets.SidebarAssignedTo.create({
                        box: box,
                        pipeline: pipeline,
                        border: "hover",
                        persist: true,
                        imgHeight: 20,
                        imgWidth: 20,
                        includeNames: true,
                        delayedBind: true
                    });
                    var field = $(BoxView.templates.field({
                        name: BB.Locale.getString("assignedTo")
                    }));
                    field.find(".fieldValue").append(assignedTo.el);
                    binders.push(assignedTo);
                    field.superEasyHoverClass("RV");
                    assignedToContainer.append(field);
                    assignedToContainer.show()
                }
            };
            var renderFields = function () {
                el.find(".bb_fields *").trigger("unbind");
                el.find(".bb_fields").empty();
                tabChain = [];
                tabChain.push(nameTextBox.el);
                tabChain.push(stagesButton.el.find(".bbButton"));
                tabChain.push(notesTextarea.el);
                if (assignedTo) tabChain.push(assignedTo.el);
                for (var i = 0; i < columnOrder.length; i++) {
                    var columnKey = columnOrder[i];
                    if (columns[columnKey].field && (_.isNotReal(columnVisibility[columnKey]) || columnVisibility[columnKey])) {
                        var field = renderField(columns[columnKey].field.key());
                        el.find(".bb_fields").append(field);
                        tabChain.push(field.find(".smartInput"))
                    }
                }
                tabChain.push(null);
                $.tabChain(tabChain)
            };
            var renderField = function (index) {
                var self = this;
                var pipeField = pipeline.getField(index);
                var field = $(BoxView.templates.field({
                    name: pipeField.displayName()
                }));
                var input = BB.Widgets.SmartInput.create(pipeField.get("type"), {
                    parent: field.find(".fieldValue"),
                    border: "hover",
                    model: box.getField(pipeField.key()),
                    property: "value",
                    persist: true,
                    isSpreadsheet: false,
                    includeNames: true,
                    imgHeight: 20,
                    imgWidth: 20,
                    readHTML: true,
                    existingList: BB.UI.getFieldValues(pipeline,
                        pipeField.key()),
                    delayedBind: true,
                    trackingContext: trackingContext
                });
                inputs.push(input);
                field.find(".fieldValue").append(input.el);
                pipeField.bind("set", "name", function () {
                    if (field.is(":inBody")) field.find(".fieldName").text(pipeField.displayName());
                    else return true
                }, "boxView");
                binders.push(pipeField);
                field.superEasyHoverClass("RV");
                return field
            };

            function renderLinkedBoxes(isFirst) {
                var boxKeys = box.get("linkedBoxKeys") || [];
                var groupedBoxes;
                var foundBoxes;
                var missingBoxCount = 0;
                el.find(".streak__boxView_linkedBoxes").empty();
                _.chain(boxKeys).map(function (boxKey) {
                    var connectedBox = BB.Data.getBox(boxKey);
                    if (connectedBox) return connectedBox;
                    missingBoxCount += 1
                }).tap(function (intermediateResults) {
                    foundBoxes = intermediateResults
                }).compact().sortBy(function (box) {
                    return box.get("lastUpdatedTimestamp")
                }).sortBy(function (box) {
                    return box.displayName()
                }).sortBy(function (box) {
                    var stageOrder = box.getPipeline().get("stageOrder");
                    return stageOrder.indexOf(box.get("stageKey"))
                }).groupBy(function (box) {
                    return box.getPipeline().key()
                }).tap(function (intermediateResults) {
                    groupedBoxes =
                        intermediateResults
                }).keys().map(function (pipelineKey) {
                    return BB.Data.getPipeline(pipelineKey)
                }).sortBy(function (pipeline) {
                    return pipeline.displayName()
                }).each(function (pipeline) {
                    renderLinkedBoxSection(pipeline, groupedBoxes[pipeline.key()])
                });
                simpleBoxesMenu.setExcludedBoxKeys(boxKeys.concat([box.key()]));
                if (!isFirst) {
                    if (foundBoxes.length > 0) el.find(".streak__boxView_linkedBoxes").show();
                    else el.find(".streak__boxView_linkedBoxes").hide();
                    return
                }
                showLinkedBoxes();
                el.find(".streak__boxView_linkedBoxes").show()
            }

            function showLinkedBoxes() {
                el.find(".streak__boxView_linkedBoxes_wrapper").show();
                el.find(".streak__boxView_linkedBoxes_empty").hide()
            }

            function hideLinkedBoxes() {
                el.find(".streak__boxView_linkedBoxes_wrapper").hide();
                el.find(".streak__boxView_linkedBoxes_empty").show()
            }

            function renderLinkedBoxSection(pipeline, boxes) {
                var sectionContainer = $(HTML.get("boxViewConnectedBoxSection")({
                    pipelineName: pipeline.displayName()
                }));
                var tableBody = sectionContainer.find("tbody");
                var stageColors = BB.UI.getStageColors(pipeline);
                for (var ii = 0; ii < boxes.length; ii++) {
                    var boxRow = renderLinkedBox(boxes[ii], stageColors[boxes[ii].get("stageKey")]);
                    tableBody.append(boxRow)
                }
                el.find(".streak__boxView_linkedBoxes").append(sectionContainer)
            }

            function renderLinkedBox(connectedBox, color) {
                var row = HTML.get("boxViewConnectedBoxRow")({
                    boxName: connectedBox.displayName(),
                    groupcolor: color.backgroundColor,
                    textcolor: color.textColor,
                    boxStageName: connectedBox.getStageName(),
                    boxDetails: BB.Services.BoxDisplayText.getDetailsText(connectedBox),
                    boxDate: Date.ccreate(connectedBox.get("lastUpdatedTimestamp")).getGmailFormatted()
                });
                row = $(row);
                row.on("click", function (e) {
                    BB.UI.setURL(connectedBox.link())
                });
                row.find(".streak__boxView_removeLinkedBox").on("click", function (e) {
                    var boxKeyArray = box.get("linkedBoxKeys");
                    boxKeyArray.removeVal(connectedBox.key());
                    box.set("linkedBoxKeys", boxKeyArray);
                    box.save();
                    e.stopPropagation()
                });
                return row
            }
            if (BB.isFeatureEnabled("linkedBoxes")) {
                var simpleBoxesMenu = Streak.Library.getInstance("BentoBox.Modules.SimpleBoxesMenu.SimpleBoxesMenuViewController");
                el.find(".bb_linked_boxes_search").html(simpleBoxesMenu.getView().getElement());
                simpleBoxesMenu.addDelegate({
                    boxChosen: function (chosenBox) {
                        var boxKeyArray = box.get("linkedBoxKeys");
                        boxKeyArray.push(chosenBox.key());
                        box.set("linkedBoxKeys", boxKeyArray);
                        box.save()
                    }
                })
            } else el.find(".bb_linked_boxes").remove();
            el.find(".pipelineLink").click(function (e) {
                track("pipelineLinkClicked");
                e.preventDefault();
                BB.UI.setURL(pipeline.link())
            });
            var followers = BB.Widgets.Follower.create({
                box: box,
                showTitle: false,
                display: "list",
                imgHeight: 20,
                imgWidth: 20,
                trackingContext: trackingContext
            });
            el.find("#followers").append(followers.el);
            var emailPeopleList = BB.Widgets.PeopleList.create({
                border: "never",
                display: "list",
                imgHeight: "20",
                imgWidth: "20"
            });
            el.find("#emailContacts").append(emailPeopleList.el);
            var fileList = BB.Widgets.FileList.create({
                trackingContext: trackingContext,
                box: box
            });
            el.find("#files").append(fileList.el);
            inputs.push(fileList);
            var feedList = BB.Widgets.FeedList.create({
                model: box,
                filterToComments: BB.UserSettings.get("newsFeed/box/global") === "viewCommentsOnly"
            });
            el.find(".feedWidget").append(feedList.el);
            var emailFilterList;
            if (BB.isFeatureEnabled("emailFilters")) {
                emailFilterList = new BB.Modules.EmailFilters.EmailFilterViewController({
                    boxKey: box.key(),
                    useLinkButtonForNewFilter: false,
                    fetchInfoFromServer: true,
                    suggestionsFromThread: false
                });
                el.find(".streak__boxView_emailFilters").append(emailFilterList.getElement())
            } else el.find(".streak__boxView_emailFilters").remove();
            var reminderList = BB.Widgets.ReminderList.create({
                box: box,
                pipeline: pipeline,
                trackingContext: trackingContext
            });
            el.find(".reminders").append(reminderList.el);
            var choices = ["viewAll", "viewCommentsOnly"];
            var applyNewsSetting = function () {
                var newsSetting = BB.UserSettings.get("newsFeed/box/global");
                choices.forEach(function (choice) {
                    if (newsSetting === choice) el.find("." + choice).removeClass("activeToggle");
                    else el.find("." + choice).addClass("activeToggle")
                })
            };
            BB.UserSettings.bind("newsFeed/box/global/update", function () {
                applyNewsSetting()
            }, "boxView");
            binders.push(BB.UserSettings);
            var updateNewsSetting = function (choice) {
                BB.UserSettings.setSetting("newsFeed/box/global",
                    choice);
                BB.UserSettings.saveSettings();
                BB.UserSettings.trigger("newsFeed/box/global/update");
                BB.Tracker.trackStreakActive({
                    eventName: "ChangeBoxFeed",
                    choice: choice
                }, trackingContext)
            };
            if (BB.UserSettings.get("newsFeed/box/global") === undefined || BB.UserSettings.get("newsFeed/box/global") === "") updateNewsSetting("viewAll");
            applyNewsSetting();
            el.find(".viewAll").click(function () {
                updateNewsSetting("viewAll")
            });
            el.find(".viewCommentsOnly").click(function () {
                updateNewsSetting("viewCommentsOnly")
            });
            var threadCollection =
                null;
            var refreshThreadCollection = function (cb) {
                if (!threadCollection) {
                    threadCollection = BB.Data.getGmailThreadGroup(box.key());
                    threadCollection.bind("collectionChange", function () {
                        renderEmails();
                        renderEmailContacts()
                    }, "boxView");
                    binders.push(threadCollection)
                }
                renderEmails();
                fileList.refresh();
                renderEmailContacts();
                threadCollection.refresh(cb)
            };
            var renderEmails = function () {
                var emailTable = el.find("#emailTableBody");
                emailTable.empty();
                _(threadCollection).chain().uniq(false, function (thread) {
                    return thread.key()
                }).sortBy(function (thread) {
                    return -1 *
                        parseInt(thread.get("lastEmailTimestamp") || thread.get("lastUpdatedTimestamp"), 10)
                }).each(function (thread) {
                    setupEmailRow(thread, emailTable)
                })
            };
            var replytoThread = function (pplz, subj, shouldAddCompose) {
                Gmail.observe("viewChanged", function () {
                    if (shouldAddCompose.value)
                        if (Streak.Gmail.isCompose()) {
                            Streak.$(".eC.aaJ textarea").val(pplz);
                            Streak.$(".eC input.ez.nr").val(subj)
                        } else;
                    shouldAddCompose.value = false
                });
                Gmail.observe("newComposeWindow", function (composeWindow) {
                    if (shouldAddCompose.value) setTimeout(function (ee) {
                        composeWindow.setAddresses(pplz);
                        composeWindow.setSubject(subj);
                        var __thisBox = BB.Data.getBox(Gmail.getConversationId());
                        composeWindow.thread.set("box", __thisBox);
                        composeWindow.boxOnNewCompose.associate(__thisBox);
                        composeWindow.find(".Am.Al.editable.LW-avf").simulateRawClick()
                    }, 10);
                    shouldAddCompose.value = false
                });
                Streak.$(Streak.$(".z0")[0]).children().simulateRawClick();
                shouldAddCompose.value = true
            };
            var setupEmailRow = function (thread, emailTable) {
                var date = Date.ccreate(thread.get("lastEmailTimestamp") || thread.get("lastUpdatedTimestamp")).getGmailFormatted();
                var namesTotal = "";
                for (var j = 0; j < thread.get("names").length; j++) namesTotal += thread.get("names")[j] + ", ";
                namesTotal = namesTotal.substring(0, namesTotal.length - 2);
                var currentEmailRow = $(BoxView.templates.emailRow({
                    date: date,
                    people: namesTotal,
                    subject: thread.get("subject")
                }));
                var task = BB.Widgets.ThreadTask.create({
                    thread: thread,
                    trackingContext: trackingContext
                });
                currentEmailRow.find(".bb_task").append(task.el);
                var currentData = thread;
                currentEmailRow.click(function (e) {
                    if (currentData.get("isRequestingUserOwner")) BB.UI.goToThread(currentData.get("threadGmailId"));
                    else if (currentData.get("doesRequestingUserHaveThread")) BB.UI.goToThread(currentData.get("requestingUserThreadGmailId"));
                    else {
                        var url = BB.UI.linkify(currentData);
                        BB.UI.setURL(url)
                    }
                    BB.Tracker.trackStreakActive({
                        eventName: "emailLinkClicked"
                    }, trackingContext)
                });

                function renderStrikethrough() {
                    if (thread.get("taskStatus") === "DONE_TASK") {
                        currentEmailRow.find("hr").show();
                        setTimeout(function () {
                            currentEmailRow.find("hr").addClass("active")
                        }, 2)
                    } else {
                        currentEmailRow.find("hr").removeClass("active");
                        setTimeout(function () {
                                currentEmailRow.find("hr").hide()
                            },
                            300)
                    }
                }
                thread.bind("set", "taskStatus", function () {
                    renderStrikethrough()
                }, "boxView");
                thread.bind("set", "lastEmailTimestamp", function () {
                    currentEmailRow.find(".bb_date").text(Date.ccreate(thread.get("lastEmailTimestamp") || thread.get("lastUpdatedTimestamp")).getGmailFormatted())
                }, "boxView");
                binders.push(thread);
                emailTable.append(currentEmailRow);
                renderStrikethrough()
            };
            var renderEmailContacts = function () {
                var contacts = [];
                for (var i = 0; i < threadCollection.length; i++)
                    for (var j = 0; j < threadCollection[i].get("emailAddresses").length; j++) contacts.push({
                        email: threadCollection[i].get("emailAddresses")[j],
                        fullName: threadCollection[i].get("names")[j]
                    });
                contacts = _.uniq(contacts, false, function (item) {
                    return item.email
                });
                contacts = _.sortBy(contacts, function (item) {
                    return item.fullName
                });
                if (contacts.length > 0) {
                    el.find("#bb_email_ppl").show();
                    emailPeopleList.updateDisplay(contacts);
                    if (emailFilterList) emailFilterList.setContacts(contacts)
                } else el.find("#bb_email_ppl").hide()
            };
            var refresh = function (refreshCallback) {
                var after = _.after(4, function () {
                    if (refreshCallback) refreshCallback()
                });
                box.refresh(after);
                refreshThreadCollection(after);
                renderFields();
                if (feedList) feedList.refreshData(after);
                else after();
                reminderList.refresh(after)
            };
            binders.push(box);
            var destroy = function () {
                fileList.destroy();
                for (i = 0; i < binders.length; i++)
                    if (!binders[i].unbindAll);
                    else binders[i].unbindAll("boxView");
                for (i = 0; i < inputs.length; i++)
                    if (inputs[i] && inputs[i].destroy) inputs[i].destroy();
                if (simpleBoxesMenu) simpleBoxesMenu.destroy();
                el.find("*").trigger("unbind");
                el.remove()
            };
            renderBoxData();
            refresh(callback);
            pipeline.bind("set", "name", function () {
                    el.find("#pipelineLink").text(pipeline.displayName())
                },
                "boxView");
            return {
                el: el,
                refresh: refresh,
                focusArea: tabChain[0],
                destroy: destroy
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "boxViewInitialized",
        functionToCall: BoxView.init,
        functionContext: BoxView,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "data.pipelines.initialized", "data.boxes.initialized", "enabledFeaturesControllerInitialized"]
    });
    BB.Modules.BoxView = BoxView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        BB = Streak.BentoBox;
    Gmail = Streak.Gmail, HTML = Streak.HTML, Requester = Streak.Requester, Utils = Streak.Utils;
    var ChatLinker = {
        initialized: false,
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                Gmail.observe("newChatMessage", self.processChatMessage.bind(self));
                self.initialized = true
            }
            if (cb) cb()
        },
        processChatMessage: function (chatMessage) {
            if (chatMessage && chatMessage.length > 0) {
                var titleSpan = chatMessage.find("[title]");
                if (titleSpan.length > 0 && titleSpan[0].title ===
                    "streak@mailfoogae.appspotchat.com") {
                    var boldedBoxes = chatMessage.find("b");
                    for (var ii = 0; ii < boldedBoxes.length; ii++) {
                        var boxName = $(boldedBoxes[ii]).text();
                        var box = this.getBox(boxName);
                        if (box) this.linkify($(boldedBoxes[ii]), box.link())
                    }
                }
                var links = chatMessage.find('a[href*="mail.google.com"]');
                for (var i = 0; i < links.length; i++) {
                    var link = $(links[i]);
                    if (this.isBentoboxInternalLink(link)) this.relink(link)
                }
            }
        },
        getBox: function (boxName) {
            var boxes = _.filter(BB.Data.getAllBoxes(), function (box) {
                return box.displayName() ===
                    boxName
            });
            if (boxes.length === 1) return boxes[0]
        },
        linkify: function (span, link) {
            var jspan = $(span);
            var a = jspan.parent();
            if (!a.is("a")) {
                a = $(document.createElement("a"));
                a[0].setAttribute("href", "#");
                jspan.before(a);
                jspan.detach();
                a.append(jspan);
                a.click(function (e) {
                    BB.UI.setURL(link);
                    e.preventDefault();
                    e.stopPropagation()
                })
            }
        },
        relink: function (link) {
            if (link.is("a")) {
                var href = link.attr("href");
                var hash = href.split("#")[1];
                if (hash) link.click(function (e) {
                    BB.UI.setURL(hash);
                    e.preventDefault();
                    e.stopPropagation()
                })
            }
        },
        isBentoboxInternalLink: function (link) {
            var href = link.attr("href");
            var urlNoHash = href.split("#")[0];
            var hash = href.split("#")[1];
            if (urlNoHash.indexOf("mail.google.com") == -1 || !hash) return false;
            return BB.UI.isBentoBoxView(Gmail.getStoredView(hash.split("/")))
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "chatLinkerInitialized",
        functionToCall: ChatLinker.init,
        functionContext: ChatLinker,
        dependentFunctionKeys: ["gmailLoaded", "data.pipelines.initialized", "data.boxes.initialized"]
    });
    BB.Modules.ChatLinker =
        ChatLinker
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        BB = Streak.BentoBox;
    Gmail = Streak.Gmail, HTML = Streak.HTML, Requester = Streak.Requester, Utils = Streak.Utils;
    var EmailInspector = {
        init: function (cb) {
            var self = this;
            Gmail.observe("viewChanged", function () {
                if (Gmail.isInConversation()) self.render()
            });
            Gmail.observe("conversationThreadLoadedEvent", function () {
                self.render()
            });
            Gmail.observe("conversationMessageStateChanged", function () {
                self.replaceStreakLinks()
            });
            if (cb) cb()
        },
        render: function (attempts) {
            var self = this;
            if (!attempts) attempts =
                1;
            this.replaceStreakLinks();
            var spans = Gmail.getCurrentMain().find('span[hspace*="streak"]');
            if (spans.length > 0) {
                var refreshBox = false,
                    refreshPipeline = false;
                for (var i = 0; i < spans.length; i++) {
                    var identifier = $(spans[i]).attr("hspace");
                    var parts = identifier.split("-");
                    if (parts.length < 3) return;
                    if (parts[0] === "streak") {
                        var key;
                        if (parts.length > 3) {
                            var keyParts = [];
                            for (var ii = 2; ii < parts.length; ii++) keyParts.push(parts[ii]);
                            key = keyParts.join("-")
                        } else key = parts[2]; if (parts[1] === "box") {
                            var box = BB.Data.getBox(key);
                            if (box) {
                                BB.Threads.getActive()[0].set("reminderBox", box);
                                this.linkify(spans[i], box.link())
                            }
                        } else if (parts[1] === "pipeline") {
                            var pipeline = BB.Data.getPipeline(key);
                            if (pipeline) this.linkify(spans[i], pipeline.link());
                            else refreshPipeline = true
                        } else if (parts[1] === "tourChapter") $(spans[i]).click(function () {
                            Streak.BentoBox.Modules.TourRunner.forceStartTourChapter(key)
                        })
                    }
                }
                var num = 0;
                if (refreshBox) num += 1;
                if (refreshPipeline) num += 1;
                if (num > 0 && attempts < 3) {
                    var aft = _.after(num, function () {
                        self.render(attempts + 1)
                    });
                    if (refreshPipeline) BB.Data.getAllPipelines().refresh(function () {
                        aft()
                    })
                }
            }
        },
        replaceStreakLinks: function () {
            var links = Gmail.getConversation().find('a[href*="mail.google.com"]');
            for (var j = 0; j < links.length; j++) {
                var link = $(links[j]);
                if (this.isBentoboxInternalLink(link)) this.relink(link)
            }
        },
        linkify: function (span, link) {
            var jspan = $(span);
            var a = jspan.parent();
            if (!a.is("a")) {
                a = $(document.createElement("a"));
                a[0].setAttribute("href", "#");
                jspan.before(a);
                jspan.detach();
                a.append(jspan);
                a.click(function (e) {
                    BB.UI.setURL(link);
                    e.preventDefault();
                    e.stopPropagation()
                })
            }
        },
        relink: function (link) {
            if (link.is("a")) {
                var href = this.extractGmailInternalLink(link);
                var hash = href.split("#")[1];
                if (hash) link.click(function (e) {
                    BB.UI.setURL(hash);
                    e.preventDefault();
                    e.stopPropagation()
                })
            }
        },
        isBentoboxInternalLink: function (link) {
            if (!this.isGmailInternalLink(link)) return false;
            var href = this.extractGmailInternalLink(link);
            var urlNoHash = href.split("#")[0];
            var hash = href.split("#")[1];
            if (urlNoHash.indexOf("mail.google.com") == -1) return false;
            return BB.UI.isBentoBoxView(Gmail.getStoredView(hash.split("/")))
        },
        isGmailInternalLink: function (link) {
            return link.attr("href").indexOf("mail.google.com")
        },
        extractGmailInternalLink: function (link) {
            return link.plainText()
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "emailInspectorInitialized",
        functionToCall: EmailInspector.init,
        functionContext: EmailInspector,
        dependentFunctionKeys: ["threadsInitialized", "gmailLoaded", "data.pipelines.initialized", "data.boxes.initialized"]
    });
    BB.Modules.EmailInspector = EmailInspector
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Eventer = Streak.Eventer,
        Model = Streak.Model,
        Locale = Streak.Locale,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var MailMergeModel = function () {
        Streak.ViewControllerBase.call(this);
        this._extractionSettings = null;
        this._boxes = null;
        this._pipeline = null;
        this._emailAddresses = null;
        this._emailAddressToBoxListMap = {};
        this._emailAddressToRowListMap = {};
        this._templateSubject = null;
        this._templateBody = null;
        this._csvFields = null;
        this._entryDetailModels = [];
        this._currentlyPreviewedEntryIndex = null;
        this._isPixelTrackingOn = false;
        this._usedSnippets = [];
        this._mailMergeId = null;
        this._setupStartingExtractionSettings()
    };
    MailMergeModel.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(MailMergeModel.prototype, {
        getExtractionSettingValue: function (categoryKey, settingKey) {
            return this._extractionSettings[categoryKey][settingKey]
        },
        updateExtractionSettingValue: function (categoryKey, settingKey, settingValue, noSave) {
            this._extractionSettings[categoryKey][settingKey] =
                settingValue;
            if (!noSave) BB.LocalSettings.set("mailMerge/extractionSettings/" + categoryKey + "/" + settingKey, settingValue)
        },
        setPipeline: function (pipeline) {
            this._pipeline = pipeline
        },
        setCSVFields: function (csvFields) {
            this._csvFields = csvFields
        },
        clearChosenEmails: function () {
            for (var ii = 0; ii < this._entryDetailModels.length; ii++) this._entryDetailModels[ii].destroy();
            this._entryDetailModels.length = 0
        },
        getPipeline: function () {
            return this._pipeline
        },
        setBoxes: function (boxes) {
            this._boxes = boxes
        },
        getBoxes: function () {
            return this._boxes
        },
        setEmailAddresses: function (emailAddresses) {
            this._emailAddresses = emailAddresses
        },
        setEmailAddressToBoxListMap: function (boxListMap) {
            this._emailAddressToBoxListMap = boxListMap
        },
        setEmailAddressToRowListMap: function (rowListMap) {
            this._emailAddressToRowListMap = rowListMap
        },
        getNumberOfBoxesSelected: function () {
            if (this.isUsingCSVFile()) return 0;
            if (this._entryDetailModels.length === 0) {
                if (!this._boxes) return 0;
                return this._boxes.length
            }
            var uniqueBoxes = [];
            for (var ii = 0; ii < this._entryDetailModels.length; ii++)
                if (this._entryDetailModels[ii].isIncludedInMailMerge()) uniqueBoxes.push(this._entryDetailModels[ii].getBoxes());
            return _.chain(uniqueBoxes).flatten().uniq().value().length
        },
        getNumberOfEmailsExtracted: function () {
            if (this._entryDetailModels.length === 0) {
                if (!this._emailAddresses) return 0;
                return this._emailAddresses.length
            }
            return _.filter(this._entryDetailModels, function (entryDetailModel) {
                return entryDetailModel.isIncludedInMailMerge()
            }).length
        },
        getExtractionSettings: function () {
            return this._extractionSettings
        },
        getEntryDetailModel: function (entryIndex) {
            if (this._entryDetailModels[entryIndex]) return this._entryDetailModels[entryIndex];
            var email = this._emailAddresses[entryIndex];
            var entryDetailModel = new BB.Modules.MailMergeEntryDetailModel;
            entryDetailModel.setEntryIndex(entryIndex);
            entryDetailModel.setEmail(email);
            entryDetailModel.setBoxes(this._emailAddressToBoxListMap[email]);
            entryDetailModel.setOtherFieldObjects(this._emailAddressToRowListMap[email]);
            entryDetailModel.setParentModel(this);
            this._entryDetailModels[entryIndex] = entryDetailModel;
            return entryDetailModel
        },
        setTemplateSubject: function (subject) {
            if (this.isAnEntryBeingPreviewed()) return;
            if (this.isEntryDetailBeingEdited()) {
                this.getCurrentlyEditedEntryDetail().setOverwrittenEmailTemplateSubject(subject);
                return
            }
            this._templateSubject = subject;
            this._findReferencedFields();
            this._updateEntryDetailModels()
        },
        setTemplateBody: function (body) {
            if (this.isAnEntryBeingPreviewed()) return;
            if (this.isEntryDetailBeingEdited()) {
                this.getCurrentlyEditedEntryDetail().setOverwrittenEmailTemplateBody(body);
                return
            }
            this._templateBody = body;
            this._findReferencedFields();
            this._updateEntryDetailModels()
        },
        isEntryDetailBeingEdited: function () {
            return !!this.getCurrentlyEditedEntryDetail()
        },
        getFieldList: function () {
            if (this._pipeline) return _.map(BB.UI.getPipelineColumnList(this._pipeline, this._pipeline.getActiveSystemColumns()), function (column) {
                return column.name
            });
            if (this._csvFields) return this._csvFields
        },
        getCurrentlyEditedEntryDetail: function () {
            var currentlyEdited = _.filter(this._entryDetailModels, function (entryDetailModel) {
                return entryDetailModel.isCurrentlyEditing()
            });
            if (currentlyEdited.length > 0) return currentlyEdited[0]
        },
        getCurrentSubject: function () {
            if (this.isEntryDetailBeingEdited()) return this.getCurrentlyEditedEntryDetail().getTemplateSubject();
            if (_.isReal(this._currentlyPreviewedEntryIndex)) return this._entryDetailModels[this._currentlyPreviewedEntryIndex].getTemplateSubject();
            return this.getTemplateSubject()
        },
        getCurrentBody: function () {
            if (this.isEntryDetailBeingEdited()) return this.getCurrentlyEditedEntryDetail().getTemplateBody();
            if (_.isReal(this._currentlyPreviewedEntryIndex)) return this._entryDetailModels[this._currentlyPreviewedEntryIndex].getTemplateBody();
            return this.getTemplateBody()
        },
        getTemplateSubject: function () {
            return this._templateSubject
        },
        getTemplateBody: function () {
            return this._templateBody
        },
        getEntryDetailModels: function () {
            return this._entryDetailModels
        },
        getReferencedFields: function () {
            return this._referencedFields
        },
        getReverseColumnLookupTable: function () {
            return this._reverseColumnLookupTable
        },
        setPreviewedEntryIndex: function (entryIndex) {
            this._callDelegateFunction("previewedEntryAboutToChange");
            this._currentlyPreviewedEntryIndex = entryIndex;
            this._callDelegateFunction("previewedEntryChanged")
        },
        entryRestored: function () {
            this._callDelegateFunction("previewedEntryChanged")
        },
        markEmailSent: function (entryIndex) {
            this._entryDetailModels[entryIndex].setNotIncludedInMailMerge()
        },
        editingEntryIndexAboutToModify: function () {},
        editingEntryIndexModified: function () {
            this._callDelegateFunction("editedEntryChanged")
        },
        currentlyEditingEntryDetailChanged: function () {
            this._callDelegateFunction("editedEntryChanged")
        },
        isAnEntryBeingPreviewed: function () {
            return !this.isEntryDetailBeingEdited() && _.isReal(this._currentlyPreviewedEntryIndex)
        },
        isPixelTracked: function () {
            return this._isPixelTrackingOn
        },
        setPixelTrackingStatus: function (status) {
            this._isPixelTrackingOn = status
        },
        includedEmailsModified: function () {
            this._callDelegateFunction("includedEmailsModified")
        },
        snippetAdded: function (snippet) {
            this._usedSnippets.push(snippet)
        },
        getSnippetKeyList: function () {
            return _.map(this._usedSnippets, function (snippet) {
                return snippet.key()
            })
        },
        getMailMergeId: function () {
            if (!this._mailMergeId) this._mailMergeId = Streak.guid();
            return this._mailMergeId
        },
        isUsingCSVFile: function () {
            return !!this._csvFields
        },
        getErrors: function () {
            if (!this._entryDetailModels ||
                this._entryDetailModels.length === 0) return ["NO_EMAIL_ADDRESSES"];
            return _.chain(this._entryDetailModels).filter(function (entryDetailModel) {
                return entryDetailModel.isIncludedInMailMerge()
            }).map(function (entryDetailModel) {
                return entryDetailModel.getErrors()
            }).compact().flatten().value()
        },
        _findReferencedFields: function () {
            this._referencedFields = BB.Services.TemplateProcessor.findReferencedFields(this._pipeline, this._templateSubject, this._templateBody)
        },
        _updateEntryDetailModels: function () {
            for (var ii = 0; ii <
                this._entryDetailModels.length; ii++) this._entryDetailModels[ii].update()
        },
        _setupStartingExtractionSettings: function () {
            this._loadDefaultExtractionSettings();
            this._loadSavedExtractionSettings()
        },
        _loadDefaultExtractionSettings: function () {
            this._extractionSettings = {
                extractEmailsFrom: {
                    threads: true,
                    assignedTo: false,
                    columns: true
                },
                ignoreEmails: {
                    myself: true,
                    org: BB.Constants.EMAIL_BLACK_LIST.indexOf(BB.getUser().getDomain().toLowerCase()) === -1
                }
            }
        },
        _loadSavedExtractionSettings: function () {
            var savedExtractionSettings =
                BB.LocalSettings.get("mailMerge/extractionSettings");
            if (!savedExtractionSettings) return;
            this._updateWithSavedExtractionSetting("extractEmailsFrom", "threads", savedExtractionSettings);
            this._updateWithSavedExtractionSetting("extractEmailsFrom", "assignedTo", savedExtractionSettings);
            this._updateWithSavedExtractionSetting("extractEmailsFrom", "columns", savedExtractionSettings);
            this._updateWithSavedExtractionSetting("ignoreEmails", "myself", savedExtractionSettings);
            this._updateWithSavedExtractionSetting("ignoreEmails",
                "org", savedExtractionSettings)
        },
        _updateWithSavedExtractionSetting: function (categoryKey, settingKey, savedExtractionSettings) {
            var value;
            if (savedExtractionSettings[categoryKey])
                if (_.isReal(savedExtractionSettings[categoryKey][settingKey])) value = savedExtractionSettings[categoryKey][settingKey];
            if (_.isReal(value)) this._extractionSettings[categoryKey][settingKey] = value
        }
    });
    BB.Modules.MailMergeModel = MailMergeModel
})(Streak);
(function (Streak) {
    var Library = Streak.Library,
        $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var MailMergeController = Streak.Class.subclass({
        superclass: Library.get("BentoBox.Modules.ComposeViewControllerBase"),
        _memberVariables: [{
            name: "_stateManager",
            destroy: true
        }, {
            name: "_mailMergeBoxChooserViewController",
            destroy: true
        }, {
            name: "_mailMergeModel",
            destroy: true
        }, {
            name: "_mailMergeSenderViewController",
            destroy: true
        }, {
            name: "_clearAttachmentsModal",
            destroy: true
        }],
        _initialize: function () {
            BB.Modules.ComposeViewControllerBase.prototype._initialize.call(this);
            this._setupStateManager();
            this._setupMailMergeModel()
        },
        initialize: function (composeWindowController) {
            this._composeWindowController = composeWindowController
        },
        shouldProcessModification: function () {
            return false
        },
        getListenerType: function () {
            return null
        },
        canStartMailMerge: function () {
            return this._stateManager.canStartMailMerge()
        },
        isChoosingPipelineOrImportCSV: function () {
            return this._stateManager.isChoosingPipelineOrImportCSV()
        },
        startLinkClicked: function () {
            this._stateManager.startLinkClicked()
        },
        pipelineChosen: function (pipeline) {
            this._mailMergeModel.setPipeline(pipeline);
            this._mailMergeModel.clearChosenEmails();
            this._stateManager.pipelineChosen()
        },
        boxesChosen: function () {
            this._stateManager.boxesChosen()
        },
        loadEditTemplateState: function () {
            Gmail.unhideComposeLayer();
            if (!this._composeWindowController) Gmail.GmailComposeWindowRequester.requestNewComposeWindow();
            this._destroyBoxChooser()
        },
        mailMergeStateChanged: function () {
            this._callDelegateFunction("mailMergeStateChanged")
        },
        isWaitingForCompose: function () {
            return !this._composeWindowController && this._stateManager.isEditTemplate()
        },
        shouldShowSidebar: function () {
            return this._stateManager.shouldShowSidebar()
        },
        cancel: function () {
            this._stateManager.cancel();
            BB.Modules.MailMergeMasterController.mailMergeCancelled(this);
            this._destroyBoxChooser();
            if (this._composeWindowController) this._composeWindowController.notify("mailMergeCancelled")
        },
        doneCancelling: function () {
            if (this._composeWindowController) this._composeWindowController.unhide();
            Gmail.unhideComposeLayer()
        },
        setPreviewedEntryIndex: function (entryIndex) {
            this._mailMergeModel.setPreviewedEntryIndex(entryIndex)
        },
        getMailMergeModel: function () {
            return this._mailMergeModel
        },
        shouldNotSend: function () {
            return this.shouldShowSidebar()
        },
        sendCancelled: function () {
            if (this._mailMergeModel.getErrors().length > 0) {
                this._showErrorModal();
                return
            }
            this._stateManager.startSending()
        },
        _showErrorModal: function () {
            var errors = _.uniq(this._mailMergeModel.getErrors());
            var inner = $(document.createElement("div"));
            inner[0].innerHTML = HTML.getString("mailMergeErrors");
            var ul = $(document.createElement("ul"));
            for (var ii = 0; ii < errors.length; ii++) ul.append("<li>" +
                BB.Locale.getString("mail_merge_" + errors[ii].toLowerCase()) + "</li>");
            inner.append(ul);
            var modal = BB.Widgets.Modal.create({
                title: BB.Locale.getString("mail_merge_blocking_errors_title"),
                inner: inner,
                showCancel: false,
                confirmText: BB.Locale.getString("ok")
            });
            modal.show()
        },
        startSending: function () {
            this._composeWindowController.hide();
            this._mailMergeSenderViewController = Library.getInstance("BentoBox.Modules.MailMergeSenderViewController");
            this._mailMergeSenderViewController.setDataSource(this.getMailMergeModel());
            this._mailMergeSenderViewController.setDelegate(this);
            this._mailMergeSenderViewController.startSending()
        },
        finishedSending: function () {
            this._composeWindowController.unhide();
            this._composeWindowController.discard()
        },
        allModificationsInitialized: function () {
            if (this.shouldShowSidebar()) this._composeWindowController.notify("mailMergeActive")
        },
        sendLaterScheduled: function () {
            this._stateManager.blocked()
        },
        sendLaterCancelled: function () {
            this._stateManager.unblocked()
        },
        threadAddedToBox: function () {
            this._stateManager.blocked()
        },
        threadRemovedFromBox: function () {
            this._stateManager.unblocked()
        },
        snippetAdded: function (snippet) {
            this._mailMergeModel.snippetAdded(snippet)
        },
        pixelTrackingOn: function () {
            this._mailMergeModel.setPixelTrackingStatus(true)
        },
        pixelTrackingOff: function () {
            this._mailMergeModel.setPixelTrackingStatus(false)
        },
        includedEmailsModified: function () {
            this._callDelegateFunction("includedEmailsModified")
        },
        newAttachmentAdded: function () {
            if (!this._stateManager.isMailMergeActive()) return;
            if (this._clearAttachmentsModal) return;
            this._showClearAttachmentsModal()
        },
        _showClearAttachmentsModal: function () {
            var self = this;
            this._clearAttachmentsModal = BB.Widgets.Modal.confirm(BB.Locale.getString("mm_attachment_found_title"), BB.Locale.getString("mm_attachment_found_message"), function () {
                self._composeWindowController.clearAttachments();
                BB.Tracker.track("mail merge attachments cleared");
                self._clearAttachmentsModal = null
            }, function () {
                self.cancel();
                self._clearAttachmentsModal = null
            })
        },
        _setupStateManager: function () {
            this._stateManager = new BB.Modules.MailMergeStateManager;
            this._stateManager.setMailMergeController(this)
        },
        _setupMailMergeModel: function () {
            this._mailMergeModel = new BB.Modules.MailMergeModel;
            this._mailMergeModel.addDelegate(this)
        }
    });
    _.extend(MailMergeController.prototype, {
        loadBoxChooser: function () {
            if (!this._areWeInPipeline()) this._loadPipelineViewAndCreateBoxChooser();
            else this._createBoxChooser()
        },
        _areWeInPipeline: function () {
            return Gmail.getConversationId() === this._mailMergeModel.getPipeline().key()
        },
        _loadPipelineViewAndCreateBoxChooser: function () {
            var self =
                this;
            BB.UI.setURL(this._mailMergeModel.getPipeline().link(), function () {
                self._createBoxChooser()
            })
        },
        _createBoxChooser: function () {
            Gmail.hideComposeLayer();
            this._mailMergeBoxChooserViewController = new BB.Modules.MailMergeBoxChooserViewController;
            this._mailMergeBoxChooserViewController.setMailMergeController(this);
            this._mailMergeBoxChooserViewController.setDataSource(this._mailMergeModel)
        },
        _destroyBoxChooser: function () {
            if (!this._mailMergeBoxChooserViewController) return;
            this._mailMergeBoxChooserViewController.destroy();
            this._mailMergeBoxChooserViewController = null
        },
        updateExtractionSettingValue: function (categoryKey, settingKey, settingValue) {
            this._mailMergeModel.updateExtractionSettingValue(categoryKey, settingKey, settingValue);
            this._updateEmailExtractionFromBoxes()
        },
        updateBoxesChosen: function (boxes) {
            this._mailMergeModel.setBoxes(boxes);
            this._updateEmailExtractionFromBoxes()
        },
        _updateEmailExtractionFromBoxes: function () {
            var extractionSettings = this._mailMergeModel.getExtractionSettings();
            var boxes = this._mailMergeModel.getBoxes();
            var extracted = BB.Services.EmailAddressExtractor.extractEmailAddressesFromBoxes(extractionSettings, boxes);
            this._mailMergeModel.setEmailAddresses(extracted.emailAddresses);
            this._mailMergeModel.setEmailAddressToBoxListMap(extracted.emailAddressToBoxListMap);
            if (this._mailMergeBoxChooserViewController) this._mailMergeBoxChooserViewController.statsChanged()
        },
        updateCSVRows: function (csvRows) {
            var fields = _.keys(csvRows[0]);
            this._mailMergeModel.setCSVFields(fields);
            var extracted = BB.Services.EmailAddressExtractor.extractEmailAddressesFromCSVRows(csvRows);
            this._mailMergeModel.setEmailAddresses(extracted.emailAddresses);
            this._mailMergeModel.setEmailAddressToRowListMap(extracted.emailAddressToRowListMap);
            this._stateManager.csvUploaded()
        }
    });
    _.extend(MailMergeController.prototype, {
        getNumberOfEmailsExtracted: function () {
            return this._mailMergeModel.getNumberOfEmailsExtracted()
        },
        getEntryDetailModel: function (entryIndex) {
            return this._mailMergeModel.getEntryDetailModel(entryIndex)
        }
    });
    BB.Modules.MailMergeController = MailMergeController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox,
        _ = Streak._;
    var MailMergeMasterController = function () {
        Gmail.GmailComposeManager.registerModifierModule(this);
        this._pipelineStartedMailMergeController = null
    };
    _.extend(MailMergeMasterController.prototype, {
        GMAIL_MAX_EMAILS_OUT: 50,
        APPS_MAX_EMAILS_OUT: 200,
        DELAY_BETWEEN_EMAILS: 5 * 1E3,
        _mailMergeModel: null,
        getViewControllers: function () {
            var mailMergeController;
            if (this._pipelineStartedMailMergeController && this._pipelineStartedMailMergeController.isWaitingForCompose()) {
                mailMergeController =
                    this._pipelineStartedMailMergeController;
                this._pipelineStartedMailMergeController = null
            } else mailMergeController = new BB.Modules.MailMergeController;
            var mailMergeComposeStartLinkViewController = new BB.Modules.MailMergeComposeStartLinkViewController;
            mailMergeComposeStartLinkViewController.setDataSource(mailMergeController);
            var mailMergePipelineChooserCSVImporter = new BB.Modules.MailMergePipelineChooserCSVImporterViewController;
            mailMergePipelineChooserCSVImporter.setDelegate(mailMergeController);
            mailMergePipelineChooserCSVImporter.setDataSource(mailMergeController.getMailMergeModel());
            var mailMergeSidebarViewController = new BB.Modules.MailMergeSidebarViewController;
            mailMergeSidebarViewController.setDataSource(mailMergeController);
            mailMergeSidebarViewController.setDelegate(mailMergeController);
            var mailMergeContentManagerViewController = new BB.Modules.MailMergeContentManagerViewController;
            mailMergeContentManagerViewController.setDataSource(mailMergeController.getMailMergeModel());
            mailMergeContentManagerViewController.setDelegate(mailMergeController);
            var mailMergeInsertTagViewController =
                new BB.Modules.MailMergeInsertTagViewController;
            mailMergeInsertTagViewController.setDataSource(mailMergeController.getMailMergeModel());
            mailMergeInsertTagViewController.setDelegate(mailMergeController);
            var mailMergeStatsViewController = Streak.Library.getInstance("BentoBox.Modules.MailMergeSendStatsViewController");
            mailMergeStatsViewController.setDataSource(mailMergeController.getMailMergeModel());
            mailMergeStatsViewController.setDelegate(mailMergeController);
            mailMergeController.addDelegate(mailMergeComposeStartLinkViewController);
            mailMergeController.addDelegate(mailMergePipelineChooserCSVImporter);
            mailMergeController.addDelegate(mailMergeInsertTagViewController);
            mailMergeController.addDelegate(mailMergeContentManagerViewController);
            mailMergeController.addDelegate(mailMergeSidebarViewController);
            mailMergeController.addDelegate(mailMergeStatsViewController);
            return [mailMergeComposeStartLinkViewController, mailMergePipelineChooserCSVImporter, mailMergeSidebarViewController, mailMergeContentManagerViewController, mailMergeInsertTagViewController,
                mailMergeStatsViewController, mailMergeController]
        },
        startMailMergeFromPipelineView: function (pipeline, boxes) {
            this._pipelineStartedMailMergeController = new BB.Modules.MailMergeController;
            this._pipelineStartedMailMergeController.pipelineChosen(pipeline);
            this._pipelineStartedMailMergeController.updateBoxesChosen(boxes)
        },
        mailMergeCancelled: function (mailMergeController) {
            if (this._pipelineStartedMailMergeController === mailMergeController) this._pipelineStartedMailMergeController = null
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "mailMergeMasterControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.MailMergeMasterController = new MailMergeMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.pipelines.initialized", "data.boxes.initialized", "gmailLoaded", "htmlLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeComposeStartLinkViewController = Streak.Class.subclass({
        superclass: BB.Modules.ComposeViewControllerBase,
        _memberVariables: [{
            name: "_element",
            destroy: true
        }, {
            name: "_dataSource",
            destroy: false,
            set: true
        }],
        _initialize: function () {
            BB.Modules.ComposeViewControllerBase.prototype._initialize.call(this);
            return this
        },
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController;
            this._generateLink()
        },
        shouldProcessModification: function () {
            return this._dataSource.canStartMailMerge()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "EXTRA_RECIPIENTS"
        },
        getModificationElement: function () {
            return this._element
        },
        _generateLink: function () {
            var self = this;
            this._element = HTML.get("mm_main_button", true);
            this._element.on("click",
                function (e) {
                    self._startLinkClicked();
                    BB.Tracker.track("mail merge started", {
                        method: "to area link"
                    })
                })
        },
        _startLinkClicked: function () {
            if (this._composeWindowViewController.hasAttachments()) {
                this._askToClearAttachments();
                return
            }
            this._composeWindowViewController.notify("mailMergeActive");
            this._dataSource.startLinkClicked()
        },
        _askToClearAttachments: function () {
            var self = this;
            BB.Widgets.Modal.confirm(BB.Locale.getString("mm_attachment_found_title"), BB.Locale.getString("mm_attachment_found_message"), function () {
                self._composeWindowViewController.clearAttachments();
                self._waitForAttachmentsToClearAndNotify();
                BB.Tracker.track("mail merge attachments cleared")
            })
        },
        _waitForAttachmentsToClearAndNotify: function () {
            var self = this;
            setTimeout(function () {
                self._composeWindowViewController.notify("mailMergeActive");
                self._dataSource.startLinkClicked()
            }, 200)
        },
        mailMergeStateChanged: function () {
            this._composeWindowViewController.reloadModification(this)
        }
    });
    BB.Modules.MailMergeComposeStartLinkViewController = MailMergeComposeStartLinkViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeStateManager = function () {
        this._mailMergeController = null;
        this._stateMachine = null;
        this._setupStateMachine()
    };
    _.extend(MailMergeStateManager.prototype, {
        _setupStateMachine: function () {
            var self = this;
            this._stateMachine = new Streak.StateMachine.create({
                initial: "start",
                events: [{
                    name: "startLinkClicked",
                    from: ["start"],
                    to: "choosePipelineImportCSV"
                }, {
                    name: "blocked",
                    from: ["start"],
                    to: "currentlyBlocked"
                }, {
                    name: "unblocked",
                    from: ["currentlyBlocked"],
                    to: "start"
                }, {
                    name: "pipelineChosen",
                    from: ["choosePipelineImportCSV", "editTemplate", "start"],
                    to: "chooseBoxes"
                }, {
                    name: "boxesChosen",
                    from: ["chooseBoxes"],
                    to: "editTemplate"
                }, {
                    name: "csvUploaded",
                    from: ["choosePipelineImportCSV"],
                    to: "editTemplate"
                }, {
                    name: "startSending",
                    from: ["editTemplate"],
                    to: "sendingEmails"
                }, {
                    name: "cancel",
                    from: ["chooseBoxes", "editTemplate", "choosePipelineImportCSV"],
                    to: "start"
                }, {
                    name: "cancel",
                    from: ["sendingEmails"],
                    to: "editTemplate"
                }],
                callbacks: {
                    onchangestate: function () {
                        if (self._mailMergeController) self._mailMergeController.mailMergeStateChanged()
                    },
                    oneditTemplate: function () {
                        self._mailMergeController.loadEditTemplateState()
                    },
                    onchooseBoxes: function () {
                        self._mailMergeController.loadBoxChooser()
                    },
                    onsendingEmails: function () {
                        self._mailMergeController.startSending()
                    },
                    onaftercancel: function () {
                        self._mailMergeController.doneCancelling()
                    }
                }
            })
        },
        setMailMergeController: function (mailMergeController) {
            this._mailMergeController =
                mailMergeController
        },
        startLinkClicked: function () {
            this._stateMachine.startLinkClicked()
        },
        blocked: function () {
            this._stateMachine.blocked()
        },
        unblocked: function () {
            this._stateMachine.unblocked()
        },
        boxesChosen: function () {
            this._stateMachine.boxesChosen()
        },
        pipelineChosen: function () {
            this._stateMachine.pipelineChosen()
        },
        csvUploaded: function () {
            this._stateMachine.csvUploaded()
        },
        startSending: function () {
            this._stateMachine.startSending()
        },
        cancel: function () {
            this._stateMachine.cancel()
        },
        canStartMailMerge: function () {
            return this._stateMachine.is("start")
        },
        isChoosingPipelineOrImportCSV: function () {
            return this._stateMachine.is("choosePipelineImportCSV")
        },
        isSendingEmails: function () {
            return this._stateMachine.is("sendingEmails")
        },
        shouldShowSidebar: function () {
            return this._stateMachine.is("editTemplate")
        },
        isEditTemplate: function () {
            return this._stateMachine.is("editTemplate")
        },
        isMailMergeActive: function () {
            return !this._stateMachine.is("start") && !this._stateMachine.is("currentlyBlocked")
        },
        destroy: function () {
            this._stateMachine = null
        }
    });
    BB.Modules.MailMergeStateManager =
        MailMergeStateManager
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergePipelineChooserCSVImporterView = function () {
        Streak.ViewControllerBase.call(this);
        this._element = null;
        this._setupUIElements()
    };
    MailMergePipelineChooserCSVImporterView.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(MailMergePipelineChooserCSVImporterView.prototype, {
        _setupUIElements: function () {
            this._element =
                HTML.get("MM_ButtonArea", true);
            this._element.find(".streak__mailMerge_chooseOr").hide();
            this._element.find(".streak__mailMerge_selectedNotice").hide();
            this._element.find(".streak__mailMerge_chooseBoxes").hide()
        },
        getElement: function () {
            return this._element
        },
        setPipelineChooser: function (pipelineChooser) {
            pipelineChooser.getElement().css({
                "display": "inline-block"
            });
            this._element.find(".streak__mailMerge_pipelineChooser").prepend(pipelineChooser.getElement());
            this._element.find(".streak__mailMerge_chooseOr").show()
        },
        setChooseBoxesLink: function (chooseBoxesLink) {
            this._element.find(".streak__mailMerge_chooseBoxes").append(chooseBoxesLink.getElement());
            chooseBoxesLink.getElement().addClass("__streak_MM_chooseBoxes")
        },
        setImportCSVButton: function (importCSVButton) {
            this._element.find(".streak__mailMerge_csvInput").append(importCSVButton.getElement())
        },
        setImportCSVFileInput: function (importCSVFileInput) {
            this._element.find(".streak__mailMerge_csvInput").append(importCSVFileInput);
            importCSVFileInput.hide()
        },
        showChooseBoxesLink: function () {
            this._element.find(".streak__mailMerge_chooseBoxes").show()
        },
        showSelectedNotice: function () {
            this._element.find(".streak__mailMerge_selectedNotice").show()
        },
        hideCSVImport: function () {
            this._element.find(".streak__mailMerge_csvInput").hide();
            this._element.find(".streak__mailMerge_chooseOr").hide()
        },
        setCancelLink: function (cancelLink) {
            this._element.find(".streak__mailMerge_chooser_cancel").html(cancelLink.getElement())
        },
        destroy: function () {
            this._element.remove();
            Streak.ViewControllerBase.prototype.destroy.call(this)
        }
    });
    BB.Modules.MailMergePipelineChooserCSVImporterView =
        MailMergePipelineChooserCSVImporterView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergePipelineChooserCSVImporterViewController = Streak.Class.subclass({
        superclass: BB.Modules.ComposeViewControllerBase,
        _memberVariables: [{
            name: "_pipelineChooser",
            destroy: true
        }, {
            name: "_importCSVButton",
            destroy: true
        }, {
            name: "_importCSVFileInput",
            destroy: true
        }, {
            name: "_cancelLink",
            destroy: true
        }, {
            name: "_currentPipeline",
            destroy: false
        }, {
            name: "_dataSource",
            destroy: false,
            set: true
        }],
        _initialize: function () {
            BB.Modules.ComposeViewControllerBase.prototype._initialize.call(this);
            return this
        },
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController
        },
        shouldProcessModification: function () {
            return this._delegate.isChoosingPipelineOrImportCSV()
        },
        aboutToProcessModification: function () {
            if (!this._view) this._setupTheView()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "RECIPIENTS_OVERLAY"
        },
        getModificationHeight: function () {
            return "65px"
        },
        getModificationElement: function () {
            if (!this._view) return null;
            return this._view.getElement()
        },
        mailMergeStateChanged: function () {
            this._composeWindowViewController.reloadModification(this)
        },
        _setupView: function () {},
        _setupTheView: function () {
            this._view = new BB.Modules.MailMergePipelineChooserCSVImporterView;
            this._setupInputs()
        },
        _setupInputs: function () {
            if (BB.Data.getAllPipelines().length > 0) {
                this._setupPipelineChooser();
                this._setupChooseBoxesLink()
            }
            this._setupCSVImport();
            this._setupCancelLink()
        },
        _setupPipelineChooser: function () {
            var self = this;
            this._pipelineChooser = BB.Widgets.ButtonCustomDropdown.create({
                unselectedDisplayText: BB.Locale.getString("mm_choose_pipeline"),
                list: _.map(BB.Data.getAllPipelines(), function (_pipeline) {
                    return {
                        name: _pipeline.displayName(),
                        value: _pipeline
                    }
                }),
                trackingContext: {
                    widgetContext: "mm_pipelineChooser"
                },
                changeFunc: function (newItem) {
                    self._pipelineChosen(newItem.value)
                }
            });
            this._pipelineChooser.deselect();
            this._view.setPipelineChooser(this._pipelineChooser)
        },
        _pipelineChosen: function (pipeline) {
            this._currentPipeline = pipeline;
            this._view.hideCSVImport();
            this._view.showChooseBoxesLink();
            this._view.showSelectedNotice()
        },
        _setupChooseBoxesLink: function () {
            var self = this;
            this._chooseBoxesLink = BB.Widgets.LinkButton.create({
                text: BB.Locale.getString("mm_choose_boxes_2"),
                clickFunction: function () {
                    self._delegate.pipelineChosen(self._currentPipeline);
                    BB.Tracker.track("mail merge pipeline chosen")
                }
            });
            this._view.setChooseBoxesLink(this._chooseBoxesLink)
        },
        _setupCSVImport: function () {
            var self = this;
            this._importCSVFileInput = $('<input type="file" accept="text/csv, text/txt">');
            this._importCSVFileInput[0].addEventListener("change", this._csvUploaded.bind(this), false);
            this._view.setImportCSVFileInput(this._importCSVFileInput);
            this._importCSVButton = BB.Widgets.LinkButton.create({
                text: BB.Locale.getString("mm_upload_csv"),
                clickFunction: function (e) {
                    self._importCSVFileInput.simulateRawClick();
                    BB.Tracker.track("mail merge csv file window open")
                }
            });
            this._view.setImportCSVButton(this._importCSVButton)
        },
        _csvUploaded: function (event) {
            var self = this;
            event.stopPropagation();
            event.preventDefault();
            var files = event.target.files || event.dataTransfer.files;
            var file = files[0];
            var fileReader = new FileReader;
            fileReader.onload = function () {
                self._processCSVData(fileReader.result);
                BB.Tracker.track("mail merge csv file uploaded")
            };
            fileReader.onerror = function () {
                self._showCSVError()
            };
            fileReader.readAsText(file, "UTF-8")
        },
        _processCSVData: function (csvData) {
            var csvRows = null;
            try {
                csvRows = Streak.csvParser.parse(csvData)
            } catch (err) {
                this._showCSVError();
                return
            }
            this._delegate.updateCSVRows(csvRows)
        },
        _showCSVError: function () {
            BB.Widgets.Modal.create({
                title: BB.Locale.getString("mm_error_csv_title"),
                inner: BB.Locale.getString("mm_error_csv_message"),
                confirmText: BB.Locale.getString("ok"),
                showCancel: false
            }).show();
            BB.Tracker.track("mail merge import CSV error")
        },
        _setupCancelLink: function () {
            var self = this;
            this._cancelLink = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                text: BB.Locale.getString("cancel"),
                onFunction: function () {
                    self._delegate.cancel();
                    BB.Tracker.track("mail merge cancelled", {
                        stage: "pipeline chooser"
                    })
                }
            });
            this._view.setCancelLink(this._cancelLink)
        },
        destroy: function () {
            this._composeWindowViewController = null;
            if (this._view) this._view.destroy();
            if (this._pipelineChooser) this._pipelineChooser.destroy();
            if (this._importCSVButton) this._importCSVButton.destroy()
        }
    });
    BB.Modules.MailMergePipelineChooserCSVImporterViewController = MailMergePipelineChooserCSVImporterViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeBoxChooserView = function () {
        Streak.ViewControllerBase.call(this);
        this._yellowBar = null;
        this._innerYellowBar = null;
        this._clickBlockOverlay = null;
        this._setupYellowBar();
        this._setupClickBlockOverlay()
    };
    MailMergeBoxChooserView.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(MailMergeBoxChooserView.prototype, {
        _setupYellowBar: function () {
            var self = this;
            this._setupInnerYellowBar();
            this._yellowBar = BB.Widgets.Tour.Bar.create({
                html: this._innerYellowBar,
                "rightButtonText": BB.Locale.getString("continue_with_mail_merge"),
                "showLink": true,
                "customClasses": "__streak_MM_Chooser",
                cancelFunc: function () {
                    self._callDelegateFunction("cancelClicked")
                },
                "showLeftButton": false,
                "rightButtonFunction": function () {
                    self._callDelegateFunction("continueClicked")
                }
            });
            this._yellowBar.show()
        },
        _setupInnerYellowBar: function () {
            this._innerYellowBar =
                HTML.get("mailMergeBarHTML", true)
        },
        _setupClickBlockOverlay: function () {
            var self = this;
            this._clickBlockOverlay = BB.Widgets.Tour.Highlight.create({
                targetElement: $(".pv_container"),
                backgroundOpacity: 0,
                clickCallback: function () {
                    self._callDelegateFunction("cancelClicked")
                }
            });
            this._clickBlockOverlay.show()
        },
        setExtractionSettingsMenuButton: function (menuButton) {
            this._innerYellowBar.find(".__streak_MM_extractingFrom .__streak_buttonPosition").prepend(menuButton.getElement())
        },
        setBoxesSelectedCount: function (count) {
            this._innerYellowBar.find(".__streak_MM_boxesExtracted").html(count)
        },
        setEmailsExtractedCount: function (count) {
            this._innerYellowBar.find(".__streak_MM_emaislExtracted").html(count)
        },
        showExtractionLineSettings: function () {
            this._innerYellowBar.find(".__streak_MM_extractingFrom").show()
        },
        hideExtractionLineSettings: function () {
            this._innerYellowBar.find(".__streak_MM_extractingFrom").hide()
        },
        showSelectBoxesNotice: function () {
            this._innerYellowBar.find(".__streak_MM_extractingInstructions").show()
        },
        hideSelectBoxesNotice: function () {
            this._innerYellowBar.find(".__streak_MM_extractingInstructions").hide()
        },
        destroy: function () {
            this._yellowBar.destroy();
            this._clickBlockOverlay.destroy();
            Streak.ViewControllerBase.prototype.destroy.call(this)
        }
    });
    BB.Modules.MailMergeBoxChooserView = MailMergeBoxChooserView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeBoxChooserViewController = function () {
        Streak.ViewControllerBase.call(this);
        this._mailMergeController = null;
        this._dataSource = null;
        this._view = null;
        this._extractionSettingsMenu = null;
        this._extractionSettingsMenuButton = null;
        this._notificationBindings = [];
        this._setupTheView()
    };
    MailMergeBoxChooserViewController.prototype =
        Object.create(Streak.ViewControllerBase.prototype);
    _.extend(MailMergeBoxChooserViewController.prototype, {
        setMailMergeController: function (mailMergeController) {
            this._mailMergeController = mailMergeController
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource;
            this._setupExtractionSettingsMenu();
            this._setupExtractionSettingsMenuButton();
            this._setupNotificationBindings();
            this.statsChanged()
        },
        _setupView: function () {},
        _setupTheView: function () {
            this._view = new BB.Modules.MailMergeBoxChooserView;
            this._view.addDelegate(this)
        },
        _setupExtractionSettingsMenu: function () {
            this._extractionSettingsMenu = BB.Widgets.Menu.create();
            this._extractionSettingsMenu.addItem(BB.Locale.getString("mm_extrac_emails_from"));
            this._addExtractionSetting("extractEmailsFrom", "threads");
            this._addExtractionSetting("extractEmailsFrom", "columns");
            this._addExtractionSetting("extractEmailsFrom", "assignedTo");
            this._extractionSettingsMenu.addSeparator();
            this._extractionSettingsMenu.addItem(BB.Locale.getString("mm_ignore_emails_from"));
            this._addExtractionSetting("ignoreEmails",
                "myself");
            this._addExtractionSetting("ignoreEmails", "org")
        },
        _addExtractionSetting: function (categoryKey, settingKey) {
            var self = this;
            var settingValue = this._dataSource.getExtractionSettingValue(categoryKey, settingKey);
            var settingName = this._getExtractionSettingName(categoryKey, settingKey);
            var checkItem = this._extractionSettingsMenu.addCheckItem(settingName, function () {
                settingValue = !settingValue;
                checkItem.setCheckboxState(settingValue);
                self._mailMergeController.updateExtractionSettingValue(categoryKey, settingKey,
                    settingValue);
                self._updateExtractionSettingsMenuButton();
                BB.Tracker.track("mail merge extract setting changed", {
                    settingName: settingName,
                    settingValue: settingValue
                })
            }, settingValue)
        },
        _getExtractionSettingName: function (categoryKey, settingKey) {
            return BB.Locale.getString(extractionSettingNameKeys[categoryKey][settingKey], {
                org: BB.getUser().getDomain().capitalize()
            })
        },
        _setupExtractionSettingsMenuButton: function () {
            this._extractionSettingsMenuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "Text",
                text: this._getExtractionSettingsMenuButtonText(),
                isFixedPosition: true,
                menu: this._extractionSettingsMenu,
                preOnFunction: function () {
                    BB.Tracker.track("mail merge extract settings menu open")
                }
            });
            this._view.setExtractionSettingsMenuButton(this._extractionSettingsMenuButton)
        },
        _updateExtractionSettingsMenuButton: function () {
            this._extractionSettingsMenuButton.changeText(this._getExtractionSettingsMenuButtonText())
        },
        _getExtractionSettingsMenuButtonText: function () {
            var entriesArray = [];
            if (this._dataSource.getExtractionSettingValue("extractEmailsFrom",
                "threads")) entriesArray.push(this._getExtractionSettingName("extractEmailsFrom", "threads"));
            if (this._dataSource.getExtractionSettingValue("extractEmailsFrom", "columns")) entriesArray.push(this._getExtractionSettingName("extractEmailsFrom", "columns"));
            if (this._dataSource.getExtractionSettingValue("extractEmailsFrom", "assignedTo")) entriesArray.push(this._getExtractionSettingName("extractEmailsFrom", "assignedTo"));
            if (entriesArray.length === 0) return BB.Locale.getString("mm_none");
            else return entriesArray.join(", ")
        },
        _setupNotificationBindings: function () {
            var unbinder = NotificationCenter.addFunction({
                eventName: "pipeline.selectedBoxesChanged",
                functionToCall: this._selectedBoxesChanged,
                functionContext: this,
                filterParameters: {
                    pipelineKey: this._dataSource.getPipeline().key()
                }
            });
            this._notificationBindings.push(unbinder);
            NotificationCenter.notify({
                eventName: "disableBoxLoading",
                pipelineKey: this._dataSource.getPipeline()
            });
            this._mailMergeController.updateBoxesChosen(BB.Modules.PipelineView.getSelectedBoxes())
        },
        _selectedBoxesChanged: function (functionParameters) {
            var selectedBoxes =
                functionParameters.selectedBoxes;
            this._mailMergeController.updateBoxesChosen(selectedBoxes)
        },
        statsChanged: function () {
            var boxesSelected = this._dataSource.getNumberOfBoxesSelected();
            var emailsExtracted = this._dataSource.getNumberOfEmailsExtracted();
            this._view.setBoxesSelectedCount(boxesSelected);
            this._view.setEmailsExtractedCount(emailsExtracted);
            if (boxesSelected > 0) {
                this._view.showExtractionLineSettings();
                this._view.hideSelectBoxesNotice()
            } else {
                this._view.showSelectBoxesNotice();
                this._view.hideExtractionLineSettings()
            }
        },
        continueClicked: function () {
            this._mailMergeController.boxesChosen()
        },
        cancelClicked: function () {
            var self = this;
            BB.Widgets.Modal.create({
                title: BB.Locale.getString("mail_merge"),
                confirmText: BB.Locale.getString("continue_with_mail_merge"),
                inner: BB.Locale.getString("middle_of_mm_warning"),
                showCancel: true,
                cancelText: BB.Locale.getString("exit_mail_merge"),
                cancelFunc: function () {
                    self._mailMergeController.cancel();
                    BB.Tracker.track("mail merge cancelled", {
                        stage: "pipeline box choosing"
                    })
                },
                confirmFunc: function () {
                    $.modal.close()
                }
            }).show()
        },
        destroy: function () {
            this._view.destroy();
            this._extractionSettingsMenu.destroy();
            this._extractionSettingsMenuButton.destroy();
            for (var ii = 0; ii < this._notificationBindings.length; ii++) this._notificationBindings[ii]();
            NotificationCenter.notify({
                eventName: "enableBoxLoading",
                pipelineKey: this._dataSource.getPipeline()
            })
        }
    });
    var extractionSettingNameKeys = {
        extractEmailsFrom: {
            threads: "mm_email_threads",
            assignedTo: "mm_assigned_to",
            columns: "mm_pipeline_cols"
        },
        ignoreEmails: {
            myself: "mm_me",
            org: "mm_anyone_at"
        }
    };
    BB.Modules.MailMergeBoxChooserViewController =
        MailMergeBoxChooserViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeSidebarViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._listViewController = null;
        this._dataSource = null;
        this._delegate = null;
        this._mailMergeEntryDetailViewControllers = []
    };
    MailMergeSidebarViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(MailMergeSidebarViewController.prototype, {
        setDataSource: function (dataSource) {
            this._dataSource = dataSource
        },
        setDelegate: function (delegate) {
            this._delegate = delegate
        },
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController
        },
        aboutToProcessModification: function () {
            this._destroyEntryDetails();
            this._setupElement()
        },
        shouldProcessModification: function () {
            return this._dataSource.shouldShowSidebar()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "EXTERNAL_SIDEBAR"
        },
        getModificationElement: function () {
            if (this._listViewController && this._listViewController.getView()) return this._listViewController.getView().getElement()
        },
        getModificationTitle: function () {
            return BB.Locale.getString("mm_extracted_emails")
        },
        mailMergeStateChanged: function () {
            this._composeWindowViewController.reloadModification(this)
        },
        _setupElement: function () {
            if (!this._listViewController) {
                this._listViewController = new BB.Widgets.ListView.ListViewViewController;
                this._listViewController.setDataSource(this);
                this._listViewController.addDelegate(this)
            }
            var numberOfPeople = this._dataSource.getNumberOfEmailsExtracted();
            for (var ii = 0; ii < numberOfPeople; ii++) {
                var mailMergeEntryDetailViewController = new BB.Modules.MailMergeEntryDetailViewController(ii);
                mailMergeEntryDetailViewController.setDataSource(this._dataSource.getEntryDetailModel(ii));
                this._mailMergeEntryDetailViewControllers.push(mailMergeEntryDetailViewController)
            }
            this._listViewController.dataChanged()
        },
        numberOfSections: function () {
            return 1
        },
        sectionShouldShow: function () {
            return true
        },
        numberOfRowsForSection: function () {
            return this._mailMergeEntryDetailViewControllers.length
        },
        infoForRow: function (sectionIndex, rowIndex) {
            return {
                viewController: this._mailMergeEntryDetailViewControllers[rowIndex]
            }
        },
        dontScrollOnHighlight: function () {
            return true
        },
        rowFocused: function (rowInfo) {
            this._dataSource.setPreviewedEntryIndex(rowInfo.viewController.getEntryIndex())
        },
        rowUnfocused: function (rowInfo) {
            this._dataSource.setPreviewedEntryIndex(null)
        },
        getWrapperClass: function () {
            return "streak__mailMerge_sidebar"
        },
        rowsAreNotSelectable: function () {
            return true
        },
        dontHighlightOnDataChange: function () {
            return true
        },
        destroy: function () {
            if (this._listViewController) this._listViewController.destroy();
            this._composeWindowViewController = null;
            this._destroyEntryDetails()
        },
        _destroyEntryDetails: function () {
            if (!this._mailMergeEntryDetailViewControllers) return;
            for (var ii = 0; ii < this._mailMergeEntryDetailViewControllers.length; ii++) this._mailMergeEntryDetailViewControllers[ii].destroy();
            this._mailMergeEntryDetailViewControllers.length =
                0
        }
    });
    BB.Modules.MailMergeSidebarViewController = MailMergeSidebarViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeContentManagerViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._dataSource = null;
        this._delegate = null;
        this._subjectDebounceTimeout = null;
        this._bodyDebounceTimeout = null;
        this._updatedCompose = false
    };
    MailMergeContentManagerViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(MailMergeContentManagerViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource;
            this._dataSource.addDelegate(this)
        },
        setDelegate: function (delegate) {
            this._delegate = delegate
        },
        subjectChanged: function (subject) {
            if (this._dataSource.isAnEntryBeingPreviewed()) return;
            if (this._dataSource.isEntryDetailBeingEdited() && this._updatedCompose) return;
            clearTimeout(this._subjectDebounceTimeout);
            var self = this;
            this._subjectDebounceTimeout = setTimeout(function () {
                self._dataSource.setTemplateSubject(subject)
            }, 100)
        },
        emailBodyChanged: function (emailBody) {
            if (this._dataSource.isAnEntryBeingPreviewed()) return;
            if (this._dataSource.isEntryDetailBeingEdited() && this._updatedCompose) return;
            clearTimeout(this._bodyDebounceTimeout);
            var self = this;
            this._bodyDebounceTimeout = setTimeout(function () {
                self._dataSource.setTemplateBody(emailBody)
            }, 100)
        },
        previewedEntryAboutToChange: function () {
            this._dataSource.setTemplateSubject(this._composeWindowViewController.getSubject());
            this._dataSource.setTemplateBody(this._composeWindowViewController.getComposeBodyHTML())
        },
        previewedEntryChanged: function () {
            this._updateComposeWithRelevantContent()
        },
        editedEntryChanged: function () {
            this._updateComposeWithRelevantContent()
        },
        _updateComposeWithRelevantContent: function () {
            var subject = this._dataSource.getCurrentSubject();
            var body = this._dataSource.getCurrentBody();
            this._updatedCompose = true;
            this._composeWindowViewController.setSubject(subject);
            this._composeWindowViewController.setEmailBody(body);
            if (this._dataSource.isAnEntryBeingPreviewed()) this._composeWindowViewController.disableEditing();
            else this._composeWindowViewController.enableEditing();
            this._updatedCompose = false
        },
        destroy: function () {
            this._composeWindowViewController.enableEditing();
            this._composeWindowViewController = null
        }
    });
    BB.Modules.MailMergeContentManagerViewController = MailMergeContentManagerViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeEntryDetailModel = Streak.Class.subclass({
        superclass: Streak.UI.Delegator,
        _memberVariables: [{
            name: "_parentModel",
            destroy: false,
            set: true
        }, {
            name: "_entryIndex",
            destroy: true,
            get: true,
            set: true
        }, {
            name: "_boxes",
            destroy: false,
            get: true
        }, {
            name: "_selectedBox",
            destroy: false,
            get: true
        }, {
            name: "_contact",
            destroy: true,
            get: true
        }, {
            name: "_email",
            destroy: true,
            get: true
        }, {
            name: "_otherFieldsModel",
            destroy: true,
            get: true
        }, {
            name: "_overwrittenEmailTemplateSubject",
            destroy: false,
            get: true,
            set: true
        }, {
            name: "_overwrittenEmailTemplateBody",
            destroy: false,
            get: true,
            set: true
        }, {
            name: "_missingEmailFields",
            destroy: true,
            get: true
        }, {
            name: "_missingBoxFields",
            destroy: true,
            get: true
        }, {
            name: "_missingOtherFields",
            destroy: true,
            get: true
        }, {
            name: "_isIncludedInMailMerge",
            destroy: true,
            set: true
        }, {
            name: "_isCurrentlySelected",
            destroy: true,
            set: true,
            get: true
        }, {
            name: "_isCurrentlyEditing",
            destroy: true,
            get: true
        }, {
            name: "_isRefreshingContact",
            destroy: true,
            get: true,
            set: true
        }, {
            name: "_unbinders",
            destroy: false
        }],
        _initialize: function () {
            Streak.UI.Delegator.prototype._initialize.call(this);
            this._missingEmailFields = [];
            this._missingBoxFields = [];
            this._missingOtherFields = [];
            this._isIncludedInMailMerge = true;
            this._isCurrentlySelected = false;
            this._isCurrentlyEditing = false;
            this._isRefreshingContact = true;
            this._unbinders = [];
            return this
        },
        setEmail: function (email) {
            this._email =
                email;
            this._setupContact()
        },
        _setupContact: function () {
            this._isRefreshingContact = true;
            var self = this;
            var rawContact = BB.Contacts.getLatestContactInformation(this._email, function (contact) {
                if (contact) self._contact.update(contact);
                self._isRefreshingContact = false;
                self._delegate.refresh();
                self._bindEventsToContactModel()
            });
            this._contact = new Streak.Model(rawContact)
        },
        setBoxes: function (boxes) {
            this._boxes = boxes;
            if (!this._boxes) return;
            if (this._boxes.length === 1) this.setSelectedBox(this._boxes[0])
        },
        setOtherFieldObjects: function (otherFieldsObjects) {
            if (!this._otherFieldsModel) {
                this._otherFieldsModel =
                    new Streak.Model({});
                this._bindToOtherFieldsModel()
            }
            if (!otherFieldsObjects) return;
            for (var ii = 0; ii < otherFieldsObjects.length; ii++) this._otherFieldsModel.update(otherFieldsObjects[ii])
        },
        doneRefreshingContact: function () {
            this._isRefreshingContact = false;
            this._delegate.refresh()
        },
        setSelectedBox: function (selectedBox) {
            this._selectedBox = selectedBox;
            this._bindToBox();
            if (this._delegate) this._delegate.refresh()
        },
        needsSelectedBox: function () {
            return this._selectedBox === null && this._boxes && this._boxes.length > 1
        },
        isIncludedInMailMerge: function () {
            return this._isIncludedInMailMerge
        },
        setNotIncludedInMailMerge: function () {
            this._isIncludedInMailMerge = false;
            if (this._isCurrentlyEditing) this.setIsCurrentlyEditing(false);
            else this._delegate.refresh();
            this._parentModel.includedEmailsModified()
        },
        isCurrentlyEditing: function () {
            return this._isCurrentlyEditing
        },
        setIsCurrentlyEditing: function (value) {
            this._isCurrentlyEditing = value;
            this._delegate.refresh();
            this._parentModel.editingEntryIndexModified()
        },
        isRefreshingContact: function () {
            return this._isRefreshingContact
        },
        isFromCSV: function () {
            return false
        },
        getErrors: function () {
            var errors = [];
            if (this._boxes && this._boxes.length > 0 && !this._selectedBox) errors.push("NO_BOX_CHOSEN");
            if (this.doesHaveMissingEmailFields()) errors.push("MISSING_EMAIL_FIELDS");
            if (this.doesHaveMissingBoxFields()) errors.push("MISSING_BOX_FIELDS");
            if (this.doesHaveMissingOtherFields()) errors.push("MISSING_CSV_FIELDS");
            return errors
        },
        getMissingEmailFieldsErrorMessage: function () {
            var fieldNames = this.getMissingEmailFields();
            return BB.Locale.getString("mm_email_info_missing", {
                info: fieldNames.join(", ")
            })
        },
        getMissingBoxFieldsErrorMessage: function () {
            var fieldNames = this.getMissingBoxFields();
            return BB.Locale.getString("mm_following_fields_missing", {
                fields: fieldNames.join(", ")
            })
        },
        getMissingOtherFieldsErrorMessage: function () {
            var fieldNames = this.getMissingOtherFields();
            return BB.Locale.getString("mm_following_fields_missing", {
                fields: fieldNames.join(", ")
            })
        },
        getMoreThanOneRowOrBoxMessage: function () {
            return BB.Locale.getString(this.isFromCSV() ? "mm_more_than_one_row" : "mm_more_than_one_box")
        },
        getTemplateSubject: function () {
            if (this.isUsingCustomTemplate()) return this._overwrittenEmailTemplateSubject;
            if (this.needsSelectedBox()) return this.getMoreThanOneRowOrBoxMessage();
            return BB.Services.TemplateProcessor.getCompiledString(this._selectedBox, this._contact.getObj(), this._getOtherFieldsObject(), this._parentModel.getTemplateSubject())
        },
        getTemplateBody: function () {
            if (this.isUsingCustomTemplate()) return this._overwrittenEmailTemplateBody;
            if (this.needsSelectedBox()) return this.getMoreThanOneRowOrBoxMessage();
            return BB.Services.TemplateProcessor.getCompiledString(this._selectedBox, this._contact.getObj(),
                this._getOtherFieldsObject(), this._parentModel.getTemplateBody())
        },
        isUsingCustomTemplate: function () {
            return _.isReal(this._overwrittenEmailTemplateBody) || _.isReal(this._overwrittenEmailTemplateSubject)
        },
        restore: function () {
            this._overwrittenEmailTemplateSubject = null;
            this._overwrittenEmailTemplateBody = null;
            this._delegate.refresh();
            this._parentModel.entryRestored()
        },
        update: function () {
            this._updateFields();
            this._delegate.refresh()
        },
        doesHaveMissingEmailFields: function () {
            return !this.isUsingCustomTemplate() &&
                this._missingEmailFields.length > 0
        },
        doesHaveMissingBoxFields: function () {
            return !this.isUsingCustomTemplate() && this._missingBoxFields.length > 0
        },
        doesHaveMissingOtherFields: function () {
            return !this.isUsingCustomTemplate() && this._missingOtherFields.length > 0
        },
        getReferencedFields: function () {
            return this._parentModel.getReferencedFields()
        },
        isAbleToSetAsEditing: function () {
            return !this._parentModel.isEntryDetailBeingEdited()
        },
        _updateFields: function () {
            this._missingEmailFields.length = 0;
            this._missingBoxFields.length =
                0;
            this._missingOtherFields.length = 0;
            if (this.isUsingCustomTemplate()) return;
            this._checkReferencedEmailFields();
            this._checkReferencedBoxFields();
            this._checkReferencedOtherFields()
        },
        _checkReferencedEmailFields: function () {
            var referencedFields = this._parentModel.getReferencedFields();
            if (!referencedFields.email) return;
            for (var emailField in referencedFields.email)
                if (!this._contact.get(emailField)) this._missingEmailFields.push(emailField)
        },
        _checkReferencedBoxFields: function () {
            if (!this._selectedBox) return;
            var referencedFields = this._parentModel.getReferencedFields();
            if (!this._selectedBox || !referencedFields.box) return;
            for (var columnKey in referencedFields.box) {
                var column = referencedFields.box[columnKey];
                this._checkReferencedBoxField(column)
            }
        },
        _checkReferencedBoxField: function (column) {
            var columnValue;
            if (column.columnType === "field") columnValue = this._selectedBox.getFieldTextValue(column.value.fieldKey);
            else columnValue = this._selectedBox.getTextValue(column.value.property); if (!columnValue) this._missingBoxFields.push(column.name)
        },
        _checkReferencedOtherFields: function () {
            if (!this._otherFieldsModel) return;
            var referencedFields = this._parentModel.getReferencedFields();
            if (!referencedFields.other) return;
            for (var otherField in referencedFields.other)
                if (!this._otherFieldsModel.get(otherField)) this._missingOtherFields.push(otherField)
        },
        _bindEventsToContactModel: function () {
            var self = this;
            this._unbinders.push(this._contact.bind("change", null, function () {
                if (self.isCurrentlyEditing()) {
                    self._parentModel.currentlyEditingEntryDetailChanged();
                    self._updateFields();
                    self._delegate.refreshErrorsAndWarnings()
                }
            }))
        },
        _bindToBox: function () {
            var self = this;
            if (!this._selectedBox) return;
            this._unbinders.push(this._selectedBox.bind("change", null, function () {
                if (self.isCurrentlyEditing()) {
                    self._parentModel.currentlyEditingEntryDetailChanged();
                    self._updateFields();
                    self._delegate.refreshErrorsAndWarnings()
                }
            }))
        },
        _bindToOtherFieldsModel: function () {
            var self = this;
            if (!this._otherFieldsModel) return;
            this._unbinders.push(this._otherFieldsModel.bind("change", null, function () {
                if (self.isCurrentlyEditing()) {
                    self._parentModel.currentlyEditingEntryDetailChanged();
                    self._updateFields();
                    self._delegate.refreshErrorsAndWarnings()
                }
            }))
        },
        _getOtherFieldsObject: function () {
            if (!this._otherFieldsModel) return null;
            return this._otherFieldsModel.getObj()
        },
        destroy: function () {
            for (var ii = 0; ii < this._unbinders.length; ii++) this._unbinders[ii]();
            Streak.UI.Delegator.prototype.destroy.call(this)
        }
    });
    BB.Modules.MailMergeEntryDetailModel = MailMergeEntryDetailModel
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeEntryDetailView = function () {
        this._delegate = null;
        this._element = null;
        this._errorsAndWarningsContainer = null;
        this._setup()
    };
    _.extend(MailMergeEntryDetailView.prototype, {
        setDelegate: function (delegate) {
            this._delegate = delegate
        },
        getElement: function () {
            return this._element
        },
        hide: function () {
            this._element.hide()
        },
        setEntryTitle: function (contact) {
            var fullName = contact.get("fullName");
            var email = contact.get("email");
            var text = fullName;
            if (text) text += " &#60;" + email + "&#62;";
            else text = email;
            this._element.find(".__streak_MMContactName")[0].innerHTML = text
        },
        showBoxName: function () {
            this._element.find(".streak__mailMerge_boxName").show()
        },
        hideBoxName: function () {
            this._element.find(".streak__mailMerge_boxName").hide()
        },
        setBoxName: function (boxName) {
            this._element.find(".streak__mailMerge_boxName")[0].innerHTML = boxName
        },
        hideFieldDetails: function () {
            this._element.find(".streak__boxDetailsMM").hide()
        },
        showFieldDetails: function () {
            this._element.find(".streak__boxDetailsMM").show()
        },
        clearFieldDetails: function () {
            this._element.find(".streak__boxDetailsMM").empty()
        },
        addInputField: function (fieldName, input) {
            var fieldDiv = $(HTML.get("mm_box_detail_entry")({
                name: fieldName
            }));
            fieldDiv.find(".fieldValue").append(input.getElement());
            this._element.find(".streak__boxDetailsMM").append(fieldDiv)
        },
        setRemoveLink: function (removeLink) {
            this._element.find(".streak__mailMerge_li_removeLink").append(removeLink.getElement())
        },
        setEditLink: function (editLink) {
            this._element.find(".streak__mailMerge_li_editLink").append(editLink.getElement())
        },
        hideEditLink: function () {
            this._element.find(".streak__mailMerge_li_editLink")[0].style.display = "none"
        },
        showEditLink: function () {
            this._element.find(".streak__mailMerge_li_editLink")[0].style.display = ""
        },
        setDoneLink: function (doneLink) {
            this._element.find(".streak__mailMerge_li_doneLink").append(doneLink.getElement())
        },
        hideDoneLink: function () {
            this._element.find(".streak__mailMerge_li_doneLink")[0].style.display =
                "none"
        },
        showDoneLink: function () {
            this._element.find(".streak__mailMerge_li_doneLink")[0].style.display = ""
        },
        clearErrorsAndWarnings: function () {
            this._errorsAndWarningsContainer.empty()
        },
        showErrorsAndWarnings: function () {
            this._errorsAndWarningsContainer.show()
        },
        hideErrorsAndWarnings: function () {
            this._errorsAndWarningsContainer.hide()
        },
        addErrorMessage: function (message) {
            var messageDiv = $(HTML.get("mm_error_div")({
                msg: message
            }));
            this._errorsAndWarningsContainer.append(messageDiv)
        },
        addWarningMessage: function (message) {
            var messageDiv =
                $(HTML.get("mm_warning_div")({
                    msg: message
                }));
            this._errorsAndWarningsContainer.append(messageDiv)
        },
        showRestore: function (restoreButton) {
            var warningDiv = $(HTML.get("mm_warning_div")({
                msg: BB.Locale.getString("mm_email_modified")
            }));
            warningDiv.append(restoreButton.getElement());
            this._errorsAndWarningsContainer.append(warningDiv)
        },
        showMoreThanOneBoxError: function (menuButton, message) {
            var errorDiv = $(HTML.get("mm_more_than_one_box")({
                moreBoxMessage: message
            }));
            errorDiv.append(menuButton.getElement());
            this._errorsAndWarningsContainer.append(errorDiv)
        },
        destroy: function () {
            this._element.remove()
        }
    });
    _.extend(MailMergeEntryDetailView.prototype, {
        _setup: function () {
            this._element = HTML.get("mm_EmailLI", true);
            this._errorsAndWarningsContainer = this._element.find("._streak_liErrorsAndWarnings")
        }
    });
    BB.Modules.MailMergeEntryDetailView = MailMergeEntryDetailView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeEntryDetailViewController = function (entryIndex) {
        Streak.ViewControllerBase.call(this);
        this._view = null;
        this._dataSource = null;
        this._listViewController = null;
        this._entryIndex = entryIndex;
        this._removeLink = null;
        this._doneLink = null;
        this._editLink = null;
        this._errorsAndWarningsVisible = false;
        this._inputs = [];
        this._setupTheView()
    };
    MailMergeEntryDetailViewController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(MailMergeEntryDetailViewController.prototype, {
        getView: function () {
            return this._view
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource;
            this._dataSource.setDelegate(this);
            this.refresh()
        },
        setListViewController: function (listViewController) {
            this._listViewController = listViewController
        },
        _setupView: function () {},
        _setupTheView: function () {
            this._view = new BB.Modules.MailMergeEntryDetailView;
            this._view.setDelegate(this);
            this._setupActionLinks()
        },
        _setupActionLinks: function () {
            this._setupRemoveLink();
            this._setupEditLink();
            this._setupDoneLink()
        },
        _setupRemoveLink: function () {
            var self = this;
            this._removeLink = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                text: BB.Locale.getString("mm_remove"),
                onFunction: function () {
                    self._dataSource.setNotIncludedInMailMerge();
                    BB.Tracker.track("mail merge entry removed")
                }
            });
            this._view.setRemoveLink(this._removeLink)
        },
        _setupEditLink: function () {
            var self =
                this;
            this._editLink = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                text: BB.Locale.getString("edit").capitalize(),
                onFunction: function () {
                    if (!self._dataSource.isAbleToSetAsEditing()) return;
                    self._dataSource.setIsCurrentlyEditing(true);
                    self._listViewController.lockRowSelection();
                    BB.Tracker.track("mail merge entry editing")
                }
            });
            this._view.setEditLink(this._editLink)
        },
        _setupDoneLink: function () {
            var self = this;
            this._doneLink = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                text: BB.Locale.getString("done").capitalize(),
                onFunction: function () {
                    self._dataSource.setIsCurrentlyEditing(false);
                    self._listViewController.unlockRowSelection();
                    BB.Tracker.track("mail merge entry done editing")
                }
            });
            this._view.setDoneLink(this._doneLink)
        },
        refresh: function () {
            this._clearInputs();
            if (!this._dataSource.isIncludedInMailMerge()) {
                this._view.hide();
                return
            }
            this._view.setEntryTitle(this._dataSource.getContact());
            this._view.clearFieldDetails();
            this._view.hideFieldDetails();
            if (this._dataSource.isCurrentlyEditing()) this._renderFieldDetails();
            this._refreshActionLinks();
            this._refreshErrorsAndWarningsSection();
            if (this._dataSource.getSelectedBox() && !this._errorsAndWarningsVisible) {
                this._view.showBoxName();
                this._view.setBoxName("Box: " + this._dataSource.getSelectedBox().displayName())
            } else this._view.hideBoxName()
        },
        refreshErrorsAndWarnings: function () {
            this._refreshErrorsAndWarningsSection()
        },
        _refreshActionLinks: function () {
            this._view.hideEditLink();
            this._view.hideDoneLink();
            if (this._dataSource.isCurrentlyEditing()) {
                this._view.showDoneLink();
                return
            }
            if (!this._dataSource.needsSelectedBox()) this._view.showEditLink()
        },
        _refreshErrorsAndWarningsSection: function () {
            this._view.clearErrorsAndWarnings();
            this._view.hideErrorsAndWarnings();
            this._renderAnyErrors()
        },
        _renderAnyErrors: function () {
            var showErrorArea = false;
            if (this._dataSource.isRefreshingContact()) {
                showErrorArea = true;
                this._showRefreshingContactNotice()
            }
            if (this._dataSource.isUsingCustomTemplate()) {
                showErrorArea = true;
                this._setupRestoreButton()
            }
            if (this._dataSource.doesHaveMissingEmailFields()) {
                showErrorArea =
                    true;
                this._showMissingEmailFieldErrors()
            }
            if (this._dataSource.doesHaveMissingBoxFields()) {
                showErrorArea = true;
                this._showMissingBoxFieldErrors()
            }
            if (this._dataSource.doesHaveMissingOtherFields()) {
                showErrorArea = true;
                this._showMissingOtherFieldErrors()
            }
            if (this._dataSource.needsSelectedBox()) {
                showErrorArea = true;
                this._setupBoxPicker()
            }
            if (showErrorArea) this._view.showErrorsAndWarnings();
            this._errorsAndWarningsVisible = showErrorArea
        },
        _showRefreshingContactNotice: function () {
            this._view.addWarningMessage(BB.Locale.getString("mm_getting_contact_info"))
        },
        _setupRestoreButton: function () {
            var self = this;
            var restoreButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                text: BB.Locale.getString("mm_restore"),
                onFunction: function () {
                    self._dataSource.restore();
                    BB.Tracker.track("mail merge entry restored")
                }
            });
            this._view.showRestore(restoreButton)
        },
        _showMissingEmailFieldErrors: function () {
            this._view.addErrorMessage(this._dataSource.getMissingEmailFieldsErrorMessage())
        },
        _showMissingBoxFieldErrors: function () {
            this._view.addErrorMessage(this._dataSource.getMissingBoxFieldsErrorMessage())
        },
        _showMissingOtherFieldErrors: function () {
            this._view.addErrorMessage(this._dataSource.getMissingOtherFieldsErrorMessage())
        },
        _setupBoxPicker: function () {
            var self = this;
            var boxes = this._dataSource.getBoxes();
            var menu = BB.Widgets.Menu.create();
            _.each(boxes, function (box) {
                menu.addItem(box.displayName(), function () {
                    self._dataSource.setSelectedBox(box);
                    menuButton.off();
                    BB.Tracker.track("mail merge selected box chosen")
                })
            });
            var menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "GmailArrow",
                menu: menu,
                isFixedPosition: true,
                text: BB.Locale.getString(this._dataSource.isFromCSV() ? "mm_choose_a_row" : "mm_choose_a_box")
            });
            this._view.showMoreThanOneBoxError(menuButton, this._dataSource.getMoreThanOneRowOrBoxMessage())
        },
        _renderFieldDetails: function () {
            var referencedFields = this._dataSource.getReferencedFields();
            if (!referencedFields) return;
            this._renderEmailFields(referencedFields.email);
            this._renderBoxFields(referencedFields.box);
            this._renderOtherFields(referencedFields.other)
        },
        _renderEmailFields: function (emailFields) {
            for (var fieldKey in emailFields) this._renderEmailField(fieldKey)
        },
        _renderEmailField: function (fieldKey) {
            var input = BB.Widgets.SidebarTextarea.create({
                model: this._dataSource.getContact(),
                property: fieldKey,
                autoSave: false,
                border: "hover"
            });
            this._view.addInputField(BB.Locale.getString("mm_" + fieldKey), input);
            this._inputs.push(input);
            this._view.showFieldDetails()
        },
        _renderOtherFields: function (otherFields) {
            for (var fieldKey in otherFields) this._renderOtherField(fieldKey)
        },
        _renderOtherField: function (fieldKey) {
            var input = BB.Widgets.SidebarTextarea.create({
                model: this._dataSource.getOtherFieldsModel(),
                property: fieldKey,
                autoSave: false,
                border: "hover"
            });
            this._view.addInputField(BB.Locale.getString(fieldKey), input);
            this._inputs.push(input);
            this._view.showFieldDetails()
        },
        _renderBoxFields: function (boxFields) {
            for (var fieldKey in boxFields) this._renderBoxField(boxFields[fieldKey])
        },
        _renderBoxField: function (boxField) {
            var input;
            if (boxField.columnType === "property") input = this._getBoxPropertyInput(boxField.value.property);
            else input = this._getBoxFieldInput(boxField.value.fieldKey);
            this._view.addInputField(boxField.name,
                input);
            this._inputs.push(input);
            this._view.showFieldDetails()
        },
        _getBoxPropertyInput: function (property) {
            switch (property) {
            case "name":
                return this._getBoxNameInput();
            case "assignedToSharingEntries":
                return this._getBoxAssignedToInput();
            case "notes":
                return this._getNotesInput();
            case "stageKey":
                return this._getStageInput();
            default:
                return this._getGenericBoxPropertyInput()
            }
        },
        _getBoxNameInput: function () {
            return BB.Widgets.SmartTextbox.create({
                model: this._dataSource.getSelectedBox(),
                property: "name",
                border: "gmailHover",
                autoGrow: false,
                allowEmpty: false
            })
        },
        _getBoxAssignedToInput: function () {
            return BB.Widgets.SidebarAssignedTo.create({
                box: this._dataSource.getSelectedBox(),
                pipeline: this._dataSource.getSelectedBox().getPipeline(),
                border: "hover",
                includeNames: true
            })
        },
        _getNotesInput: function () {
            return BB.Widgets.SidebarTextarea.create({
                model: this._dataSource.getSelectedBox(),
                property: "notes",
                border: "hover"
            })
        },
        _getStageInput: function () {
            return BB.Widgets.StageButton.create({
                pipeline: this._dataSource.getSelectedBox().getPipeline(),
                box: this._dataSource.getSelectedBox(),
                trackingContext: {
                    widgetContext: "mailMergeSidebar"
                }
            })
        },
        _getGenericBoxPropertyInput: function (property) {
            return BB.Widgets.SidebarTextarea.create({
                model: this._dataSource.getSelectedBox(),
                property: property,
                border: "gmailHover"
            })
        },
        _getBoxFieldInput: function (fieldKey) {
            var pipeline = this._dataSource.getSelectedBox().getPipeline();
            var fieldType = pipeline.getField(fieldKey).get("type");
            return BB.Widgets.SmartInput.create(fieldType, {
                border: "hover",
                model: this._dataSource.getSelectedBox().getField(fieldKey),
                property: "value",
                bindTab: true,
                isSpreadsheet: false,
                includeNames: true,
                existingList: BB.UI.getFieldValues(pipeline, fieldKey)
            })
        },
        getEntryIndex: function () {
            return this._entryIndex
        },
        destroy: function () {
            this._clearInputs();
            this._view.destroy();
            this._removeLink.destroy();
            this._editLink.destroy();
            this._doneLink.destroy()
        },
        _clearInputs: function () {
            for (var ii = 0; ii < this._inputs.length; ii++) this._inputs[ii].destroy();
            this._inputs.length = 0
        }
    });
    BB.Modules.MailMergeEntryDetailViewController = MailMergeEntryDetailViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeInsertTagView = function () {
        Streak.ViewControllerBase.call(this);
        this._element = null;
        this._setupElement()
    };
    MailMergeInsertTagView.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(MailMergeInsertTagView.prototype, {
        _setupElement: function () {
            this._element = HTML.get("mm_customize_each_email",
                true)
        },
        getElement: function () {
            return this._element
        },
        setInsertTagMenuButton: function (menuButton) {
            this._element.append(menuButton.getElement())
        },
        destroy: function () {
            this._element.remove()
        }
    });
    BB.Modules.MailMergeInsertTagView = MailMergeInsertTagView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeInsertTagViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._dataSource = null;
        this._delegate = null;
        this._view = null;
        this._tagListViewController = null;
        this._tagListViewControllerDataSource = null;
        this._tagMenuButton = null
    };
    MailMergeInsertTagViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(MailMergeInsertTagViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource
        },
        setDelegate: function (delegate) {
            this._delegate = delegate
        },
        aboutToProcessModification: function () {
            this._setup()
        },
        shouldProcessModification: function () {
            return this._delegate.shouldShowSidebar()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "BOTTOM"
        },
        getModificationElement: function () {
            if (this._view) return this._view.getElement()
        },
        mailMergeStateChanged: function () {
            this._composeWindowViewController.reloadModification(this)
        },
        _setup: function () {
            this._view = new BB.Modules.MailMergeInsertTagView;
            this._setupTagMenu();
            this._setupTagMenuButton()
        },
        _setupTagMenu: function () {
            this._setupTagListViewDataSource();
            this._tagListViewController = new BB.Widgets.ListView.ListViewViewController;
            this._tagListViewController.setDataSource(this);
            this._tagListViewController.addDelegate(this);
            this._tagListViewController.dataChanged()
        },
        _setupTagListViewDataSource: function () {
            this._tagListViewControllerDataSource = [{
                sectionTitle: BB.Locale.getString("mm_from_email_addr"),
                rows: [{
                    text: BB.Locale.getString("mm_fullName"),
                    tag: "email_fullName"
                }, {
                    text: BB.Locale.getString("mm_givenName"),
                    tag: "email_givenName"
                }, {
                    text: BB.Locale.getString("mm_familyName"),
                    tag: "email_familyName"
                }, {
                    text: BB.Locale.getString("mm_email"),
                    tag: "email_email"
                }]
            }, {
                sectionTitle: BB.Locale.getString("mm_more_fields"),
                rows: []
            }];
            var fieldList =
                this._dataSource.getFieldList();
            for (var ii = 0; ii < fieldList.length; ii++) {
                var field = fieldList[ii];
                this._tagListViewControllerDataSource[1].rows.push({
                    text: field,
                    tag: "field_" + field
                })
            }
        },
        getWrapperClass: function () {
            return "J-M uEPqDe bb_menu streak__mailMerge_insertTag"
        },
        numberOfSections: function () {
            return 2
        },
        numberOfRowsForSection: function (sectionIndex) {
            return this._tagListViewControllerDataSource[sectionIndex].rows.length
        },
        sectionShouldShow: function () {
            return true
        },
        sectionTitle: function (sectionIndex) {
            return this._tagListViewControllerDataSource[sectionIndex].sectionTitle
        },
        infoForRow: function (sectionIndex, rowIndex) {
            return this._tagListViewControllerDataSource[sectionIndex].rows[rowIndex]
        },
        rowPressed: function (rowInfo) {
            var insertedText = "{{" + rowInfo.tag + "}}";
            if (this._dataSource.isEntryDetailBeingEdited()) {
                var entryDetail = this._dataSource.getCurrentlyEditedEntryDetail();
                insertedText = BB.Services.TemplateProcessor.getCompiledString(entryDetail.getSelectedBox(), entryDetail.getContact(), insertedText)
            }
            this._composeWindowViewController.addTextAtCurrentCursorPosition(insertedText);
            this._tagMenuButton.off();
            BB.Tracker.track("mail merge tag inserted")
        },
        _setupTagMenuButton: function () {
            var self = this;
            this._tagMenuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "Text",
                color: "lightblue",
                text: BB.Locale.getString("mm_insert_tmpl"),
                isFixedPosition: true,
                isBottomAligned: true,
                isRightAligned: true,
                menu: this._tagListViewController.getView(),
                preOnFunction: function () {
                    self._tagListViewController.reset();
                    BB.Tracker.track("mail merge tag menu open")
                }
            });
            this._view.setInsertTagMenuButton(this._tagMenuButton)
        },
        destroy: function () {
            if (this._view) this._view.destroy();
            if (this._tagListViewController) this._tagListViewController.destroy();
            if (this._tagMenuButton) this._tagMenuButton.destroy();
            this._composeWindowViewController = null
        }
    });
    BB.Modules.MailMergeInsertTagViewController = MailMergeInsertTagViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeSendStatsViewController = Streak.Class.subclass({
        className: "MailMergeSendStatsViewController",
        superclass: BB.Modules.ComposeViewControllerBase,
        _memberVariables: [{
            name: "_dataSource",
            destroy: false,
            set: true
        }, {
            name: "_delegate",
            destroy: false,
            set: true
        }, {
            name: "_pipelineButton",
            destroy: true
        }],
        _initialize: function () {
            BB.Modules.ComposeViewControllerBase.prototype._initialize.call(this);
            return this
        },
        _setupView: function () {},
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController
        },
        shouldProcessModification: function () {
            return this._delegate.shouldShowSidebar()
        },
        aboutToProcessModification: function () {
            if (!this._view) this._setupTheView()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "RECIPIENTS_OVERLAY"
        },
        getModificationHeight: function () {
            return "65px"
        },
        getModificationElement: function () {
            if (!this._view) return null;
            return this._view.getElement()
        },
        mailMergeStateChanged: function () {
            this._composeWindowViewController.reloadModification(this)
        },
        includedEmailsModified: function () {
            this._renderStats()
        },
        _setupTheView: function () {
            this._view = Library.getInstance("BentoBox.Modules.MailMergeSendStatsView");
            this._renderStats();
            if (this._dataSource.isUsingCSVFile()) {
                this._view.hideBoxNotice();
                return
            }
            this._setupPipelineButton();
            this._setupChooseBoxesLink()
        },
        _renderStats: function () {
            this._view.setStats(this._dataSource.getNumberOfEmailsExtracted(), this._dataSource.getNumberOfBoxesSelected())
        },
        _setupPipelineButton: function () {
            this._pipelineButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "GmailArrow",
                text: this._dataSource.getPipeline().displayName()
            });
            this._pipelineButton.disable();
            this._view.setPipelineButton(this._pipelineButton)
        },
        _setupChooseBoxesLink: function () {
            var self = this;
            this._chooseBoxesLink = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                color: "blue",
                text: BB.Locale.getString("mm_choose_boxes_2"),
                onFunction: function () {
                    self._delegate.pipelineChosen(self._dataSource.getPipeline());
                    BB.Tracker.track("mail merge choose boxes", {
                        stage: "edit template"
                    })
                }
            });
            this._view.setChooseBoxesLink(this._chooseBoxesLink)
        }
    });
    Library.set("BentoBox.Modules.MailMergeSendStatsViewController", MailMergeSendStatsViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeSendStatsView = Streak.Class.subclass({
        superclass: Streak.UI.View,
        _memberVariables: [],
        _initialize: function () {
            Streak.UI.View.prototype._initialize.call(this);
            this._setupElement();
            return this
        },
        _setupElement: function () {
            this._element = HTML.get("mailMergeSendStatsView",
                true)
        },
        setStats: function (numberOfEmails, numberOfBoxes) {
            this._element.find(".streak__mailMerge_emailAddressesStat")[0].innerHTML = BB.Locale.getString("mailMerge_emailAddress_stats", {
                number: numberOfEmails,
                pluralize: [numberOfEmails]
            });
            this._element.find(".streak__mailMerge_selectedNotice")[0].innerHTML = BB.Locale.getString("mailMerge_box_stats", {
                number: numberOfBoxes,
                pluralize: [numberOfBoxes]
            })
        },
        hideBoxNotice: function () {
            this._element.find(".streak__mailMerge_selectedNotice").hide()
        },
        setPipelineButton: function (pipelineButton) {
            this._element.find(".streak__mailMerge_pipelineButton").append(pipelineButton.getElement())
        },
        setChooseBoxesLink: function (chooseBoxesLink) {
            this._element.find(".streak__mailMerge_chooseBoxes").append(chooseBoxesLink.getElement())
        }
    });
    Library.set("BentoBox.Modules.MailMergeSendStatsView", MailMergeSendStatsView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var EMAIL_DELAY = 5 * 1E3;
    var TIME_PROCESSING_EMAIL = EMAIL_DELAY + 10 * 1E3;
    var MailMergeSenderViewController = Streak.Class.subclass({
        superclass: BB.Modules.ComposeViewControllerBase,
        _memberVariables: [{
            name: "_dataSource",
            destroy: false,
            set: true
        }],
        _initialize: function () {
            BB.Modules.ComposeViewControllerBase.prototype._initialize.call(this);
            return this
        },
        startSending: function () {
            var self = this;
            this._setupTheView();
            var emailPackages = this._generateEmailPackages();
            BB.MailHelper.sendMultipleEmails({
                emailPackages: emailPackages,
                delayBetweenEmails: EMAIL_DELAY,
                startSendingCallback: function (howManyLeft) {
                    self._emailsStartedToSend(howManyLeft)
                },
                sendingEmail: function (emailPackage) {
                    self._sendingEmail(emailPackage)
                },
                emailSentCallback: function (emailIndex, howManyLeft, timeLeft) {
                    self._emailSent(emailIndex, howManyLeft, timeLeft)
                },
                finishedSendingCallback: function () {
                    self._delegate.finishedSending()
                }
            });
            var method = this._dataSource.isUsingCSVFile() ? "csv" : "boxes";
            BB.Tracker.track("mail merge sending emails", {
                count: emailPackages.length,
                method: method
            })
        },
        cancelClicked: function () {
            this._view.hide();
            this._delegate.cancel();
            BB.MailHelper.cancelSending();
            BB.Tracker.track("mail merge cancelled", {
                stage: "sending"
            })
        },
        _setupTheView: function () {
            this._view = Library.getInstance("BentoBox.Modules.MailMergeSenderView");
            this._view.setDelegate(this)
        },
        _emailsStartedToSend: function (howManyLeft) {
            this._view.show();
            this._view.updateNumberOfEmailsSentAndLeft(0,
                howManyLeft)
        },
        _sendingEmail: function (emailPackage) {
            this._view.updateSendingTo(BB.Locale.getString("mail_merge_sending_to", {
                address: emailPackage.toAddresses[0]
            }))
        },
        _emailSent: function (emailIndex, howManyLeft, timeLeft) {
            this._dataSource.markEmailSent(emailIndex);
            this._renderStats(emailIndex, howManyLeft)
        },
        _renderStats: function (lastEmailSentIndex, howManyLeft) {
            var numberOfEmailsSent = lastEmailSentIndex + 1;
            this._view.updateNumberOfEmailsSentAndLeft(numberOfEmailsSent, numberOfEmailsSent + howManyLeft);
            this._view.updateTimeLeft(howManyLeft *
                TIME_PROCESSING_EMAIL)
        },
        _generateEmailPackages: function () {
            var self = this;
            var entryDetails = this._dataSource.getEntryDetailModels();
            return _.chain(entryDetails).filter(function (entryDetail) {
                return entryDetail.isIncludedInMailMerge()
            }).map(function (entryDetail) {
                return self._generateEmailPackage(entryDetail)
            }).value()
        },
        _generateEmailPackage: function (entryDetailModel) {
            var boxKey;
            if (entryDetailModel.getSelectedBox()) boxKey = entryDetailModel.getSelectedBox().key();
            var thePackage = {
                toAddresses: [entryDetailModel.getContact().get("email")],
                boxKey: boxKey,
                body: entryDetailModel.getTemplateBody(),
                subject: entryDetailModel.getTemplateSubject(),
                snippetKeyList: this._dataSource.getSnippetKeyList(),
                mailMergeId: this._dataSource.getMailMergeId()
            };
            if (this._dataSource.isPixelTracked()) {
                thePackage.pixelTrackingGuid = BB.PixelTrackingHTMLGenerator.getGuid();
                thePackage.body += BB.PixelTrackingHTMLGenerator.getTrackingHTML(thePackage.pixelTrackingGuid);
                thePackage.isPixelTracked = true
            }
            return thePackage
        }
    });
    Library.set("BentoBox.Modules.MailMergeSenderViewController",
        MailMergeSenderViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MailMergeSenderView = Streak.Class.subclass({
        superclass: Streak.UI.View,
        _memberVariables: [{
            name: "_innerElement",
            destroy: true
        }],
        _initialize: function () {
            Streak.UI.View.prototype._initialize.call(this);
            this._setupElement();
            return this
        },
        _setupElement: function () {
            this._innerElement =
                HTML.get("mm_ENDING", true);
            var self = this;
            this._element = BB.Widgets.Tour.Bar.create({
                html: this._innerElement,
                showRightButton: false,
                showLeftButton: false,
                showLink: true,
                cancelFunc: function () {
                    self._delegate.cancelClicked()
                }
            })
        },
        updateNumberOfEmailsSentAndLeft: function (numberOfEmailsSent, numberOfEmailsTotal) {
            this._innerElement.find(".__streakMMRemainder")[0].innerHTML = BB.Locale.getString("mailMerge_emailsLeft", {
                number: numberOfEmailsSent,
                total: numberOfEmailsTotal,
                pluralize: [numberOfEmailsSent, numberOfEmailsTotal]
            })
        },
        updateTimeLeft: function (timeLeft) {
            var seconds = parseInt(timeLeft / 1E3);
            var minutes = parseInt(seconds / 60);
            seconds = seconds - minutes * 60;
            var timeLeftString = null;
            if (minutes > 0) timeLeftString = BB.Locale.getString("mm_minutes", {
                minutes: minutes,
                seconds: seconds,
                pluralize: [minutes, seconds]
            });
            else timeLeftString = BB.Locale.getString("mm_just_seconds", {
                seconds: seconds,
                pluralize: [seconds]
            });
            this._innerElement.find(".__streakMMTimeLeft")[0].innerHTML = timeLeftString
        },
        updateSendingTo: function (sendingToString) {
            this._innerElement.find(".streak__mailMerge_sendingTo")[0].innerHTML =
                sendingToString
        },
        show: function () {
            this._element.show()
        },
        hide: function () {
            this._element.hide()
        }
    });
    Library.set("BentoBox.Modules.MailMergeSenderView", MailMergeSenderView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var trackingContext = {
        widgetContext: "headsUp"
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    var HeadsUp = {
        elements: {},
        templates: {},
        sectionList: [],
        collapsedList: [],
        sectionMap: {},
        inactive: false,
        initialized: false,
        init: function (cb) {
            var self = this;
            self.inactive = false;
            if (!self.initialized) {
                this.el = $(document.createElement("div"));
                this.el.attr("id", "headsUp");
                this.elements.collapsed = HTML.get("headsUpCollapsed", true);
                this.el.append(this.elements.collapsed);
                this.elements.collapsed.list = this.elements.collapsed.find(".sections");
                this.templates.section = HTML.get("headsUpSection");
                this.templates.row = HTML.get("headsUpRow");
                this.templates.menu = HTML.get("headsUpMenu");
                this.templates.button = HTML.get("headsUpButton");
                this.templates.collapsedSection = HTML.get("headsUpCollapsedSection");
                try {
                    this.firstRender()
                } catch (err) {}
                var throttled = _.throttle(function () {
                    if (!self.inactive) try {
                        self.render(true)
                    } catch (err) {
                        BB.logError("Error in heads up",
                            err)
                    }
                }, 2E3);
                Gmail.observe("gmailTimer", throttled, "headsUp");
                Gmail.observe("viewChanged", $.proxy(self.render, self));
                BB.bind("logged_out", function () {
                    self.inactive = true
                });
                BB.Data.getAllPipelines().bind("remove", function (pipeline) {
                    self.removeSectionsForPipeline(pipeline.key())
                })
            }
            self.initialized = true;
            if (cb) cb()
        },
        teardown: function () {
            var i;
            if (this.el) {
                this.el.detach();
                for (i = 0; i < this.sectionList.length; i++) this.sectionList[i].el.detach();
                this.sectionList.length = 0;
                for (i = 0; i < this.collapsedList.length; i++) this.collapsedList[i].el.detach();
                this.collapsedList.length = 0;
                this.elements.collapsed.hide()
            }
            this.inactive = true
        },
        reup: function () {
            this.inactive = false;
            this.firstRender()
        },
        getSettings: function () {
            return BB.getUser().getHeadsUpSections()
        },
        getSettingsAndConvertIfNecessary: function () {
            var sections = this.getSettings();
            if (sections.length > 0)
                if (!sections[0].viewKey) {
                    var newSections = [];
                    BB.UserSettings.setSetting("headsUp/sections", newSections);
                    BB.UserSettings.saveSettings();
                    return newSections
                }
            return sections
        },
        firstRender: function () {
            var i, section;
            var self = this;
            var sections = this.getSettingsAndConvertIfNecessary();
            var open = [],
                closed = [];
            for (i = 0; i < sections.length; i++) {
                section = sections[i];
                if (section.isVisible) open.push(section);
                else closed.push(section)
            }
            for (i = 0; i < open.length; i++) try {
                section = new self.section(open[i]);
                if (section && section.el) {
                    self.elements.collapsed.before(section.el);
                    self.sectionList.push(section)
                }
            } catch (err) {}
            if (closed.length === 0) this.hideCollapsed();
            else {
                this.elements.collapsed.show();
                for (i = 0; i < closed.length; i++) {
                    section = new self.collapsedSection(closed[i]);
                    if (section && section.el) {
                        self.elements.collapsed.list.find("br").before(section.el);
                        self.collapsedList.push(section)
                    }
                }
            }
            Gmail.ready(function () {
                self.render()
            })
        },
        hideCollapsed: function () {
            if (this.elements.collapsed.list.children("div").length === 0 && !Gmail.isPreviewPane()) this.elements.collapsed.hide()
        },
        collapseSection: function (section) {
            this.sectionList.removeVal(section);
            section.el.remove();
            var cSection = new this.collapsedSection(section.settings);
            this.elements.collapsed.list.prepend(cSection.el);
            this.collapsedList.unshift(cSection);
            section.settings.isVisible = false;
            this.updateSection(section.settings);
            this.elements.collapsed.show()
        },
        openSection: function (section) {
            section.el.remove();
            this.collapsedList.removeVal(section);
            var oSection = new this.section(section.settings);
            this.elements.collapsed.before(oSection.el);
            this.sectionList.push(oSection);
            oSection.settings.isVisible = true;
            this.updateSection(oSection.settings);
            this.hideCollapsed()
        },
        removeSection: function (viewKey) {
            var settings = this.getSettings();
            var setting = settings.find(function (aSetting) {
                return aSetting.viewKey ===
                    viewKey
            });
            if (setting) {
                var section = this.sectionMap[viewKey];
                if (section) {
                    section.el.remove();
                    if (setting.isVisible) this.sectionList.removeVal(section);
                    else this.collapsedList.removeVal(section)
                }
                settings.removeVal(setting);
                this.saveSections()
            }
        },
        removeSectionsForPipeline: function (pipelineKey) {
            var self = this;
            _(this.getSettings()).chain().filter(function (aSetting) {
                return aSetting.pipelineKey === pipelineKey
            }).each(function (aSetting) {
                self.removeSection(aSetting.viewKey)
            })
        },
        render: function (fromTimer) {
            if (Gmail.getLiveView() ===
                Gmail.Constants.Inbox && Gmail.isListView())
                if (this.sectionList.length + this.collapsedList.length === 0) this.el.detach();
                else {
                    if (!HeadsUp.el.isVisible()) {
                        HeadsUp.el.detach();
                        var main = Gmail.getCurrentMain();
                        if (main.isVisible()) {
                            HeadsUp.el.find(".ae4.iR").removeClass("lastHeadsUp");
                            if (Gmail.isPreviewPane()) {
                                main.find(".ae4").filter(":first").before(HeadsUp.el);
                                HeadsUp.el.find(".ae4.iR").addClass("lastHeadsUp")
                            } else if (Gmail.isTabbedInbox()) main.find(".aKh").filter(":first").before(HeadsUp.el);
                            else {
                                main.find("[gh=tl]").filter(":first").before(HeadsUp.el);
                                main.find(".aAD").filter(":first").removeClass("aAD");
                                main.find(".Wg").filter(":first").addClass("aAD")
                            }
                        } else return
                    }
                    for (var i = 0; i < HeadsUp.sectionList.length; i++)
                        if (HeadsUp.sectionList[i] && HeadsUp.sectionList[i].getIsDirty && HeadsUp.sectionList[i].getIsDirty()) HeadsUp.sectionList[i].refresh()
                } else if (!fromTimer) this.el.detach()
        },
        addSection: function (viewKey, pipelineKey) {
            var sections = this.getSettings();
            var settings = {
                viewKey: viewKey,
                pipelineKey: pipelineKey,
                isVisible: true
            };
            sections.push(settings);
            var section =
                new HeadsUp.section(settings);
            this.elements.collapsed.before(section.el);
            BB.UserSettings.setSetting("headsUp/sections", sections);
            BB.UserSettings.saveSettings();
            HeadsUp.sectionList.push(section)
        },
        collapsedSection: function (settings) {
            var section = {
                settings: settings
            };
            var pipeline = BB.Data.getPipeline(settings.pipelineKey);
            if (!pipeline) return section;
            var savedView = pipeline.getSavedView(settings.viewKey);
            var el = $(HeadsUp.templates.collapsedSection());
            el.find(".sectionTitle span").text(savedView.name);
            el.find(".sectionTitle").click(function () {
                track("expandSection");
                HeadsUp.openSection(section)
            });
            section.el = el;
            HeadsUp.sectionMap[settings.viewKey] = section;
            return section
        },
        section: function (settings) {
            var section = {
                settings: settings
            };
            var pipeline = BB.Data.getPipeline(settings.pipelineKey);
            if (!pipeline) return section;
            var savedView = pipeline.getSavedView(settings.viewKey);
            var boxes = BB.Data.getPipelineBoxes(pipeline.key());
            var adapter = new BB.UI.PipelineSpreadsheetController.impl(settings.pipelineKey, true);
            var maxVisible = settings.maxVisible || 5;
            var visible = [];
            var isVisible =
                settings.isVisible === false ? false : true;
            var hideEmpty = settings.hideEmpty || false;
            var sectionEl = $(HeadsUp.templates.section());
            var bm = BB.Widgets.ButtonMenu.create({
                customButton: HeadsUp.templates.button(),
                menuInner: HeadsUp.templates.menu(),
                css: {
                    left: "-186px",
                    width: "200px"
                }
            });
            var menu = bm.menu;
            var button = bm.button.el;
            var input = menu.find(".snapshotName");
            var isDirty = true;
            sectionEl.find(".menuArea").append(bm.el);
            sectionEl.find(".sectionTitle").click(function () {
                track("collapseSection");
                HeadsUp.collapseSection(section)
            });
            input.delayedSave({
                delay: 200,
                saveFunction: function (isEnter) {
                    if (isEnter) {
                        input.blur();
                        bm.off()
                    }
                }
            });
            input.blur(function (e) {
                if (input.val() && input.val() !== savedView.name) {
                    savedView.name = input.val();
                    pipeline.updateSavedView(savedView)
                }
            });
            BB.Keyboard.bindChordToElement(input, "escape", function () {
                input.val(savedView.name);
                input.blur();
                bm.off()
            }, true);
            input.click(function (e) {
                e.stopPropagation()
            });
            input.val(savedView.name);
            sectionEl.find(".goToPipeline").click(function (e) {
                track("pipelineLinkClicked");
                BB.UI.setURL(pipeline.link() +
                    "?" + savedView.viewKey)
            });
            menu.find("[size]").click(function (e) {
                track("changeHeadsUpSize");
                maxVisible = $(this).attr("size");
                settings.maxVisible = maxVisible;
                HeadsUp.saveSections();
                renderSizes();
                refresh()
            });
            menu.find(".hideEmpty").click(function (e) {
                track("hideWhenEmpty");
                hideEmpty = !hideEmpty;
                settings.hideEmpty = hideEmpty;
                HeadsUp.updateSection(settings);
                renderHideEmpty();
                refresh()
            });
            menu.find(".removeFromInbox").click(function (e) {
                track("removeFromInbox");
                HeadsUp.removeSection(settings.viewKey)
            });
            sectionEl.find(".menuArea .goToPipeline").easyHoverClass("aqi");
            menu.find(".J-N").easyHoverClass("J-N-JT");
            button.easyHoverClass("J-JN-M-I-JW");
            var renderHideEmpty = function () {
                menu.find(".hideEmpty").toggleClass("J-Ks-KO", hideEmpty);
                if (hideEmpty) menu.find(".hideEmpty").css({
                    paddingLeft: "20px"
                });
                else menu.find(".hideEmpty").css({
                    paddingLeft: ""
                })
            };
            var renderSizes = function () {
                menu.find("[size]").removeClass("J-Ks-KO");
                menu.find("[size=" + maxVisible + "]").addClass("J-Ks-KO")
            };
            var renderTitle = function () {
                sectionEl.find(".sectionTitle span").text(savedView.name);
                input.val(savedView.name)
            };
            var refresh = function (force) {
                if (!force && !sectionEl.isVisible()) {
                    isDirty = true;
                    return
                }
                sectionEl.find(".boxRows").empty();
                adapter.initData();
                adapter.transform(transformSettings);
                maxVisible = settings.maxVisible || 5;
                visible = [];
                _.each(adapter.dataWrapper.transformedData.groups, function (group) {
                    if (visible.length < maxVisible) _.each(adapter.dataWrapper.transformedData.lists[group].list, function (box) {
                        if (visible.length < maxVisible) {
                            var row = renderRow(box, adapter.dataWrapper.transformedData.lists[group].displayName(),
                                adapter.dataWrapper.transformedData.lists[group].color);
                            visible.push(row);
                            sectionEl.find(".boxRows").append(row)
                        } else return
                    });
                    else return
                });
                var total = _(adapter.dataWrapper.transformedData.lists).chain().values().pluck("list").flatten(true).value().length;
                sectionEl.find(".numVisible").html(visible.length);
                sectionEl.find(".numTotal").html(total);
                if (visible.length > 0) sectionEl.find(".startNum").html("1");
                else sectionEl.find(".startNum").html("0"); if (visible.length === 0 && hideEmpty) sectionEl.hide();
                else sectionEl.show();
                isDirty = false
            };
            var renderRow = function (box, group, color) {
                if (!color) color = {
                    backgroundColor: "#ddd",
                    textColor: "white"
                };
                var row = $(HeadsUp.templates.row({
                    groupcolor: color.backgroundColor,
                    textcolor: color.textColor
                }));
                var updateRowDetails = function () {
                    row.find(".title").text(box.get("name"));
                    row.find(".group").text(group);
                    row.find(".detailsText")[0].innerHTML = getDetailsText();
                    row.find(".boxDate").text(Date.ccreate(box.get("lastUpdatedTimestamp")).getGmailFormatted())
                };
                var getDetailsText = function () {
                    var dText =
                        $.cleanText(box.get("notes")).trim() || "";
                    var text = "";
                    var fields = pipeline.getFields();
                    if (savedView.columnSettings && savedView.columnSettings.columns) fields = savedView.columnSettings.columns;
                    for (var i = 0; i < fields.length; i++) {
                        text = "";
                        var tField = fields[i];
                        var fieldKey = null;
                        var type = null;
                        if (tField.fieldKey) {
                            fieldKey = tField.fieldKey;
                            text = BB.UI.getFieldKeyText(box, pipeline, fieldKey, true).escapeHTML()
                        } else if (!tField.property) {
                            fieldKey = tField.key();
                            text = BB.UI.getFieldKeyText(box, pipeline, fieldKey, true).escapeHTML()
                        } else if (tField.property && !BB.Models.Pipeline.isDefaultProperty(tField.property)) text = box.getTextValue(tField.property);
                        if (text.trim().length > 0) dText += (dText.length > 0 ? ", " : "") + text
                    }
                    return dText
                };
                row.click(function (e) {
                    track("boxLinkClicked");
                    row.trigger("boxClick");
                    e.preventDefault();
                    e.stopPropagation();
                    BB.UI.setURL(box.link())
                });
                updateRowDetails();
                box.bind("change", null, function () {
                    updateRowDetails()
                });
                box.bind("delete", null, function () {
                    row.remove()
                });
                return row
            };
            var transformSettings = {
                "groupByTransform": BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.convertSettings(savedView.settings.groupBySettings),
                "sortTransform": BB.Modules.PipelineView.ViewSettings.SortSettings.convertSettings(savedView.settings.sortSettings),
                "filterTransform": BB.Modules.PipelineView.ViewSettings.FilterSettings.convertSettings(savedView.settings.filterSettings)
            };
            renderHideEmpty();
            renderSizes();
            renderTitle();
            refresh(true);
            adapter.bind("redraw", function () {
                refresh(true)
            });
            adapter.bind("tableChange", refresh);
            pipeline.bind("groupColorsChanged", null, function () {
                refresh(true)
            });
            pipeline.bind("stageChange", null, refresh);
            pipeline.bind("savedViewChanged",
                settings.viewKey, function () {
                    savedView = pipeline.getSavedView(settings.viewKey);
                    transformSettings = {
                        "groupByTransform": BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.convertSettings(savedView.settings.groupBySettings),
                        "sortTransform": BB.Modules.PipelineView.ViewSettings.SortSettings.convertSettings(savedView.settings.sortSettings),
                        "filterTransform": BB.Modules.PipelineView.ViewSettings.FilterSettings.convertSettings(savedView.settings.filterSettings)
                    };
                    renderTitle();
                    refresh(true)
                });
            section.el = sectionEl;
            section.refresh = refresh;
            section.getIsDirty = function () {
                return isDirty
            };
            HeadsUp.sectionMap[settings.viewKey] = section;
            return section
        },
        updateSection: function (newSectionSettings) {
            var sections = this.getSettings();
            var indexOf = _.indexOfPlus(sections, function (sectionSettings) {
                return sectionSettings.viewKey === newSectionSettings.viewKey
            });
            sections[indexOf] = newSectionSettings;
            BB.UserSettings.setSetting("headsUp/sections", sections);
            BB.UserSettings.saveSettings()
        },
        saveSections: function () {
            BB.getUser().saveHeadsUpSections();
            this.render()
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "headsUpInitialized",
        functionToCall: HeadsUp.init,
        functionContext: HeadsUp,
        dependentFunctionKeys: ["gmailLoaded", "data.pipelines.initialized", "data.boxes.initialized", "htmlLoaded"]
    });
    BB.Modules.HeadsUp = HeadsUp
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        StateMachine = Streak.StateMachine,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var LeftLink = {
        el: null,
        previousView: null,
        previousLink: null,
        sm: null,
        isOpen: false,
        isOn: false,
        arePipelinesHidden: false,
        pipelineMap: {},
        pipelineList: [],
        inactive: false,
        initialized: false,
        trackingContext: {
            widgetContext: "leftLink"
        },
        init: function (cb) {
            var self = this;
            self.inactive = false;
            if (!self.initialized) {
                this.templates = {};
                this.templates.manageItem =
                    HTML.get("leftLinkManageItem");
                this.templates.linkItem = HTML.get("leftLinkLinkItem");
                this.el = HTML.get("leftLinkWrapper", true);
                this.link = this.el.find(".linkItem");
                this.elements = {};
                this.elements.modal = HTML.get("leftLinkModal", true);
                this.initActions();
                this.setupPipelineMenu();
                this.setupSavedViewsMenu();
                Gmail.observe("viewChanged", $.proxy(self.changeState, self));
                BB.bind("logged_out", function () {
                    self.inactive = true
                });
                this.newModal = BB.Widgets.NewPipelineModal.create({
                    title: BB.FirstRun.getStage() === 1 ? BB.Locale.getString("left_link_setup_first") : BB.Locale.getString("left_link_make_new"),
                    pipelineSavedCallback: function (pipeline) {
                        BB.UI.setURL(pipeline.link())
                    }
                });
                this.el.find(".new, .newPipeline").hide();
                this.setupStateMachine()
            }
            if (cb) cb()
        },
        initializeLoggedOut: function (callback) {
            this.el.detach();
            if (callback) callback()
        },
        initializeLoggedIn: function (callback) {
            this.attachLink();
            if (callback) callback()
        },
        initializePipelineLoading: function (callback) {
            var self = this;
            this.attachLink();
            this.el.find(".new, .newPipeline").show();
            this.isOpen = BB.UserSettings.getSetting("leftLink/open");
            if (this.isOpen === false) this.close();
            else this.open();
            var delayedLoadPipelines = _.delayed(function () {
                self.loadPipelines()
            }, 300);
            BB.Data.getAllPipelines().bind("collectionChange", delayedLoadPipelines);
            BB.Data.getAllPipelines().bind("modelChange", function (pipeline, property) {
                if (property === pipeline.keyName) delayedLoadPipelines()
            });
            BB.Data.getAllPipelines().bind("hiddenSettingToggled", function () {
                delayedLoadPipelines()
            });
            BB.UserSettings.bind("refresh", delayedLoadPipelines);
            Gmail.addTimerObserver(function () {
                self.attachLink();
                if (self.sm.is("bb")) {
                    if (Gmail.getActiveViewLink().filter(":not(.linkItemInner)").length > 0) self.previousLink = Gmail.getActiveViewLink().filter(":not(.linkItemInner)");
                    self.previousLink.removeClass("nZ");
                    self.previousLink.parent().removeClass("fy1Lpf ain")
                }
            }, 1E3);
            this.loadPipelines();
            if (callback) callback()
        },
        teardown: function () {
            if (this.el) {
                this.el.detach();
                this.el.find(".linkList .pipeline").remove();
                this.pipelineMap = {}
            }
            this.inactive = true
        },
        reup: function () {
            this.inactive = false;
            this.loadPipelines()
        },
        setupStateMachine: function () {
            var self =
                this;
            var timer = null;
            this.sm = new StateMachine.create({
                initial: "start",
                events: [{
                    name: "gmail",
                    from: ["start", "g1", "g2", "bb"],
                    to: "g1"
                }, {
                    name: "bento",
                    from: ["g1", "g2", "bb"],
                    to: "bb"
                }],
                callbacks: {
                    ongmail: function (event, from, to) {
                        self.deactivateLink();
                        if (self.previousView == Gmail.view);
                        self.previousView = Gmail.view;
                        self.previousLink = Gmail.getActiveViewLink()
                    },
                    onbento: function (event, from, to) {
                        self.activateLink()
                    }
                }
            })
        },
        initActions: function () {
            var self = this;
            this.link.find(".listToggle").easyHoverClass("NQ").click(function (e) {
                if (BB.FirstRun.getStage() ==
                    1) self.newPipelineShow();
                else {
                    if (self.isOpen) {
                        self.track("showPipelines");
                        self.close()
                    } else {
                        self.track("hidePipelines");
                        BB.Data.getAllPipelines().refresh();
                        self.open()
                    }
                    BB.UserSettings.setSetting("leftLink/open", self.isOpen);
                    BB.UserSettings.save()
                }
            });
            this.el.find(".new, .newPipeline").click(function (e) {
                self.track("newPipelineClicked");
                e.preventDefault();
                e.stopPropagation();
                self.newPipelineShow()
            });
            var hiddenOpen = false;
            this.el.find(".streak__hiddenPipelines [role=button]").click(function (e) {
                hiddenOpen = !hiddenOpen;
                if (hiddenOpen) {
                    self.el.find(".hiddenLinkList").show();
                    self.el.find(".streak__hiddenPipelines [role=button]").addClass("air")
                } else {
                    self.el.find(".hiddenLinkList").hide();
                    self.el.find(".streak__hiddenPipelines [role=button]").removeClass("air")
                }
            })
        },
        initKeyboard: function () {
            var self = this
        },
        open: function () {
            this.isOpen = true;
            this.el.find(".listToggle .expando").removeClass("aii").addClass("aih");
            this.el.find(".pipeline").show();
            this.el.find(".streak__savedViewsHolder.streak__notHidden").show();
            this.el.find(".streak__hiddenPipelinesWrapper").show()
        },
        close: function () {
            this.isOpen = false;
            this.el.find(".listToggle .expando").removeClass("aih").addClass("aii");
            this.el.find(".pipeline").hide();
            this.el.find(".streak__savedViewsHolder").hide();
            this.el.find(".streak__hiddenPipelinesWrapper").hide()
        },
        setupPipelineMenu: function () {
            var self = this;
            var pipelineMenuElement = LeftLink.PipelineMenu.getElement();
            pipelineMenuElement.bodyCloseAndStop({
                closeFunction: function () {
                    pipelineMenuElement.hide();
                    var currentPipeline =
                        self.PipelineMenu.getCurrentPipeline();
                    if (!currentPipeline || currentPipeline.isDeleted()) return;
                    var pipelineLinkItem = self.pipelineMap[currentPipeline.key()].listEl;
                    pipelineLinkItem.find(".TO").trigger("unhold")
                },
                body: Gmail.elements.body
            });
            Gmail.elements.body.append(pipelineMenuElement);
            pipelineMenuElement.hide()
        },
        setupSavedViewsMenu: function () {
            var self = this;
            var menuElement = LeftLink.SavedViewsMenu.getElement();
            menuElement.bodyCloseAndStop({
                closeFunction: function () {
                    menuElement.hide()
                },
                body: Gmail.elements.body
            });
            Gmail.elements.body.append(menuElement);
            menuElement.hide()
        },
        loadPipelines: function () {
            var self = this;
            this.arePipelinesHidden = false;
            this.el.find(".linkList").empty();
            this.el.find(".hiddenLinkList").empty();
            this.pipelineMap = {};
            this.pipelineList.length = 0;
            var pipes = BB.Data.getAllPipelines();
            if (pipes.length > 0) {
                this._renderSortedVisiblePipelines();
                this._renderHiddenPipelines()
            }
            if (this.arePipelinesHidden) this.el.find(".streak__hiddenPipelines").show();
            else this.el.find(".streak__hiddenPipelines").hide()
        },
        _renderSortedVisiblePipelines: function () {
            var self = this;
            var pipelines = BB.UI.getSortedVisiblePipelines();
            _.each(pipelines, function (pipeline) {
                self.renderPipeline(pipeline)
            })
        },
        _renderHiddenPipelines: function () {
            var self = this;
            var pipelines = BB.Data.getAllPipelines();
            _.chain(pipelines).filter(function (pipeline) {
                return pipeline.isHidden()
            }).sortBy(function (pipeline) {
                return pipeline.displayName()
            }).each(function (pipeline) {
                self.renderPipeline(pipeline);
                self.arePipelinesHidden = true
            })
        },
        renderPipeline: function (pipeline) {
            var self =
                this;
            var listEl = this.renderLeftLinkPipelineItem(pipeline);
            var key = pipeline.key();
            pipeline.bind("delete", null, function () {
                if (key === Gmail.getConversationId()) BB.UI.setURL("inbox")
            }, "leftLink");
            this.pipelineMap[pipeline.key()] = {
                listEl: listEl
            };
            if (!pipeline.isHidden()) this.pipelineList.push(pipeline.key())
        },
        renderLeftLinkPipelineItem: function (pipeline) {
            var self = this;
            var color = pipeline.getColor();
            var el = $(document.createElement("div"));
            el[0].setAttribute("class", "aim linkItem pipeline");
            el[0].innerHTML =
                self.templates.linkItem({
                    name: pipeline.displayName().escapeHTML(),
                    backgroundcolor: color.backgroundColor,
                    textcolor: color.textColor
                });
            if (pipeline.isDefaultColor()) el.find(".pM").addClass("aj0");
            el.find(".TO").easyHoverClass("NQ");
            el.find(".TO").click(function () {
                self.track("pipelineLinkClicked");
                BB.UI.setURL(pipeline.link() + "?clear")
            });
            el.find(".menuButton").click(function (e) {
                self._showPipelineMenu(pipeline, el.find(".menuButton"));
                e.stopPropagation()
            });
            el[0].oncontextmenu = function () {
                self.track("showPipelineMenu", {
                    action: "rightClick"
                });
                self._showPipelineMenu(pipeline, el.find(".menuButton"));
                return false
            };
            if (this.isOpen === false) el.hide();
            var savedViewsHolder = $(document.createElement("div"));
            savedViewsHolder.addClass("streak__savedViewsHolder");
            if (pipeline.isHidden()) {
                self.el.find(".hiddenLinkList").append(el);
                self.el.find(".hiddenLinkList").append(savedViewsHolder)
            } else {
                self.el.find(".linkList").append(el);
                self.el.find(".linkList").append(savedViewsHolder)
            }
            var updateSavedViewsDisplay = function () {
                savedViewsHolder.empty();
                var savedViews = _.sortBy(pipeline.getSavedViews(), "name");
                if (savedViews.length > 0) {
                    var isOpen = BB.LocalSettings.get("leftLink/savedViewCollapseState/" + pipeline.key());
                    _.each(savedViews, function (savedView) {
                        var savedViewLinkItem = self.renderSavedView(pipeline, savedView);
                        savedViewsHolder.append(savedViewLinkItem)
                    });
                    var renderViews = function () {
                        if (isOpen === false || self.isOpen === false) {
                            el.find(".expando").removeClass("aih").addClass("aii");
                            savedViewsHolder.removeClass("streak__notHidden");
                            savedViewsHolder.hide()
                        } else {
                            el.find(".expando").removeClass("aii").addClass("aih");
                            savedViewsHolder.addClass("streak__notHidden");
                            savedViewsHolder.show()
                        }
                    };
                    el.find(".expando").click(function (e) {
                        BB.LocalSettings.set("leftLink/savedViewCollapseState/" + pipeline.key(), !BB.LocalSettings.get("leftLink/savedViewCollapseState/" + pipeline.key()));
                        BB.LocalSettings.save();
                        isOpen = BB.LocalSettings.get("leftLink/savedViewCollapseState/" + pipeline.key());
                        renderViews();
                        e.stopPropagation()
                    });
                    renderViews();
                    if (isOpen === false || self.isOpen === false) savedViewsHolder.hide();
                    else savedViewsHolder.show()
                } else {
                    el.find(".expando").hide();
                    savedViewsHolder.hide()
                }
            };
            updateSavedViewsDisplay();
            pipeline.bind("savedViewsChanged", null, updateSavedViewsDisplay, "leftLink");
            pipeline.bind("set", "name", function () {
                el.find(".name")[0].innerHTML = pipeline.displayName()
            });
            return el
        },
        _showPipelineMenu: function (pipeline, menuAnchor) {
            this.PipelineMenu.setCurrentPipeline(pipeline, this.pipelineList);
            var pipelineMenuElement = this.PipelineMenu.getElement();
            pipelineMenuElement.css({
                position: "fixed",
                left: menuAnchor.offset().left,
                "top": menuAnchor.offset().top +
                    menuAnchor.outerHeight() + "px"
            });
            pipelineMenuElement.show();
            pipelineMenuElement.containByScreen(menuAnchor);
            var pipelineLinkItem = this.pipelineMap[pipeline.key()].listEl;
            pipelineLinkItem.find(".TO").trigger("hold")
        },
        renderSavedView: function (pipeline, savedView) {
            var self = this;
            var color = pipeline.getColor();
            var el = $(document.createElement("div"));
            el[0].setAttribute("class", "aim linkItem pipeline");
            el[0].innerHTML = self.templates.linkItem({
                name: savedView.name,
                backgroundcolor: color.backgroundColor,
                textcolor: color.textColor
            });
            el.find(".pM").addClass("aj0");
            el.find(".expando").remove();
            el.find(".menuButton").click(function (e) {
                e.stopPropagation();
                self._showSavedViewMenu(pipeline, savedView, el.find(".menuButton"))
            });
            el[0].oncontextmenu = function () {
                self.track("showSavedViewMenu", {
                    action: "rightClick"
                });
                self._showSavedViewMenu(pipeline, savedView, el.find(".menuButton"));
                return false
            };
            el.find(".TO").easyHoverClass("NQ").click(function () {
                self.track("activateSavedView");
                BB.UI.setURL(pipeline.link() + "?" + savedView.viewKey)
            });
            return el
        },
        _showSavedViewMenu: function (pipeline, savedView, menuAnchor) {
            this.SavedViewsMenu.setCurrentPipelineAndSavedView(pipeline, savedView);
            var menuElement = this.SavedViewsMenu.getElement();
            menuElement.css({
                position: "fixed",
                left: menuAnchor.offset().left,
                "top": menuAnchor.offset().top + menuAnchor.outerHeight() + "px"
            });
            menuElement.show();
            menuElement.containByScreen(menuAnchor)
        },
        changeState: function () {
            if (BB.UI.isBentoBoxView()) this.sm.bento();
            else this.sm.gmail()
        },
        attachLink: function () {
            if (this.el && !this.el.isVisible() && !this.inactive) {
                this.el.detach();
                var leftBarLinks = Gmail.getLeftbarLinks();
                if (leftBarLinks) {
                    leftBarLinks.parent().find(".n3 div:first").after(this.el);
                    this.link.append(this.elements.menu)
                }
            }
        },
        activateLink: function () {
            if (this.isOpen) {
                this.deactivateLink();
                var key = Gmail.getConversationId();
                var type = Gmail.view;
                var aModel = null;
                switch (type) {
                case "pipeline":
                    aModel = BB.Data.getPipeline(key);
                    break;
                case "box":
                    aModel = BB.Data.getBox(key);
                    if (aModel) aModel = aModel.getPipeline();
                    break;
                case "thread":
                    aModel = BB.Data.getGmailThread(key,
                        null, true);
                    if (aModel) {
                        aModel = BB.Data.getBox(aModel.get("caseKey"));
                        if (aModel) aModel = aModel.getPipeline()
                    }
                    break
                }
                if (aModel) {
                    var el = this.pipelineMap[aModel.key()].listEl;
                    el.addClass("ain active");
                    el.find(".TO").addClass("nZ")
                }
            } else {
                this.link.addClass("ain active");
                this.link.find(".TO").addClass("nZ")
            }
        },
        deactivateLink: function () {
            this.el.find(".linkItem").removeClass("ain active");
            this.el.find(".linkItem .TO").removeClass("nZ")
        },
        newPipelineShow: function () {
            if (BB.FirstRun.getStage() == 1) this.newModal.show({
                subHeadingText: "%left_link_new_modal_text1%",
                cancelText: "%left_link_add_later%"
            });
            else this.newModal.show({
                subHeadingText: "%left_link_new_modal_text2%",
                cancelText: "%modal_done%"
            })
        },
        currentUserOwnsPipeline: function (pipeline) {
            return pipeline.get("creatorKey") === BB.getUser().key()
        },
        track: function (event, prop) {
            BB.Tracker.trackStreakActive(this.trackingContext, prop, {
                eventName: event
            })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "leftLinkInitialized",
        functionToCall: LeftLink.init,
        functionContext: LeftLink,
        dependentFunctionKeys: ["gmailLoaded",
            "htmlLoaded", "leftLink.pipelineMenuInitialized", "leftLink.savedViewsMenuInitialized", "newPipelineModalInitialized"
        ]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "leftLink.initializeLoggedOut",
        functionToCall: LeftLink.initializeLoggedOut,
        functionContext: LeftLink,
        dependentFunctionKeys: ["leftLinkInitialized", "userLoggedOut"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "leftLink.initializeLoggedIn",
        functionToCall: LeftLink.initializeLoggedIn,
        functionContext: LeftLink,
        dependentFunctionKeys: ["leftLinkInitialized",
            "userLoggedIn"
        ]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "leftLink.initializePipelineLoading",
        functionToCall: LeftLink.initializePipelineLoading,
        functionContext: LeftLink,
        dependentFunctionKeys: ["leftLinkInitialized", "data.pipelines.initialized", "data.boxes.initialized", "pipelineViewInitialized", "userSettingsInitialized", "enabledFeaturesControllerInitialized"]
    });
    BB.Modules.LeftLink = LeftLink
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        APIRequester = Streak.APIRequester,
        Requester = Streak.Requester,
        Locale = Streak.Locale,
        BB = Streak.BentoBox;
    var LabelIndicators = {
        init: function (callback) {
            this._isTornDown = false;
            Gmail.InboxManipulator.addDataSource(this);
            if (callback) callback()
        },
        teardown: function () {
            this._isTornDown = true
        },
        reup: function () {
            this._isTornDown = false
        },
        getRowManipulation: function (threadObject) {
            if (this._isTornDown) return;
            var threadInfo = threadObject.get("threadInfo");
            if (!threadInfo) return;
            var box = threadInfo.get("box");
            if (box && box.getPipeline && box.getPipeline()) return new LabelIndicatorRowManipulation(box)
        }
    };
    LabelIndicatorRowManipulation = function (box) {
        Gmail.InboxManipulator.InboxRowManipulationBase.call(this);
        this._box = box;
        this._pipeline = box.getPipeline();
        this._element = null;
        this._setupElement()
    };
    LabelIndicatorRowManipulation.prototype = Object.create(Gmail.InboxManipulator.InboxRowManipulationBase.prototype);
    _.extend(LabelIndicatorRowManipulation.prototype, {
        _setupElement: function () {
            var color =
                this._getTagColor();
            this._element = Gmail.widgets.getLabelTag(this._pipeline.displayName(), color.backgroundColor, color.textColor);
            this._element.addClass("bentoBoxRow");
            this._element.find(".at").prepend('<div style="background-color: ' + color.textColor + ';" class="maskedIcon"></div>');
            this._element[0].setAttribute("data-tooltip", this._box.displayName() + " - " + this._box.getStageName() + " - " + this._pipeline.displayName())
        },
        _getTagColor: function () {
            var color = BB.UserSettings.get("pipeline/" + this._pipeline.key() +
                "/uiSettings/indicator/color");
            if (!color) color = {
                backgroundColor: "rgb(255, 173, 71)",
                textColor: "rgb(0, 0, 0)"
            };
            return color
        },
        getManipulationType: function () {
            return "PREPEND_ELEMENT"
        },
        getColumnName: function () {
            return "LABELS"
        },
        getElement: function () {
            return this._element
        },
        undo: function () {
            if (this._element) this._element.remove()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "labelIndicatorsInitialized",
        functionToCall: LabelIndicators.init,
        functionContext: LabelIndicators,
        dependentFunctionKeys: ["inboxManipulatorInitialized",
            "threadInfoController.boxesAndPipelinesReady"
        ]
    });
    BB.Modules.LabelIndicators = LabelIndicators
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        APIRequester = Streak.APIRequester,
        Requester = Streak.Requester,
        Locale = Streak.Locale,
        BB = Streak.BentoBox;
    var self = PixelTrackerIndicators = {
        init: function (callback) {
            if (!BB.Services.PixelTrackingLimiter.isTrackingEnabled()) {
                if (callback) callback();
                return
            }
            Gmail.InboxManipulator.addDataSource(self);
            this._isTornDown = false;
            if (callback) callback()
        },
        teardown: function () {
            this._isTornDown = true
        },
        reup: function () {
            this._isTornDown = false
        },
        getRowManipulation: function (threadObject,
            rowObject) {
            if (_isRecentViewsPage()) return;
            if (this._isTornDown) return;
            var threadInfo = threadObject.get("threadInfo");
            if (!threadInfo) return;
            var indicatorObject = threadInfo.get("listTrackedThread");
            if (!indicatorObject) return;
            return new PixelTrackerIndicatorRowManipulation(indicatorObject, threadObject, rowObject)
        }
    };
    var CONSTANTS = {
        URL_KEY: "label%3Aall+before%3A5000%2F01%2F01"
    };

    function _isRecentViewsPage() {
        return Gmail.isListView() && location.hash.indexOf(CONSTANTS.URL_KEY) > -1
    }
    PixelTrackerIndicatorRowManipulation =
        function (indicatorObject, thread, rowObject) {
            Gmail.InboxManipulator.InboxRowManipulationBase.call(this);
            this._indicatorObject = indicatorObject;
            this._thread = thread;
            this._rowObject = rowObject;
            this._element = null;
            this._setupElement()
    };
    PixelTrackerIndicatorRowManipulation.prototype = Object.create(Gmail.InboxManipulator.InboxRowManipulationBase.prototype);
    _.extend(PixelTrackerIndicatorRowManipulation.prototype, {
        _setupElement: function () {
            if (!this._rowObject || !this._rowObject.starHolder) return;
            var tag = $("<span class='as ar streak__pt_eye_indicator'>   </span>");
            if (this._indicatorObject.totalViews > 0) {
                tag.addClass("streak__pt_eye_indicator_viewed");
                if (this._isLastViewDateRecent(this._indicatorObject.newestViewDate)) tag.addClass("streak__pt_eye_indicator_viewedRecently")
            } else tag.removeClass("streak__pt_eye_indicator_viewed"); if (this._rowObject.type === "vertical") {
                tag.addClass("streak__pt_eye_indicator_verticalPreviewPane");
                this._rowObject.starHolder.addClass("streak__pt_eye_holder")
            } else if (this._doesRowHaveAttachment()) tag.addClass("streak__pt_eye_indicator_withAttachment");
            tag[0].setAttribute("data-tooltip", this._getViewCountString(this._indicatorObject.totalViews));
            this._element = tag
        },
        _isLastViewDateRecent: function (newestViewDate) {
            var viewDate = Streak.Date.create(newestViewDate);
            if (viewDate)
                if (viewDate.minutesAgo() < 2) return true;
            return false
        },
        _doesRowHaveAttachment: function () {
            return this._rowObject.attachmentsContainer.find("img").length > 0
        },
        _getViewCountString: function (totalViews) {
            return BB.Locale.getString("pixel_track_view_count_tooltip", {
                number: totalViews,
                pluralize: [totalViews]
            })
        },
        getManipulationType: function () {
            return "PREPEND_ELEMENT"
        },
        getColumnName: function () {
            var columnName = "ATTACHMENTS";
            if (this._rowObject.type === "vertical") columnName = "STAR";
            return columnName
        },
        getElement: function () {
            return this._element
        },
        undo: function () {
            if (this._element) this._element.remove()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerIndicatorsInitialized",
        functionToCall: PixelTrackerIndicators.init,
        functionContext: PixelTrackerIndicators,
        dependentFunctionKeys: ["inboxManipulatorInitialized",
            "threadsInitialized", "htmlLoaded", "userLoggedIn", "pixelTrackingLimiterInitialized"
        ]
    });
    BB.Modules.PixelTrackerIndicators = PixelTrackerIndicators
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var NewBackButton = {
        initialized: false,
        isPrevStreakView: false,
        init: function (cb) {
            var self = this;
            self.isPrevStreakView = Streak.BentoBox.UI.isBentoBoxView();
            if (!self.initialized) Gmail.observe("viewChanged", function () {
                if (self.isPrevStreakView) {
                    if (Gmail.isGmailView() && Gmail.isConversation()) self.render()
                } else;
                self.isPrevStreakView = Streak.BentoBox.UI.isBentoBoxView()
            });
            self.initialized = true;
            if (cb) cb()
        },
        render: function () {
            if (Gmail.getCurrentMainContainer().find("[gh=tm] .fake").length ===
                0) {
                var current = Gmail.getCurrentMainContainer().find("[gh=tm] [role=button]:first").parent();
                var fake = $($(document.createElement("div")).append(current.clone(false)).remove().html());
                fake.addClass("fake");
                fake.find("[role=button]").removeAttr("act");
                current.after(fake);
                current.hide();
                fake.click(function (e) {
                    BB.UI.setURL(BB.UI.fullViewHistory.last(2).first())
                })
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "newBackButtonInitialized",
        functionToCall: NewBackButton.init,
        functionContext: NewBackButton,
        dependentFunctionKeys: ["gmailLoaded"]
    });
    BB.Modules.NewBackButton = NewBackButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var OverridableHTML = {
        defaults: {
            Locale: Streak.Locale,
            fileName: null
        },
        create: function (o) {
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        }
    };
    OverridableHTML.impl = function (o) {
        var self = this;
        self.o = o;
        self.html = {};
        self.fetchHTML = function (fileName, cb) {
            var self = this;
            Streak.Requester.getString({
                msgUrl: fileName
            }, function (htmlString) {
                cb(htmlString)
            }, function (error) {})
        };
        self.loadHTML =
            function (cb) {
                var self = this;
                if (!self.o.fileName) {
                    if (cb) cb();
                    return
                }
                self.fetchHTML(self.o.fileName, function (htmlString) {
                    var htmlObj = $(htmlString);
                    htmlObj.each(function (e) {
                        var _id = $(htmlObj[e]).attr("id");
                        if (_id && _id.length > 0) {
                            var currHTML = htmlObj[e];
                            self.html[_id] = currHTML.innerHTML.unescapeHTML()
                        }
                    });
                    cb()
                })
        };
        self.substituteHTML = function (s) {
            var self = this;
            return s.replace(/<%\*([\s\S]+?)%>/g, function (match, code) {
                return self.getHelper(code.trim())
            })
        }, self.getClone = function () {
            var _html = Streak.$.extend(true, {}, self.html);
            return Streak.$.extend(true, {}, self, {
                "html": _html
            })
        };
        self.setMode = function (mode) {
            var self = this;
            mode = "__" + mode;
            var changes = [];
            Streak._.each(self.html, function (value, key) {
                var positionOfModeInkey = key.indexOf(mode);
                if (positionOfModeInkey > 0) {
                    var baseKey = key.substring(0, positionOfModeInkey);
                    changes.push({
                        "baseKey": baseKey,
                        "value": self.html[key]
                    })
                }
            });
            var changeLength = changes.length;
            for (var ii = 0; ii < changeLength; ii++) {
                var change = changes[ii];
                self.html[change.baseKey] = change.value
            }
        };
        self.getHelper =
            function (id) {
                return self.html[id]
        }, self.get = function (id) {
            var currentString = "";
            var lastString = this.substituteHTML(this.html[id]);
            for (var ii = 0; ii < 100; ii++) {
                var currentString = this.substituteHTML(lastString);
                if (lastString === currentString) break;
                else lastString = currentString
            }
            return _.template(self.o.Locale.localize(currentString))
        };
        return self
    };
    BB.Modules.OverridableHTML = OverridableHTML
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var PerformanceModule = {
        initialized: false,
        statistics: {},
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                self.setUpMemoryReporting();
                self.setupGmailPerformanceReporting();
                self.initialized = true
            }
            if (cb) cb()
        },
        getTime: function () {
            var currentTimeMillis = (new Date).getTime();
            return currentTimeMillis
        },
        sendPipelineRenderTime: function (pipeline, time) {
            try {
                var boxes =
                    Streak.BentoBox.Data.getPipelineBoxes(pipeline.key());
                this.recordStat("pipelineLoadedTime", time, {
                    numberOfBoxes: boxes.length
                })
            } catch (e) {}
        },
        setUpMemoryReporting: function () {
            if (!(window.performance && window.performance.memory && window.performance.memory.usedJSHeapSize)) return;
            var self = this;
            _.repeatEvery(function () {
                self.recordStat("memoryUsage", window.performance.memory.usedJSHeapSize * 1, {
                    numberOfBoxes: BB.Data.getAllBoxes().length,
                    numberOfPipelines: BB.Data.getAllPipelines().length
                })
            }, 1E3 * 60)
        },
        setupGmailPerformanceReporting: function () {
            var self =
                this;
            var currentTime;
            window.addEventListener("hashchange", function () {
                var hash = location.hash.substring(1);
                var parts = hash.split("/");
                if (parts.length === 2 && parts[0] === "inbox") currentTime = Date.create();
                else currentTime = null
            });
            Gmail.observe("conversationThreadLoadedEvent", function () {
                if (!currentTime) return;
                var loadedTime = Date.create();
                self.recordStat("gmailConversationLoadedTime", loadedTime.millisecondsSince(currentTime))
            })
        },
        teardown: function () {
            try {
                window.clearInterval(this.intervalID)
            } catch (e) {}
        },
        recordStat: function (key,
            value, metadata) {
            if (!this.statistics[key]) this.statistics[key] = [];
            var performanceArray = this.statistics[key];
            performanceArray.push(value);
            if (performanceArray.length > 30) {
                var sum = _.reduce(performanceArray, function (val, memo) {
                    return val + memo
                }, 0);
                var average = Math.round(sum / performanceArray.length);
                var performanceTrackObject = _.extend({}, {
                    eventName: key,
                    value: average
                }, metadata);
                BB.Tracker.trackStreakPerformance(performanceTrackObject);
                performanceArray.length = 0
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "performanceModuleInitialized",
        functionToCall: PerformanceModule.init,
        functionContext: PerformanceModule,
        dependentFunctionKeys: ["data.pipelines.initialized", "data.boxes.initialized", "gmailLoaded"]
    });
    BB.Modules.PerformanceModule = PerformanceModule
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var PipelineView = {
        initialized: false,
        activePipelineView: null,
        activePipeline: null,
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                this.templates = {};
                this.templates.pipelineView = HTML.get("pipelineView");
                Gmail.observe("viewChanged", $.proxy(self.render, self));
                BB.Keyboard.bindChordToEl({
                    el: Gmail.elements.body,
                    chord: "meta+f/ctrl+f",
                    noBubble: true,
                    noOnInput: false,
                    useCapture: true,
                    keyEvent: "keydown",
                    cb: function (e) {
                        if (_.isReal(self.activePipeline) && _.isReal(self.activePipelineView) && self.activePipelineView.el.is(":FastVisible")) {
                            e.preventDefault();
                            self.activePipelineView.showSearchBox()
                        }
                    }
                });
                self.initialized = true
            }
            if (cb) cb()
        },
        teardown: function () {
            if (this.activePipelineView) {
                this.activePipelineView.destroy();
                this.activePipelineView = null;
                this.activePipeline = null;
                $.modal.close()
            }
        },
        render: function () {
            var self = this;
            if (BB.UI.isBentoBoxView()) try {
                if (Gmail.view == Gmail.Constants.Pipeline)
                    if (Gmail.getConversationId()) {
                        var pipe =
                            BB.Data.getPipeline(Gmail.getConversationId());
                        if (pipe) {
                            var readyObj = Streak.Eventer.create();
                            if (pipe === self.activePipeline) {
                                self.activePipelineView.savedViewsController.parseView();
                                return
                            } else {
                                if (this.activePipelineView) {
                                    this.activePipelineView.destroy();
                                    this.activePipelineView = null;
                                    this.activePipeline = null
                                }
                                var startTime = Streak.BentoBox.Modules.PerformanceModule.getTime();
                                Gmail.showNotice(BB.Locale.getString("notice_loading"));
                                this.activePipelineView = this.createPipeline(pipe);
                                pipe.refresh(function () {
                                    BB.Data.getPipelineBoxes(pipe.key()).refresh(function (changed) {
                                        if (changed) self.activePipelineView.dataSource.render();
                                        Gmail.hideNotice()
                                    })
                                });
                                BB.UI.getCanvas().append(this.activePipelineView.el);
                                this.activePipelineView.dataSource.fullRender();
                                this.activePipeline = pipe;
                                self.activePipelineView.savedViewsEditArea.firstRender();
                                self.activePipelineView.savedViewsStatusBar.updateDisplay();
                                Gmail.getSearchInput().val("pipeline:" + pipe.displayName());
                                Streak.BentoBox.trigger("pipeLoaded");
                                var endTime = Streak.BentoBox.Modules.PerformanceModule.getTime();
                                Streak.BentoBox.Modules.PerformanceModule.sendPipelineRenderTime(pipe, endTime -
                                    startTime)
                            }
                            readyObj.trigger("ready");
                            return readyObj
                        }
                    }
            } catch (err) {
                BB.logError("Pipeline View error \n Pipeline id: " + Gmail.getConversationId(), err)
            }
            if (this.activePipelineView) {
                this.activePipelineView.destroy();
                this.activePipelineView = null;
                this.activePipeline = null
            }
        },
        createPipeline: function (pipe) {
            var pipeline = pipe,
                el = $(this.templates.pipelineView());
            var trackingContext = {
                widgetContext: "pipelineView"
            };
            var editTrackingContext = _.extend({
                eventName: "PipelineDataEdited"
            }, trackingContext);
            var title = BB.Widgets.SmartTextbox.create({
                model: pipeline,
                property: "name",
                autoGrow: false,
                trackingContext: _.clone(editTrackingContext)
            });
            el.find(".info").append(title.el);
            var savedViewsController = BB.Modules.PipelineView.SavedViewsController.create({
                pipeline: pipeline
            });
            var adapter = BB.UI.PipelineSpreadsheetController.create(pipeline.key(), savedViewsController);
            var sheet = BB.Widgets.Spreadsheet.create({
                dataSource: adapter,
                trackingContext: trackingContext
            });
            el.find(".table").append(sheet.el);
            var groupbar = BB.Modules.PipelineView.GroupBar.create({
                pipeline: pipeline,
                dataSource: adapter,
                groupJumper: adapter,
                trackingContext: _.clone(trackingContext)
            });
            el.find(".groups").append(groupbar.el);
            var savedViewsEditArea = BB.Modules.PipelineView.SavedViewsEditArea.create({
                pipeline: pipeline,
                trackingContext: _.clone(trackingContext),
                dataSource: adapter,
                savedViewsController: savedViewsController
            });
            var savedViewsStatusBar = BB.Modules.PipelineView.SavedViewsStatusBar.create({
                pipeline: pipeline,
                trackingContext: _.clone(trackingContext),
                savedViewsController: savedViewsController,
                savedViewsEditArea: savedViewsEditArea
            });
            el.find(".filters").append(savedViewsStatusBar.containerElement);
            el.find(".filters").append(savedViewsEditArea.containerElement);
            var feed = BB.Widgets.FeedList.create({
                width: "215px",
                model: pipeline,
                isMiniStyle: true,
                trackingContext: _.clone(trackingContext)
            });
            el.find(".feed_sidebar_inner").append(feed.el);
            BB.Data.getPipelineBoxes(pipeline.key()).bind("collectionChange", function () {
                feed.refreshData()
            }, "pipelineView");
            BB.Data.getPipelineBoxes(pipeline.key()).bind("modelChange", function () {
                feed.refreshData(null,
                    true)
            }, "pipelineView");
            var toolbar = BB.Modules.PipelineView.PipelineToolbar.create({
                pipeline: pipeline,
                dataSource: adapter,
                spreadsheet: sheet,
                feed: feed,
                groupbar: groupbar,
                savedViewsController: savedViewsController,
                trackingContext: _.clone(trackingContext)
            });
            el.find(".toolbar").append(toolbar.el);
            pipeline.bind("remove", null, function () {
                PipelineView.removePipeline(pipeline)
            }, "pipelineView");
            var searchBox = BB.Widgets.SearchBox.create({
                searchController: adapter.searchController
            });
            var searchBoxAttached = false;

            function showSearchBox() {
                if (searchBoxAttached) {
                    searchBox.el.show();
                    searchBox.el.find(".pipelineSearchInput").select()
                } else {
                    searchBoxAttached = true;
                    Streak.Gmail.getCurrentMainContainer().append(searchBox.el);
                    $(searchBox.el).addClass("searchBox")
                }
                $(searchBox.el).find(".pipelineSearchInput").focus();
                searchBox.el.addClass("showDown")
            }

            function hideSearchBox() {
                searchBox.el.removeClass("showDown");
                searchBox.el.addClass("hideUp")
            }

            function destroy() {
                savedViewsController.destroy();
                pipeline.unbindAll("pipelineView");
                toolbar.destroy();
                groupbar.destroy();
                sheet.destroy();
                adapter.destroy();
                searchBox.destroy();
                savedViewsEditArea.destroy();
                el.remove()
            }
            return {
                el: el,
                dataSource: adapter,
                spreadsheet: sheet,
                savedViewsController: savedViewsController,
                savedViewsEditArea: savedViewsEditArea,
                savedViewsStatusBar: savedViewsStatusBar,
                destroy: destroy,
                showSearchBox: showSearchBox,
                hideSearchBox: hideSearchBox
            }
        },
        removePipeline: function (pipeline) {
            var key = pipeline.key();
            if (key === Gmail.getConversationId()) BB.UI.setURL("inbox");
            if (this.activePipeline === pipeline) {
                this.activePipelineView.destroy();
                this.activePipelineView =
                    null;
                this.activePipeline = null
            }
        },
        getSelectedBoxes: function () {
            if (!this.activePipelineView) return [];
            return this.activePipelineView.dataSource.getCheckedBoxes()
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "pipelineViewInitialized",
        functionToCall: PipelineView.init,
        functionContext: PipelineView,
        dependentFunctionKeys: ["keyboardInitialized", "htmlLoaded", "localeLoaded"]
    });
    BB.Modules.PipelineView = PipelineView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var CONSTANTS = {
        PREFIX: "spreadsheetSettings/pipeline/"
    };
    var ViewSettingsUtility = {
        _getKey: function (key, pipeline) {
            return CONSTANTS.PREFIX + pipeline.key() + "/" + key
        },
        setSharedSetting: function (key, settings, pipeline, dontSave) {
            pipeline.setUISettings(this._getKey(key, pipeline), settings, null, dontSave)
        },
        getSharedSetting: function (key, pipeline) {
            return pipeline.getUISettingsByPath(this._getKey(key,
                pipeline))
        },
        setPrivateSetting: function (key, settings, pipeline, dontSave) {
            BB.UserSettings.set(this._getKey(key, pipeline), JSON.stringify(settings));
            if (!dontSave) BB.UserSettings.save()
        },
        getPrivateSetting: function (key, pipeline) {
            var setting = BB.UserSettings.get(this._getKey(key, pipeline));
            if (setting) try {
                return JSON.parse(setting)
            } catch (err) {}
            return null
        }
    };

    function convertSettings(callback) {
        if (!BB.UserSettings.get("spreadsheetSettingsConverted")) {
            var queuedSaves = [];
            _.each(BB.Data.getAllPipelines(), function (pipeline) {
                try {
                    var preKey =
                        pipeline.key().replace(/\_/ig, "/") + "/pipeline/spreadsheet/";
                    var oldColumnSettings = BB.UserSettings.get(preKey + "column/settings");
                    if (oldColumnSettings) try {
                        oldColumnSettings = JSON.parse(oldColumnSettings)
                    } catch (err) {
                        oldColumnSettings = null
                    }
                    var oldGroupBarSettings = pipeline.getUISettingsByPath("groupbar/stageKey");
                    var newColumnWidthSettings = ViewSettingsUtility.getSharedSetting("columnWidth", pipeline);
                    if (!newColumnWidthSettings && oldColumnSettings) {
                        newColumnWidthSettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnWidthSettings.create(pipeline);
                        _.each(oldColumnSettings.columns, function (setting) {
                            var columnKey = getColumnKey(setting);
                            if (_.isReal(setting.width)) newColumnWidthSettings.data[columnKey] = setting.width
                        });
                        BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnWidthSettings.save(newColumnWidthSettings, pipeline, true)
                    }
                    var newColumnOrderSettings = ViewSettingsUtility.getSharedSetting("columnOrder", pipeline);
                    if (!newColumnOrderSettings && oldColumnSettings) {
                        newColumnOrderSettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.create(pipeline);
                        newColumnOrderSettings.data = _.map(oldColumnSettings.columns, getColumnKey);
                        BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.save(newColumnOrderSettings, pipeline, true)
                    }
                    var newGroupColorSettings = ViewSettingsUtility.getSharedSetting("groupColors", pipeline);
                    if (!newGroupColorSettings && oldGroupBarSettings) {
                        newGroupColorSettings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupColorSettings.create(pipeline);
                        newGroupColorSettings.data = oldGroupBarSettings.colors;
                        BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupColorSettings.save(newGroupColorSettings,
                            pipeline, true)
                    }
                    var newColumnVisibilitySettings = ViewSettingsUtility.getPrivateSetting("columnVisibility", pipeline);
                    if (!newColumnVisibilitySettings && oldColumnSettings) {
                        newColumnVisibilitySettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings.create(pipeline);
                        _.each(oldColumnSettings.columns, function (setting) {
                            newColumnVisibilitySettings.data[getColumnKey(setting)] = setting.isVisible
                        });
                        BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings.save(newColumnVisibilitySettings,
                            pipeline, true)
                    }
                    pipeline.setUISettings("groupbar", null, null, true);
                    var savedViews = pipeline.getSavedViews();
                    _.each(savedViews, function (savedView) {
                        if (savedView.settings.sortSettings) return;
                        var sortSettings = BB.Modules.PipelineView.ViewSettings.SortSettings.create(pipeline);
                        sortSettings.data = extractSortSettings(savedView.settings.columnSettings);
                        var groupBySettings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.create(pipeline);
                        groupBySettings.data = extractGroupSettings(savedView.settings.groupSettings);
                        var newSettings = {
                            filterSettings: savedView.settings.filterSettings,
                            sortSettings: sortSettings,
                            groupBySettings: groupBySettings
                        };
                        savedView.settings = newSettings;
                        pipeline.updateSavedView(savedView, true)
                    });
                    queuedSaves.push(_.bind(pipeline.save, pipeline));
                    BB.UserSettings.set(pipeline.key(), null)
                } catch (err) {
                    BB.logError("can't convert settings", err)
                }
            });
            BB.UserSettings.set("spreadsheetSettingsConverted", true);
            BB.UserSettings.save();
            _.chainedCallbacks(queuedSaves)
        }
        if (callback) callback()
    }

    function getColumnKey(setting) {
        var columnKey;
        if (setting.systemColumnUnique) columnKey = "property|" + setting.systemColumnUnique;
        else if (setting.property) columnKey = "property|" + setting.property;
        else if (setting.fieldKey) columnKey = "field|" + setting.fieldKey;
        return columnKey
    }

    function extractSortSettings(columnSettings) {
        return _(columnSettings.columns).chain().filter(function (setting) {
            return setting.sortOrder > 0
        }).sortBy("sortOrder").reverse().map(function (setting) {
            return {
                columnKey: getColumnKey(setting),
                sort: setting.sort
            }
        }).value()
    }

    function extractGroupSettings(groupSettings,
        pipeline) {
        if (groupSettings.property) return "property|" + groupSettings.property;
        else if (groupSettings.fieldKey) return "field|" + groupSettings.fieldKey;
        else return "property|stageKey"
    }
    Streak.DependencyManager.addFunction({
        functionKey: "convertSettings",
        functionToCall: convertSettings,
        dependentFunctionKeys: ["gmailLoaded", "localeLoaded", "data.pipelines.initialized", "userSettingsInitialized"]
    });
    BB.Modules.PipelineView.ViewSettingsUtility = ViewSettingsUtility
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var ThreadView = {
        instances: {},
        initialized: false,
        activeInstance: null,
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                this.templates = {};
                this.templates.threadView = HTML.get("threadView");
                this.templates.email = HTML.get("threadViewEmail");
                this.templates.emailName = HTML.get("threadViewEmailName");
                Gmail.observe("viewChanged", function () {
                    self.render()
                })
            }
            self.initialized =
                true;
            if (cb) cb()
        },
        render: function () {
            var self = this;
            try {
                if (this.activeInstance && this.activeInstance.destroy) this.activeInstance.destroy();
                if (BB.UI.isBentoBoxView())
                    if (Gmail.view == Gmail.Constants.GmailThread)
                        if (Gmail.getConversationId()) {
                            this.activeInstance = new this.impl(Gmail.getConversationId());
                            BB.UI.getCanvas().append(this.activeInstance.el)
                        }
            } catch (err) {
                BB.logError("Thread view error. Thread ID: " + Gmail.getConversationId(), err)
            }
        },
        impl: function (threadKey) {
            var key = threadKey,
                thread = null,
                box = null,
                pipeline =
                    null,
                el = $(ThreadView.templates.threadView()),
                render = function () {
                    el.find(".loadingThreads").show();
                    el.find(".threadViewThreads").hide();
                    APIRequester.get({
                        msgUrl: "threads/" + key + "/content",
                        includeBody: true
                    }, function (res) {
                        el.find(".loadingThreads").hide();
                        el.find(".threadViewThreads").fadeIn();
                        if (res.messages && res.messages.length > 0) el.find(".subject").text(res.messages[0].subject);
                        _.each(res.messages, function (email) {
                            try {
                                var emailEl = renderEmail(email);
                                if (_.isReal(emailEl)) el.find(".emails").append(emailEl)
                            } catch (err) {
                                var msg =
                                    "Problem rendering email";
                                msg += "\nemail json: " + JSON.stringify(email);
                                BB.logError(msg, err)
                            }
                        })
                    });
                    var box = BB.Data.getBox(thread.get("boxKey"));
                    if (_.isReal(box) && box !== "") {
                        var sidebar = BB.Modules.ConversationSidebar.BoxSidebar.create({
                            box: box,
                            keyboardTabs: true
                        });
                        sidebar.el.addClass("boxOnNewCompose msgb");
                        el.find(".boxInfo").append(sidebar.el);
                        sidebar.el.addClass("loaded");
                        BB.trigger("threadViewLoaded")
                    }
                }, renderEmail = function (email) {
                    var emailList = [];
                    _.each(email.addresses.to, function (toEmail) {
                        emailList.push(ThreadView.templates.emailName({
                            email: toEmail.email,
                            name: toEmail.name || toEmail.email
                        }))
                    });
                    var body = null;
                    if (email.body && email.body.length > 0) {
                        body = _.find(email.body, function (aBody) {
                            return aBody.type === "text/html"
                        });
                        if (_.isReal(body)) body = body.content;
                        else {
                            body = _.find(email.body, function (aBody) {
                                return aBody.type === "text/plain"
                            });
                            if (_.isReal(body)) body = "<pre>" + body.content + "</pre>"
                        }
                    }
                    if (!body) {
                        BB.logError("no email message body");
                        return null
                    }
                    var emailEl = $(ThreadView.templates.email({
                        imageSrc: email.person_info[email.addresses.from.email].thumbnail,
                        name: email.addresses.from.name,
                        email: email.addresses.from.email,
                        datetime: (new Date(email.date * 1E3)).toString(),
                        gmailDate: (new Date(email.date * 1E3)).getGmailFormatted(),
                        emailList: emailList.join(","),
                        body: body
                    }));
                    return emailEl
                };
            BB.Data.getGmailThread(key, function (aThread) {
                thread = aThread;
                box = BB.Data.getBox(thread.get("boxKey"));
                pipeline = box.getPipeline();
                render()
            });
            return {
                el: el,
                destroy: function () {
                    el.remove()
                }
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "threadViewInitialized",
        functionToCall: ThreadView.init,
        functionContext: ThreadView,
        dependentFunctionKeys: ["gmailLoaded", "data.pipelines.initialized", "htmlLoaded", "data.gmailThreads.initialized"]
    });
    BB.Modules.ThreadView = ThreadView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var trackingContext = {
        widgetContext: "search"
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    var Search = {
        el: null,
        elements: {},
        asyncTrigger: null,
        templates: {},
        results: {},
        initialized: false,
        init: function (readyCB) {
            var self = this;
            if (!self.initialized) {
                this.el = HTML.get("search", true);
                this.templates.resultRow =
                    HTML.get("searchRowTemplate");
                self.elements.searchResultsMax = this.el.find("#searchResultsMax");
                self.elements.searchResultsMaxOf = this.el.find("#searchResultsMaxOf");
                self.elements.tableBody = this.el.find("#searchResultsTable");
                Gmail.observe("viewChanged", function (view) {
                    self.viewChanged()
                });
                Gmail.observe("search", function (searchTerm) {
                    self.performSearch(searchTerm)
                })
            }
            self.initialized = true;
            if (readyCB) readyCB()
        },
        performSearch: function (searchTerm) {
            var self = this;
            if (_isSearchOnBlacklist(searchTerm)) return;
            if (BB.UI.suppressSearch) return;
            APIRequester.get({
                msgUrl: "search",
                query: searchTerm,
                limit: 10
            }, function (data) {
                self.results[data.query] = data.results;
                self.renderResults();
                if (self.results[data.query] !== null && self.results[data.query].length > 0) self.el.trigger("render")
            })
        },
        viewChanged: function (cb) {
            try {
                this.renderResults()
            } catch (err) {
                BB.logError("Search error.", err)
            }
        },
        renderResults: function () {
            this.el.detach();
            if (Gmail.isSearch()) {
                var searchQueryEncoded = Gmail.label;
                var decoded = this.decodeGmailURLSearch(searchQueryEncoded);
                if (!decoded || decoded.length === 0) return;
                if (_.isArray(this.results[decoded]) && this.results[decoded].length > 0) {
                    this.elements.searchResultsMax.html(this.results[decoded].length);
                    this.elements.searchResultsMaxOf.html(this.results[decoded].length);
                    this.elements.tableBody.html("");
                    for (var i = 0; i < this.results[decoded].length; i++) this.setupSearchResultRow(this.results[decoded][i]);
                    var main = Gmail.getCurrentMain();
                    if (!main.is(":FastVisible(noCompute)")) return;
                    if (Gmail.getCurrentMain().find(".mq").length > 0) $(Gmail.getCurrentMain().find(".mq").filter(":first")[0]).after(this.el);
                    else Gmail.getCurrentMain().prepend(this.el)
                }
            }
        },
        setupSearchResultRow: function (rowData) {
            var box = BB.Data.getBox(rowData.boxKey);
            if (!box) return;
            var currentRow = $(this.templates.resultRow({
                iconClass: "CASE",
                title: rowData.name,
                snippet: BB.Services.BoxDisplayText.getDetailsText(box)
            }));
            this.elements.tableBody.append(currentRow);
            currentRow.click(function (e) {
                e.preventDefault();
                var url = "";
                track("boxLinkClicked");
                url = BB.Data.getBox(rowData.boxKey).link();
                BB.UI.setURL(url)
            })
        },
        decodeGmailURLSearch: function (urlSearchTerm) {
            urlSearchTerm =
                (urlSearchTerm || "").replace("+", " ");
            urlSearchTerm = decodeURIComponent(urlSearchTerm);
            return urlSearchTerm
        }
    };
    var CONSTANTS = {
        BLACKLIST: ["label:all before:5000/01/01", "\u1427"]
    };

    function _isSearchOnBlacklist(searchTerm) {
        var lowerCaseSearchTerm = searchTerm.toLowerCase();
        for (var ii = 0; ii < CONSTANTS.BLACKLIST.length; ii++) {
            var badWord = CONSTANTS.BLACKLIST[ii];
            if (lowerCaseSearchTerm.indexOf(badWord) > -1) return true
        }
    }
    Streak.DependencyManager.addFunction({
        functionKey: "searchInitialized",
        functionToCall: Search.init,
        functionContext: Search,
        dependentFunctionKeys: ["gmailLoaded", "userLoggedIn", "htmlLoaded"]
    });
    BB.Modules.Search = Search
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var trackingContext = {
        widgetContext: "searchOverride"
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    var SearchOverride = {
        templates: {},
        menu: null,
        initialized: false,
        override: false,
        showingPipelines: false,
        currentItemList: [],
        CONST: {
            PIPELINE: "pipeline",
            BOX: "box"
        },
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                self.initActions();
                self.initialized = true
            }
            if (cb) cb()
        },
        initActions: function () {
            var self = this;
            var val = Gmail.getSearchInput().val();
            Gmail.getSearchInput().keyup(function (e) {
                if (val !== Gmail.getSearchInput().val()) {
                    val = Gmail.getSearchInput().val();
                    self.startRender()
                }
            });
            Gmail.getSearchInput().blur(function () {
                setTimeout(function () {
                    if (self.menu) self.menu.el.hide();
                    if (self.cursor) self.cursor.pause()
                }, 250)
            });
            BB.Keyboard.bindChord("w,p", function (e) {
                    Gmail.getSearchInput().val(self.CONST.PIPELINE + ":").focus();
                    self.startRender();
                    Gmail.getSearchAutoComplete().show()
                },
                BB.Locale.getString("keyboard_go_to_pipeline"));
            BB.Keyboard.bindChord("w,b", function (e) {
                Gmail.getSearchInput().val(self.CONST.BOX + ":").focus();
                self.startRender();
                Gmail.getSearchAutoComplete().show()
            }, BB.Locale.getString("keyboard_go_to_box"));
            BB.Keyboard.bindChordToElement(Gmail.getSearchInput(), "escape", function () {
                Gmail.getSearchAutoComplete().hide();
                Gmail.getSearchInput().blur()
            }, true, true);
            BB.Keyboard.bindChordToElement(Gmail.getSearchInput(), "right", function (e) {
                if (self.override && self.showingPipelines) {
                    setTimeout(function () {
                            Gmail.getSearchAutoComplete().hide()
                        },
                        100);
                    if (Gmail.getSearchInput().caret().start === Gmail.getSearchInput().val().length) {
                        var position = self.cursor.getPosition();
                        if (position < self.currentItemList.length) setTimeout(function () {
                            Gmail.getSearchInput().val(self.CONST.PIPELINE + ":" + self.currentItemList[position].displayName() + " " + self.CONST.BOX + ":")
                        }, 50)
                    }
                }
            });
            self.cursor = BB.Cursor.create({
                selectedClass: "J-N-JT",
                highlightOnHover: true,
                selectFunc: function (el) {
                    el.click()
                },
                rollOver: true,
                input: Gmail.getSearchInput(),
                aggressiveInputCapture: true
            })
        },
        startRender: function () {
            var self =
                this;
            var val = Gmail.getSearchInput().val();
            self.cursor.resume();
            Gmail.getSearchAutoComplete().css({
                visibility: "visible"
            });
            self.showingPipelines = false;
            self.currentItemList.length = 0;
            if (val.startsWith(self.CONST.PIPELINE + ":"))
                if (val.indexOf(self.CONST.BOX + ":") > -1) {
                    var parts = val.split(self.CONST.BOX + ":");
                    var pipelineText = parts[0];
                    var boxName = parts[1];
                    pipelineText = pipelineText.replace(self.CONST.PIPELINE + ":", "").trim().toLowerCase();
                    var boxCollection = [];
                    var pipelines = BB.Data.getAllPipelines();
                    for (var ii =
                        0; ii < pipelines.length; ii++)
                        if (pipelines[ii].displayName().toLowerCase().indexOf(pipelineText) > -1) boxCollection = boxCollection.concat(BB.Data.getPipelineBoxes(pipelines[ii].key()));
                    self.renderItems(boxName, boxCollection, "name", "box")
                } else {
                    self.renderItems(val.replace(self.CONST.PIPELINE + ":", ""), BB.Data.getAllPipelines(), "name", "pipeline");
                    self.showingPipelines = true
                } else if (val.startsWith(self.CONST.BOX + ":")) self.renderItems(val.replace(self.CONST.BOX + ":", ""), BB.Data.getAllBoxes(), "name", "box");
            else {
                if (self.cursor) self.cursor.pause();
                if (self.menu) self.menu.el.hide()
            }
        },
        renderItems: function (query, list, field, type) {
            var self = this;
            self.override = false;
            Gmail.getSearchAutoComplete().css({
                visibility: "hidden"
            });
            if (self.menu) self.menu.el.remove();
            self.menu = BB.Widgets.Menu.create({
                css: {
                    position: "absolute",
                    zIndex: "1000",
                    width: Gmail.getSearchContainer().width(),
                    top: Gmail.getSearchContainer().height()
                }
            });
            self.menu.el.addClass("searchMenu");
            var fList = _.filter(list, function (obj) {
                return obj.get(field).toLowerCase().indexOf(query.toLowerCase()) > -1
            });
            if (fList.length > 0) {
                self.override = true;
                fList.sortBy(function (obj) {
                    return -1 * obj.get(field).intersectionLength(query)
                }).first(10).each(function (obj) {
                    var num = 0;
                    if (type === "pipeline") num = BB.Data.getPipelineBoxes(obj.key()).length;
                    self.renderItem(obj.get(field), obj.link(), query, type, num);
                    self.currentItemList.push(obj)
                });
                self.cursor.setup(self.menu.el.find(".menuItem"));
                Gmail.getSearchContainer().append(self.menu.el)
            }
        },
        renderItem: function (name, link, query, type, num) {
            name = name.escapeHTML();
            var lName = name.toLowerCase();
            var lQuery = query.toLowerCase();
            var index = lName.indexOf(lQuery);
            var msg = name.first(index);
            msg += '<b class="Jd-JU">' + query + "</b>";
            msg += name.substring(index + query.length);
            if (num) msg += " (" + num + ")";
            if (type) msg += '<span class="U6"> - ' + type + "<span>";
            this.menu.addItem(msg, function () {
                track("searchResultClicked");
                Gmail.getSearchInput().blur();
                BB.UI.setURL(link)
            })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "searchOverrideInitialized",
        functionToCall: SearchOverride.init,
        functionContext: SearchOverride,
        dependentFunctionKeys: ["gmailLoaded", "userLoggedIn", "data.pipelines.initialized", "data.boxes.initialized", "keyboardInitialized", "localeLoaded"]
    });
    BB.Modules.SearchOverride = SearchOverride
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SendLaterMenu = function () {
        this._currentSendLaterController = null;
        this._sendLaterDate = null;
        this._menu = null;
        this._scheduledDateElement = null;
        this._dateInput = null;
        this._scheduledSendButton = null;
        this._cancelButton = null;
        this._setupUIComponents()
    };
    _.extend(SendLaterMenu.prototype, {
        setSendLaterController: function (sendLaterController) {
            this._currentSendLaterController = sendLaterController;
            this._resetUIElements();
            if (this._currentSendLaterController.hasScheduledDate()) {
                this._dateInput.val(this._currentSendLaterController.getScheduledDate().customFormat("long"));
                this._menuInner.find(".sendLaterButton").append(this._cancelButton.getElement());
                this._scheduledSendButton.changeText(BB.Locale.getString("send_later_update_time"))
            }
            this._processDateInput()
        },
        getElement: function () {
            return this._menu.getElement()
        },
        nowShowing: function () {
            track("openSendLaterMenu");
            this._dateInput.focus()
        },
        _setupUIComponents: function () {
            this._setupMenuElements();
            this._setupDateInput();
            this._setupConvenentTimeLinks();
            this._setupScheduleSendLaterButton();
            this._setupCancelButton();
            this._setupTabOrder()
        },
        _setupMenuElements: function () {
            this._menu = BB.Widgets.Menu.create();
            this._menuInner = HTML.get("sendLaterMenu", true);
            this._menu.addSection(this._menuInner);
            this._dateInput = this._menuInner.find(".date");
            this._scheduledDateElement = this._menuInner.find(".scheduledDate")
        },
        _setupDateInput: function () {
            var self = this;
            this._dateInput.keyup(function (e) {
                self._processDateInput()
            })
        },
        _processDateInput: function () {
            this._scheduledSendButton.disable();
            this._sendLaterDate = null;
            var dateInputValue = this._dateInput.val().trim();
            if (dateInputValue.isBlank()) {
                this._scheduledDateElement.text(BB.Locale.getString("send_later_enter_date"));
                return
            }
            var dateObject = Date.create(dateInputValue);
            if (!dateObject.isValid()) {
                this._scheduledDateElement.text(BB.Locale.getString("send_later_invalid_date"));
                return
            }
            if (dateObject.isBefore(Date.now())) {
                this._scheduledDateElement.text(BB.Locale.getString("send_later_future_date"));
                return
            }
            this._sendLaterDate = dateObject;
            this._scheduledDateElement.text(dateObject.customFormat("longWithTimezone"));
            this._scheduledSendButton.enable()
        },
        _setupConvenentTimeLinks: function () {
            var self = this;
            this._menuInner.find("a").click(function (e) {
                track("suggestedTimeClick");
                e.preventDefault();
                self._dateInput.val(this.title);
                self._processDateInput()
            })
        },
        _setupScheduleSendLaterButton: function () {
            var self =
                this;
            this._scheduledSendButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Gmail",
                color: "red",
                text: BB.Locale.getString("send_later_schedule"),
                onFunction: function () {
                    self._scheduleSendLaterClicked()
                }
            });
            this._menuInner.find(".sendLaterButton").append(this._scheduledSendButton.getElement())
        },
        _scheduleSendLaterClicked: function () {
            track("createSendLaterAttempt");
            var errorMsg = this._currentSendLaterController.getErrorMessage();
            if (errorMsg) {
                Gmail.showNotice(errorMsg, 5E3);
                track("createSendLaterFail", {
                    reason: errorMsg,
                    userFailure: "true"
                });
                return
            }
            track("send later scheduled");
            this._currentSendLaterController.setScheduledDate(this._sendLaterDate)
        },
        _setupCancelButton: function () {
            var self = this;
            this._cancelButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Gmail",
                text: BB.Locale.getString("cancel_send_later"),
                onFunction: function () {
                    track("cancelSendLater");
                    self._currentSendLaterController.cancelSendLater()
                }
            })
        },
        _setupTabOrder: function () {
            $.tabChain([this._scheduledSendButton.getElement(), this._dateInput])
        },
        _resetUIElements: function () {
            this._dateInput.val("");
            this._cancelButton.getElement().detach();
            this._scheduledSendButton.changeText(BB.Locale.getString("send_later_schedule"))
        }
    });
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    BB.Modules.SendLater = {};
    DependencyManager.addFunction({
        functionKey: "sendLaterMenuInitialized",
        functionToCall: function (callback) {
            BB.Modules.SendLater.SendLaterMenu = new SendLaterMenu;
            if (callback) callback()
        },
        dependentFunctionKeys: ["htmlLoaded",
            "localeLoaded"
        ]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SendLaterButtonMasterController = function () {
        Gmail.GmailComposeManager.registerModifierModule(this)
    };
    _.extend(SendLaterButtonMasterController.prototype, {
        getViewControllers: function () {
            return [new BB.Modules.SendLater.SendLaterButtonViewController, new BB.Modules.SendLater.SendLaterNoticeViewController]
        }
    });
    DependencyManager.addFunction({
        functionKey: "sendLaterMasterControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.SendLater.SendLaterButtonMasterController = new SendLaterButtonMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailComposeWindowMasterControllerInitialized", "data.sendLaters.initialized", "sendLaterMenuInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SendLaterButtonViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._menuButton = null;
        this._sendLaterModel = null;
        this._shouldLoad = true
    };
    SendLaterButtonViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(SendLaterButtonViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController;
            this._setupSendLaterModel();
            this._setupMenuButton()
        },
        allModificationsInitialized: function () {
            if (this._isSendLaterScheduled()) this._composeWindowViewController.notify("sendLaterScheduled", this._sendLaterModel)
        },
        shouldProcessModification: function () {
            return this._shouldLoad
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "BOTTOM_TOOLBAR"
        },
        getModificationPlacement: function () {
            return "SEND_BUTTON"
        },
        getModificationElement: function () {
            return this._menuButton.getElement()
        },
        justAdded: function () {
            this._updateDisplay()
        },
        threadAddedToBox: function () {
            this._menuButton.disable()
        },
        threadRemovedFromBox: function () {
            this._menuButton.enable()
        },
        mailMergeActive: function () {
            if (!this._shouldLoad) return;
            this._shouldLoad = false;
            this._composeWindowViewController.reloadModification(this)
        },
        mailMergeCancelled: function () {
            if (this._shouldLoad) return;
            this._shouldLoad = true;
            this._composeWindowViewController.reloadModification(this)
        },
        pixelTrackingOn: function () {
            this._menuButton.disable();
            this._menuButton.setTooltip(BB.Locale.getString("send_later_disabled_pixel_tracking"))
        },
        pixelTrackingOff: function () {
            this._menuButton.enable();
            this._menuButton.setTooltip(BB.Locale.getString("send_later"))
        },
        hasScheduledDate: function () {
            return this._sendLaterModel && this._sendLaterModel.get("sendDate") && !this._sendLaterModel.isDeleted()
        },
        getScheduledDate: function () {
            return Date.create(this._sendLaterModel.get("sendDate"))
        },
        getErrorMessage: function () {
            if (this._composeWindowViewController.getToContacts().length ===
                0) return BB.Locale.getString("send_later_need_address");
            if (this._composeWindowViewController.getSubject().length === 0) return BB.Locale.getString("send_later_need_subject")
        },
        setScheduledDate: function (dateObject) {
            Gmail.showNotice(BB.Locale.getString("send_later_scheduling"));
            this._menuButton.off();
            if (!this._sendLaterModel) this._sendLaterModel = BB.Data.newSendLater();
            this._sendLaterModel.set("sendDate", dateObject.getTime());
            this._sendLaterModel.set("subject", this._composeWindowViewController.getSubject());
            if (this._composeWindowViewController.getDraftId()) {
                this._sendLaterModel.set("gmailDraftId", this._composeWindowViewController.getDraftId());
                this._sendLaterModel.save(function () {
                    Gmail.hideNotice()
                })
            }
            this._triggerDraftSave();
            this._updateDisplay();
            this._composeWindowViewController.notify("sendLaterScheduled", this._sendLaterModel)
        },
        cancelSendLater: function () {
            this._menuButton.off();
            if (this._sendLaterModel && this._sendLaterModel.canDelete()) this._sendLaterModel.del();
            this._sendLaterModel = null;
            this._updateDisplay();
            this._composeWindowViewController.notify("sendLaterCancelled")
        },
        shouldNotSend: function () {
            return this._isSendLaterScheduled()
        },
        sendCancelled: function () {
            this._showBlockModal()
        },
        shouldNotDiscard: function () {
            return this._isSendLaterScheduled()
        },
        discardCancelled: function () {
            this._showBlockModal()
        },
        _showBlockModal: function () {
            if (!this._isSendLaterScheduled()) return;
            BB.Widgets.Modal.simpleConfirm(BB.Locale.getString("send_later_block_title"), BB.Locale.getString("send_later_block_message"))
        }
    });
    _.extend(SendLaterButtonViewController.prototype, {
        _setupSendLaterModel: function () {
            var draftId = this._composeWindowViewController.getDraftId();
            if (draftId) this._sendLaterModel = BB.Data.getSendLaterByHexId(draftId)
        },
        _setupMenuButton: function () {
            var self = this;
            this._menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "GmailIcon",
                color: "blue",
                iconClass: "sendLaterClock",
                menu: BB.Modules.SendLater.SendLaterMenu,
                isBottomAligned: true,
                isFixedPosition: true,
                preOnFunction: function () {
                    BB.Modules.SendLater.SendLaterMenu.setSendLaterController(self);
                    BB.Tracker.track("send later menu open")
                },
                postOnFunction: function () {
                    BB.Modules.SendLater.SendLaterMenu.nowShowing()
                }
            });
            this._menuButton.setTooltip(BB.Locale.getString("send_later"));
            this._menuButton.addClass("sendLaterClockWrapper")
        },
        _updateDisplay: function () {
            if (this._isSendLaterScheduled()) this._updateScheduledDisplay();
            else this._updateUnscheduledDisplay()
        },
        _updateScheduledDisplay: function () {
            this._menuButton.addClass("scheduled")
        },
        _updateUnscheduledDisplay: function () {
            this._menuButton.removeClass("scheduled")
        },
        _isSendLaterScheduled: function () {
            return this._sendLaterModel &&
                this._sendLaterModel.get("sendDate") && !this._sendLaterModel.isDeleted()
        },
        _triggerDraftSave: function () {
            this._composeWindowViewController.minimize();
            this._composeWindowViewController.minimize()
        },
        draftSaved: function () {
            if (this._isSendLaterScheduled()) {
                this._sendLaterModel.set("gmailDraftId", this._composeWindowViewController.getDraftId());
                this._sendLaterModel.save(function () {
                    Gmail.hideNotice(500)
                })
            }
        },
        emailSent: function () {
            if (this._isSendLaterScheduled()) {
                this._sendLaterModel.set("status", "SENT_EARLY_BY_USER");
                this._sendLaterModel.save()
            }
        },
        potentiallyDiscardedOrSent: function () {
            this._menuButton.off()
        },
        discarded: function () {
            this._menuButton.off();
            if (this._isSendLaterScheduled()) this._sendLaterModel.del()
        },
        destroy: function () {
            this._menuButton.off();
            this._menuButton.destroy();
            this._composeWindowViewController = null;
            this._callDelegateFunction("destroy", this)
        }
    });
    BB.Modules.SendLater.SendLaterButtonViewController = SendLaterButtonViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SendLaterNoticeViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._element = null;
        this._sendLaterModel = null;
        this._modificationParameters = null
    };
    SendLaterNoticeViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(SendLaterNoticeViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController;
            this._generateSendLaterNoticeElement()
        },
        shouldProcessModification: function () {
            return this._sendLaterModel !== null
        },
        aboutToProcessModification: function () {
            this._element.find(".sendLaterBottomMessage").html(this._getSendLaterNoticeMessage())
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "BOTTOM"
        },
        shouldModificationAdjustHeight: function () {
            return true
        },
        getModificationElement: function () {
            return this._element
        },
        destroy: function () {
            this._element.remove();
            this._composeWindowViewController = null
        },
        sendLaterScheduled: function (sendLaterModel, isReply) {
            this._sendLaterModel = sendLaterModel;
            if (isReply) this._element.find("a").remove();
            this._composeWindowViewController.reloadModification(this)
        },
        sendLaterCancelled: function () {
            if (!this._sendLaterModel) return;
            this._sendLaterModel = null;
            this._composeWindowViewController.reloadModification(this)
        },
        _generateSendLaterNoticeElement: function () {
            var self =
                this;
            this._element = $(document.createElement("div"));
            this._element.addClass("aDh sendLaterBottom");
            this._element[0].innerHTML = '<div class="gD sendLaterBottomInner"><span class="exclamation"></span><div class="sendLaterBottomMessage"></div>' + '<a href="#" class="sendLaterCloseDraft">' + BB.Locale.getString("send_later_close_draft") + "</a>" + "</div>";
            this._element.find("a").click(function (e) {
                self._composeWindowViewController.close();
                BB.Tracker.track("send later close draft")
            })
        },
        _getSendLaterNoticeMessage: function () {
            return '<span class="sendLaterMessageLabel">' +
                BB.Locale.getString("send_later_list_scheduled") + ":</span> " + Date.create(this._sendLaterModel.get("sendDate")).customFormat("shortWithWeekday")
        }
    });
    BB.Modules.SendLater.SendLaterNoticeViewController = SendLaterNoticeViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SendLaterButtonReplyMasterController = function () {
        Gmail.GmailReplyManager.registerModifierModule(this)
    };
    _.extend(SendLaterButtonReplyMasterController.prototype, {
        getViewControllers: function () {
            return [new BB.Modules.SendLater.SendLaterButtonReplyViewController, new BB.Modules.SendLater.SendLaterNoticeViewController]
        }
    });
    DependencyManager.addFunction({
        functionKey: "sendLaterReplyMasterControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.SendLater.SendLaterButtonReplyMasterController = new SendLaterButtonReplyMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailReplyAreaMasterControllerInitialized", "data.sendLaters.initialized", "sendLaterMenuInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SendLaterButtonReplyViewController = Streak.Class.subclass({
        superclass: BB.Modules.SendLater.SendLaterButtonViewController,
        _initialize: function () {
            BB.Modules.SendLater.SendLaterButtonViewController.prototype._initialize.call(this);
            this._unbinders = [];
            return this
        },
        allModificationsInitialized: function () {
            if (this._isSendLaterScheduled()) this._composeWindowViewController.notify("sendLaterScheduled", this._sendLaterModel, true)
        },
        shouldProcessModification: function () {
            return !!BB.Threads.getActiveThread()
        },
        _setupSendLaterModel: function () {
            this._unbinders.length = 0;
            var activeThread = BB.Threads.getActiveThread();
            if (!activeThread) return;
            this._sendLaterModel = BB.Data.getSendLaterByHexId(activeThread.key());
            if (this._sendLaterModel) {
                var status = this._sendLaterModel.get("status");
                switch (status) {
                case "SENT":
                case "ERROR_ON_SEND":
                case "SENT_EARLY_BY_USER":
                    this._sendLaterModel = null;
                    break
                }
            }
            if (!this._sendLaterModel) {
                this._sendLaterModel = BB.Data.newSendLater();
                this._sendLaterModel.set("gmailDraftId", activeThread.key())
            }
            var self = this;
            this._unbinders.push(this._sendLaterModel.bind("save", null, function () {
                self._updateDisplay();
                if (self._isSendLaterScheduled()) self._composeWindowViewController.notify("sendLaterScheduled", self._sendLaterModel, true)
            }));
            this._unbinders.push(this._sendLaterModel.bind("delete",
                null, function () {
                    self._setupSendLaterModel();
                    self._updateDisplay();
                    self._composeWindowViewController.notify("sendLaterCancelled")
                }));
            this._sendLaterModel.incrementNumberOfReplies()
        },
        setScheduledDate: function (dateObject) {
            Gmail.showNotice(BB.Locale.getString("send_later_scheduling"));
            this._menuButton.off();
            if (!this._sendLaterModel) this._setupSendLaterModel();
            this._sendLaterModel.set("sendDate", dateObject.getTime());
            this._sendLaterModel.set("subject", this._composeWindowViewController.getSubject());
            this._sendLaterModel.set("sendLaterType",
                "REPLY");
            var activeThread = BB.Threads.getActiveThread();
            this._sendLaterModel.set("gmailDraftId", activeThread.key());
            this._sendLaterModel.save(function () {
                Gmail.hideNotice()
            });
            this._updateDisplay();
            this._composeWindowViewController.notify("sendLaterScheduled", this._sendLaterModel, true);
            BB.Tracker.track("send later reply scheduled")
        },
        cancelSendLater: function () {
            this._menuButton.off();
            var sendLaterModel = this._sendLaterModel;
            this._sendLaterModel = null;
            if (sendLaterModel && sendLaterModel.canDelete()) sendLaterModel.del();
            this._updateDisplay();
            BB.Tracker.track("send later reply cancelled")
        },
        shouldNotSend: function () {
            return false
        },
        shouldNotDiscard: function () {
            return false
        },
        aboutToSend: function () {
            this._sendLaterModel.decrementNumberOfReplies()
        },
        aboutToDiscard: function () {
            this._sendLaterModel.decrementNumberOfReplies()
        },
        destroy: function () {
            for (var ii = 0; ii < this._unbinders.length; ii++) this._unbinders[ii]();
            this._unbinders.length = 0;
            BB.Modules.SendLater.SendLaterButtonViewController.prototype.destroy.call(this)
        }
    });
    Library.set("BentoBox.Modules.SendLater.SendLaterButtonReplyViewController",
        SendLaterButtonReplyViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        BB = Streak.BentoBox;
    var SendLaterList = {
        inView: false,
        initialized: false,
        active: true,
        init: function (cb) {
            var self = this;
            self.active = true;
            if (!self.initialized) {
                Gmail.observe("viewChanged", function () {
                    self.render()
                });
                Gmail.observe("ajaxListRefresh", $.proxy(this.render, this));
                Gmail.observe("previewPaneChanged", $.proxy(self.render, this));
                BB.bind("logged_out", function () {
                    self.active = false
                });
                BB.bind("newSendLater", $.proxy(this.render,
                    this))
            }
            self.initialized = true;
            if (cb) cb()
        },
        teardown: function () {
            if (Gmail.getLiveView() === Gmail.Constants.Drafts) {
                var rows = Gmail.getVisibleThreadRows();
                if (rows.length > 0) {
                    rows.find(".bbSendLater").remove();
                    rows.find("td:last span").show()
                }
            }
            this.active = false
        },
        reup: function () {
            this.active = true
        },
        render: function () {
            var self = this;
            if (Gmail.getLiveView() === Gmail.Constants.Drafts && Gmail.isListView()) Streak.Requester.gmailGetList("drafts", function (res) {
                if (res) {
                    var threads = BB.Threads.buildThreadList(res, "send later list");
                    BB.Threads.processThreadList(threads);
                    self.realRender()
                }
            })
        },
        realRender: function () {
            var self = this;
            if (!self.active) return;
            this.inView = false;
            if (Gmail.getLiveView() === Gmail.Constants.Drafts && Gmail.isListView()) {
                this.inView = true;
                var rows = Gmail.getVisibleThreadRows();
                for (var i = 0; i < rows.length; i++) {
                    rows[i].rowNode.find(".bbSendLater").remove();
                    rows[i].rowNode.find("td:last span").show()
                }
                var threads = BB.Threads.getCurrent();
                var hexIds = _.pluckPlus(threads, function (thread) {
                    if (thread) return thread.key();
                    return null
                });
                var allNull = !_.any(hexIds, function (hexId) {
                    return !!hexId
                });
                var db = Gmail.getDiscardDraftsButton();
                db.unbind(".bbEvents");
                db.bind("click.bbEvents", function (e) {
                    var threads = BB.Threads.getActive();
                    _.each(threads, function (thread) {
                        if (thread && thread.key()) {
                            var sendLater = BB.Data.getSendLaterByHexId(thread.key());
                            if (sendLater && !sendLater.isDeleted()) sendLater.del()
                        }
                    })
                });
                if (!allNull) BB.Data.getSendLaterListByHexIds(hexIds, function (list) {
                    if (list.length > 0) {
                        Gmail.getCurrentMain().find("table").filter(":FastVisible(noCompute)").find("colgroup col.xX").css({
                            width: "27ex"
                        });
                        if (rows.length > 0) _.each(rows, function (row) {
                            self.addIndicator(row)
                        })
                    }
                })
            }
        },
        addIndicator: function (row) {
            var hexId = null;
            var thread = BB.Threads.getThreadFromRow(row);
            if (thread && thread.get) hexId = thread.key();
            if (hexId) {
                var sendLater = BB.Data.getSendLaterByHexId(hexId);
                var timeTD = null;
                var timeSpan = null;
                if (Gmail.isVerticalSplitPreviewPane()) {
                    timeTD = row.rowNode.find("td.apt");
                    timeSpan = timeTD.find(".apm")
                } else {
                    timeTD = row.rowNode.find("td:last");
                    timeSpan = timeTD.find("span")
                }
                var sendLaters = timeTD.find(".bbSendLater");
                if (sendLaters.length);
                else if (sendLater && sendLater.get("sendDate") && sendLater.get("status") === "SCHEDULED") {
                    timeSpan.hide();
                    sendLaters.hide();
                    timeSpan.before('<span class="bbSendLater sendLater">' + BB.Locale.getString("send_later_list_scheduled") + ": " + Date.ccreate(sendLater.get("sendDate")).customFormat("shortFormat") + "</span>")
                } else if (sendLater && sendLater.get("status") === "ERROR_ON_SEND") {
                    timeSpan.hide();
                    sendLaters.hide();
                    timeSpan.before('<span class="bbSendLater errorSendLater">' + BB.Locale.getString("send_later_list_error") +
                        "</span>")
                } else if (sendLater && sendLater.get("status") === "SENT") {
                    timeSpan.hide();
                    sendLaters.hide();
                    timeSpan.before('<span class="bbSendLater sendLaterSent">' + BB.Locale.getString("send_later_sent") + "</span>")
                }
                if (sendLater) {
                    sendLater.bind("remove", null, function () {
                        if (row && row.rowNode && row.rowNode.is(":FastVisible(noCompute)")) {
                            row.rowNode.find(".bbSendLater").remove();
                            timeSpan.show()
                        } else return true
                    });
                    sendLater.bind("set", "sendDate", function () {
                        if (row && row.rowNode && row.rowNode.is(":FastVisible(noCompute)")) row.rowNode.find(".bbSendLater").html(BB.Locale.getString("send_later_list_scheduled") +
                            ": " + Date.ccreate(sendLater.get("sendDate")).customFormat("shortFormat"));
                        else return true
                    })
                }
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "sendLaterListInitialized",
        functionToCall: SendLaterList.init,
        functionContext: SendLaterList,
        dependentFunctionKeys: ["gmailLoaded", "data.sendLaters.initialized", "htmlLoaded", "threadsInitialized"]
    });
    BB.Modules.SendLaterList = SendLaterList
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        HTML = Streak.HTML,
        Eventer = Streak.Eventer,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        nonPopupVariations: ["BasicModal", "Modal_var1", "Modal_var2", "Modal_var3"],
        newUserVariations: ["Modal_var3"],
        popupVariations: ["SideBySide", "OauthFirst"],
        defaultAccounts: ["streak.web.test.1@gmail.com", "streak.web.test.2@gmail.com", "streak.web.test.3@gmail.com", "streak.web.test.4@gmail.com",
            "test1@streak.com", "assignedtoinboxviewtest@gmail.com", "assignedtoinsidebartest@gmail.com", "assignedtotest@gmail.com", "boxesbuttontest@gmail.com", "boxsavingtestfields@gmail.com", "boxsavingtestproperties@gmail.com", "boxsidebartestfields@gmail.com", "boxsidebartestproperties@gmail.com", "boxviewextra@gmail.com", "boxviewtestfields@gmail.com", "boxviewtestproperties@gmail.com", "mailmergestreaktest@gmail.com", "moveboxtest@gmail.com", "pipelinestreaktest@gmail.com", "remindersstreaktest@gmail.com", "savedviewstest@gmail.com",
            "sendlatercomposetest@gmail.com", "sendlaterreplytest@gmail.com", "snippetsstreaktest@gmail.com", "spreadsheetsettings@gmail.com", "streaksettingstest@gmail.com", "streaksettings2test@gmail.com", "systemcolumnstest@gmail.com", "tourstreaktest@gmail.com"
        ]
    };
    var self, SigninPrompt;
    self = SigninPrompt = {
        currentOauthArgs: null,
        trackingContext: {
            widgetContext: "signinPrompt"
        },
        initLoggedOut: function (callback) {
            if (this.isDismissedForever()) {
                if (callback) callback();
                return
            }
            this.initVariation(function () {
                self.trackingContext.promptVariation =
                    self.promptVariation;
                self.track("startPrompt");
                self["start" + self.promptVariation]();
                if (callback) callback()
            })
        },
        initVariation: function (doneCallback) {
            var variationArray;
            if (Streak.debugTrackUser && Streak.debugTrackUser.isUserFirstCall) variationArray = CONSTANTS.newUserVariations;
            else variationArray = CONSTANTS.nonPopupVariations.concat(CONSTANTS.popupVariations); if (CONSTANTS.defaultAccounts.indexOf(BB.userEmail) > -1) {
                self.promptVariation = "Default";
                doneCallback()
            } else {
                self.promptVariation = _.shuffle(variationArray)[_.random(0,
                    variationArray.length - 1)];
                if (CONSTANTS.popupVariations.indexOf(self.promptVariation) > -1) this.arePopupsDisabled(function (isDisabled) {
                    if (isDisabled) {
                        variationArray = CONSTANTS.nonPopupVariations;
                        self.promptVariation = _.shuffle(variationArray)[_.random(0, variationArray.length - 1)]
                    }
                    doneCallback()
                });
                else doneCallback()
            }
        },
        arePopupsDisabled: function (doneCallback) {
            var tempWindow = window.open("//mail.google.com/404", "test popup", "height=" + 2 + ",width=" + 2 + ",left=" + -2 + ",top=" + -2 + ",toolbar=0,resizable=0,menubar=0,location=0,status=0,scrollbars=0");
            if (_.isNotReal(tempWindow)) {
                doneCallback(true);
                return
            }
            setTimeout(function () {
                if (_.isReal(tempWindow.outerHeight) && tempWindow.outerHeight === 0) doneCallback(true);
                else {
                    tempWindow.close();
                    doneCallback(false)
                }
            }, 50)
        },
        startSideBySide: function () {
            var width = $(window).width();
            var promptWidth = 850;
            var widthDifference = Math.max(width - promptWidth, 0);
            var sideOffset = widthDifference / 2;
            var inner = HTML.get("signinPromptOverlay", true);
            var overlay = BB.Widgets.Tour.Overlay.create({
                infoHTML: inner,
                infoCss: {
                    top: "100px",
                    left: "auto",
                    right: sideOffset + "px",
                    fontSize: "120%",
                    width: "380px"
                },
                opacity: 0.8,
                showRightButton: false,
                showLeftButton: false
            });
            var dismiss = inner.find("#signinPromptDismissForever");
            dismiss.on("click", function (e) {
                self.track("dismissForeverClicked");
                e.preventDefault();
                self.dismissForever();
                overlay.destroy();
                self.openWindow.close()
            });
            overlay.show();
            this.openOauth(sideOffset, 150, 550, 430, function () {
                overlay.destroy()
            })
        },
        startOauthFirst: function () {
            self.openOauth(null, null, null, null, null, function () {
                self.track("signinPromptPostModalShow");
                var inner = HTML.get("signinPromptModal", true);
                var modal = BB.Widgets.Modal.create({
                    inner: inner,
                    showCancel: true,
                    showConfirm: false,
                    escClose: false,
                    close: false,
                    showTitle: false,
                    width: "500px",
                    cancelText: "Not Now",
                    cancelFunc: function () {
                        modal.close();
                        self.track("signingPromptPostModalCancel")
                    }
                });
                modal.show();
                var promptButtonContainer = inner.find("#signinPromptButton");
                var promptButton = BB.Widgets.Button.create({
                    name: "Login Now",
                    color: "blue",
                    onFunc: function () {
                        self.track("signinPromptPostModalLogin");
                        modal.close();
                        self.openOauth()
                    }
                });
                promptButton.el.css({
                    margin: "50px auto 50px auto",
                    display: "block",
                    width: "200px",
                    height: "40px",
                    fontSize: "20px",
                    paddingTop: "13px"
                });
                promptButtonContainer.append(promptButton.el);
                inner.find("#signinPromptHelp").html("Streak needs access to function. We don't make any changes to your account and you can remove Streak at any time.");
                var dismiss = inner.find("#signinPromptDismissForever");
                dismiss.on("click", function (e) {
                    e.preventDefault();
                    self.dismissForever();
                    modal.close();
                    self.openWindow.close()
                })
            })
        },
        callShowModal2: function () {
            this.startModal2("_var1", {}, inner)
        },
        startModalVideo: function (name, extra_options) {
            defaults = {
                promptButtonText: "Login Now",
                showCancel: false,
                showDismiss: false,
                mainImage: "videoPlayer.png",
                close: false
            };
            options = {};
            $.extend(options, defaults, extra_options);
            self.track("signinPrompt" + name + "Show");
            inner = Streak.$("<div></div>");
            var iframeYoutube = $('<iframe width="560" height="315" src="http://www.youtube.com/embed/VsCCCshi-V0?autoplay=1" frameborder="0" allowfullscreen></iframe>');
            var footerImgSource =
                options.mainImage;
            var footerImg = Streak.server + Streak.combinedPath + "images/" + footerImgSource;
            var imageContainer = $("<div class='streak_container_modal_why_use_img'><img src='" + footerImg + "'></img></div>").appendTo(inner);
            imageContainer.append("<div class='streak_signin_show'>Let us show you how to use Streak in under 2 minutes! Here's an example of how a sales person may use Streak - but you can use it to manage any process. </div>");
            imageContainer.click(function (e) {
                self.track("videoSigningClicked");
                $(imageContainer.children()).hide();
                iframeYoutube.appendTo(imageContainer)
            });
            inner.append("<div id='signinPromptButton'></div>");
            var modal = BB.Widgets.Modal.create({
                inner: inner,
                showCancel: options.showCancel,
                showConfirm: false,
                escClose: options.close,
                close: options.close,
                title: BB.Locale.getString("why_streak_goodbye_stress"),
                width: "560px",
                cancelText: options.cancelText,
                cancelFunc: function () {
                    modal.close();
                    self.track("signinPrompt" + name + "Cancel")
                }
            });
            modal.show();
            var promptButtonContainer = inner.find("#signinPromptButton");
            var promptButton = BB.Widgets.Button.create({
                name: options.promptButtonText,
                color: "blue",
                onFunc: function () {
                    self.track("signinPrompt" + name + "Login");
                    modal.close();
                    self.openOauth()
                }
            });
            promptButton.el.css({
                margin: "50px auto 0px auto",
                display: "block",
                width: "200px",
                height: "40px",
                fontSize: "20px",
                paddingTop: "10px"
            });
            promptButtonContainer.append(promptButton.el)
        },
        startModal2: function (name, extra_options, inner) {
            defaults = {
                promptButtonText: "Login Now",
                showCancel: false,
                showDismiss: false,
                mainImage: "ver1StreakModalSignin.png",
                close: false
            };
            options = {};
            $.extend(options, defaults, extra_options);
            self.track("signinPrompt" + name + "Show");
            inner = Streak.$("<div></div>");
            var containerMain = $("<div class='streak_container_modal_why_use'></div>").appendTo(inner);
            var bulletContainer01 = $("<div class='streak_bulletContainer'> </div>").appendTo(containerMain);
            var bulletPointImg = Streak.server + Streak.combinedPath + "images/bulletPointImage.png";
            var img01 = $("<img src='" + bulletPointImg + "'></img>");
            var bullet01 = $("<div class='bulletStreakModal'>" +
                BB.Locale.getString("why_streak_bullet_01_01") + "</div>");
            bulletContainer01.append(img01);
            bulletContainer01.append(bullet01);
            var bulletContainer02 = $("<div class='streak_bulletContainer'> </div>").appendTo(containerMain);
            var img02 = $("<img src='" + bulletPointImg + "'></img>");
            var bullet02 = $("<div class='bulletStreakModal'>" + BB.Locale.getString("why_streak_bullet_01_02") + "</div>");
            bulletContainer02.append(img02);
            bulletContainer02.append(bullet02);
            var bulletContainer03 = $("<div class='streak_bulletContainer'> </div>").appendTo(containerMain);
            var img03 = $("<img src='" + bulletPointImg + "'></img>");
            var bullet03 = $("<div class='bulletStreakModal'>" + BB.Locale.getString("why_streak_bullet_01_03") + "</div>");
            bulletContainer03.append(img03);
            bulletContainer03.append(bullet03);
            var bulletContainer04 = $("<div class='streak_bulletContainer'> </div>").appendTo(containerMain);
            var img04 = $("<img src='" + bulletPointImg + "'></img>");
            var bullet04 = $("<div class='bulletStreakModal'>" + BB.Locale.getString("why_streak_bullet_01_04") + "</div>");
            bulletContainer04.append(img04);
            bulletContainer04.append(bullet04);
            var footerImgSource = options.mainImage;
            var footerImg = Streak.server + Streak.combinedPath + "images/" + footerImgSource;
            var imageContainer = $("<div class='streak_container_modal_why_use_imgNormal'><img src='" + footerImg + "'></img></div>").appendTo(inner);
            inner.append("<div id='signinPromptButton'></div>");
            var modal = BB.Widgets.Modal.create({
                inner: inner,
                showCancel: options.showCancel,
                showConfirm: false,
                escClose: options.close,
                close: options.close,
                title: BB.Locale.getString("why_streak_goodbye_stress"),
                width: "600px",
                cancelText: options.cancelText,
                cancelFunc: function () {
                    modal.close();
                    self.track("signinPrompt" + name + "Cancel")
                }
            });
            modal.show();
            var promptButtonContainer = inner.find("#signinPromptButton");
            var promptButton = BB.Widgets.Button.create({
                name: options.promptButtonText,
                color: "blue",
                onFunc: function () {
                    self.track("signinPrompt" + name + "Login");
                    modal.close();
                    self.openOauth()
                }
            });
            promptButton.el.css({
                margin: "50px auto 0px auto",
                display: "block",
                width: "200px",
                height: "40px",
                fontSize: "20px",
                paddingTop: "10px"
            });
            promptButtonContainer.append(promptButton.el)
        },
        startModal: function (name, extra_options) {
            defaults = {
                promptButtonText: "Continue with Streak",
                cancelText: "Not Now",
                showCancel: true,
                showDismiss: true,
                close: false
            };
            options = {};
            $.extend(options, defaults, extra_options);
            self.track("signinPrompt" + name + "Show");
            var inner;
            if (options.showDismiss) inner = HTML.get("signinPromptModal", true);
            else {
                inner = HTML.get("signinPromptModal", true);
                inner.find("#signinPromptDismissForever").remove()
            }
            var modal = BB.Widgets.Modal.create({
                inner: inner,
                showCancel: options.showCancel,
                showConfirm: false,
                escClose: options.close,
                close: options.close,
                showTitle: false,
                width: "500px",
                cancelText: options.cancelText,
                cancelFunc: function () {
                    modal.close();
                    self.track("signinPrompt" + name + "Cancel")
                }
            });
            modal.show();
            var promptButtonContainer = inner.find("#signinPromptButton");
            var promptButton = BB.Widgets.Button.create({
                name: options.promptButtonText,
                color: "blue",
                onFunc: function () {
                    self.track("signinPrompt" + name + "Login");
                    modal.close();
                    self.openOauth()
                }
            });
            promptButton.el.css({
                margin: "50px auto 50px auto",
                display: "block",
                width: "200px",
                height: "40px",
                fontSize: "20px",
                paddingTop: "10px"
            });
            promptButtonContainer.append(promptButton.el);
            if (options.showDismiss) {
                var dismiss = inner.find("#signinPromptDismissForever");
                dismiss.on("click", function (e) {
                    e.preventDefault();
                    self.dismissForever();
                    modal.close();
                    self.openWindow.close()
                })
            }
        },
        startBasicModal: function () {
            self.startModal("Modal", {})
        },
        startModal_var1: function () {
            self.startModal("Modal_var1", {
                showCancel: false
            })
        },
        startModal_var2: function () {
            self.startModal("Modal_var2", {
                showCancel: false,
                promptButtonText: "Continue with Streak"
            })
        },
        startModal_var3: function () {
            self.startModal("Modal_var3", {
                showCancel: false,
                promptButtonText: "Continue"
            })
        },
        startModal_var4_new: function () {
            self.startModal2("Modal_var4_new", {
                promptButtonText: "Continue with Streak",
                mainImage: "ver1StreakModalSignin.png"
            })
        },
        startModal_var5_new: function () {
            self.startModal2("Modal_var5_new", {
                promptButtonText: "Continue with Streak",
                mainImage: "samplePipeline.png"
            })
        },
        startModal_var6_new: function () {
            self.startModalVideo("Modal_var6_new", {
                promptButtonText: "Continue with Streak"
            })
        },
        startDefault: function () {
            BB.Modules.TopNav.openMenu()
        },
        openOauth: function (left, top, height, width, closeCB, notLoggedInCB) {
            self.currentOauthArgs = arguments;
            self.track("showOauth");
            var loadingOauth = HTML.get("loadingOauth");
            if (_.isNotReal(height)) height = 550;
            if (_.isNotReal(width)) width = 560;
            if (_.isReal(left)) left = (window.screenX || window.screenLeft || 0) + (left || 0);
            else left = window.screenX + (window.outerWidth / 2 - width / 2); if (_.isReal(top)) top = (window.screenY || window.screenTop ||
                0) + (top || 0);
            else top = window.screenY + (window.outerHeight / 2 - height / 2);
            var oauthEmail = Streak.originalEmail || BB.userEmail;
            var oauthLoaderHTML = loadingOauth({
                streakServer: Streak.server,
                oauthEmail: oauthEmail
            });
            oauthLoaderHTML = "data:text/html;base64," + btoa(oauthLoaderHTML);
            self.openWindow = window.open(oauthLoaderHTML, "Streak Authorization", "height=" + height + ",width=" + width + ",left=" + left + ",top=" + top + ",toolbar=0,resizable=0,menubar=0,location=0,status=0,scrollbars=0");
            self.closeChecker = _.repeatEvery(function () {
                if (self.openWindow &&
                    self.openWindow.closed) {
                    self.currentOauthArgs = null;
                    self.closeChecker.stop();
                    BB.Modules.TopNav.showLoading();
                    if (closeCB) closeCB();
                    self.checkUserAuth(0, notLoggedInCB)
                }
            }, 500)
        },
        checkUserAuth: function (num, notLoggedInCB) {
            APIRequester.get({
                msgUrl: "users/me"
            }, function (data) {
                if (data) {
                    self.track("signinPromptComplete");
                    BB.UserStateController.userLoggedIn(data);
                    return
                }
                if (num < 5) setTimeout(function () {
                    self.checkUserAuth(num + 1, notLoggedInCB)
                }, 500);
                else {
                    self.track("signinPromptDenied");
                    BB.Modules.TopNav.showExclamation();
                    if (notLoggedInCB) notLoggedInCB()
                }
            }, function () {
                BB.logError("error user signing in");
                BB.trigger("error_load");
                BB.isError = true;
                BB.Modules.TopNav.showExclamation()
            })
        },
        isDismissedForever: function () {
            return BB.LocalSettings.get("topNav/loggedOutDismissed")
        },
        dismissForever: function () {
            BB.LocalSettings.set("topNav/loggedOutDismissed", true)
        },
        track: function (event) {
            var oauthEmail = Streak.originalEmail || BB.userEmail;
            BB.Tracker.trackStreakActive(this.trackingContext, {
                eventName: event,
                oauthEmail: oauthEmail
            })
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "signinPromptInitialized",
        functionToCall: SigninPrompt.initLoggedOut,
        functionContext: SigninPrompt,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "localeLoaded", "userLoggedOut"]
    });
    BB.Modules.SigninPrompt = SigninPrompt
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsMenuView = function () {
        Streak.ViewControllerBase.call(this);
        this._menu = null;
        this._searchView = null;
        this._snippetListView = null;
        this._addSnippetMenuItem = null;
        this._manageSnippetMenuItem = null;
        this._emptySnippetSection = null;
        this._searchListSeparator = null;
        this._setupUIComponents()
    };
    SnippetsMenuView.prototype =
        Object.create(Streak.ViewControllerBase.prototype);
    _.extend(SnippetsMenuView.prototype, {
        getElement: function () {
            return this._menu.getElement()
        },
        addSearchView: function (searchView) {
            this._searchView = searchView;
            this._searchListSeparator = this._menu.addSeparator(true);
            this._menu.addSection(searchView.getElement(), true)
        },
        addSnippetListView: function (snippetListView) {
            this._snippetListView = snippetListView;
            this._menu.addSection(this._snippetListView.getElement(), true)
        },
        showEmptyMessage: function () {
            this._searchView.getElement().hide();
            this._snippetListView.getEl().hide();
            this._searchListSeparator.hide();
            this._emptySnippetSection.show();
            this._manageSnippetMenuItem.hide()
        },
        showList: function () {
            this._searchView.getElement().show();
            this._snippetListView.getEl().show();
            this._searchListSeparator.show();
            this._emptySnippetSection.hide();
            this._manageSnippetMenuItem.show()
        },
        reset: function () {
            this._menu.reset()
        },
        destroy: function () {
            this._menu.destroy()
        }
    });
    _.extend(SnippetsMenuView.prototype, {
        _setupUIComponents: function () {
            this._menu = BB.Widgets.Menu.create({
                maxHeight: 370
            });
            this._menu.getElement().addClass("snippetsMenuView");
            this._setupEmptySnippetSection();
            this._menu.addSeparator();
            this._setupAddSnippetItem();
            this._setupManageSnippetItem()
        },
        _setupEmptySnippetSection: function () {
            this._emptySnippetSection = $(document.createElement("div"));
            this._emptySnippetSection.addClass("streak__snippetsMenu_emptySection");
            this._emptySnippetSection[0].innerHTML = BB.Locale.getString("snippets_empty");
            this._menu.addSection(this._emptySnippetSection)
        },
        _setupAddSnippetItem: function () {
            var self =
                this;
            this._addSnippetMenuItem = this._menu.addItem(BB.Locale.getString("create_snippet"), function () {
                self._callDelegateFunction("createSnippet")
            });
            this._addSnippetMenuItem.addClass("streak__createSnippet")
        },
        _setupManageSnippetItem: function () {
            var self = this;
            this._manageSnippetMenuItem = this._menu.addItem(BB.Locale.getString("manage_snippets"), function () {
                self._callDelegateFunction("manageSnippets")
            });
            this._manageSnippetMenuItem.addClass("streak__manageSnippet")
        }
    });
    BB.Modules.Snippets = {};
    BB.Modules.Snippets.SnippetsMenuView =
        SnippetsMenuView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsMenuViewController = function () {
        Streak.ViewControllerBase.call(this);
        this._searchViewController = null;
        this._listViewController = null;
        this._snippetsSearchController = null;
        this._snippetsMenuModel = null;
        this._view = null;
        this._snippetSelectedCallback = null;
        this._manageOpenCallback = null;
        this._dataSource = null;
        this._setupViewControllers();
        this._setupTheView();
        this._setupDelegates()
    };
    SnippetsMenuViewController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(SnippetsMenuViewController.prototype, {
        use: function (options) {
            this._view.reset();
            this._searchViewController.clearQuery();
            this._snippetSelectedCallback = options.snippetSelectedCallback;
            this._manageOpenCallback = options.manageOpenCallback;
            this._doesUserHaveSnippetsAndModifyDisplayAppropriately()
        },
        getElement: function () {
            return this._view.getElement()
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource;
            this._listViewController.reset()
        },
        destroy: function () {
            Streak.ViewControllerBase.prototype.destroy.call(this);
            this._searchViewController.destroy();
            this._listViewController.destroy();
            this._view.destroy()
        }
    });
    _.extend(SnippetsMenuViewController.prototype, {
        createSnippet: function () {
            if (this._manageOpenCallback) this._manageOpenCallback();
            BB.Modules.Snippets.SnippetsManageViewController.use();
            if (!this._dataSource) return;
            var subject = this._dataSource.getSubject();
            var body = this._dataSource.getBody();
            BB.Modules.Snippets.SnippetsManageViewController.addNewSnippet({
                subject: subject,
                snippetText: body
            });
            BB.Tracker.track("create snippets open")
        },
        manageSnippets: function () {
            if (this._manageOpenCallback) this._manageOpenCallback();
            BB.Modules.Snippets.SnippetsManageViewController.use();
            BB.Tracker.track("manage snippets open")
        },
        rowPressed: function (snippetRow) {
            if (!snippetRow) return;
            if (this._snippetSelectedCallback) this._snippetSelectedCallback(snippetRow.data)
        }
    });
    _.extend(SnippetsMenuViewController.prototype, {
        _setupViewControllers: function () {
            this._searchViewController = new BB.Widgets.SearchSimpleVC({
                placeholder: BB.Locale.getString("search_all_snippets")
            });
            this._snippetsMenuModel = new BB.Widgets.ListView.ListViewBaseModel;
            this._listViewController = new BB.Widgets.ListView.ListViewViewController;
            this._snippetsSearchController = new BB.Modules.Snippets.SnippetsSearchController
        },
        _setupDelegates: function () {
            this._listViewController.setDataSource(this._snippetsMenuModel);
            this._snippetsSearchController.setDataSource(this._snippetsMenuModel);
            this._snippetsMenuModel.addDelegate(this);
            this._searchViewController.addDelegate(this._listViewController);
            this._searchViewController.addDelegate(this._snippetsSearchController);
            this._listViewController.addDelegate(this);
            this._view.addDelegate(this)
        },
        _setupTheView: function () {
            this._view = new BB.Modules.Snippets.SnippetsMenuView;
            this._view.addSnippetListView(this._listViewController.getView());
            this._view.addSearchView(this._searchViewController.getView())
        }
    });
    _.extend(SnippetsMenuViewController.prototype, {
        _doesUserHaveSnippetsAndModifyDisplayAppropriately: function () {
            if (BB.Data.getAllSnippets().length > 0) {
                this._view.showList();
                this._searchViewController.focus()
            } else this._view.showEmptyMessage()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "snippetsMenuViewControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.Snippets.SnippetsMenuViewController = new SnippetsMenuViewController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.snippets.initialized", "localeLoaded", "htmlLoaded",
            "data.pipelines.initialized"
        ]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsSearchController = function () {
        Streak.ViewControllerBase.call(this);
        this._snippetListModel = null;
        this._query = null;
        this._delayedRenderTimeout = null;
        this._snippetSectionRowMap = {};
        this._bindToSnippetCollectionChanges()
    };
    SnippetsSearchController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(SnippetsSearchController.prototype, {
        PERSONAL_SNIPPET_KEY: "snippets_personal",
        _bindToSnippetCollectionChanges: function () {
            var self = this;
            var delayedQuery = _.debounce(function () {
                self._querySnippets(self._query)
            }, 300);
            BB.Data.getAllSnippets().bind("collectionChange", function () {
                delayedQuery()
            });
            var delayedUpdate = _.debounce(function () {
                self._updateResults()
            }, 300);
            BB.Data.getAllSnippets().bind("modelChange", function () {
                delayedUpdate()
            })
        },
        _updateResults: function () {
            var self = this;
            clearTimeout(this._delayedRenderTimeout);
            this._delayedRenderTimeout =
                setTimeout(function () {
                    self._querySnippets(self._query)
                }, 100)
        },
        setDataSource: function (snippetListModel) {
            this._snippetsListModel = snippetListModel;
            this._querySnippets("")
        },
        queryChange: function (query) {
            this._querySnippets(query)
        },
        destroy: function () {
            this._snippetsListModel = null
        },
        _querySnippets: function (query) {
            this._query = query;
            var self = this;
            this._snippetsListModel.removeAllSections();
            var groupedSnippets = _.chain(BB.Data.getAllSnippets()).filter(function (snippet) {
                if (!query) return true;
                return snippet.displayName().toLowerCase().indexOf(query.toLowerCase()) > -1
            }).sortBy(function (snippet) {
                return snippet.displayName()
            }).groupBy(function (snippet) {
                return snippet.get("pipelineKey") || self.PERSONAL_SNIPPET_KEY
            }).value();
            this._addSnippetSections(groupedSnippets);
            this._callDelegateFunction("snippetsRendered")
        },
        _addSnippetSections: function (groupedSnippets) {
            this._snippetSectionRowMap = {};
            var pipelines = [];
            for (var pipelineKey in groupedSnippets)
                if (pipelineKey !== this.PERSONAL_SNIPPET_KEY) pipelines.push(BB.Data.getPipeline(pipelineKey));
            pipelines = _.sortBy(pipelines,
                function (pipeline) {
                    return pipeline.displayName()
                });
            if (groupedSnippets[this.PERSONAL_SNIPPET_KEY]) this._addSnippetSection(BB.Locale.getString(this.PERSONAL_SNIPPET_KEY), groupedSnippets[this.PERSONAL_SNIPPET_KEY]);
            for (var ii = 0; ii < pipelines.length; ii++) this._addSnippetSection(pipelines[ii].displayName(), groupedSnippets[pipelines[ii].key()])
        },
        _addSnippetSection: function (pipelineTitle, snippets) {
            var snippetRows = _.map(snippets, this._convertSnippetToListRow);
            var sectionIndex = this._snippetsListModel.addSection({
                name: pipelineTitle,
                rows: snippetRows,
                doesSectionToggle: true,
                extraHeaderText: "(" + snippets.length + ")"
            });
            for (var ii = 0; ii < snippets.length; ii++) this._snippetSectionRowMap[snippets[ii].guid] = {
                sectionIndex: sectionIndex,
                rowIndex: ii
            }
        },
        _convertSnippetToListRow: function (snippet) {
            var snippetText = snippet.displayName().escapeHTML();
            if (snippet.get("snippetKeyShortcut")) snippetText += '<span class="shortHint">(' + snippet.get("snippetKeyShortcut").escapeHTML() + ")</span>";
            return {
                text: snippetText,
                data: snippet
            }
        },
        getSnippetListPosition: function (snippet) {
            return this._snippetSectionRowMap[snippet.guid]
        }
    });
    BB.Modules.Snippets.SnippetsSearchController = SnippetsSearchController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsComposeMasterController = function () {
        Gmail.GmailComposeManager.registerModifierModule(this);
        Gmail.GmailReplyManager.registerModifierModule(this)
    };
    _.extend(SnippetsComposeMasterController.prototype, {
        getViewControllers: function () {
            return [new BB.Modules.Snippets.SnippetsShortcutListenerViewController, new BB.Modules.Snippets.SnippetsAutoCompleteMenuViewController,
                new BB.Modules.Snippets.SnippetsButtonComposeViewController]
        }
    });
    DependencyManager.addFunction({
        functionKey: "snippetsComposeMasterControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.Snippets.SnippetsComposeMasterController = new SnippetsComposeMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailReplyAreaMasterControllerInitialized", "gmailComposeWindowMasterControllerInitialized", "snippetsMenuViewControllerInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsButtonComposeViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._menuButton = null
    };
    SnippetsButtonComposeViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(SnippetsButtonComposeViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController =
                composeWindowViewController;
            this._setupMenuButton()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "BOTTOM_TOOLBAR"
        },
        getModificationPlacement: function () {
            return "BEFORE_FORMATTING"
        },
        getModificationPriority: function () {
            return 3
        },
        getModificationElement: function () {
            return this._menuButton.getElement()
        },
        getListenerType: function () {
            return "CHORD"
        },
        getListenerChord: function () {
            return "ctrl+."
        },
        callListenerCallback: function () {
            this._menuButton.on();
            BB.Tracker.track("snippet menu open with chord")
        },
        getSubject: function () {
            if (this._composeWindowViewController.isReply && this._composeWindowViewController.isReply()) return "";
            return this._composeWindowViewController.getSubject()
        },
        getBody: function () {
            return this._composeWindowViewController.getComposeBodyHTML()
        },
        destroy: function () {
            this._menuButton.destroy();
            this._composeWindowViewController = null;
            this._callDelegateFunction("destroy", this);
            Streak.ViewControllerBase.prototype.destroy.call(this)
        }
    });
    _.extend(SnippetsButtonComposeViewController.prototype, {
        _setupMenuButton: function () {
            var self =
                this;
            this._menuButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton({
                type: "GmailIcon",
                color: "icon",
                iconClass: "snippetIcon",
                menu: BB.Modules.Snippets.SnippetsMenuViewController,
                isBottomAligned: true,
                isFixedPosition: true,
                postOnFunction: function () {
                    BB.Tracker.track("snippets menu open");
                    self._prepareMenu()
                }
            });
            this._menuButton.addClass("streak__snippetButton");
            this._menuButton.setTooltip(BB.Locale.getString("snippets_tooltip"))
        },
        _prepareMenu: function () {
            var self = this;
            BB.Modules.Snippets.SnippetsMenuViewController.use({
                snippetSelectedCallback: function (snippet) {
                    self._menuButton.off();
                    self._snippetSelected(snippet)
                },
                manageOpenCallback: function () {
                    self._menuButton.off()
                }
            });
            BB.Modules.Snippets.SnippetsMenuViewController.setDataSource(this)
        },
        _snippetSelected: function (snippet) {
            this._composeWindowViewController.addTextAtCurrentCursorPosition(snippet.getText());
            if (snippet.get("subject")) this._composeWindowViewController.setSubject(snippet.get("subject"));
            this._composeWindowViewController.notify("snippetAdded", snippet);
            BB.Tracker.track("snippet inserted", {
                method: "snippet menu"
            })
        }
    });
    BB.Modules.Snippets.SnippetsButtonComposeViewController =
        SnippetsButtonComposeViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsShortcutListenerViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._characterSequenceModel = null
    };
    SnippetsShortcutListenerViewController.prototype = Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(SnippetsShortcutListenerViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController =
                composeWindowViewController;
            this._setupCharacterSequenceModel()
        },
        getListenerType: function () {
            return "CHARACTER_SEQUENCE"
        },
        getCharacterSequenceListener: function () {
            return this._characterSequenceModel
        },
        destroy: function () {
            this._characterSequenceModel.destroy();
            this._composeWindowViewController = null;
            this._callDelegateFunction("destroy", this);
            Streak.ViewControllerBase.prototype.destroy.call(this)
        },
        _setupCharacterSequenceModel: function () {
            this._characterSequenceModel = new BB.Modules.Snippets.SnippetsCharacterSequenceModel;
            this._characterSequenceModel.addDelegate(this)
        },
        exactMatchFound: function (sequence) {
            var snippet = this._getSnippetWithSequence(sequence);
            if (!snippet) return;
            if (snippet.get("subject")) this._composeWindowViewController.setSubject(snippet.get("subject"));
            this._composeWindowViewController.replaceLastNCharacters(sequence.length - 1, snippet.getText());
            this._composeWindowViewController.notify("snippetAdded", snippet);
            BB.Tracker.track("snippet inserted", {
                method: "shortcut entered"
            })
        },
        _getSnippetWithSequence: function (sequence) {
            var snippets =
                BB.Data.getAllSnippets();
            for (var ii = 0; ii < snippets.length; ii++)
                if (snippets[ii].get("snippetKeyShortcut") === sequence) return snippets[ii]
        }
    });
    BB.Modules.Snippets.SnippetsShortcutListenerViewController = SnippetsShortcutListenerViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsCharacterSequenceModel = function () {
        BB.Controllers.CharacterSequenceController.CharacterSequenceBaseDataSource.call(this);
        this._sequences = [];
        this._unbinders = [];
        this._setupSnippetBindings();
        this._setupSequences()
    };
    SnippetsCharacterSequenceModel.prototype = Object.create(BB.Controllers.CharacterSequenceController.CharacterSequenceBaseDataSource.prototype);
    _.extend(SnippetsCharacterSequenceModel.prototype, {
        getSequences: function () {
            return this._sequences
        },
        onMatchShouldSuppress: function () {
            return true
        },
        destroy: function () {
            BB.Controllers.CharacterSequenceController.CharacterSequenceBaseDataSource.prototype.destroy.call(this);
            for (var ii = 0; ii < this._unbinders.length; ii++) this._unbinders[ii]()
        },
        _setupSnippetBindings: function () {
            var self = this;
            this._unbinders.push(BB.Data.getAllSnippets().bind("collectionChange", function () {
                self._setupSequences()
            }));
            this._unbinders.push(BB.Data.getAllSnippets().bind("modelChange",
                function (eventName, property) {
                    if (property === "snippetKeyShortcut") self._setupSequences()
                }))
        },
        _setupSequences: function () {
            this._sequences.length = 0;
            var newSequences = _.chain(BB.Data.getAllSnippets()).map(function (snippet) {
                return snippet.get("snippetKeyShortcut")
            }).compact().value();
            _.mutate("union", this._sequences, newSequences);
            this._callDelegateFunction("sequencesChanged")
        }
    });
    BB.Modules.Snippets.SnippetsCharacterSequenceModel = SnippetsCharacterSequenceModel
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsAutoCompleteMenuView = function () {
        this._element = null;
        this._rightPane = null;
        this._setupUIElements()
    };
    _.extend(SnippetsAutoCompleteMenuView.prototype, {
        getElement: function () {
            return this._element
        },
        setListView: function (listView) {
            this._element.find(".streak_bm_container").append(listView.getElement())
        },
        setRightPaneHTML: function (html) {
            this._rightPane[0].innerHTML = html
        },
        _setupUIElements: function () {
            this._element = HTML.get("snippetsAutoCompleteMenu", true);
            this._rightPane = this._element.find(".streak__bm_right_pane")
        }
    });
    _.extend(SnippetsAutoCompleteMenuView.prototype, {
        destroy: function () {
            this._element.remove()
        }
    });
    BB.Modules.Snippets.SnippetsAutoCompleteMenuView = SnippetsAutoCompleteMenuView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        jwerty = Streak.jwerty,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsAutoCompleteMenuViewController = function () {
        BB.Modules.ComposeViewControllerBase.call(this);
        this._view = null;
        this._listViewModel = null;
        this._listViewController = null;
        this._lastSeenSequence = null;
        this._menuActive = false;
        this._dontShow = false;
        this._characterSequenceModel = null
    };
    SnippetsAutoCompleteMenuViewController.prototype =
        Object.create(BB.Modules.ComposeViewControllerBase.prototype);
    _.extend(SnippetsAutoCompleteMenuViewController.prototype, {
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController;
            this._setupViewControllers();
            this._setupDelegates();
            this._setupTheView()
        },
        getListenerType: function () {
            return "CHARACTER_SEQUENCE"
        },
        getCharacterSequenceListener: function () {
            return this._characterSequenceModel
        },
        composeKeydown: function (event) {
            if (!this._isAutoCompleteEnabled()) return;
            if (!this._menuActive) return;
            if (jwerty.is("up/down/enter", event)) {
                this._callDelegateFunction("keyPressed", event.which);
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                if (jwerty.is("enter", event)) this._closeMenu();
                return
            }
        },
        escapePressed: function (event) {
            if (!this._isAutoCompleteEnabled()) return;
            if (!this._menuActive) return;
            this._dontShow = true;
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            this._closeMenu()
        },
        partialMatchFound: function (sequence) {
            if (!this._isAutoCompleteEnabled()) return;
            if (this._dontShow) return;
            this._lastSeenSequence = sequence;
            this._findSnippetsAndAddToList(sequence);
            this._openMenu()
        },
        noMatchFound: function () {
            this._lastSeenSequence = null;
            this._dontShow = false;
            this._closeMenu()
        },
        rowFocused: function (rowInfo) {
            if (!rowInfo) return;
            this._view.setRightPaneHTML(rowInfo.snippet.getText())
        },
        rowPressed: function (rowInfo) {
            if (!rowInfo) return;
            this._closeMenu();
            this._injectSnippet(rowInfo.snippet)
        },
        destroy: function () {
            this._listViewModel.destroy();
            this._listViewController.destroy();
            this._view.destroy();
            this._characterSequenceModel.destroy();
            this._callDelegateFunction("destroy", this);
            BB.Modules.ComposeViewControllerBase.prototype.destroy.call(this)
        }
    });
    _.extend(SnippetsAutoCompleteMenuViewController.prototype, {
        _openMenu: function () {
            this._composeWindowViewController.addElementAtCursorPosition(this._view.getElement());
            this._menuActive = true
        },
        _closeMenu: function () {
            this._view.getElement().detach();
            this._menuActive = false
        },
        _isAutoCompleteEnabled: function () {
            return BB.Data.streakSettings.settingIsEnabled("settings_snippet_autocomplete")
        },
        _findSnippetsAndAddToList: function (sequence) {
            var snippets = BB.Data.getAllSnippets();
            var filteredSnippets = _.filter(snippets, function (snippet) {
                return snippet.get("snippetKeyShortcut").indexOf(sequence) === 0
            });
            this._addSnippetsToList(filteredSnippets)
        },
        _addSnippetsToList: function (filteredSnippets) {
            this._listViewModel.removeAllSections();
            var snippetRows = _.map(filteredSnippets, function (snippet) {
                return {
                    text: snippet.displayName() + " (" + snippet.get("snippetKeyShortcut") + ")",
                    snippet: snippet
                }
            });
            this._listViewModel.addSection({
                rows: snippetRows
            })
        },
        _injectSnippet: function (snippet) {
            if (snippet.get("subject")) this._composeWindowViewController.setSubject(snippet.get("subject"));
            this._composeWindowViewController.replaceLastNCharacters(this._lastSeenSequence.length, snippet.getText());
            this._composeWindowViewController.notify("snippetAdded", snippet);
            BB.Tracker.track("snippet inserted", {
                method: "autocomplete"
            })
        }
    });
    _.extend(SnippetsAutoCompleteMenuViewController.prototype, {
        _setupViewControllers: function () {
            this._listViewModel = new BB.Widgets.ListView.ListViewBaseModel;
            this._listViewController = new BB.Widgets.ListView.ListViewViewController;
            this._characterSequenceModel = new BB.Modules.Snippets.SnippetsCharacterSequenceModel
        },
        _setupDelegates: function () {
            this._listViewController.setDataSource(this._listViewModel);
            this._listViewController.addDelegate(this);
            this.addDelegate(this._listViewController);
            this._characterSequenceModel.addDelegate(this)
        },
        _setupView: function () {},
        _setupTheView: function () {
            this._view = new BB.Modules.Snippets.SnippetsAutoCompleteMenuView;
            this._view.setListView(this._listViewController.getView())
        }
    });
    BB.Modules.Snippets.SnippetsAutoCompleteMenuViewController = SnippetsAutoCompleteMenuViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsManageListModel = function () {
        BB.Widgets.ListView.ListViewBaseModel.call(this)
    };
    SnippetsManageListModel.prototype = Object.create(BB.Widgets.ListView.ListViewBaseModel.prototype);
    _.extend(SnippetsManageListModel.prototype, {
        getItemMetaClass: function (sectionIndex, rowIndex) {
            var rowInfo = this.infoForRow(sectionIndex,
                rowIndex);
            if (!rowInfo.data) return;
            if (!this._canDeleteSnippet(rowInfo.data)) return;
            return "ar9"
        },
        _canDeleteSnippet: function (snippet) {
            return snippet.get("userKey") === BB.getUser().key()
        }
    });
    BB.Modules.Snippets.SnippetsManageListModel = SnippetsManageListModel
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsManageView = function () {
        Streak.ViewControllerBase.call(this);
        this._modal = null;
        this._modalInner = null;
        this._searchContainer = null;
        this._listContainer = null;
        this._editorContainer = null;
        this._addNewSnippetLinkContainer = null;
        this._errorMessage = null;
        this._setupUIElements();
        this._setupEventBindings()
    };
    SnippetsManageView.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(SnippetsManageView.prototype, {
        _setupUIElements: function () {
            this._modalInner = HTML.get("snippetsManageView", true);
            this._searchContainer = this._modalInner.find(".streak__snippetManageView_searchContainer");
            this._listContainer = this._modalInner.find(".streak__snippetManageView_listContainer");
            this._noSnippetListContainer = this._modalInner.find(".streak__snippetManageView_noSnippetListContainer");
            this._noSnippetMainViewContainer =
                this._modalInner.find(".streak__snippetManageView_noSnippetsMainView");
            this._noSnippetSelectedMainViewContainer = this._modalInner.find(".streak__snippetManageView_noSnippetsSelected");
            this._editorContainer = this._modalInner.find(".streak__snippetManageView_editorContainer");
            this._addNewSnippetLinkContainer = this._modalInner.find(".streak__snippetManageView_addNewSnippetLinkContainer");
            this._errorMessage = this._modalInner.find(".streak__snippetManageView_errorMessage");
            this._modal = BB.Widgets.Modal.create({
                title: BB.Locale.getString("manage_snippets"),
                inner: this._modalInner,
                showConfirm: true,
                showCancel: false,
                confirmText: BB.Locale.getString("modal_done"),
                width: "800px"
            })
        },
        _setupEventBindings: function () {
            var self = this;
            var addNewSnippetLink = BB.Widgets.LinkButton.create({
                text: BB.Locale.getString("create_new_snippet"),
                clickFunction: function () {
                    self._callDelegateFunction("addNewSnippet");
                    BB.Tracker.track("create new snippet", {
                        method: "list link"
                    })
                }
            });
            this._addNewSnippetLinkContainer.append(addNewSnippetLink.getElement());
            var newSnippetAnchors = this._modalInner.find(".streak__snippetManageView_noSnippet a");
            newSnippetAnchors.attr("href", "#");
            newSnippetAnchors.on("click", function (e) {
                e.preventDefault();
                self._callDelegateFunction("addNewSnippet");
                BB.Tracker.track("create new snippet", {
                    method: "manage body link"
                })
            })
        },
        show: function () {
            this._modal.show()
        },
        close: function () {
            this._modal.close()
        },
        setSearchView: function (searchView) {
            this._searchContainer.prepend(searchView.getElement())
        },
        setListView: function (listView) {
            this._listContainer.append(listView.getElement())
        },
        setEditorView: function (editorView) {
            this._editorContainer.append(editorView.getElement())
        },
        setErrorMessage: function (errorMessage) {
            this._errorMessage[0].innerHTML = errorMessage
        },
        showNoSnippetMainView: function () {
            this._noSnippetMainViewContainer.show();
            this._noSnippetSelectedMainViewContainer.hide();
            this._editorContainer.hide()
        },
        showNoSnippetSelectedMainView: function () {
            this._noSnippetMainViewContainer.hide();
            this._noSnippetSelectedMainViewContainer.show();
            this._editorContainer.hide()
        },
        showEditorView: function () {
            this._noSnippetMainViewContainer.hide();
            this._noSnippetSelectedMainViewContainer.hide();
            this._editorContainer.show()
        },
        showNoSnippetList: function () {
            this._noSnippetListContainer.show();
            this._listContainer.hide()
        },
        showSnippetList: function () {
            this._noSnippetListContainer.hide();
            this._listContainer.show()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "snippetsManageViewInitialized",
        functionToCall: function (callback) {
            BB.Modules.Snippets.SnippetsManageView = new SnippetsManageView;
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.snippets.initialized", "localeLoaded", "htmlLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetsManageViewController = function () {
        this._snippetsSearchController = null;
        this._searchViewController = null;
        this._listViewController = null;
        this._snippetEditorViewController = null;
        this._snippetsMenuModel = null;
        this._view = null;
        this._snippet = null;
        this._setupViewControllers();
        this._setupView();
        this._setupDelegates()
    };
    _.extend(SnippetsManageViewController.prototype, {
        _setupViewControllers: function () {
            this._searchViewController = new BB.Widgets.SearchSimpleVC({
                placeholder: BB.Locale.getString("search_all_snippets")
            });
            this._snippetsMenuModel = new BB.Modules.Snippets.SnippetsManageListModel;
            this._listViewController = new BB.Widgets.ListView.ListViewViewController;
            this._snippetEditorViewController = BB.Modules.Snippets.SnippetEditorViewController;
            this._snippetsSearchController = new BB.Modules.Snippets.SnippetsSearchController
        },
        _setupDelegates: function () {
            this._listViewController.setDataSource(this._snippetsMenuModel);
            this._snippetsSearchController.setDataSource(this._snippetsMenuModel);
            this._snippetsMenuModel.addDelegate(this);
            this._searchViewController.addDelegate(this._listViewController);
            this._searchViewController.addDelegate(this._snippetsSearchController);
            this._snippetsSearchController.addDelegate(this);
            this._listViewController.addDelegate(this);
            this._view.addDelegate(this)
        },
        _setupView: function () {
            this._view = BB.Modules.Snippets.SnippetsManageView;
            this._view.setListView(this._listViewController.getView());
            this._view.setSearchView(this._searchViewController.getView());
            this._view.setEditorView(this._snippetEditorViewController.getView())
        }
    });
    _.extend(SnippetsManageViewController.prototype, {
        rowPressed: function (snippetRow) {
            if (!snippetRow) return;
            this._snippetEditorViewController.setSnippet(snippetRow.data);
            this._snippet = snippetRow.data;
            this._view.showEditorView();
            this._snippetEditorViewController.focus();
            BB.Tracker.track("select snippet for editing")
        },
        rowMetaActionPressed: function (snippetRow) {
            if (!snippetRow) return;
            var self = this;
            BB.Widgets.Modal.confirmDelete(snippetRow.data.displayName(), function () {
                self._deleteSnippet(snippetRow.data);
                BB.Tracker.track("delete snippet")
            })
        },
        _deleteSnippet: function (snippet) {
            Gmail.showNotice(BB.Locale.getString("deleting"));
            if (snippet === this._snippet) this._snippet = null;
            snippet.del(function () {
                Gmail.showNotice(BB.Locale.getString("deleted"), 1E3)
            });
            if (this._isNoMoreSnippets()) this._delayedClose()
        },
        _isNoMoreSnippets: function () {
            return BB.Data.getAllSnippets().length ===
                0
        },
        _delayedClose: function () {
            var self = this;
            setTimeout(function () {
                self._view.close()
            }, 10)
        },
        addNewSnippet: function (options) {
            var snippet = BB.Data.getAllSnippets().add({
                snippetName: "New Snippet " + BB.Data.getAllSnippets().length
            });
            if (options) {
                snippet.set("snippetText", options.snippetText);
                snippet.set("subject", options.subject)
            } else snippet.set("snippetText", " ");
            snippet.save();
            this._snippet = snippet;
            var self = this;
            setTimeout(function () {
                var listPosition = self._snippetsSearchController.getSnippetListPosition(snippet);
                self._listViewController.selectPosition(listPosition);
                self._snippetEditorViewController.focusAndSelect()
            }, 300);
            this._snippetEditorViewController.setSnippet(snippet)
        },
        use: function () {
            this._snippet = null;
            this._searchViewController.clearQuery();
            this._view.show();
            this._searchViewController.focus();
            this.snippetsRendered()
        },
        useForNewSnippet: function (options) {
            this._searchViewController.clearQuery();
            this.addNewSnippet(options);
            this._view.show()
        },
        snippetsRendered: function () {
            if (BB.Data.getAllSnippets().length ===
                0) {
                this._view.showNoSnippetList();
                this._view.showNoSnippetMainView();
                return
            }
            this._view.showSnippetList();
            if (!this._snippet) {
                this._listViewController.reset();
                this._view.showNoSnippetSelectedMainView();
                return
            }
            this._view.showEditorView();
            var listPosition = this._snippetsSearchController.getSnippetListPosition(this._snippet);
            if (!listPosition) return;
            this._listViewController.selectPosition(listPosition)
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "snippetsManageViewControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.Snippets.SnippetsManageViewController =
                new SnippetsManageViewController;
            if (callback) return callback()
        },
        dependentFunctionKeys: ["snippetsManageViewInitialized", "snippetEditorViewControllerInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetEditorView = function () {
        this._element = null;
        this._focusElement = null;
        this._setupUIElements()
    };
    _.extend(SnippetEditorView.prototype, {
        _setupUIElements: function () {
            this._element = HTML.get("snippetEditorView", true)
        },
        getElement: function () {
            return this._element
        },
        focus: function () {
            if (this._focusElement.focus) this._focusElement.focus()
        },
        focusAndSelect: function () {
            if (this._focusElement.focusAndSelect) this._focusElement.focusAndSelect()
        },
        setNameInput: function (input) {
            this._element.find(".streak__snippetEditorView_nameInput").append(input.getElement());
            this._focusElement = input
        },
        setShortcutInput: function (input) {
            this._element.find(".streak__snippetEditorView_shortcutInput").append(input.getElement())
        },
        setPipelineInput: function (input) {
            this._element.find(".streak__snippetEditorView_pipelineInput").append(input.getElement())
        },
        setSubjectInput: function (input) {
            this._element.find(".streak__snippetEditorView_subjectInput").append(input.getElement())
        },
        setBodyInput: function (input) {
            this._element.find(".streak__snippetEditorView_bodyInput").append(input.getElement())
        },
        destroy: function () {
            this._element.remove()
        }
    });
    BB.Modules.Snippets.SnippetEditorView = SnippetEditorView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SnippetEditorViewController = function () {
        this._snippet = null;
        this._view = null;
        this._nameInput = null;
        this._shortcutInput = null;
        this._pipelineInput = null;
        this._bodyInput = null;
        this._subjectInput = null;
        this._tabController = null;
        this._setupTheView();
        this._setupInputs()
    };
    _.extend(SnippetEditorViewController.prototype, {
        _setupView: function () {},
        _setupTheView: function () {
            this._view = new BB.Modules.Snippets.SnippetEditorView
        },
        _setupInputs: function () {
            this._setupTabController();
            this._setupNameInput();
            this._setupShortcutInput();
            this._setupPipelineInput();
            this._setupSubjectInput();
            this._setupBodyInput()
        },
        _setupTabController: function () {
            this._tabController = new BB.Widgets.TabFocusController
        },
        _setupNameInput: function () {
            this._nameInput = BB.Widgets.SidebarTextarea.create({
                border: "alwaysGmail"
            });
            this._view.setNameInput(this._nameInput);
            this._tabController.addView(this._nameInput)
        },
        _setupShortcutInput: function () {
            this._shortcutInput = BB.Widgets.SidebarTextarea.create({
                border: "alwaysGmail"
            });
            this._view.setShortcutInput(this._shortcutInput);
            this._tabController.addView(this._shortcutInput)
        },
        _setupPipelineInput: function () {
            var self = this;
            this._pipelineInput = BB.Widgets.CustomDropdown.create({
                border: "alwaysGmail",
                changeFunc: function (pipelineListItem) {
                    self._snippet.set("pipelineKey", pipelineListItem.value);
                    self._snippet.save()
                }
            });
            this._view.setPipelineInput(this._pipelineInput);
            this._tabController.addView(this._pipelineInput)
        },
        _setupSubjectInput: function () {
            this._subjectInput = BB.Widgets.SidebarTextarea.create({
                border: "alwaysGmail"
            });
            this._view.setSubjectInput(this._subjectInput);
            this._tabController.addView(this._subjectInput)
        },
        _setupBodyInput: function () {
            this._bodyInput = BB.Widgets.SmartTextarea.create({
                useRawHTML: true,
                placeholder: BB.Locale.getString("snippet_enter_text")
            });
            this._view.setBodyInput(this._bodyInput);
            this._tabController.addView(this._bodyInput)
        },
        setSnippet: function (snippet) {
            this._snippet = snippet;
            this._nameInput.setModelAndProperty(snippet,
                "snippetName");
            this._shortcutInput.setModelAndProperty(snippet, "snippetKeyShortcut");
            this._bodyInput.setModelAndProperty(snippet, "snippetText");
            this._subjectInput.setModelAndProperty(snippet, "subject");
            this._setupPipelineDropdown()
        },
        _setupPipelineDropdown: function () {
            var list = [{
                name: BB.Locale.getString("snippets_no_pipelines"),
                value: null
            }];
            if (BB.Data.getAllPipelines().length > 0)
                for (var i = 0; i < BB.Data.getAllPipelines().length; i++) list.push({
                    name: BB.Data.getAllPipelines()[i].displayName(),
                    value: BB.Data.getAllPipelines()[i].key()
                });
            this._pipelineInput.setMenuList(list);
            this._pipelineInput.setSelected(this._snippet.get("pipelineKey"))
        },
        focus: function () {
            this._view.focus()
        },
        focusAndSelect: function () {
            this._view.focusAndSelect()
        },
        getView: function () {
            return this._view
        },
        destroy: function () {
            this._view.destroy();
            this._nameInput.destroy();
            this._shortcutInput.destroy();
            this._pipelineInput.destroy();
            this._bodyInput.destroy();
            this._subjectInput.destroy()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "snippetEditorViewControllerInitialized",
        functionToCall: function (callback) {
            BB.Modules.Snippets.SnippetEditorViewController = new SnippetEditorViewController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded", "data.snippets.initialized", "data.pipelines.initialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var StreakSettingsView = {
        init: function (cb) {
            var self = this;
            self.trackingContext = {
                widgetContext: "streakSettigns"
            };
            if (!self.initialized) {
                self.templates = {};
                self.templates.button = HTML.get("streakSettingsButton");
                self.templates.page = HTML.get("streakSettingsPage");
                self.templates.section = HTML.get("streakSettingsSection");
                self.templates.setting = HTML.get("streakSettingsSetting");
                self.templates.settingParentButton = HTML.get("streakSettingsParentButton");
                self.templates.subsettingTitle = HTML.get("streakSettingsSubsettingTitle");
                self.templates.comboButton = HTML.get("streakSettingsComboButton");
                self.templates.subtitle = HTML.get("streakSettingsSubtitle");
                var streakMenuButton = $(self.templates.button());
                self._streakMenuButton = streakMenuButton;
                $(streakMenuButton).click(function () {
                    Streak.BentoBox.UI.setURL("settingsStreak")
                });
                self._fromSettings = false;
                Gmail.observe("viewChanged", $.proxy(self.render,
                    self));
                self.initialized = true
            }
            if (cb) cb()
        },
        track: function (event, prop) {
            BB.Tracker.trackStreakActive(this.trackingContext, prop, {
                eventName: event
            })
        },
        oppositeMap: function (entry) {
            if (entry === "filters") return "accounts";
            else return "filters"
        },
        getFirstSettingsPage: function () {
            var self = this;
            return Streak.BentoBox.Data.streakSettings.getPages()[0]
        },
        isSelected: function (selected, value) {
            var isSelected = false;
            _.each(selected, function (s) {
                if (s === value) isSelected = true
            });
            return isSelected
        },
        constructToggle: function (path, possibleValues,
            selectedValues, setting, hasChildren, subsettingWidgtets) {
            var self = this;
            var radioList;
            if (possibleValues.length === 2 && _(possibleValues).contains("enabled")) {
                var changeCallback = function (value) {
                    if (hasChildren)
                        if (value === "enabled") _.each(subsettingWidgtets, function (ww) {
                            ww.button.enable();
                            $(ww.el).removeClass("streakDisabled")
                        });
                        else _.each(subsettingWidgtets, function (ww) {
                            ww.button.disable();
                            $(ww.el).addClass("streakDisabled")
                        });
                    BB.Data.streakSettings.setSelectedValues(path.pageKey, path.sectionKey, setting.key, [value])
                };
                radioList = BB.Widgets.RadioList.create({
                    changeCallback: changeCallback
                });
                for (var ii = 0; ii < possibleValues.length; ii++) radioList.addOption(BB.Locale.getString(possibleValues[ii]), possibleValues[ii]);
                radioList.setSelected(selectedValues[0]);
                if (hasChildren)
                    if (_(selectedValues).contains("enabled")) changeCallback("enabled");
                    else changeCallback("disabled");
                radioList.el.addClass("rS")
            }
            return radioList
        },
        constructComboDropDown: function (path, possibleValues, selectedValues, setting) {
            var self = this;
            var menu =
                Streak.BentoBox.Widgets.Menu.create();
            var checkedCurrent = selectedValues;
            var button = $(self.templates.comboButton({
                text: Streak.Locale.getString(setting.displayName)
            }));
            var buttonEl = button.find(".streakSettingsComboButtonText");
            var bm = BB.Widgets.ButtonMenu.create({
                menu: menu.el,
                closeOnSelect: false,
                customButton: button,
                onFunc: function (e) {
                    self.track("openedComoboDropDown", _.extend(path, {
                        "settingKey": setting.key
                    }));
                    if (e) e.stopPropagation()
                },
                offFunc: function (e) {
                    self.track("closedComoboDropDown", _.extend(path, {
                        "settingKey": setting.key
                    }));
                    if (e) e.stopPropagation()
                }
            });
            if (selectedValues.length === 0) selectedValues = ["None"];

            function updateButtonText(values) {
                if (values.length > 0) buttonEl.html(_.map(values, function (ii) {
                    return Streak.Locale.getString(ii)
                }).join(", "));
                else buttonEl.html(Streak.Locale.getString("none"))
            }
            var _itemButtons = [];
            menu.addItem(Streak.Locale.getString("none"), function (isChecked, e) {
                if (isChecked) {
                    checkedCurrent = [];
                    BB.Data.streakSettings.setSelectedValues(path.pageKey, path.sectionKey, setting.key,
                        checkedCurrent);
                    _.each(_itemButtons, function (iButton) {
                        iButton.setCheckboxState(false);
                        $(buttonEl).html(Streak.Locale.getString("none"))
                    })
                } else;
            });
            menu.addSeparator();
            _.each(possibleValues, function (item) {
                var _item = item;
                var contains = _.indexOf(selectedValues, _item) >= 0;
                var itemButton = menu.addCheckItem(Streak.Locale.getString(item), function (isChecked, e) {
                    if (isChecked) checkedCurrent.push(_item);
                    else checkedCurrent = _.without(checkedCurrent, _item);
                    updateButtonText(checkedCurrent);
                    BB.Data.streakSettings.setSelectedValues(path.pageKey,
                        path.sectionKey, setting.key, checkedCurrent);
                    if (checkedCurrent.indexOf("desktopNotification") > -1) self._checkDesktopNotificationPermission()
                }, contains);
                _itemButtons.push(itemButton)
            });
            updateButtonText(selectedValues);
            return bm
        },
        getWidget: function (path, setting, hasChildren, subsettingWidgtets) {
            var self = this;
            var selectedValues = setting.selectedValues;
            if (selectedValues.length > 0 && selectedValues[0] === "default") selectedValues = setting.defaultValues;
            switch (setting.widgetType) {
            case "enabled_disabled":
                return self.constructToggle(path,
                    setting.possibleValues, selectedValues, setting, hasChildren, subsettingWidgtets);
                break;
            case "combo_dropdown":
                return self.constructComboDropDown(path, setting.possibleValues, selectedValues, setting);
                break;
            default:
                return ""
            }
        },
        renderSubSetting: function (path, subsetting, settingContainer) {
            var self = this;
            var subsettingTitle = $(self.templates.subsettingTitle({
                subsettingTitle: Streak.Locale.getString(subsetting.displayName)
            }));
            if (subsetting.subtitle) subsettingTitle.append(self.templates.subtitle({
                text: BB.Locale.getString(subsetting.subtitle)
            }));
            var widget = self.getWidget(path, subsetting);
            settingContainer.find(".streakSettingsSubsettingList").append(subsettingTitle);
            settingContainer.find(".streakSettingsSubsettingWidgets").append(widget.el);
            return widget
        },
        shouldRenderSetting: function (setting) {
            return true
        },
        renderSetting: function (path, setting) {
            var self = this;
            var widget;
            if (!this.shouldRenderSetting(setting)) return;
            var settingContainer = $(self.templates.setting({
                settingTitle: Streak.Locale.getString(setting.displayName)
            }));
            if (setting.subtitle) settingContainer.find(".streakSettingsSettingTitle").append(self.templates.subtitle({
                text: BB.Locale.getString(setting.subtitle)
            }));
            var subsettingWidgtets = [];
            if (_.isReal(setting.subsettings) && setting.subsettings.length > 0)
                for (var ii = 0; ii < setting.subsettings.length; ii++) subsettingWidgtets.push(self.renderSubSetting(path, setting.subsettings[ii], settingContainer));
            else settingContainer.find(".streakSettingChildSetting").remove(); if (_.isReal(setting.subsettings) && setting.subsettings.length > 0) widget = self.getWidget(path, setting, true, subsettingWidgtets);
            else widget = self.getWidget(path, setting);
            settingContainer.find(".streakSettingsSettingWidget").append(widget.el);
            return settingContainer
        },
        renderSettingsSection: function (settingsSection, path) {
            var self = this;
            var settingsSectionContainer = $(self.templates.section({
                sectionTitle: Streak.Locale.getString(settingsSection.displayName)
            }));
            _.each(settingsSection.settings, function (setting) {
                settingsSectionContainer.find(".streakSettingsSectionBody").append(self.renderSetting(path, setting))
            });
            return settingsSectionContainer
        },
        loadStreakSettings: function () {
            var self = this;
            var page = self.getFirstSettingsPage();
            var pageKey = page.key;
            _.each(page.sections, function (sectionData) {
                var path = {
                    "pageKey": pageKey,
                    "sectionKey": sectionData.key
                };
                self._streakSettingsContainer.append(self.renderSettingsSection(sectionData, path))
            })
        },
        renderStreakSettings: function () {
            var self = this;
            if (_.isNotReal(self._streakSettingsContainer)) self._streakSettingsContainer = $(self.templates.page());
            self._streakSettingsContainer.empty();
            Gmail.Settings.getContentBodyBlockContainer().find(".streakSettings").remove();
            self.loadStreakSettings();
            Gmail.Settings.getContentBodyBlockContainer().append(self._streakSettingsContainer);
            self._streakSettingsContainer.css("display", "")
        },
        render: function () {
            var self = this;
            if (Gmail.view === "settings") {
                if (_.isDefined(self._streakSettingsContainer)) self._streakSettingsContainer.css("display", "none");
                if (Streak.Gmail.getCurrentMainContainer().find(".aeH .streakSettingsButton").length === 0) Streak.Gmail.Settings.getEndingMenuMarker().before(self._streakMenuButton);
                else self._streakMenuButton = Streak.Gmail.getCurrentMainContainer().find(".streakSettingsButton");
                try {
                    self._streakMenuButton.removeClass("fZ").addClass("f1")
                } catch (e) {}
                Gmail.Settings.getContentBodyBlock().css("display",
                    "");
                self._streakMenuButton.removeClass("fZ").addClass("f1")
            } else if (Gmail.view === "settingsStreak") {
                self.renderStreakSettings();
                BB.Data.streakSettings.refresh(function () {
                    self.renderStreakSettings()
                });
                Gmail.Settings.getSettingTabs().off(".streak");
                Gmail.Settings.getSettingTabs().on("click.streak", function (e) {
                    if (Gmail.view === "settingsStreak") {
                        var targetURL;
                        try {
                            targetURL = Streak.$(e.target).attr("href").split("/").last();
                            if (targetURL === "#streakSettings") return;
                            Streak.$(e.target.parentElement).removeClass("f1").addClass("fZ")
                        } catch (f) {
                            targetURL =
                                null;
                            var newTarget = $(e.target).find("a");
                            if (_.isDefined(newTarget.attr("href"))) {
                                targetURL = Streak.$(newTarget).attr("href").split("/").last();
                                Streak.$(e.target).removeClass("f1").addClass("fZ")
                            }
                        }
                        Streak.BentoBox.UI.setURL("setttings/" + self.oppositeMap(targetURL));
                        Streak.BentoBox.UI.setURL("settings/" + targetURL)
                    }
                    self._streakMenuButton.removeClass("f1").addClass("fZ")
                });
                Gmail.Settings.getSettingTabs().removeClass("fZ").addClass("f1");
                self._streakMenuButton.removeClass("f1").addClass("fZ");
                Streak.Gmail.Settings.getContentBodyBlock().css("display",
                    "none");
                self._streakSettingsContainer.css("display", "")
            }
        },
        _checkDesktopNotificationPermission: function () {
            if (typeof window.webkitNotifications !== "undefined") {
                var permissionStatus = window.webkitNotifications.checkPermission();
                if (permissionStatus === 1) window.webkitNotifications.requestPermission();
                else if (permissionStatus === 2) {
                    var messageBodyLink = "https://support.google.com/chrome/answer/3220216?hl=en";
                    if (Streak.isSafari) messageBodyLink = "http://support.apple.com/kb/PH11949";
                    var modal = BB.Widgets.Modal.create({
                        title: BB.Locale.getString("enable_browser_notifications_title"),
                        inner: BB.Locale.getString("enable_browser_notifications_body"),
                        showCancel: false,
                        confirmText: BB.Locale.getString("ok"),
                        confirmFunc: function () {}
                    });
                    modal.getEl().find(".inner a")[0].setAttribute("href", messageBodyLink);
                    modal.show()
                }
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "streakSettingsViewInitialized",
        functionToCall: StreakSettingsView.init,
        functionContext: StreakSettingsView,
        dependentFunctionKeys: ["gmailLoaded", "data.streakSettings.initialized", "htmlLoaded"]
    });
    BB.Modules.StreakSettingsView =
        StreakSettingsView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        HTML = Streak.HTML,
        Eventer = Streak.Eventer,
        BB = Streak.BentoBox;
    var TopNav = Eventer.create({
        el: null,
        elements: {},
        templates: {},
        halted: false,
        rightLinksEmpty: false,
        loggedOut: true,
        _isMessage: false,
        trackingContext: {
            widgetContext: "topNav"
        },
        _noBlackBarGmailMenuOpenClass: null,
        init: function (cb) {
            var self = this;
            if (!self.el) {
                this.el = HTML.get("topNavNoBlackBarLink", true);
                this.templates.loadingOauth =
                    HTML.get("loadingOauth");
                this._appendToNoBlackBar();
                this._getNoBlackBarGmailMenuOpenClass();
                self.el.find(".bbClientVersion").html("client Version: " + Streak.clientVersion);
                self.el.find(".bbExtVersion").html("ext Version: " + Streak.extVersion);
                self.parse();
                self.initFunctionality();
                self.trigger("ready");
                if (cb) cb()
            } else {
                if (cb) cb();
                self.trigger("ready")
            }
        },
        _appendToNoBlackBar: function () {
            Gmail.getGooglePlusNameContainer().prepend(this.el);
            if (this.el.parent().is(".gb_yb")) this.el.parent().addClass("streak__topNav_margin2")
        },
        _getNoBlackBarGmailMenuOpenClass: function () {
            this._noBlackBarGmailMenuOpenClass = "streak__topNav_menuOpen"
        },
        parse: function () {
            this.elements.mainLink = $(this.el[0]);
            this.elements.mainLink.span = this.elements.mainLink.find("span");
            this.elements.mainLink.exclamation = this.elements.mainLink.find("#bentoBoxNotLoggedIn");
            this.elements.mainLink.loading = this.elements.mainLink.find("#bentoBoxLoggingIn");
            this.elements.mainLink.icon = this.elements.mainLink.find("#bentoBoxLoggedIn");
            this.elements.menu = this.el.find("#workflowMenu");
            this.elements.menu.statusText = this.elements.menu.find("#streak__topNav_statusText");
            this.elements.menu.refreshButton = this.elements.menu.find("#streak__topNav_refresh a");
            this.elements.menu.signInButton = this.elements.menu.find("#streak__topNav_signIn a")
        },
        initFunctionality: function () {
            this.setupMenuToggling();
            this.setupSignInButton();
            this.setupRefreshButton();
            this.setupHelpButton();
            this.setupShareButton();
            this.setupReleaseNotesButton();
            this.setupLanguageButton();
            this.setupDeveloperZoneLink();
            this.resizeSearch();
            BB.bind("logged_out", function () {
                self.halted = false;
                self.initLoggedOut()
            });
            Streak.NotificationCenter.addFunction({
                eventName: "reauthorized",
                functionToCall: this.reauthorized,
                functionContext: this
            })
        },
        reauthorized: function () {
            this.elements.mainLink.exclamation.hide();
            this.elements.mainLink.loading.hide();
            this.elements.mainLink.icon.show();
            this.elements.menu.find(".developerZone").show()
        },
        setupMenuToggling: function () {
            var self = this;
            self.elements.menu.on("click", function (e) {
                e.stopPropagation()
            });
            self.elements.mainLink.easyHoverClass("gbgt-hvr").click(function (e) {
                if (self.isMenuOpen()) self.closeMenu();
                else {
                    self.track("TopNavOpened");
                    self.openMenu()
                } if (!$(e.target).is("a[target]")) e.preventDefault()
            }).bodyCloseAndStop({
                closeFunction: function () {
                    self.closeMenu()
                },
                stop: self.elements.mainLink[0],
                body: Gmail.elements.body,
                useCapture: true
            })
        },
        setupSignInButton: function () {
            var self = this;
            self.elements.menu.signInButton.click(function (e) {
                self.closeMenu();
                self.startOauth();
                e.stopPropagation()
            })
        },
        setupRefreshButton: function () {
            this.elements.menu.refreshButton.click(function (e) {
                location.reload()
            })
        },
        setupHelpButton: function () {
            var self =
                this;
            this.elements.menu.find("#streak__topNav_menuItems_help").trackable("show help clicked", this.trackingContext).click(function (e) {
                BB.UserSettings.set("help/defaultHidden", false);
                BB.UserSettings.save();
                BB.Modules.Help.HelpLoader.getHelpViewController().show(true);
                self.closeMenu()
            })
        },
        setupShareButton: function () {
            var self = this;
            self.elements.menu.find("#streak__topNav_menuItems_share").trackable("promoteLinkClicked", self.trackingContext).click(function (e) {
                self.closeMenu();
                BB.Modules.Promote.render(true);
                e.preventDefault();
                e.stopPropagation()
            })
        },
        setupReleaseNotesButton: function () {
            var self = this;
            this.elements.menu.find("#streak__topNav_menuItems_updates").trackable("releaseNotesClicked", self.trackingContext).click(function (e) {
                self.closeMenu();
                window.open("http://blog.streak.com/search/release%20notes/")
            })
        },
        setupLanguageButton: function () {
            var self = this;
            if (BB.Locale.getGmail() === "en") self.elements.menu.find(".languageChoice").hide();
            else {
                var msg = "";
                var current = BB.Locale.getCurrent();
                var gmail = BB.Locale.getGmail();
                if (current === "en") msg = BB.Locale.convertLocaleCodeToName(gmail);
                else msg = BB.Locale.convertLocaleCodeToName("en");
                msg = BB.Locale.getString("top_nav_switch_language", {
                    language: msg
                });
                self.elements.menu.find(".languageChoice").show();
                self.elements.menu.find(".languageChoice")[0].innerHTML = msg;
                self.elements.menu.find(".languageChoice").trackable("languageChoiceChanged", self.trackingContext).click(function (e) {
                    if (current === "en") BB.Locale.setCurrent(gmail);
                    else BB.Locale.setCurrent("en");
                    e.preventDefault();
                    e.stopPropagation();
                    location.reload()
                })
            }
        },
        setupDeveloperZoneLink: function () {
            this.elements.menu.find(".developerZone a").trackable("developerZoneLinkClicked", this.trackingContext).click(function (e) {
                e.preventDefault();
                BB.Modules.DeveloperZone.show()
            })
        },
        resizeSearch: function () {
            var self = this;
            if (!Gmail.isRapportiveInstalled()) {
                $(window).resize(self.setIdealSearchWidth);
                self.setIdealSearchWidth()
            }
        },
        initLoggedOut: function (callback) {
            if (this.halted || this.rightLinksEmpty) {
                if (callback) callback();
                return
            }
            this.loggedOut =
                true;
            this.showExclamation();
            this.showLoggedOut();
            if (callback) callback()
        },
        initLoggedIn: function (callback) {
            if (this.halted) {
                if (callback) callback();
                return
            }
            this.loggedOut = false;
            this._isMessage = false;
            this.elements.mainLink.exclamation.hide();
            this.elements.mainLink.loading.hide();
            this.elements.mainLink.icon.show();
            this.elements.menu.find(".developerZone").show();
            this.showMainMenuItems();
            if (callback) callback()
        },
        gotLoggedOut: function () {
            this.showExclamation();
            this.showLoggedOut();
            this.openMenu()
        },
        setIdealSearchWidth: function () {
            var rightWidth =
                Gmail.$("#gbu").width() + 150;
            var totalWidth = Gmail.$("#gbqfw").width();
            var diff = totalWidth - rightWidth;
            var minWidth = 150;
            var width = Math.max(minWidth, diff);
            Gmail.$("#gbqf").width(width)
        },
        destroy: function () {
            if (this.el) this.el.remove()
        },
        haltExecution: function () {
            this.halted = true
        },
        showExclamation: function () {
            this.elements.mainLink.exclamation.css({
                display: "inline-block"
            });
            this.elements.mainLink.loading.hide();
            this.elements.mainLink.icon.hide()
        },
        isMenuOpen: function () {
            return this.elements.menu.is(":FastVisible(noCompute)")
        },
        openMenu: function () {
            this.elements.menu.show();
            this.elements.mainLink.addClass(this._noBlackBarGmailMenuOpenClass)
        },
        closeMenu: function () {
            this.elements.menu.hide();
            this.elements.mainLink.removeClass("gbto " + this._noBlackBarGmailMenuOpenClass)
        },
        showLoading: function () {
            this.elements.mainLink.exclamation.hide();
            this.elements.mainLink.loading.css({
                display: "inline-block"
            })
        },
        startOauth: function () {
            var self = this;
            self.track("showOauth");
            self.closeMenu();
            self.elements.mainLink.exclamation.hide();
            self.elements.mainLink.loading.css({
                display: "inline-block"
            });
            var height = 550;
            var width = 560;
            var top = window.screenY + (window.outerHeight / 2 - height / 2);
            var left = window.screenX + (window.outerWidth / 2 - width / 2);
            var oauthEmail = Streak.originalEmail || BB.userEmail;
            var oauthLoaderHTML = this.templates.loadingOauth({
                streakServer: Streak.server,
                oauthEmail: oauthEmail
            });
            oauthLoaderHTML = "data:text/html;base64," + btoa(oauthLoaderHTML);
            var openWindow = window.open(oauthLoaderHTML, "Streak Authorization", "height=" + height + ",width=" + width + ",left=" + left + ",top=" + top + ",toolbar=0,resizable=0,menubar=0,location=0,status=0,scrollbars=0");
            var timer = setInterval(function () {
                if (openWindow.closed) {
                    clearInterval(timer);
                    self.checkUserAuth(0)
                }
            }, 1E3)
        },
        checkUserAuth: function (num) {
            var self = this;
            APIRequester.get({
                msgUrl: "users/me"
            }, function (data) {
                if (data) {
                    self.track("signinPromptComplete");
                    BB.UserStateController.userLoggedIn(data);
                    return
                }
                if (num < 5) setTimeout(function () {
                    self.checkUserAuth(num + 1)
                }, 500);
                else {
                    self.track("signinPromptDenied");
                    self.showExclamation()
                }
            }, function () {
                BB.logError("error user signing in");
                BB.trigger("error_load");
                BB.isError =
                    true;
                self.showExclamation()
            })
        },
        versionCheck: function () {
            var param = {
                msgUrl: "suggestedversions"
            };
            APIRequester.get(param, function (res) {
                if (this.isVersionLarger(res.suggestedExtVersion, Streak.extVersion)) this.showExtensionUpdateAvailable();
                else if (this.isVersionLarger(res.suggestedClientVersion, Streak.clientVersion)) this.showClientUpdateAvailable()
            }.bind(this))
        },
        isVersionLarger: function (serverString, clientString) {
            var serverParts = serverString.split(".");
            var clientParts = clientString.split(".");
            var isServerLarger =
                false;
            for (var ii = 0; ii < serverParts.length; ii++) {
                if (ii >= clientParts.length) {
                    isServerLarger = true;
                    break
                }
                var serverNum = parseInt(serverParts[ii], 10);
                var clientNum = parseInt(clientParts[ii], 10);
                if (serverNum > clientNum) {
                    isServerLarger = true;
                    break
                } else if (serverNum < clientNum) break
            }
            return isServerLarger
        },
        showMainMenuItems: function () {
            this.hideOtherMenuSectionsAndShow("#streak__topNav_menuItems");
            this.setStatusClass("ok");
            this.setStatusText(BB.Locale.getString("top_nav_signed_in"))
        },
        showExtensionUpdateAvailable: function () {
            this.hideOtherMenuSectionsAndShow("#streak__topNav_extension");
            this.setStatusClass("warning");
            this.setStatusText(BB.Locale.getString("top_nav_client_update_available"));
            var a = this.elements.menu.find("#streak__topNav_extension a");
            a[0].setAttribute("href", "http://support.streak.com/customer/portal/articles/722076-streak-tells-me-i-need-to-update-the-extension-what-do-i-do-");
            a[0].setAttribute("target", "_blank");
            this.el.find("#bentoBoxNewUpdate").show()
        },
        showExtensionUpdateNeeded: function () {
            this.hideOtherMenuSectionsAndShow("#streak__topNav_extension");
            this.setStatusClass("error");
            this.setStatusText(BB.Locale.getString("top_nav_client_update_needed"));
            var a = this.elements.menu.find("#streak__topNav_extension a");
            a[0].setAttribute("href", "http://support.streak.com/customer/portal/articles/722076-streak-tells-me-i-need-to-update-the-extension-what-do-i-do-");
            a[0].setAttribute("target", "_blank");
            this.el.find("#bentoBoxNewUpdate").show()
        },
        showClientUpdateAvailable: function () {
            this.hideOtherMenuSectionsAndShow("#streak__topNav_refresh");
            this.setStatusClass("warning");
            this.setStatusText(BB.Locale.getString("top_nav_client_update_available"));
            this.el.find("#bentoBoxNewUpdate").show()
        },
        showClientUpdateNeeded: function () {
            this.hideOtherMenuSectionsAndShow("#streak__topNav_refresh");
            this.setStatusClass("error");
            this.setStatusText(BB.Locale.getString("top_nav_client_update_needed"));
            this.el.find("#bentoBoxNewUpdate").show()
        },
        showLoggedOut: function () {
            this.hideOtherMenuSectionsAndShow("#streak__topNav_signIn");
            this.setStatusClass("error");
            this.setStatusText(BB.Locale.getString("top_nav_signed_out"))
        },
        showThirdPartyCookiesDisabled: function () {
            this.hideOtherMenuSectionsAndShow("#streak__topNav_thirdParty");
            this.setStatusClass("error");
            this.setStatusText("Third party cookies disabled");
            this.showExclamation();
            this.openMenu()
        },
        hideOtherMenuSectionsAndShow: function (selector) {
            this.elements.menu.find("#workflowMenuDefaultInner > div").hide();
            this.elements.menu.find(selector).show()
        },
        setStatusClass: function (newClass) {
            this.el[0].setAttribute("class", "streak__topNav_status_" + newClass)
        },
        setStatusText: function (text) {
            this.elements.menu.find("#streak__topNav_statusText")[0].innerHTML = text
        },
        track: function (event) {
            BB.Tracker.trackStreakActive(this.trackingContext, {
                eventName: event
            })
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "topNavInitialized",
        functionToCall: TopNav.init,
        functionContext: TopNav,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "localeLoaded"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "topNav.initLoggedOut",
        functionToCall: TopNav.initLoggedOut,
        functionContext: TopNav,
        dependentFunctionKeys: ["topNavInitialized", "gmailLoaded", "htmlLoaded", "localeLoaded", "userLoggedOut"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "topNav.initLoggedIn",
        functionToCall: TopNav.initLoggedIn,
        functionContext: TopNav,
        dependentFunctionKeys: ["topNavInitialized", "gmailLoaded", "htmlLoaded", "userLoggedIn"]
    });
    BB.Modules.TopNav = TopNav
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var trackingContext = {
        widgetContext: "topNav/developerZone"
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    var DeveloperZone = {
        initialized: false,
        show: function () {
            if (!this.apiModal) {
                this.APIKeys = BB.Models.APIKey.createCollection();
                this.apiModal = BB.Widgets.Modal.create({
                    title: BB.Locale.getString("streak_developer_resources"),
                    inner: HTML.get("apiModal", true),
                    showCancel: false,
                    persist: false,
                    width: "475px",
                    trackingContext: {
                        widgetContext: "topNav/developerZone"
                    }
                });
                this.addModalFunctionality()
            }
            this.apiModal.show();
            this.showLoading();
            this.reset()
        },
        showLoading: function () {
            this.apiModal.getEl().find(".loadingKeys").show();
            this.apiModal.getEl().find(".apiInfo").hide()
        },
        hideLoading: function () {
            this.apiModal.getEl().find(".loadingKeys").hide();
            this.apiModal.getEl().find(".apiInfo").show()
        },
        reset: function () {
            var self = this;
            this.APIKeys.refresh(function () {
                self.renderAPIKeys()
            })
        },
        addModalFunctionality: function () {
            var el = this.apiModal.getEl();
            el.find(".createOne").on("click.developerZone", function () {
                track("createAPIKeyClicked");
                this.createKey()
            }.bind(this));
            el.find("#apiDocsLink a").on("click.developerZone", function (e) {
                track("apiDocsLinkClicked")
            }).addClass("action").attr("href", "//www.streak.com/api").attr("target", "_blank")
        },
        renderAPIKeys: function () {
            if (this.APIKeys && this.APIKeys.length > 0) {
                this.apiModal.getEl().find(".createOne").hide();
                var keyList = this.apiModal.getEl().find("#apiKeyList");
                keyList.empty();
                for (var i = 0; i < this.APIKeys.length; i++) keyList.append(this.renderAPIKey(this.APIKeys[i]));
                keyList.show()
            } else {
                this.apiModal.getEl().find("#apiKeyList").hide();
                this.apiModal.getEl().find(".createOne").show()
            }
            this.hideLoading()
        },
        renderAPIKey: function (apiKeyModel) {
            var rowTemplate = HTML.get("apiRow");
            var creationDate = Date.create(apiKeyModel.get("creationTimestamp"));
            var row = $(rowTemplate({
                apiKey: apiKeyModel.get("apiKey"),
                creationTimeLong: creationDate.customFormat("longWithTimezone"),
                issued: BB.Locale.getString("api_key_issued", {
                    time: creationDate.customFormat("shortDate")
                })
            }));
            row.addClass("apiKey");
            var keySpan = row.find(".bbHighlight");
            keySpan.selectAllOnClick();
            var del = $(Streak.createEl("div"));
            del.addClass("bbAction");
            del.append(Gmail.widgets.getDeleteIcon());
            del.append(Streak.createEl("span", BB.Locale.getString("delete")));
            del.click(function (e) {
                track("deleteAPIKey");
                this.deleteKey(apiKeyModel)
            }.bind(this));
            row.find(".streak__apiKey_delete").append(del);
            return row
        },
        deleteKey: function (apiKeyModel) {
            var self = this;
            BB.Widgets.Modal.confirmDelete("API Key",
                function () {
                    apiKeyModel.del();
                    self.renderAPIKeys()
                }.bind(this), BB.Locale.getString("api_key_delete_extra"))
        },
        createKey: function () {
            this.showLoading();
            var apiKeyModel = BB.Models.APIKey.create({});
            var self = this;
            apiKeyModel.save(function () {
                self.APIKeys.addModel(apiKeyModel);
                self.renderAPIKeys()
            }, function () {
                Gmail.showNotice("Generating API key failed", 1E4)
            })
        }
    };
    BB.Modules.DeveloperZone = DeveloperZone
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var DefaultNewsFeedSettings = {
        "myUpdates": true,
        "everyoneElseUpdates": true,
        "importantUpdates": true,
        "additionalUpdates": false
    };
    var FeedFilterButton = {
        defaults: {
            pipeline: null
        },
        create: function (o) {
            this._init();
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        },
        _init: function () {
            if (!this.templates) {
                this.templates = {};
                this.templates.button = HTML.get("feedFilterButtonButton")
            }
        }
    };
    FeedFilterButton.impl = function (o) {
        var options = o,
            pipeline = o.pipeline;
        options.trackingContext.widgetContext += "/feedFilter";
        var menu = BB.Widgets.Menu.create({
            css: {
                overflow: "visible"
            },
            trackingContext: _.clone(options.trackingContext)
        }),
            ensureGlobalSettings = function () {
                var changed = false;
                for (key in DefaultNewsFeedSettings) {
                    var setting = BB.UserSettings.getSetting("newsFeed/pipeline/global/" + key.toString());
                    if (setting === undefined || setting === "") {
                        BB.UserSettings.setSetting("newsFeed/pipeline/global/" + key.toString(),
                            DefaultNewsFeedSettings[key]);
                        changed = true
                    }
                }
                if (changed) BB.UserSettings.saveSettings()
            }, getSetting = function (filterOption) {
                var setting = BB.UserSettings.getSetting("newsFeed/pipeline/" + pipeline.key() + "/" + filterOption);
                if (setting === undefined || setting === "") return BB.UserSettings.getSetting("newsFeed/pipeline/global/" + filterOption);
                else return setting
            }, setSetting = function (filterOption, value) {
                Gmail.showNotice(BB.Locale.getString("loading"));
                BB.UserSettings.setSetting("newsFeed/pipeline/" + pipeline.key() + "/" +
                    filterOption, value);
                BB.UserSettings.saveSettings();
                BB.UserSettings.trigger("newsFeedPipelineSettingsChange", pipeline.key())
            };
        ensureGlobalSettings();
        menu.addItem(BB.Locale.getString("feed_who_updates_title"));
        menu.addCheckItem(BB.Locale.getString("feed_my_updates"), function (isChecked, e) {
            if (isChecked) setSetting("myUpdates", true);
            else setSetting("myUpdates", false)
        }, getSetting("myUpdates"));
        menu.addCheckItem(BB.Locale.getString("feed_everyone_else_updates"), function (isChecked, e) {
            if (isChecked) setSetting("everyoneElseUpdates",
                true);
            else setSetting("everyoneElseUpdates", false)
        }, getSetting("everyoneElseUpdates"));
        menu.addSeparator();
        menu.addItem(BB.Locale.getString("feed_what_updates_title"));
        var radioGroup = menu.addRadioGroup("updateDensity");
        menu.addRadioItem(BB.Locale.getString("feed_important_updates"), radioGroup, function (isChecked, e) {
            if (isChecked) setSetting("additionalUpdates", false);
            else;
        }, !getSetting("additionalUpdates"));
        menu.addRadioItem(BB.Locale.getString("feed_all_updates"), radioGroup, function (isChecked, e) {
            if (isChecked) setSetting("additionalUpdates",
                true);
            else;
        }, getSetting("additionalUpdates"));
        var bm = BB.Widgets.ButtonMenu.create({
            menu: menu.el,
            innerButton: FeedFilterButton.templates.button(),
            hasButtonToLeft: true,
            rightAligned: true,
            dynamicPosition: true,
            trackingContext: _.clone(options.trackingContext)
        });
        bm.el.addClass("chevronButton");
        return bm
    };
    BB.Modules.PipelineView.FeedFilterButton = FeedFilterButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        StateMachine = Streak.StateMachine,
        BB = Streak.BentoBox;
    var GroupBar = {
        COLORS_OLD: ["#AC725E", "#D06B64", "#F83A22", "#FA573C", "#FF7537", "#FFAD46", "#FAD165", "#FBE983", "#B3DC6C", "#7BD148", "#16A765", "#42D692", "#92E1C0", "#9FE1E7", "#9FC6E7", "#4986E7"],
        COLORS: ["#FA573C", "#FFAD46", "#B3DC6C", "#16A765", "#9FC6E7", "#4986E7", "#7BD148", "#F83A22", "#AC725E", "#92E1C0", "#42D692", "#D06B64", "#FAD165", "#FF7537", "#9FE1E7"],
        templates: {},
        defaults: {
            groupJumper: null
        },
        widgetTrackingContext: {
            widget: "Groupbar"
        },
        dnd: {
            dragThreshold: 4,
            sm: null,
            proxy: null,
            drag: null,
            mouseOffset: {
                x: 0,
                y: 0
            },
            mousePosition: {
                x: 0,
                y: 0
            },
            bar: null,
            groups: [],
            widthMap: []
        },
        init: function (cb) {
            var self = this;
            this.templates = {};
            this.templates.group = HTML.get("groupbarGroup");
            this.templates.groupbar = HTML.get("groupbar");
            this.templates.add = HTML.get("groupbarAdd");
            this.setupDragAndDrop();
            if (cb) cb()
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        setupDragAndDrop: function () {
            this.setupDragProxy();
            this.setupStateMachine();
            this.setupEventBindings()
        },
        setupDragProxy: function () {
            var self = this;
            self.dnd.proxy = $(self.templates.group({
                number: 0,
                width: 0,
                name: "&nbsp;"
            }));
            self.dnd.proxy.addClass("proxy");
            self.dnd.proxy.css({
                color: "transparent",
                backgroundColor: "white",
                border: "3px dashed #666",
                marginTop: "-3px",
                height: "81px",
                verticalAlign: "top"
            })
        },
        setupStateMachine: function () {
            var self = this;
            self.dnd.sm = new StateMachine.create({
                initial: "start",
                events: [{
                    name: "mousedown",
                    from: ["start"],
                    to: "possibleDrag"
                }, {
                    name: "mouseup",
                    from: ["possibleDrag", "start"],
                    to: "start"
                }, {
                    name: "dragStart",
                    from: ["possibleDrag"],
                    to: "drag"
                }, {
                    name: "mouseup",
                    from: ["drag"],
                    to: "drop"
                }, {
                    name: "reset",
                    from: ["possibleDrag", "drag", "drop", "start"],
                    to: "start"
                }],
                callbacks: {
                    onstart: function (event, from, to) {
                        if (from === "drag" && self.dnd.bar) self.dnd.bar.render();
                        self.dnd.drag = null;
                        self.dnd.bar = null;
                        self.dnd.widthMap = [];
                        self.dnd.proxy.detach();
                        Gmail.elements.body.css({
                            "-webkit-user-select": ""
                        })
                    },
                    ondrag: function (event, from, to) {
                        self.dnd.drag.trigger("bbDragStart");
                        Gmail.elements.body.css({
                            "-webkit-user-select": "none"
                        });
                        Gmail.elements.body[0].style.cursor = "url(https://mail.google.com/mail/u/0/images/2/closedhand.cur), default !important";
                        var width = self.dnd.drag.width() + 3;
                        self.dnd.drag[0].style.width = width + "px";
                        self.dnd.drag[0].style.zIndex = 100;
                        self.dnd.proxy.css({
                            maxWidth: width,
                            minWidth: width
                        });
                        self.dnd.proxy.data("group", self.dnd.drag.data("group"));
                        self.dnd.drag[0].style.display = "none";
                        self.dnd.drag.before(self.dnd.proxy);
                        var left = self.dnd.drag.offset().left;
                        self.dnd.drag[0].style.position = "fixed";
                        self.dnd.drag.offset({
                            left: left
                        });
                        self.dnd.drag[0].style.display = "inline-block"
                    },
                    ondrop: function (event, from, to) {
                        self.dnd.bar.reorder(self.dnd.groups);
                        BB.Tracker.trackStreakActive({
                            eventName: "StageReorder"
                        }, self.widgetTrackingContext)
                    }
                }
            })
        },
        setupEventBindings: function () {
            var self = this;
            Gmail.elements.body.mousemove(function (e) {
                if (self.dnd.sm.is("possibleDrag")) {
                    var pixelsMoved = Math.abs(e.clientX - self.dnd.mousePosition.x) + Math.abs(e.clientY - self.dnd.mousePosition.y);
                    if (document.activeElement.type !== "text" && pixelsMoved > self.dnd.dragThreshold) self.dnd.sm.dragStart()
                } else if (self.dnd.sm.is("drag") && self.dnd.drag) self.renderDrag(e.clientX)
            });
            Gmail.elements.body.mouseup(function (e) {
                GroupBar.dnd.sm.mouseup()
            });
            BB.Keyboard.bindChord("escape", function (e) {
                self.dnd.sm.reset()
            })
        },
        setupWidthMap: function () {
            var self = this;
            var children = self.dnd.bar.el.children().children(".groupBarGroup");
            self.dnd.widthMap = [];
            for (var i = 0; i < children.length; i++) {
                var child = $(children[i]);
                if (child.hasClass("dragged")) continue;
                var offset = child.offset();
                var width = child.width();
                self.dnd.widthMap.push({
                    left: offset.left,
                    right: offset.left + width,
                    el: child
                })
            }
        },
        renderDrag: function (mouseX) {
            this.setupWidthMap();
            this.dnd.groups = [];
            var pos = this.dnd.widthMap[0];
            var index = 0;
            var currIndex = 0;
            for (var i = 0; i < this.dnd.widthMap.length; i++) {
                var tempPos = this.dnd.widthMap[i];
                this.dnd.groups.push(tempPos.el.data("group"));
                if (tempPos.left <= mouseX) {
                    index = i;
                    pos = tempPos
                }
                if (tempPos.el.hasClass("proxy")) currIndex = i
            }
            if (this.dnd.dragGroup !== pos.el.data("group"))
                if (pos && !pos.el.hasClass("proxy"))
                    if (index < currIndex) pos.el.before(this.dnd.proxy);
                    else if (index === currIndex);
            else pos.el.after(this.dnd.proxy);
            this.dnd.dragGroup = pos.el.data("group");
            var left = this.dnd.widthMap[0].left;
            var right = _.last(this.dnd.widthMap).right - this.dnd.drag.width();
            var renderX = Math.min(right, mouseX - this.dnd.mouseOffset.x);
            renderX = Math.max(left, renderX);
            this.dnd.drag.offset({
                left: renderX + 3
            })
        }
    };
    GroupBar.impl = function (o) {
        var options = o,
            pipeline = options.pipeline,
            dataSource = options.dataSource,
            transformedData = dataSource.dataWrapper.transformedData,
            wrapperEl = $(GroupBar.templates.groupbar()),
            el = wrapperEl.find("ul"),
            add = $(GroupBar.templates.add()),
            stageBeingAdded = false,
            obj = {}, groups = [],
            binders = [];
        options.trackingContext.widgetContext += "/groupBar";
        var render = function (list) {
            GroupBar.dnd.sm.reset();
            add.detach();
            el.empty();
            el.detach();
            if (!BB.UI.getCanvas().is(":FastVisible(noCompute)")) {
                setTimeout(render, 200);
                return
            }
            groups = list || transformedData.groups;
            $.each(groups, function (index, group) {
                var size =
                    transformedData.lists[group] && transformedData.lists[group].list ? transformedData.lists[group].list.length : 0;
                var gEl = renderGroup(group, transformedData.lists[group].displayName(), size, index);
                el.append(gEl)
            });
            wrapperEl.append(el);
            renderAdd()
        }, renderGroup = function (group, groupName, size, index, isEditable) {
                var gEl = $(GroupBar.templates.group({
                    number: size,
                    name: groupName
                }));
                gEl.data("group", group);
                var color = transformedData.lists[group].color;
                gEl.css({
                    backgroundColor: color.backgroundColor,
                    color: color.textColor
                });
                gEl[0].style["-webkit-box-flex"] = Math.log(Math.max(size, 2));
                gEl.find("a").click(function (e) {
                    e.preventDefault();
                    if (options.groupJumper && options.groupJumper.jumpToGroup) options.groupJumper.jumpToGroup(gEl.data("group"))
                });
                if (transformedData.groupMeta.canEdit) {
                    var menu = BB.Widgets.Menu.create({
                        trackingContext: _.clone(options.trackingContext)
                    });
                    gEl[0].onselectstart = function (e) {
                        e.preventDefault();
                        return false
                    };
                    gEl.easyHoverClass("hover");
                    var origPosition, origWidth;
                    gEl.bind({
                        "mousedown": function (e) {
                            if (stageBeingAdded) return;
                            GroupBar.dnd.sm.mousedown();
                            GroupBar.dnd.drag = gEl;
                            GroupBar.dnd.bar = obj;
                            GroupBar.dnd.mouseOffset = {
                                x: e.offsetX,
                                y: e.offsetY
                            };
                            GroupBar.dnd.mousePosition = {
                                x: e.clientX,
                                y: e.clientY
                            }
                        },
                        "mouseup": function (e) {},
                        "bbDragStart": function (e) {
                            gEl[0].title = "";
                            gEl.addClass("dragged")
                        },
                        "bbDragEnd": function (e) {
                            gEl[0].title = group;
                            gEl.removeClass("dragged")
                        }
                    });
                    var groupStage = pipeline.getStage(group);
                    var input = gEl.find("input");
                    menu.addItem(BB.Locale.getString("groupbar_rename_stage"), function () {
                        BB.Tracker.trackStreakActive({
                                eventName: "StageRenameStart"
                            },
                            GroupBar.widgetTrackingContext, options.trackingContext);
                        gEl.find("a").hide();
                        input.val(groupStage.displayName());
                        input.show();
                        input.focus()
                    });
                    BB.Keyboard.bindChordToElement(input, "enter", function () {
                        var val = input.val().trim();
                        if (val.length > 0) {
                            BB.Tracker.trackStreakActive({
                                eventName: "StageRenameAttempt"
                            }, GroupBar.widgetTrackingContext, options.trackingContext);
                            var stage = pipeline.getStageByName(val);
                            if (stage && stage.key() === group) {
                                BB.Tracker.trackStreakActive({
                                        eventName: "StageRenameSame"
                                    }, GroupBar.widgetTrackingContext,
                                    options.trackingContext);
                                input.hide();
                                gEl.find("a").show()
                            } else {
                                BB.Tracker.trackStreakActive({
                                    eventName: "StageRename"
                                }, GroupBar.widgetTrackingContext, options.trackingContext);
                                input.hide();
                                gEl.find("a").show();
                                groupStage.set("name", val);
                                groupStage.save()
                            }
                        } else {
                            BB.Tracker.trackStreakActive({
                                eventName: "EmptyStageRename"
                            }, GroupBar.widgetTrackingContext, options.trackingContext);
                            Gmail.showNotice(BB.Locale.getString("empty_stage_name"))
                        }
                    }, true, true);
                    input.blur(function () {
                        input.hide();
                        gEl.find("a").show()
                    });
                    if (groupStage) {
                        groupStage.bind("set", "name", function () {
                            gEl.find(".name").text(groupStage.displayName())
                        }, "groupbar");
                        binders.push(groupStage)
                    }
                    menu.addItem(BB.Locale.getString("groupbar_delete_stage"), function () {
                        BB.Tracker.trackStreakActive({
                            eventName: "DeleteStageAttempt"
                        }, GroupBar.widgetTrackingContext, options.trackingContext);
                        if (groups && groups.length > 0)
                            if (groups.length === 1) {
                                BB.Tracker.trackStreakActive({
                                    eventName: "DeleteStageFailedOneStage",
                                    userFailure: "true"
                                }, GroupBar.widgetTrackingContext, options.trackingContext);
                                Gmail.showNotice(BB.Locale.getString("one_stage"), 5E3)
                            } else if (groupStage.canDelete()) BB.Widgets.Modal.confirmDelete(groupStage.displayName(), function () {
                            BB.Tracker.trackStreakActive({
                                eventName: "DeleteStage"
                            }, GroupBar.widgetTrackingContext, options.trackingContext);
                            Gmail.showNotice(BB.Locale.getString("deleting_notice", {
                                item: groupStage.displayName()
                            }));
                            pipeline.removeStage(groupStage);
                            groupStage.del(function () {
                                Gmail.hideNotice()
                            })
                        }, null, function () {
                            BB.Tracker.trackStreakActive({
                                    eventName: "DeleteStageCancel"
                                },
                                GroupBar.widgetTrackingContext, options.trackingContext)
                        });
                        else Streak.Gmail.showNotice(BB.Locale.getString("stage_empty"), 5E3)
                    });
                    menu.addSeparator();
                    var colorPicker = BB.Widgets.ColorPicker.create({
                        label: BB.Locale.getString("groupbar_change_color"),
                        previewText: group,
                        colorChosenFunc: function (color) {
                            transformedData.lists[group].changeColor(color);
                            gEl[0].style.backgroundColor = color.backgroundColor;
                            gEl[0].style.color = color.textColor;
                            transformedData.lists[group].color = color;
                            dataSource.render(true);
                            BB.Tracker.trackStreakActive({
                                    eventName: "GroupColorChanged"
                                },
                                GroupBar.widgetTrackingContext, options.trackingContext)
                        },
                        backgroundColor: color,
                        trackingContext: options.trackingContext
                    });
                    menu.addSection(colorPicker.el);
                    var bm = BB.Widgets.ButtonMenu.create({
                        customButton: Gmail.widgets.getSettingsIcon(),
                        menu: menu.el,
                        dynamicPosition: true,
                        rightAligned: index === 0 ? false : true,
                        css: {
                            overflow: "visible"
                        },
                        onFunc: function (e) {
                            colorPicker.showMenu()
                        }
                    });
                    gEl.find(".settings").append(bm.el)
                }
                return gEl
            }, reorder = function (groupsToSave) {
                var i = 0;
                for (i = 0; i < groupsToSave.length; i++)
                    if (groups !==
                        groupsToSave[i]) break;
                if (i === groupsToSave.length) {
                    render();
                    return
                }
                Gmail.showNotice(BB.Locale.getString("saving"));
                pipeline.set("stageOrder", groupsToSave);
                pipeline.save(function () {
                    dataSource.render();
                    Gmail.hideNotice()
                }, 0, false, render)
            }, renderAdd = function () {
                if (transformedData.groupMeta.canEdit) {
                    resetAdd();
                    el.append(add)
                }
            }, resetAdd = function () {
                add.find("a").show();
                add.find("input").hide();
                add.removeClass("inputOpen");
                add.css({
                    backgroundColor: "whiteSmoke"
                })
            };
        add.click(function (e) {
            if (stageBeingAdded) return;
            add.addClass("inputOpen");
            add.find("a").hide();
            add.find("input").show().focus().val("");
            add.color = transformedData.groupMeta.nextColor;
            add.css({
                backgroundColor: add.color
            });
            e.preventDefault();
            BB.Tracker.trackStreakActive({
                eventName: "AddStageStarted"
            }, GroupBar.widgetTrackingContext, options.trackingContext)
        });
        BB.Keyboard.bindChordToElement(add.find("input"), "enter", function (e) {
            BB.Tracker.trackStreakActive({
                eventName: "AddStageAttempted"
            }, GroupBar.widgetTrackingContext, options.trackingContext);
            add.name =
                add.find("input").val().trim();
            if (add.name && add.name.length > 0) {
                BB.Tracker.trackStreakActive({
                    eventName: "AddStage"
                }, GroupBar.widgetTrackingContext, options.trackingContext);
                add.find("input").prop("disabled", true);
                stageBeingAdded = true;
                Gmail.showNotice(BB.Locale.getString("saving"));
                pipeline.addStage(add.name, function () {
                    stageBeingAdded = false;
                    add.find("input").prop("disabled", false);
                    dataSource.render()
                });
                e.preventDefault();
                e.stopPropagation()
            } else BB.Tracker.trackStreakActive({
                eventName: "AddStageFailed",
                reason: "noText",
                userFailure: "true"
            }, GroupBar.widgetTrackingContext, options.trackingContext)
        }, true, true);
        add.find("input").blur(function (e) {
            if (!stageBeingAdded) resetAdd()
        });
        dataSource.bind("tableChange", function () {
            if (!stageBeingAdded) render()
        }, "groupbar");
        dataSource.bind("newBoxAdded", function () {
            if (!stageBeingAdded) render()
        }, "groupbar");
        obj.el = wrapperEl;
        obj.render = render;
        obj.reorder = reorder;
        obj.destroy = function () {
            el.remove();
            for (var i = 0; i < binders.length; i++) binders[i].unbindAll("groupbar")
        };
        return obj
    };
    Streak.DependencyManager.addFunction({
        functionKey: "pipelineView.groupBarInitialized",
        functionToCall: GroupBar.init,
        functionContext: GroupBar,
        dependentFunctionKeys: ["keyboardInitialized", "htmlLoaded", "localeLoaded"]
    });
    BB.Modules.PipelineView.GroupBar = GroupBar
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var FullScreenSpreadsheetButton = {
        defaults: {
            pipeline: null,
            color: "blue",
            isButton: true,
            isDark: false,
            iconAfter: false
        },
        create: function (o) {
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        }
    };
    var trackingContext;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    FullScreenSpreadsheetButton.impl = function (o) {
        var self = {};
        var options =
            o;
        options.trackingContext.widgetContext += "/fullScreenSpreadsheetButton";
        trackingContext = options.trackingContext;
        self.pipeline = options.pipeline;
        self.spreadsheet = options.spreadsheet;
        self.spreadsheetParent = self.spreadsheet.el.parent();
        self._inFullMode = false;
        self.options = options;
        self.sheet = self.spreadsheet.el;
        self.menuBar = options.pipelineToolBar;
        self._firstLoad = true;
        self._button;
        self._exitFullMode = function () {
            if (_.isDefined(self.holder)) {
                _.each(self.options.buttonGroup, function (btn) {
                    $(btn).show()
                });
                self.menuBarParent.prepend(self.menuBar);
                Streak.Gmail.getCurrentMainContainer().find(".table.bb_table").prepend(self.sheet);
                self.sheet.css("top", "0px");
                self._inFullMode = false;
                self.holder.detach();
                self._button.changeIconByClass("bbFullscreenExitIcon", "bbFullscreenIcon")
            }
        };
        var buttonOptions = {
            hasButtonToLeft: true,
            isToggle: false,
            tooltip: BB.Locale.getString("fullscreen_button_text"),
            iconClassName: "bbFullscreenIcon",
            onFunc: function (e) {
                self._button.toggleRoundLeft();
                if (self._firstLoad) {
                    self._firstLoad = false;
                    self.menuBarParent = options.pipelineToolBar.parent()
                }
                if (self._inFullMode) {
                    track("exitFullScreen");
                    self._exitFullMode()
                } else {
                    track("enterFullScreen");
                    _.each(self.options.buttonGroup, function (btn) {
                        $(btn).hide()
                    });
                    if (_.isUndefined(self.holder)) self.holder = Streak.$("<div></div>");
                    self.holder.addClass("holderFullScreen");
                    Streak.Gmail.getCurrentMainContainer().append(self.holder);
                    self.holder.append(self.menuBar);
                    self.holder.append(self.sheet);
                    self.sheet.css("top", "45px");
                    self._inFullMode = true;
                    self._button.changeIconByClass("bbFullscreenIcon", "bbFullscreenExitIcon")
                }
                self.spreadsheet.redraw()
            }
        };
        var b =
            BB.Widgets.Button.create(buttonOptions);
        if (options.iconAfter) {
            var span = b.el.find("span").detach();
            b.el.prepend(span)
        }
        self._button = b;
        return {
            button: b,
            destroy: function () {
                try {
                    self._exitFullMode(true)
                } catch (e) {}
            }
        }
    };
    BB.Modules.PipelineView.FullScreenSpreadsheetButton = FullScreenSpreadsheetButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var MoreButton = {
        defaults: {
            pipeline: null
        },
        create: function (o) {
            this._init();
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        },
        _init: function () {
            if (!this.templates) {
                this.templates = {};
                this.templates.button = HTML.get("moreButtonButton");
                this.templates.menu = HTML.get("moreButtonMenu")
            }
        }
    };
    var trackingContext;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext,
            props, {
                eventName: event
            })
    };
    MoreButton.impl = function (o) {
        var options = o;
        var pipeline = options.pipeline;
        var dataSource = options.dataSource;
        var importViewController = null;
        var menu = BB.Widgets.Menu.create();
        options.trackingContext.widgetContext += "/moreButton";
        trackingContext = options.trackingContext;
        var __mailMergeItem = menu.addItem(BB.Locale.getString("mail_merge_start"), function (e) {
            track("mm_mailMergeButtonPipelineClicked");
            BB.Modules.MailMergeMasterController.startMailMergeFromPipelineView(pipeline, dataSource.getCheckedBoxes())
        });
        __mailMergeItem.addClass("mailMergePipelineButton");
        menu.addSeparator();
        menu.addItem(BB.Locale.getString("import_csv"), function (e) {
            track("importCSV");
            if (importViewController) importViewController.destroy();
            importViewController = new MoreButton.PipelineCSVImportViewController;
            importViewController.setPipeline(pipeline);
            importViewController.setDoneCallback(function () {
                Gmail.showNotice(BB.Locale.getString("import_complete"));
                BB.Data.getPipelineBoxes(pipeline.key()).refresh(function () {
                    dataSource.render();
                    Gmail.hideNotice(5E3);
                    importViewController.destroy();
                    importViewController = null
                })
            });
            importViewController.start()
        });
        menu.addItem(BB.Locale.getString("export_to_csv"), function (e) {
            track("exportToCSV");
            bm.el.trigger("export");
            if (!Streak.FileStore.isEnabled()) {
                Gmail.showNotice("Unfortunately export does not work in Safari. You must use Chrome to export", 1E4);
                return
            }
            Gmail.showNotice(BB.Locale.getString("creating_csv"));
            var boxString = "";
            var table = dataSource.dataWrapper.cellTable;
            for (var ii = 0; ii < table.getRowCount(); ii++) {
                if (table.isGroup([ii,
                    0
                ])) continue;
                var row = [];
                for (var jj = 2; jj < table.getVisibleColumnCount() + 2; jj++)
                    if (table.isColumnVisible(jj)) row.push('"' + table.getTextValue([ii, jj]).replace(/\"/ig, '""') + '"');
                boxString += row.join(",");
                boxString += "\n"
            }
            var fileName = pipeline.displayName() + "-" + Streak.Date.create().customFormat("shortFormat") + ".csv";
            var fullPath = _getPipelineExportsDirectoryPath() + "/" + fileName;
            Streak.FileStore.store(fullPath, boxString, function (fileEntry) {
                var downloadLink = $('<a href="' + fileEntry.toURL() + '" download="' + fileName +
                    '"> </a>');
                downloadLink[0].addEventListener("click", function (e) {
                    e.stopImmediatePropagation();
                    e.stopPropagation()
                }, true);
                Gmail.elements.body.append(downloadLink);
                downloadLink.simulateRawClick();
                downloadLink.remove();
                Gmail.hideNotice()
            })
        });
        menu.addItem(BB.Locale.getString("export_feed"), function (e) {
            track("exportFeed");
            Gmail.showNotice(BB.Locale.getString("creating_csv"), 5E3);
            var src = "api/v1/pipelines/" + pipeline.key() + "/newsfeed/export";
            var iframe = $(document.createElement("iframe"));
            iframe[0].setAttribute("height",
                0);
            iframe[0].setAttribute("width", 0);
            iframe[0].setAttribute("frameborder", 0);
            iframe[0].setAttribute("src", BB.UI.getResourceURL(src));
            Gmail.elements.body.append(iframe)
        });
        var moveSection = {};
        moveSection.separator = menu.addSeparator();
        moveSection.pipelineMenu = BB.Widgets.Menu.create({
            css: {
                minHeight: "50px"
            }
        });
        moveSection.item = menu.addSubMenu(BB.Locale.getString("move_box"), moveSection.pipelineMenu);
        var renderPipelineMenu = function () {
            moveSection.pipelineMenu.empty();
            if (BB.Data.getAllPipelines().length > 1) {
                moveSection.separator.show();
                moveSection.item.show();
                _.each(BB.UI.getSortedPipelines(), function (newPipeline) {
                    if (newPipeline.key() !== pipeline.key()) moveSection.pipelineMenu.addItem(newPipeline.displayName(), function () {
                        _moveBoxes(pipeline, newPipeline, dataSource)
                    })
                })
            } else {
                moveSection.separator.hide();
                moveSection.item.hide()
            }
        };
        BB.Data.getAllPipelines().bind("change", renderPipelineMenu);
        renderPipelineMenu();
        menu.el.addClass("moreButtonMenu");
        var bm = BB.Widgets.ButtonMenu.create({
            buttonInner: MoreButton.templates.button(),
            menu: menu.el,
            rightAligned: true,
            dynamicPosition: true,
            trackingContext: _.clone(options.trackingContext)
        });
        bm.off();
        bm.getElement().addClass("streak__pipelineMoreButton");
        var oldDestroy = bm.destroy;
        bm.destroy = function () {
            oldDestroy();
            if (importViewController) importViewController.destroy()
        };
        return bm
    };

    function _moveBoxes(pipeline, newPipeline, dataSource) {
        track("moveBoxesStarted");
        var checked = dataSource.getCheckedBoxes();
        if (!checked || checked.length === 0) {
            Gmail.showNotice(BB.Locale.getString("one_box_selected"), 1E4);
            track("moveBoxesFailed", {
                userFailure: true
            });
            return
        }
        var moveMessage = _getMoveBoxesMessage(pipeline, newPipeline, checked);
        track("moveBoxesAsk");
        BB.Widgets.Modal.confirm(BB.Locale.getString("move_boxes_confirm_title", {
            pluralize: [checked]
        }), moveMessage, function () {
            _startMovingBoxes(pipeline, newPipeline, checked, dataSource)
        }, function () {
            BB.Data.getPipelineBoxes(pipeline.key()).setTriggersActive(true);
            track("moveBoxesCancelled")
        })
    }
    var numMoved = 0;

    function _getMoveBoxesMessage(pipeline, newPipeline, checked) {
        var oldFields = pipeline.getFields();
        var newFields = newPipeline.getFields();
        var missedFields = [];
        for (var i = 0; i < oldFields.length; i++) {
            var field = oldFields[i];
            var any = _.any(newFields, function (newField) {
                return newField.get("name") === field.get("name") && newField.get("type") === field.get("type")
            });
            if (!any) missedFields.push(field.get("name"))
        }
        var message = null;
        if (missedFields.length > 0) message = BB.Locale.getString("move_boxes_confirm_message_fields", {
            oldPipeline: pipeline.displayName(),
            newPipeline: newPipeline.displayName(),
            number: checked.length,
            fields: missedFields.join(", "),
            pluralize: [checked.length, missedFields.length]
        });
        else message = BB.Locale.getString("move_boxes_confirm_message", {
            number: checked.length,
            oldPipeline: pipeline.displayName(),
            newPipeline: newPipeline.displayName(),
            pluralize: [checked.length]
        });
        return message
    }

    function _startMovingBoxes(pipeline, newPipeline, checked, dataSource) {
        track("moveBoxesAccepted");
        var length = checked.length;
        Gmail.showNotice(BB.Locale.getString("saving"), null, 1);
        var moveBoxCalls = _getMoveBoxCalls(pipeline, newPipeline, checked);
        moveBoxCalls.reverse();
        _.chainedCallbacks(moveBoxCalls, function () {
            _refreshPipeline(pipeline, newPipeline, checked.length, dataSource)
        })
    }

    function _getMoveBoxCalls(pipeline, newPipeline, checked) {
        var calls = [];
        for (var ii = 0; ii < checked.length; ii++) calls.push(_getMoveBoxCall(checked[ii], newPipeline, ii, checked.length));
        return calls
    }

    function _getMoveBoxCall(box, newPipeline, index, numberOfBoxes) {
        var afterSavedCallback = null;
        var after = _.after(2, function () {
            _moveTheBox(box, newPipeline, index, numberOfBoxes, afterSavedCallback);
            box.performNextSyncOperation()
        });
        box.addSyncedCallback(after);
        return function (callback) {
            afterSavedCallback = callback;
            after()
        }
    }

    function _moveTheBox(box, pipeline, index, numberOfBoxes, afterSavedCallback) {
        box.trigger("delete");
        box.set("pipelineKey", pipeline.key());
        box.clearFields();
        box.save(function () {
            Gmail.showNotice(BB.Locale.getString("moved_boxes", {
                number: index + 1 + " of " + numberOfBoxes,
                stage: pipeline.displayName(),
                pluralize: [numberOfBoxes]
            }), null, 2);
            BB.Data.addBoxModel(box);
            if (afterSavedCallback) afterSavedCallback()
        }, 1, true, afterSavedCallback)
    }

    function _refreshPipeline(pipeline, newPipeline, length, dataSource) {
        BB.Data.getPipelineBoxes(newPipeline.key()).refresh(function () {
            dataSource.render();
            Gmail.showNotice(BB.Locale.getString("moved_boxes", {
                number: length,
                stage: newPipeline.displayName(),
                pluralize: [length]
            }), 5 * 1E3, 3);
            Gmail.elements.notice.message.find("a").attr("href", "#").click(function (e) {
                BB.UI.setURL(newPipeline.link());
                e.preventDefault()
            })
        })
    }

    function _getPipelineExportsDirectoryPath() {
        return "pipelineExports"
    }
    Streak.DependencyManager.addFunction({
        functionKey: "emptyPipelineExportsDirectory",
        functionReference: function () {
            try {
                Streak.FileStore.remove(_getPipelineExportsDirectoryPath())
            } catch (err) {}
        },
        dependentFunctionKeys: ["fileStoreLoaded"]
    });
    BB.Modules.PipelineView.MoreButton = MoreButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PipelineCSVImportView = Streak.Class.subclass({
        className: "PipelineCSVImportView",
        superclass: UI.View,
        _memberVariables: [{
            name: "_modal",
            destroy: true
        }],
        _initialize: function () {
            UI.View.prototype._initialize.call(this)
        },
        _setupElement: function () {
            this._element = HTML.getElement("importModal")
        },
        _showModal: function (modalOptions) {
            if (!this._element.is(":FastVisible(noCompute)")) $.modal.close();
            modalOptions.title = BB.Locale.getString("import_boxes_title");
            modalOptions.inner = this._element;
            modalOptions.persist = true;
            modalOptions.width = "600px";
            this._modal = BB.Widgets.Modal.create(modalOptions);
            this._modal.show(true)
        },
        _hideSections: function () {
            this._element.find(".explanation").css({
                visibility: "hidden"
            });
            this._element.find(".importModal > div").hide()
        },
        _showSection: function (section) {
            this._element.find(".importModal ." +
                section).show()
        },
        renderLoading: function () {
            this._showModal({
                showConfirm: false,
                cancelText: BB.Locale.getString("modal_cancel")
            });
            this._hideSections();
            this._showSection("loading");
            this._element.find(".explanation").css({
                visibility: "visible"
            });
            this._element.find(".explanation").show()
        },
        renderUpload: function (uploadUrl) {
            var self = this;
            this._showModal({
                title: BB.Locale.getString("import_csv"),
                showConfirm: false,
                cancelText: BB.Locale.getString("modal_cancel")
            });
            this._element.find(".explanation").css({
                visibility: "visible"
            });
            var el = this._element.find(".iframeWrapper");
            el.empty();
            var iframe = document.createElement("iframe");
            iframe.src = uploadUrl;
            el.append(iframe);
            var loadedTimes = 0;
            iframe.onload = function () {
                loadedTimes += 1;
                if (loadedTimes == 1) {
                    self._hideSections();
                    self._showSection("upload");
                    self._element.find(".explanation").css({
                        visibility: "visible"
                    });
                    self._element.find(".explanation").show()
                }
                if (loadedTimes > 1) {
                    $(iframe).remove();
                    self._callDelegateFunction("uploadComplete")
                }
            }
        },
        renderVerifying: function () {
            this._hideSections();
            this._showSection("verifying")
        },
        renderVerified: function (verifiedFields, recordsTotal) {
            var self = this;
            this._showModal({
                showCancel: true,
                showConfirm: true,
                confirmText: BB.Locale.getString("import_verify_start"),
                confirmFunc: function () {
                    self._callDelegateFunction("startProcessing");
                    return true
                },
                cancelText: BB.Locale.getString("import_verify_cancel"),
                cancelFunc: function () {
                    self._callDelegateFunction("cancelImport");
                    return true
                }
            });
            this._hideSections();
            this._element.find(".explanation").hide();
            this._showSection("verified");
            self._element.find(".matched").empty();
            this._element.find(".verifiedText")[0].innerHTML = BB.Locale.getString("import_records_found", {
                number: recordsTotal,
                pluralize: [recordsTotal]
            });
            _.each(verifiedFields, function (field) {
                self._element.find(".matched").append("<li>" + field + "</li>")
            })
        },
        renderProcessing: function () {
            var self = this;
            this._showModal({
                showConfirm: false,
                showCancel: true,
                cancelText: BB.Locale.getString("import_background"),
                cancelFunc: function () {
                    self._callDelegateFunction("processInBackground")
                }
            });
            this._hideSections();
            this._element.find(".explanation").hide();
            this._showSection("processing")
        },
        updateLoadPercentage: function (percentage) {
            this._element.find(".processing .percent")[0].innerHTML = "(" + percentage + "%)";
            this._element.find(".processing .loaderBar div").width(percentage + "%")
        },
        renderDone: function () {
            this._hideSections();
            this._element.find(".explanation").hide();
            this._showSection("done")
        },
        renderError: function (errorMessage) {
            var self = this;
            this._showModal({
                showConfirm: true,
                showCancel: true,
                confirmText: BB.Locale.getString("import_try_again"),
                confirmFunc: function () {
                    self._callDelegateFunction("tryImportAgain")
                },
                cancelText: BB.Locale.getString("import_close"),
                cancelFunc: function () {
                    self._callDelegateFunction("cancelImport")
                }
            });
            this._hideSections();
            this._element.find(".explanation").hide();
            this._showSection("error");
            if (errorMessage) this._element.find(".importErrorDescription")[0].innerHTML = errorMessage;
            else {
                var desc = this._element.find(".importErrorDescription");
                desc[0].innerHTML = BB.Locale.getString("import_error_message_1") + "<br />" + BB.Locale.getString("import_error_message_2");
                desc.find("a").attr("href", "mailto:support@streak.com")
            }
        }
    });
    Library.set("BentoBox.Modules.PipelineView.MoreButton.PipelineCSVImportView", PipelineCSVImportView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PipelineCSVImportViewController = Streak.Class.subclass({
        className: "PipelineCSVImportViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_pipeline",
            destroy: false,
            set: true
        }, {
            name: "_doneCallback",
            destroy: true,
            set: true
        }, {
            name: "_importJobCollection",
            destroy: true
        }, {
            name: "_currentImportJob",
            destroy: true
        }, {
            name: "_poller",
            destroy: true
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this)
        },
        _setupView: function () {
            this._view = new BB.Modules.PipelineView.MoreButton.PipelineCSVImportView
        },
        setPipeline: function (pipeline) {
            this._pipeline = pipeline;
            this._importJobCollection = BB.Models.ImportJob.createCollection(pipeline.key())
        },
        start: function () {
            this._stopPolling();
            this._importJobCollection.refresh(this._handleCollectionRefreshed.bind(this));
            this._view.renderLoading()
        },
        _handleCollectionRefreshed: function () {
            this._extractImportJob();
            if (this._currentImportJob) {
                this._currentImportJobUpdated();
                return
            }
            this._setupNewImportJob()
        },
        _extractImportJob: function () {
            for (var ii = 0; ii < this._importJobCollection.length; ii++)
                if (this._importJobCollection[ii]) switch (this._importJobCollection[ii].get("status")) {
                case "UPLOADED":
                case "VERIFIED":
                case "PROCESSING":
                    this._currentImportJob = this._importJobCollection[ii];
                    return;
                    break
                }
                return
        },
        _setupNewImportJob: function () {
            this._currentImportJob =
                BB.Models.ImportJob.create({
                    pipelineKey: this._pipeline.key()
                });
            this._currentImportJob.save(this._currentImportJobUpdated.bind(this), this._creatingImportJobFailed.bind(this))
        },
        _creatingImportJobFailed: function () {
            this._view.renderError("Problem starting import job")
        },
        _currentImportJobUpdated: function () {
            switch (this._currentImportJob.get("status")) {
            case "NOT_STARTED":
                this._renderUpload();
                break;
            case "UPLOADED":
                this._renderVerifying();
                break;
            case "VERIFIED":
                this._showVerified();
                break;
            case "PROCESSING":
                this.startProcessing();
                break;
            case "CLEANED_UP":
                this.destroy();
                break;
            default:
                this._renderError()
            }
        },
        _renderUpload: function () {
            var uploadUrl = this._currentImportJob.get("uploadUrl");
            var server = this._extractDomain(uploadUrl);
            uploadUrl = server + "/importUpload#" + uploadUrl;
            this._view.renderUpload(uploadUrl)
        },
        _extractDomain: function (url) {
            var anchor = document.createElement("a");
            anchor.href = url;
            return anchor.origin
        },
        uploadComplete: function () {
            this._currentImportJob.refresh(this._currentImportJobUpdated.bind(this))
        },
        _renderVerifying: function () {
            this._view.renderVerifying();
            var self = this;
            this._startPolling("UPLOADED", "VERIFIED", null, function () {
                self._showVerified()
            })
        },
        _showVerified: function () {
            this._view.renderVerified(this._currentImportJob.get("verifiedFields"), this._currentImportJob.get("recordsTotal"))
        },
        startProcessing: function () {
            this._currentImportJob.set("status", "PROCESSING");
            this._currentImportJob.save();
            this._view.renderProcessing();
            var self = this;
            this._startPolling("PROCESSING", "DONE", function () {
                var percent = (self._currentImportJob.get("percentageComplete") * 100).round();
                self._view.updateLoadPercentage(percent)
            }, function () {
                self._stopPolling();
                self._view.renderDone();
                self._doneCallback()
            })
        },
        processInBackground: function () {
            this.destroy()
        },
        _startPolling: function (continueStatus, doneStatus, continueFunction, doneFunction) {
            if (this._poller) {
                this._poller.stop();
                this._poller = null
            }
            var self = this;
            this._poller = _.repeatEvery(function () {
                self._refreshAndCheckAgainstStatus(continueStatus, doneStatus, continueFunction, doneFunction)
            }, 1E3)
        },
        _refreshAndCheckAgainstStatus: function (continueStatus,
            doneStatus, continueFunction, doneFunction) {
            var self = this;
            this._currentImportJob.refresh(function () {
                self._checkAgainstStatus(continueStatus, doneStatus, continueFunction, doneFunction)
            }, function () {
                self._renderError()
            })
        },
        _checkAgainstStatus: function (continueStatus, doneStatus, continueFunction, doneFunction) {
            if (!this._currentImportJob) return;
            switch (this._currentImportJob.get("status")) {
            case continueStatus:
                if (continueFunction) continueFunction();
                break;
            case doneStatus:
                this._stopPolling();
                if (doneFunction) doneFunction();
                break;
            case "INVALID_FILE":
            case "ERROR_IMPORTING":
                this._renderError();
                break;
            case "CLEANED_UP":
                this.start();
                break;
            default:
                this._renderError();
                break
            }
        },
        _renderError: function () {
            this._stopPolling();
            this._view.renderError(this._currentImportJob.get("errorMessage"))
        },
        _stopPolling: function () {
            if (this._poller) this._poller.stop();
            this._poller = null
        },
        tryImportAgain: function () {
            this._currentImportJob.set("status", "CANCELLED_BY_USER");
            this._currentImportJob.save();
            this._currentImportJob = null;
            this.start()
        },
        cancelImport: function () {
            this._stopPolling();
            Gmail.showNotice(BB.Locale.getString("import_cancel"), 3E3);
            this._currentImportJob.set("status", "CANCELLED_BY_USER");
            this._currentImportJob.save();
            this.destroy()
        }
    });
    Library.set("BentoBox.Modules.PipelineView.MoreButton.PipelineCSVImportViewController", PipelineCSVImportViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var self, PipelineSearchController;
    self = PipelineSearchController = Streak.Eventer.create({
        data: null,
        dataCursor: null,
        resultSet: [],
        selectedCoord: null,
        selectedIndex: null,
        searchTerm: null,
        tableCellCallbacks: null,
        pipeline: null,
        setup: function (pipeline, data, dataCursor, tableCellCallbacks) {
            self.pipeline = pipeline;
            self.data = data;
            self.dataCursor = dataCursor;
            self.reset();
            self.tableCellCallbacks = tableCellCallbacks
        },
        reset: function () {
            self.resultSet.length = 0;
            self.selectedCoord = null;
            self.selectedIndex = -1;
            self.searchTerm = null
        },
        searchTriggered: function (query) {
            self.searchTerm = query;
            var oldCoord = self.dataCursor.getPosition();
            self.selectedIndex = 0;
            _.each(self.resultSet, function (rr) {
                self.dataCursor.removeCoordinateClass(rr, "searchResultsHighlightPipeline");
                self.tableCellCallbacks.cellChange(rr)
            });
            self.resultSet = [];
            if (_.isDefined(query) && query.length > 0) {
                query = query.toUpperCase();
                var numRows = self.data.getLastRowNumber() + 1;
                for (var ii = 0; ii < numRows; ii++) {
                    var currColumns = self.data.getLastColumnForCurrentRow([ii, 0]) + 1;
                    for (var jj = 0; jj < currColumns; jj++) {
                        var coord = [ii, jj];
                        var val = self.data.getSearchValue(coord);
                        if (_.isDefined(val)) {
                            val = val.toString().toUpperCase();
                            if (val.indexOf(query) > -1) self.resultSet.push(coord)
                        }
                    }
                }
            }
            if (self.resultSet.length > 0) {
                _.each(self.resultSet, function (rr) {
                    self.dataCursor.addCoordinateClass(rr, "searchResultsHighlightPipeline")
                });
                self.selectedIndex = self.findNewCoordPosition(oldCoord);
                self.selectedCoord = self.resultSet[self.selectedIndex];
                self.moveCursor()
            } else self.reset();
            _.each(self.resultSet, function (cc) {
                self.tableCellCallbacks.cellChange(cc)
            });
            self.trigger("searchResultsChanged")
        },
        cellIsGreaterThanOrEqual: function (c1, c2) {
            if (c1[0] > c2[0]) return true;
            if (c1[0] < c2[0]) return false;
            return c1[1] >= c2[1]
        },
        getResultState: function () {
            return {
                selectedIndex: self.selectedIndex + 1,
                total: self.resultSet.length
            }
        },
        hideSearch: function () {
            self.searchTriggered("");
            self.resultSet = [];
            self.reset();
            self.moveCursor();
            self.tableCellCallbacks.focusTable()
        },
        moveCursor: function () {
            self.dataCursor.setPosition(self.selectedCoord);
            self.trigger("searchResultsChanged")
        },
        findNewCoordPosition: function (oldPosition) {
            if (oldPosition === null) return 0;
            var newIndex = 0;
            for (var ii = 0; ii < self.resultSet.length; ii++) {
                var greaterThan = self.cellIsGreaterThanOrEqual(self.resultSet[ii], oldPosition);
                if (greaterThan) return ii
            }
            return newIndex
        },
        selectPrevious: function () {
            if (self.resultSet.length === 0) {
                self.reset();
                return
            }
            self.selectedIndex--;
            if (self.selectedIndex <
                0) self.selectedIndex = self.resultSet.length - 1;
            self.selectedCoord = self.resultSet[self.selectedIndex];
            self.moveCursor()
        },
        selectNext: function () {
            if (self.resultSet.length === 0) {
                self.reset();
                return
            }
            self.selectedIndex++;
            if (self.selectedIndex >= self.resultSet.length) self.selectedIndex = 0;
            self.selectedCoord = self.resultSet[self.selectedIndex];
            self.moveCursor()
        },
        _updateCursorPosition: function (coord) {
            self.dataCursor.setPosition(coord)
        }
    });
    BB.UI.PipelineSearchController = PipelineSearchController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        Eventer = Streak.Eventer,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    _scrollPositions = {};
    var PipelineSpreadsheetController = {
        transforms: [],
        namedTransforms: {},
        create: function (key, savedViewsController) {
            return new this.impl(key, false, savedViewsController)
        },
        registerTransform: function (transform, priority, name) {
            transform.priority = priority;
            transform.transformName = name;
            this.transforms.push(transform);
            if (_.isReal(name)) {
                if (_.isNotReal(this.namedTransforms[name])) this.namedTransforms[name] = [];
                this.namedTransforms[name].push(transform)
            }
        }
    };
    PipelineSpreadsheetController.impl = function (key, pDontRender, savedViewsController) {
        var adapter = Eventer.create({
            dataWrapper: {
                transformedData: {},
                cellTable: BB.UI.PipelineTableModel,
                headerRow: [],
                groupRows: {},
                cursor: null
            }
        });
        var transformedData = adapter.dataWrapper.transformedData,
            cellTable = adapter.dataWrapper.cellTable,
            newBoxAdapter = BB.UI.PipelineNewBox,
            dontRender = pDontRender,
            pipeline = BB.Data.getPipeline(key),
            uniq = "adapter" + Date.now() + "." + Math.random(),
            currentState = {
                hash: null,
                state: null,
                cursor: BB.VirtualCursorModel.create({
                    highlightFunc: function (coord) {
                        updateCurrentState(coord, "HIGHLIGHT")
                    },
                    unhighlightFunc: function (coord) {
                        updateCurrentState(coord, "DEFAULT")
                    },
                    selectFunc: function (coord) {
                        switch (cellTable.getActionType(coord)) {
                        case "INSTANT":
                        case "CHECKBOX":
                            cellTable.action(coord);
                            break;
                        case "EDIT":
                            updateCurrentState(coord, "EDIT");
                            break
                        }
                    }
                })
            }, delayer = null,
            delayedRender = function (justRedraw) {
                clearTimeout(delayer);
                delayer = setTimeout(function () {
                    renderData(justRedraw)
                }, 30)
            }, tableCellCallbacks = {
                cellChange: function (coord) {
                    adapter.trigger("cellChange", coord)
                },
                rowChange: function (row) {
                    adapter.trigger("rowChange", row)
                },
                tableChange: function (justRedraw) {
                    adapter.dataWrapper.cellTable.setup(pipeline, adapter.dataWrapper.transformedData, tableCellCallbacks, justRedraw);
                    renderData(justRedraw)
                },
                widthChange: function (columnIndex) {
                    adapter.trigger("widthChange", columnIndex)
                },
                newBoxAdded: function () {
                    adapter.trigger("newBoxAdded")
                },
                focusTable: function () {
                    adapter.trigger("focus")
                }
            }, cursor = currentState.cursor,
            renderPending = false,
            renderPendingFullRender = false,
            renderData = function (justRedraw, force) {
                clearTimeout(delayer);
                if (force) {
                    fullRender(true);
                    return
                }
                if (currentState.state === "EDIT") {
                    renderPending = true;
                    renderPendingFullRender = renderPendingFullRender || !justRedraw;
                    return
                }
                if (justRedraw) {
                    adapter.trigger("redraw");
                    return
                }
                fullRender()
            }, fullRender = function (force) {
                adapter.trigger("initData");
                initData();
                transform();
                adapter.dataWrapper.cellTable.setup(pipeline,
                    adapter.dataWrapper.transformedData, tableCellCallbacks);
                newBoxAdapter.setup(pipeline, adapter.dataWrapper, cursor, tableCellCallbacks, savedViewsController);
                cursor.setup(cellTable);
                adapter.trigger("tableChange");
                var currPosition = cursor.getPosition();
                cursor.toTop = false;
                adapter.searchController.setup(pipeline, cellTable, cursor, tableCellCallbacks);
                if (currentState.state !== "DEFAULT") cursor.setPosition(currPosition);
                if (_.isReal(_scrollPositions[pipeline.key()])) adapter.trigger("setScrollPosition", _scrollPositions[pipeline.key()])
            },
            initData = function () {
                transformedData.columns = {};
                transformedData.columnOrder = [];
                transformedData.lists = {
                    novalue: {
                        isEditable: false,
                        groupModel: null,
                        list: (BB.Data.getPipelineBoxes(key) || []).slice(0),
                        color: null,
                        isOpen: true
                    }
                };
                transformedData.groups = ["novalue"]
            }, transform = function (transformSettings) {
                var transforms;
                if (_.isReal(transformSettings)) transforms = _.flatten(_.values(PipelineSpreadsheetController.namedTransforms));
                else transforms = PipelineSpreadsheetController.transforms; if (transforms) _(transforms).chain().sortBy(function (transform) {
                    if (!transform.priority) return 100;
                    return transform.priority
                }).each(function (transform) {
                    var settings;
                    if (transformSettings) settings = transformSettings[transform.transformName];
                    transform(pipeline, transformedData, savedViewsController, settings)
                })
            }, updateCurrentState = function (coord, state) {
                cellTable.updateState(coord, state);
                switch (state) {
                case "DEFAULT":
                    adapter.trigger("cursorChange", coord, false, false, cursor.noScroll);
                    break;
                case "HIGHLIGHT":
                    currentState.hash = cellTable.getRowHash(coord[0]);
                    adapter.trigger("cursorChange", coord, cellTable.shouldNotScrollX(coord),
                        true, cursor.toTop, cursor.noScroll);
                    cursor.toTop = false;
                    break;
                case "EDIT":
                    currentState.hash = cellTable.getRowHash(coord[0]);
                    adapter.trigger("cursorChange", coord, cellTable.shouldNotScrollX(coord), false, false, cursor.noScroll);
                    break
                }
                cursor.noScroll = false;
                currentState.state = state;
                adapter.trigger("cellChange", coord);
                updateRowAndColumnMarker(coord, state);
                if (renderPending) {
                    renderPending = false;
                    renderData(!renderPendingFullRender);
                    renderPendingFullRender = false
                }
            }, updateRowAndColumnMarker = function (coord, state) {
                var ii =
                    0,
                    numColumns;
                var totalNumColumns = cellTable.getNumberOfVisibleColumnsForRow([0, 0]);
                var rawCoord = cursor.getRawPosition();
                for (ii = 0; ii < totalNumColumns; ii++)
                    if (ii !== coord[1]) {
                        cursor.removeCoordinateClass([0, ii], "bbActiveColumn");
                        adapter.trigger("cellChange", [0, ii])
                    }
                switch (state) {
                case "DEFAULT":
                    numColumns = cellTable.getNumberOfVisibleColumnsForRow(coord);
                    for (ii = 0; ii < numColumns; ii++) {
                        cursor.removeCoordinateClass([coord[0], ii], "bbActiveRow");
                        adapter.trigger("cellChange", [coord[0], ii])
                    }
                    cursor.removeCoordinateClass([0,
                        coord[1]
                    ], "bbActiveColumn");
                    adapter.trigger("cellChange", [0, coord[1]]);
                    break;
                case "HIGHLIGHT":
                case "EDIT":
                    numColumns = cellTable.getNumberOfVisibleColumnsForRow(coord);
                    for (ii = 0; ii < numColumns; ii++) {
                        cursor.addCoordinateClass([coord[0], ii], "bbActiveRow");
                        if (ii !== coord[1]) adapter.trigger("cellChange", [coord[0], ii])
                    }
                    cursor.addCoordinateClass([0, rawCoord[1]], "bbActiveColumn");
                    adapter.trigger("cellChange", [0, rawCoord[1]]);
                    break
                }
            };
        adapter.newBox = newBoxAdapter.addEmptyBoxRow;
        adapter.getCheckedBoxes = function (exclude) {
            return cellTable.getCheckedBoxes()
        };
        adapter.getCheckedGroups = function () {
            var checked = [];
            for (var i = 0; i < cellTable.length; i++)
                if (cellTable[i][1].isChecked())
                    if (cellTable[i].isGroup && cellTable[i].isGroup()) checked.push(cellTable[i].getGroupModel());
            return checked
        };
        adapter.getCursorPosition = function () {
            return cursor.getPosition()
        };
        adapter.updateCursorPosition = function (dir, axis) {
            cursor.updatePosition(dir, axis)
        };
        adapter.updateCursorToEnd = function (axis) {
            cursor.moveToEnd(axis)
        };
        adapter.updateCursorToBeginning = function (axis) {
            cursor.moveToBeginning(axis)
        };
        adapter.setCursorPosition = function (coord) {
            cursor.setPosition(coord)
        };
        adapter.unfocusCursor = function () {
            cursor.unfocus();
            adapter.trigger("cursorChange", false, false)
        };
        adapter.cursorSelect = function (coord, shiftKey) {
            var prevPosition = null;
            if (shiftKey && coord) {
                prevPosition = cursor.getPosition();
                if (cellTable.getActionType(prevPosition) !== "CHECKBOX") prevPosition = null
            }
            if (!coord) coord = cursor.getPosition();
            if (prevPosition)
                if (cellTable.getActionType(coord) === "CHECKBOX") cellTable.checkMultipleBoxes(prevPosition, coord);
            if (cellTable.getState(coord) !== "EDIT") {
                cursor.setPosition(coord);
                cursor.select()
            }
        };
        adapter.jumpToGroup = function (group) {
            var index = cellTable.getGroupRowIndex(group);
            if (index > -1) setTimeout(function () {
                cursor.toTop = true;
                cursor.setPosition([index, 0])
            }, 1)
        };
        adapter.registerScrollPosition = function (position) {
            _scrollPositions[pipeline.key()] = position
        };
        var adapterChangesPending = false;
        var boxCollection = BB.Data.getPipelineBoxes(key);
        boxCollection.bind("modelChange", function (box, property, previousValue, fieldKey) {
            if (boxCollection.isCurrentlyUpdatingFromRefresh()) {
                adapterChangesPending =
                    true;
                return
            }
            if (box && box.key && box.key()) {
                if (!savedViewsController) {
                    adapter.trigger("tableChange");
                    return
                }
                var columnKey = "property|stageKey";
                var groupBySettings = savedViewsController.getGroupBySettings();
                if (groupBySettings && groupBySettings.data) columnKey = groupBySettings.data;
                var columnProperty = null;
                var columnFieldKey = null;
                var shouldRenderTable = false;
                if (property === "fieldKey") {
                    if (columnKey.indexOf("field|") > -1) {
                        columnFieldKey = columnKey.split("|")[1];
                        var currentValue = box.getFieldValue(columnFieldKey);
                        if (currentValue !==
                            previousValue) shouldRenderTable = true
                    }
                } else if (columnKey.indexOf("property|") > -1) {
                    columnProperty = pipeline.getSystemColumn(columnKey.split("|")[1]).property;
                    if (columnProperty === property)
                        if (box.get(columnProperty) !== previousValue) shouldRenderTable = true
                }
                if (shouldRenderTable) {
                    cursor.noScroll = true;
                    delayedRender()
                } else {
                    var boxRowIndex = cellTable.getBoxRowIndex(box, columnProperty, columnFieldKey);
                    if (boxRowIndex > -1) adapter.trigger("rowChange", boxRowIndex);
                    cellTable.updateGroupColumn(box)
                }
            }
        }, uniq);
        boxCollection.bind("collectionChange",
            function () {
                if (boxCollection.isBeingRefreshed()) {
                    adapterChangesPending = true;
                    return
                }
                delayedRender()
            }, uniq);
        BB.Data.getPipelineBoxes(key).bind("refreshed", function () {
            if (adapterChangesPending) delayedRender();
            adapterChangesPending = false
        }, uniq);
        if (!dontRender) {
            pipeline.bind("stageChange", null, function () {
                adapter.trigger("redraw")
            }, uniq);
            pipeline.bind("set", "stageOrder", function () {
                delayedRender()
            }, uniq);
            pipeline.bind("set", "fields", function () {
                delayedRender()
            }, uniq);
            pipeline.bind("set", "uiSettings", function () {
                    delayedRender(true)
                },
                uniq);
            savedViewsController.bind("transformSettingsChanged", function () {
                renderData()
            });
            savedViewsController.bind("widthChange", function () {
                adapter.trigger("widthChange")
            })
        }
        adapter.initData = initData;
        adapter.render = renderData;
        adapter.fullRender = fullRender;
        adapter.transform = transform;
        adapter.dataWrapper.cursor = cursor;
        adapter.searchController = BB.UI.PipelineSearchController;
        adapter.destroy = function () {
            pipeline.unbindAll(uniq);
            BB.Data.getPipelineBoxes(pipeline.key()).unbindAll("modelChange", uniq)
        };
        return adapter
    };
    BB.UI.PipelineSpreadsheetController = PipelineSpreadsheetController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Eventer = Streak.Eventer,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var self, PipelineTableModel;
    PipelineTableModel = new Eventer;
    self = PipelineTableModel;
    _.extend(PipelineTableModel, {
        data: null,
        callbacks: null,
        numRows: null,
        numColumns: null,
        groupRows: [],
        highlightCell: null,
        editCell: null,
        checkedRows: [],
        pipeline: null,
        visibleColumns: [],
        setup: function (pipeline, data, callbacks, noReset) {
            self.pipeline =
                pipeline;
            self.data = data;
            self.callbacks = callbacks;
            if (!noReset) self.reset()
        },
        reset: function () {
            self.numRows = 1;
            self.numColumns = 2;
            self.groupRows.length = 0;
            self.highlightCell = [0, 0];
            self.editCell = null;
            self.checkedRows.length = 0;
            self.visibleColumns.length = 0;
            for (var i = 0; i < self.data.groups.length; i++) {
                self.groupRows.push(self.numRows);
                self.numRows += 1;
                var list = self.data.lists[self.data.groups[i]];
                if (list.isOpen) self.numRows += list.list.length
            }
            for (i = 0; i < self.data.columnOrder.length; i++) {
                var column = self.data.columns[self.data.columnOrder[i]];
                if (column.isVisible && !column.notPresent) {
                    self.visibleColumns.push(column);
                    self.numColumns += 1
                }
            }
        },
        getPipeline: function () {
            return self.pipeline
        },
        getTotalColumnCount: function () {
            return self.data.columnOrder.length
        },
        getVisibleColumnCount: function () {
            return self.visibleColumns.length
        },
        getRowCount: function () {
            return self.numRows
        },
        getLastRowNumber: function () {
            return self.numRows - 1
        },
        getLastColumnForCurrentRow: function (coord) {
            return self.numColumns - 1
        },
        getNumberOfVisibleColumnsForRow: function (coord) {
            return self.visibleColumns.length +
                2
        },
        getCheckedBoxes: function () {
            var boxes = [];
            for (var i = 0; i < self.checkedRows.length; i++) {
                var row = self.checkedRows[i];
                if (row > 0)
                    if (!self._isGroupRow(row)) boxes.push(self._getBox(row))
            }
            return boxes
        },
        checkMultipleBoxes: function (startCoord, endCoord) {
            var diff = endCoord[0] - startCoord[0];
            var step = 1;
            if (diff < 0) step = -1;
            var newChecked = new Array(Math.abs(diff));
            var num = 0;
            for (var i = startCoord[0] + step; step * i < step * endCoord[0]; i = i + step) {
                var tempCoord = [i, startCoord[1]];
                if (!self.isChecked(tempCoord) && !self._isGroupRow(i)) newChecked[num] =
                    i;
                num++
            }
            var unionChecked = _.union(self.checkedRows, newChecked);
            self.checkedRows.length = 0;
            for (var ii = 0; ii < unionChecked.length; ii++) self.checkedRows.push(unionChecked[ii]);
            for (var ii = 0; ii < self.checkedRows.length; ii++) self.callbacks.cellChange([self.checkedRows[ii], startCoord[1]]);
            self.notifySelectedBoxesChanged()
        },
        notifySelectedBoxesChanged: function () {
            Streak.NotificationCenter.notify({
                eventName: "pipeline.selectedBoxesChanged",
                pipelineKey: self.pipeline.key(),
                selectedBoxes: self.getCheckedBoxes()
            })
        },
        getNumberOfBoxes: function () {
            if (!self.data || !self.data.lists) return 0;
            return _(self.data.lists).values().map(function (groupObject) {
                return groupObject.list
            }).flatten().length
        },
        getRowHash: function (row) {
            if (row === 0) return "columnHeaders";
            else if (self._isGroupRow(row)) return self._getGroupID(row);
            else {
                var box = self._getBox(row);
                if (box) {
                    if (box.get("newHash")) return box.get("newHash");
                    return box.key()
                } else {
                    BB.logError("getRowHash failed");
                    return null
                }
            }
        },
        isGroup: function (coord) {
            return self._isGroupRow(coord[0])
        },
        getGroupRowIndex: function (groupID) {
            var index =
                self.data.groups.indexOf(groupID);
            if (index > -1) return self.groupRows[index];
            return index
        },
        getBoxRowIndex: function (box, property, fieldKey, inGroupID) {
            if (!self.data) return -1;
            var i, j, groupList, startIndex;
            var groupID = inGroupID;
            if (!groupID)
                if (property) groupID = box.get(property);
                else if (fieldKey) groupID = box.getFieldValue(fieldKey);
            if (groupID && self.data.lists[groupID]) {
                groupList = self.data.lists[groupID];
                if (groupList.isOpen) {
                    startIndex = self.getGroupRowIndex(groupID) + 1;
                    for (i = 0; i < groupList.list.length; i++)
                        if (groupList.list[i].key() ===
                            box.key()) return startIndex + i
                }
            } else
                for (i = 0; i < self.data.groups.length; i++) {
                    groupID = self.data.groups[i];
                    groupList = self.data.lists[groupID];
                    if (groupList.isOpen) {
                        startIndex = self.getGroupRowIndex(groupID) + 1;
                        for (j = 0; j < groupList.list.length; j++)
                            if (groupList.list[j] && groupList.list[j].key() === box.key()) return startIndex + j
                    }
                }
            return -1
        },
        getBox: function (coord) {
            return self._getBox(coord[0])
        },
        isCoordTheCurrentEditCell: function (coord) {
            return self._isCoordsEqual(self.editCell, coord)
        },
        getContainingGroupID: function (coord) {
            return self._getClosestGroupID(coord[0])
        },
        getActionType: function (coord) {
            if (coord[0] === 0) return self.column.getActionType(coord);
            else if (self._isGroupRow(coord[0])) return self.group.getActionType(coord);
            else return self.box.getActionType(coord)
        },
        getState: function (coord) {
            if (self._isCoordsEqual(self.highlightCell, coord)) return "HIGHLIGHT";
            else if (self._isCoordsEqual(self.editCell, coord)) return "EDIT";
            else return "DEFAULT"
        },
        updateState: function (coord, state) {
            switch (state) {
            case "DEFAULT":
                if (self._isCoordsEqual(self.highlightCell, coord)) self.highlightCell =
                    null;
                else if (self._isCoordsEqual(self.editCell, coord)) self.editCell = null;
                break;
            case "HIGHLIGHT":
                self.highlightCell = coord;
                if (self._isCoordsEqual(self.editCell, coord)) self.editCell = null;
                break;
            case "EDIT":
                self.highlightCell = null;
                self.editCell = coord;
                break
            }
        },
        getValue: function (coord) {
            var val;
            if (coord[0] === 0) val = self.column.getValue(coord);
            else if (self._isGroupRow(coord[0])) val = self.group.getValue(coord);
            else val = self.box.getValue(coord);
            return val
        },
        getSearchValue: function (coord) {
            var val;
            if (coord[0] === 0) val =
                self.column.getSearchValue(coord);
            else if (self._isGroupRow(coord[0])) val = self.group.getSearchValue(coord);
            else val = self.box.getSearchValue(coord);
            return val
        },
        getTextValue: function (coord) {
            var val;
            if (coord[0] === 0) val = self.column.getTextValue(coord);
            else if (self._isGroupRow(coord[0])) val = self.group.getTextValue(coord);
            else val = self.box.getTextValue(coord);
            return val
        },
        getData: function (coord) {
            if (coord[0] === 0) return self.column.getData(coord);
            else if (self._isGroupRow(coord[0])) return self.group.getData(coord);
            else return self.box.getData(coord)
        },
        action: function (coord) {
            if (coord[0] === 0) return self.column.action(coord);
            else if (self._isGroupRow(coord[0])) return self.group.action(coord);
            else return self.box.action(coord)
        },
        shouldNotScrollX: function (coord) {
            return self._isGroupRow(coord[0]) && coord[1] === 2
        },
        isChecked: function (coord) {
            return self.checkedRows.indexOf(coord[0]) > -1
        },
        getGroupColumnData: function (coord) {
            return {
                group: self._getGroup(coord[0]),
                column: self.visibleColumns[coord[1] - 2]
            }
        },
        getColumnData: function (column) {
            return self._getColumn(column -
                2)
        },
        isColumnRenameable: function (column) {
            return self._getColumn(column - 2).isRenameable
        },
        isColumnVisible: function (column) {
            return self._getColumn(column - 2).isVisible
        },
        isColumnNotPresent: function (column) {
            return self._getColumn(column - 2).notPresent
        },
        isColumnNew: function (column) {
            return self._getColumn(column - 2).highlight
        },
        getColumnWidth: function (column) {
            return self._getColumn(column - 2).width || 150
        },
        setColumnWidth: function (column, width) {
            self._getColumn(column - 2).setWidth(width);
            self.callbacks.widthChange(column)
        },
        saveColumnWidth: function (column) {
            self._getColumn(column - 2).saveWidth()
        },
        columnReorder: function (existingVisibleIndex, newVisibleIndex, isAfter) {
            self.visibleColumns[existingVisibleIndex].setNewIndex(newVisibleIndex, isAfter)
        },
        isGroupColumnEditable: function (coord) {
            if (coord[1] < 2) return false;
            return self.visibleColumns[coord[1] - 2].isNameColumn()
        },
        isGroupColumnCalculable: function (coord) {
            if (coord[1] < 2) return false;
            return self.visibleColumns[coord[1] - 2].isCalculationColumn()
        },
        updateGroupColumn: function (box) {
            var boxRowIndex =
                self.getBoxRowIndex(box);
            if (boxRowIndex > -1) {
                var groupID = self._getClosestGroupID(boxRowIndex);
                self.callbacks.rowChange(self.getGroupRowIndex(groupID))
            }
        },
        column: {
            getActionType: function (coord) {
                if (coord[1] === 0) return "INSTANT";
                else if (coord[1] === 1) return "CHECKBOX";
                else if (self.visibleColumns[coord[1] - 2].isRenameable) return "EDIT";
                return "NONE"
            },
            getValue: function (coord) {
                if (coord[1] === 0) return '<div class="bbHand Wp ' + (!self._isAllGroupsClosed() ? "Wq" : "Wo") + '"></div>';
                if (coord[1] === 1) return "";
                var column = self.visibleColumns[coord[1] -
                    2];
                if (!column || !column.getName) {
                    self.callbacks.tableChange();
                    return ""
                }
                return column.getName()
            },
            getSearchValue: function (coord) {
                if (coord[1] < 2) return "";
                var column = self.visibleColumns[coord[1] - 2];
                return column.getName()
            },
            getTextValue: function (coord) {
                return self.visibleColumns[coord[1] - 2].getName()
            },
            getData: function (coord) {
                var column = self.visibleColumns[coord[1] - 2];
                return {
                    model: column.getField(),
                    type: "TEXT",
                    property: "name"
                }
            },
            action: function (coord) {
                if (coord[1] === 0) {
                    var allClosed = self._isAllGroupsClosed();
                    var lastID = null;
                    for (var groupID in self.data.lists) {
                        lastID = groupID;
                        self.data.lists[groupID].toggleOpen(allClosed, true)
                    }
                    self.data.lists[lastID].toggleOpen(allClosed);
                    self.callbacks.tableChange();
                    return
                }
                if (coord[1] === 1) {
                    var isChecked = !self.isChecked(coord);
                    var startCheckboxIndex = 1;
                    var endCheckboxIndex = self.getLastRowNumber() + 1;
                    self.checkedRows.length = 0;
                    if (isChecked)
                        for (var i = 0; i < endCheckboxIndex; i++) self.checkedRows[i] = i;
                    self.callbacks.tableChange(true);
                    self.notifySelectedBoxesChanged();
                    return
                }
                var column =
                    self._getColumn(coord[1] - 2);
                if (!column.isVisible) {
                    column.show();
                    self.callbacks.tableChange()
                }
            }
        },
        group: {
            getActionType: function (coord) {
                if (coord[1] === 0) return "INSTANT";
                else if (coord[1] === 1) return "CHECKBOX";
                else {
                    var groupID = self._getGroupID(coord[0]);
                    if (self.data.groupMeta.canEdit && self.isGroupColumnEditable(coord)) return "EDIT";
                    else return "NONE"
                }
            },
            getValue: function (coord) {
                var groupID = self._getGroupID(coord[0]);
                if (_.isNotReal(self.data.lists[groupID])) return "";
                if (coord[1] === 0) return '<span class="pre-child" style="background-color:' +
                    self.data.lists[groupID].color.backgroundColor + ';">&nbsp;</span><div class="bbHand Wp ' + (self.data.lists[groupID].isOpen ? "Wq" : "Wo") + '"></div>';
                else if (coord[1] > 1) {
                    var column = self.visibleColumns[coord[1] - 2];
                    if (column.isNameColumn()) return self.data.lists[groupID].displayName();
                    else return self.data.lists[groupID].getCalculationResult(column.columnKey)
                }
            },
            getSearchValue: function (coord) {
                var groupID = self._getGroupID(coord[0]);
                if (coord[1] > 1) {
                    var column = self.visibleColumns[coord[1] - 2];
                    if (column.isNameColumn()) return self.data.lists[groupID].displayName();
                    else return self.data.lists[groupID].getCalculationResult(column.columnKey)
                } else return ""
            },
            getTextValue: function (coord) {
                return self.group.getSearchValue(coord)
            },
            getData: function (coord) {
                return {
                    model: self.data.lists[self._getGroupID(coord[0])].groupModel,
                    type: "TEXT",
                    property: "name"
                }
            },
            action: function (coord) {
                var groupID = self._getGroupID(coord[0]);
                var i;
                if (coord[1] === 0) {
                    self.data.lists[groupID].toggleOpen();
                    self.callbacks.tableChange()
                } else if (coord[1] === 1) {
                    var isChecked = !self.isChecked(coord);
                    if (self.data.lists[groupID].isOpen) {
                        var groupRowIndex =
                            self.groupRows.indexOf(coord[0]);
                        var startCheckboxIndex = coord[0] + 1;
                        var endCheckboxIndex = -1;
                        if (groupRowIndex === self.groupRows.length - 1) endCheckboxIndex = self.groupRows[groupRowIndex] + self.data.lists[groupID].list.length + 1;
                        else endCheckboxIndex = self.groupRows[groupRowIndex + 1];
                        var lengthOfCheckedGroup = endCheckboxIndex - startCheckboxIndex;
                        var newChecked = new Array(lengthOfCheckedGroup + 1);
                        newChecked[0] = coord[0];
                        for (i = 0; i < lengthOfCheckedGroup; i++) newChecked[i + 1] = startCheckboxIndex + i;
                        if (isChecked) self.checkedRows =
                            _.union(self.checkedRows, newChecked);
                        else
                            for (i = 0; i < newChecked.length; i++) self.checkedRows.removeVal(newChecked[i])
                    }
                    self.callbacks.tableChange(true);
                    self.notifySelectedBoxesChanged()
                }
            }
        },
        box: {
            getActionType: function (coord) {
                if (coord[1] === 0) return "INSTANT";
                else if (coord[1] === 1) return "CHECKBOX";
                else if (coord[1] > 1) {
                    var column = self._getVisibleColumn(coord[1] - 2);
                    if (column.isEditable) return "EDIT";
                    else return "NONE"
                }
            },
            getValue: function (coord) {
                var box = self._getBox(coord[0]);
                if (!box) return "";
                var groupID = self._getClosestGroupID(coord[0]);
                if (coord[1] === 0) return '<span class="pre-child" style="background-color:' + (box.key().indexOf("__new__") === -1 ? self.data.lists[groupID].color.backgroundColor : "#ccc") + ';">&nbsp;</span>' + '<span class="link" role="link">&nbsp;</span>';
                else if (coord[1] === 1);
                else {
                    var columnIndex = coord[1] - 2;
                    var column = self._getVisibleColumn(columnIndex);
                    if (!column) {
                        self.callbacks.tableChange();
                        return ""
                    }
                    if (column.fieldKey) return self._getBoxFieldString(box, column.fieldKey);
                    else if (column.property) return self._getBoxPropertyString(box,
                        column.property)
                }
            },
            getSearchValue: function (coord) {
                var box = self._getBox(coord[0]);
                if (!box) return "";
                if (coord[1] > 1) {
                    var columnIndex = coord[1] - 2;
                    var column = self._getVisibleColumn(columnIndex);
                    if (column.fieldKey) return self._getBoxFieldString(box, column.fieldKey);
                    else if (column.property) return self._getBoxPropertyTextValue(box, column.property)
                }
                return ""
            },
            getTextValue: function (coord) {
                var box = self._getBox(coord[0]);
                if (!box) return "";
                if (coord[1] > 1) {
                    var columnIndex = coord[1] - 2;
                    var column = self.visibleColumns[columnIndex];
                    if (column.fieldKey) return self._getBoxFieldTextValue(box, column.fieldKey);
                    else if (column.property) return self._getBoxPropertyTextValue(box, column.property)
                }
                return ""
            },
            getData: function (coord) {
                var box = self._getBox(coord[0]);
                var column = self._getVisibleColumn(coord[1] - 2);
                if (!column) {
                    self.callbacks.tableChange();
                    return null
                }
                var data = {};
                if (column.fieldKey) {
                    data.model = box.getField(column.fieldKey);
                    data.property = "value";
                    data.type = self.pipeline.getField(column.fieldKey).get("type");
                    if (data.type === "TEXT_INPUT") data.existingList =
                        BB.UI.getFieldValues(self.pipeline, column.fieldKey, box.key());
                    else if (data.type === "PERSON") data.existingList = BB.UI.getFieldValues(self.pipeline, column.fieldKey)
                } else if (column.property) {
                    data.model = box;
                    data.property = column.property;
                    data.type = Pipeline.getPropertyType(column.property);
                    if (column.property === "stageKey") {
                        data.list = self.pipeline.getStagesAsList();
                        if (self.isChecked([coord[0], 1])) data.models = self.getCheckedBoxes();
                        else data.models = [box]
                    } else if (column.property === "assignedToSharingEntries") {
                        data.type =
                            "ASSIGNED_TO";
                        data.existingList = BB.UI.getPropertyValues(self.pipeline, column.property, box.key())
                    } else if (column.property.indexOf("linkedBoxes") > -1) data.type = "LINKED_BOXES"
                } else data = null;
                return data
            },
            action: function (coord) {
                var box = self._getBox(coord[0]);
                if (coord[1] === 0) {
                    if (box.isSavedOnServer())
                        if (self.areBoxClicksEnabled) BB.UI.setURL(box.link())
                } else if (coord[1] === 1) {
                    if (self.isChecked(coord)) self.checkedRows.removeVal(coord[0]);
                    else {
                        self.checkedRows.push(coord[0]);
                        self.trigger("uncheckCheckbox")
                    }
                    self.notifySelectedBoxesChanged();
                    self.callbacks.cellChange(coord)
                }
            }
        },
        areBoxClicksEnabled: true,
        disableBoxClicks: function () {
            self.areBoxClicksEnabled = false
        },
        enableBoxClicks: function () {
            self.areBoxClicksEnabled = true
        },
        _isCoordsEqual: function (coord1, coord2) {
            return coord1 && coord2 && coord1[0] === coord2[0] && coord1[1] === coord2[1]
        },
        _isGroupRow: function (row) {
            return self.groupRows.indexOf(row) > -1
        },
        _getGroupID: function (row) {
            var index = self.groupRows.indexOf(row);
            return self.data.groups[index]
        },
        _getClosestGroupID: function (row) {
            for (var i = 0; i < self.groupRows.length; i++)
                if (row ===
                    self.groupRows[i]) return self.data.groups[i];
                else if (row < self.groupRows[i]) return self.data.groups[i - 1];
            return _.last(self.data.groups)
        },
        _getBox: function (row) {
            var groupID = self._getClosestGroupID(row);
            var startingPoint = -1;
            for (var i = 0; i < self.groupRows.length; i++)
                if (row < self.groupRows[i]) {
                    startingPoint = self.groupRows[i - 1];
                    break
                }
            if (startingPoint === -1) startingPoint = _.last(self.groupRows);
            var indexIntoList = row - startingPoint - 1;
            return self.data.lists[groupID].list[indexIntoList]
        },
        _getVisibleColumn: function (columnIndex) {
            for (var i =
                0, index = 0; i < self.data.columnOrder.length; i++)
                if (self.data.columns[self.data.columnOrder[i]].isVisible && !self.data.columns[self.data.columnOrder[i]].notPresent) {
                    if (index === columnIndex) return self.data.columns[self.data.columnOrder[i]];
                    index += 1
                }
        },
        _getBoxPropertyString: function (box, property) {
            if (property === "notes") return $.cleanText(box.get(property) || "", true).escapeHTML();
            else if (property === "stageKey") return box.getStageName();
            else return box.getProcessedValue(property)
        },
        _getBoxPropertyTextValue: function (box,
            property) {
            return box.getTextValue(property)
        },
        _getBoxFieldString: function (box, fieldKey) {
            var val = box.getFieldValue(fieldKey);
            if (!val) return "";
            var field = self.pipeline.getField(fieldKey);
            if (!field) return "";
            switch (self.pipeline.getField(fieldKey).get("type")) {
            case "TEXT_INPUT":
                return $.cleanText((val + "" || "").escapeHTML(), true);
            case "DATE":
                return Date.ccreate(val).prettyDate(true);
            case "PERSON":
                try {
                    return self._getPersonString(val)
                } catch (err) {
                    BB.logError("error parsing people json \njson:" + val, err);
                    return ""
                }
                break
            }
        },
        _getBoxFieldTextValue: function (box, fieldKey) {
            return box.getFieldTextValue(fieldKey)
        },
        _getPersonString: function (val) {
            var retVal = "";
            _.each(val, function (contact) {
                contact = BB.Contacts.updateContact(contact);
                if (!contact.displayName) contact.displayName = (contact.fullName ? contact.fullName.escapeHTML() : contact.email) || "";
                var emailString = "";
                if (contact.email) emailString = 'email="' + contact.email + '"';
                var iUrl = contact.imageUrl ? contact.imageUrl : contact.image;
                iUrl = iUrl ? iUrl.unescapeHTML() : Streak.server + Streak.combinedPath +
                    "images/unknownContact.png";
                var cEl = '<img class="people" height="23" width="23" src="' + iUrl + '" title="' + contact.displayName.escapeHTML() + '">';
                cEl += '<span class="people" ' + emailString + ">" + contact.displayName.escapeHTML() + "</span>";
                retVal += cEl
            });
            return retVal
        },
        _isAllGroupsClosed: function () {
            var allClosed = true;
            for (var groupID in self.data.lists)
                if (self.data.lists[groupID].isOpen) {
                    allClosed = false;
                    break
                }
            return allClosed
        },
        _isAllGroupsOpen: function () {
            var allOpen = true;
            for (var groupID in self.data.lists)
                if (!self.data.lists[groupID].isOpen) {
                    allOpen =
                        false;
                    break
                }
            return allOpen
        },
        _getColumn: function (columnIndex) {
            return self.data.columns[self.data.columnOrder[columnIndex]]
        },
        _getGroup: function (rowIndex) {
            return self.data.lists[self._getGroupID(rowIndex)]
        }
    });
    BB.UI.PipelineTableModel = PipelineTableModel
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var addBoxKey = "__new__";
    var self, PipelineNewBox;
    self = PipelineNewBox = {
        callbacks: null,
        cursor: null,
        pipeline: null,
        tableData: null,
        savedViewsController: null,
        data: null,
        emptyBox: null,
        emptyBoxGroupID: null,
        setup: function (pipeline, dataWrapper, cursor, callbacks, savedViewsController) {
            self.pipeline = pipeline;
            self.data = dataWrapper.transformedData;
            self.cellTable = dataWrapper.cellTable;
            self.cursor =
                cursor;
            self.callbacks = callbacks;
            self.savedViewsController = savedViewsController
        },
        addEmptyBoxRow: function () {
            var columnVisibilitySettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings.load(self.pipeline);
            var columnOrder = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.load(self.pipeline).data;
            var columnIndex = -1;
            var nameColumn = null;
            var oldMethods = {};
            for (var i = 0, visibleColumnIndex = 0; i < columnOrder.length; i++) {
                var isVisible = columnVisibilitySettings.data[columnOrder[i]];
                if (_.isNotReal(isVisible)) isVisible = true;
                if (isVisible) {
                    columnIndex = visibleColumnIndex;
                    visibleColumnIndex += 1
                }
                if (columnOrder[i] === "property|name") break
            }
            if (!isVisible) {
                columnVisibilitySettings.data["property|name"] = true;
                BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings.save(columnVisibilitySettings, self.pipeline);
                self.callbacks.tableChange();
                self.addEmptyBoxRow();
                return
            }
            var isOldEmptyBoxAbove = false;
            if (self.emptyBoxGroupID) {
                var oldEmptyBoxIndex = self.cellTable.getBoxRowIndex(self.emptyBox,
                    null, null, self.emptyBoxGroupID);
                self.data.lists[self.emptyBoxGroupID].list.removeVal(self.emptyBox)
            }
            var containingGroupID;
            var newBoxPosition = self.cursor.getPosition();
            if (newBoxPosition[0] === 0) newBoxPosition[0] = 2;
            else newBoxPosition[0] += 1;
            newBoxPosition[1] = columnIndex + 2;
            self.emptyBoxGroupID = self.cellTable.getContainingGroupID([newBoxPosition[0] - 1, 0]);
            containingGroupID = self.emptyBoxGroupID;
            if (!self.data.lists[containingGroupID].isOpen) {
                self.emptyBoxGroupID = null;
                self.data.lists[containingGroupID].toggleOpen();
                self.callbacks.tableChange();
                self.addEmptyBoxRow();
                return
            }
            var pipelineFields = self.pipeline.getFields();
            var emptyValueMap = {};
            for (i = 0; i < pipelineFields.length; i++) emptyValueMap[pipelineFields[i].key()] = "";
            var emptyBox = self.emptyBox = BB.Models.Box.create({
                name: null,
                stageKey: self.pipeline.getStages().ordered[0].key(),
                notes: null,
                pipelineKey: self.pipeline.key(),
                fields: emptyValueMap
            });
            var newHash = addBoxKey + emptyBox.guid;
            oldMethods.key = emptyBox.key;
            emptyBox.key = function () {
                return newHash
            };
            emptyBox.set("newHash",
                newHash);
            var emptyBoxValues = {};
            oldMethods.save = emptyBox.save;
            emptyBox.save = function (cb, errCb) {
                if (emptyBox.get("name")) {
                    oldMethods.save.apply(emptyBox, arguments);
                    return
                }
                emptyBoxValues.notes = emptyBox.get("notes");
                emptyBoxValues.stageKey = emptyBox.get("stageKey");
                emptyBoxValues.assignedToSharingEntries = emptyBox.get("assignedToSharingEntries") || [];
                if (cb) cb()
            };
            var groupBySettings = self.savedViewsController.getGroupBySettings();
            var property;
            var fieldKey;
            if (groupBySettings.data.indexOf("stageKey") > -1) {
                emptyBox.set("stageKey",
                    containingGroupID);
                property = "stageKey"
            } else if (groupBySettings.data.indexOf("field") > -1) {
                fieldKey = groupBySettings.data.split("|")[1];
                emptyBox.getField(fieldKey).set("value", containingGroupID)
            } else property = groupBySettings.data.split("|")[1];
            var modifiedFields = [];
            var emptyBoxFields = emptyBox.getFields();
            _.each(emptyBoxFields, function (boxField) {
                boxField._oldSave = boxField.save;
                boxField.save = function (cb) {
                    modifiedFields.push(boxField.key());
                    boxField.set("modifiedValue", boxField.get("value"));
                    if (cb) cb()
                }
            });
            emptyBox.bind("preCreate", null, function () {
                self.emptyBox = null;
                self.emptyBoxGroupID = null;
                self.callbacks.rowChange(newBoxPosition[0]);
                Gmail.showNotice(BB.Locale.getString("saving"));
                emptyBox.key = function () {
                    return emptyBox.get(emptyBox.keyName) || newHash
                };
                BB.Data.addBoxModel(emptyBox, true, true);
                emptyBox.bind("errorCreate", null, function () {
                    self.callbacks.tableChange()
                })
            });
            emptyBox.bind("create", null, function () {
                if (emptyBox.isDeleted()) return;
                if (_.isReal(fieldKey)) {
                    emptyBox.getField(fieldKey).set("value",
                        containingGroupID);
                    emptyBox.getField(fieldKey).save()
                }
                for (var mKey in oldMethods) emptyBox[mKey] = oldMethods[mKey].bind(emptyBox);
                var fields = emptyBox.getFields();
                for (var i = 0; i < fields.length; i++) {
                    fields[i].set("boxKey", emptyBox.key());
                    fields[i].save = fields[i]._oldSave
                }
                modifiedFields = _.uniq(modifiedFields);
                for (var ii = 0; ii < modifiedFields.length; ii++) {
                    var field = emptyBox.getField(modifiedFields[ii]);
                    field.set("value", field.get("modifiedValue"));
                    field.save()
                }
                for (var prop in emptyBoxValues) emptyBox.set(prop,
                    emptyBoxValues[prop]);
                emptyBox.save(function () {
                    self.callbacks.tableChange(true);
                    self.callbacks.newBoxAdded()
                })
            });
            var groupRowIndex = self.cellTable.getGroupRowIndex(containingGroupID);
            var transformedListIndex = newBoxPosition[0] - groupRowIndex - 1;
            self.data.lists[containingGroupID].list.splice(transformedListIndex, 0, emptyBox);
            self.cellTable.reset();
            self.callbacks.tableChange(true);
            self.cursor.setPosition(newBoxPosition);
            self.cursor.select()
        }
    };
    BB.UI.PipelineNewBox = PipelineNewBox
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var self, PipelineToolbar;
    self = PipelineToolbar = {
        defaults: {
            newBoxFunc: $.noop,
            deleteBoxFunc: $.noop,
            pipeline: null
        },
        create: function (options) {
            this._init();
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        },
        _init: function () {
            if (!this.templates) {
                this.templates = {};
                this.templates.pipelineToolbar = HTML.get("pipelineToolbar");
                this.templates.backButton = HTML.get("pipelineToolbarBackButton");
                this.templates.deleteBoxButton = HTML.get("deleteBoxButton");
                this.templates.addBoxButton = HTML.get("addBoxButton")
            }
        }
    };
    var trackingContext;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    PipelineToolbar.impl = function (o) {
        var options = o,
            pipeline = options.pipeline,
            dataSource = options.dataSource,
            spreadsheet = options.spreadsheet,
            feed = options.feed,
            savedViewsController = options.savedViewsController;
        options.trackingContext.widgetContext += "/pipelineToolbar";
        trackingContext =
            options.trackingContext;
        var el = $(PipelineToolbar.templates.pipelineToolbar()),
            navGroup = BB.Widgets.Button.createGroup(),
            refreshGroup = BB.Widgets.Button.createGroup(),
            addboxGroup = BB.Widgets.Button.createGroup(),
            delboxGroup = BB.Widgets.Button.createGroup(),
            sheetGroup = BB.Widgets.Button.createGroup(),
            back = BB.Widgets.Button.create({
                isToggle: false,
                name: PipelineToolbar.templates.backButton(),
                onFunc: function () {
                    track("backButtonPressed");
                    el.trigger("back");
                    history.back()
                }
            }),
            refresh = BB.Widgets.Button.create({
                isToggle: false,
                isRefresh: true,
                onFunc: function () {
                    Gmail.showNotice(BB.Locale.getString("notice_loading"));
                    track("refreshPipelineButtonPressed");
                    pipeline.refresh(function () {
                        BB.Data.getPipelineBoxes(pipeline.key()).refresh(function () {
                            dataSource.render();
                            Gmail.hideNotice()
                        })
                    })
                },
                trackingContext: _.clone(options.trackingContext)
            }),
            newBox = BB.Widgets.Button.create({
                isToggle: false,
                name: PipelineToolbar.templates.addBoxButton(),
                hasButtonToRight: true,
                onFunc: function (e) {
                    track("newBoxButtonPressed");
                    dataSource.newBox();
                    if (e) e.stopPropagation()
                },
                trackingContext: _.clone(options.trackingContext)
            }),
            deleteBox = BB.Widgets.Button.create({
                isToggle: false,
                name: PipelineToolbar.templates.deleteBoxButton(),
                hasButtonToLeft: true,
                onFunc: function () {
                    var boxes = dataSource.getCheckedBoxes();
                    track("deleteBoxesAttempted");
                    if (boxes && boxes.length > 0) {
                        track("deleteBoxesAsked", {
                            boxCount: boxes.length
                        });
                        BB.Widgets.Modal.confirmDelete(boxes.length + " " + BB.Locale.getString(boxes.length == 1 ? "box" : "boxes"), function () {
                            var deleteQueue = [];
                            Gmail.showNotice(BB.Locale.getString("deleting"));
                            if (boxes && boxes.length > 0) _.each(boxes, function (box) {
                                if (box.key()) {
                                    deleteQueue.push(_.bind(box.del, box));
                                    box.trigger("delete")
                                } else box.trigger("delete")
                            });
                            _.chainedCallbacks(deleteQueue, function () {
                                Gmail.hideNotice();
                                track("deleteBoxesConfirmed")
                            })
                        }, null, function () {
                            track("deleteBoxesCancelled")
                        })
                    } else {
                        track("deleteBoxesFailed", {
                            userFalure: true
                        });
                        Gmail.showNotice(BB.Locale.getString("one_box_selected"))
                    }
                },
                trackingContext: _.clone(options.trackingContext)
            }),
            reports = BB.Widgets.Button.create({
                isToggle: false,
                name: BB.Locale.getString("reports"),
                iconClassName: "streak__reportsIcon",
                hasButtonToRight: false,
                onFunc: function (e) {
                    track("reportsButtonPressed");
                    BB.UI.setURL(Streak.Gmail.Constants.PipelineReports + "/" + pipeline.key());
                    if (e) e.stopPropagation()
                },
                trackingContext: _.clone(options.trackingContext)
            }),
            buttonOptions = {
                pipeline: options.pipeline,
                dataSource: dataSource,
                spreadsheet: options.spreadsheet,
                pipelineToolBar: el
            }, savedViewsButton = BB.Modules.PipelineView.SavedViewsButton.create(_.extend(buttonOptions, {
                savedViewsController: savedViewsController,
                trackingContext: _.clone(options.trackingContext)
            })),
            more = BB.Modules.PipelineView.MoreButton.create(_.extend(buttonOptions, {
                trackingContext: _.clone(options.trackingContext)
            })),
            share = BB.Modules.PipelineView.ShareButton.create(_.extend(buttonOptions, {
                trackingContext: _.clone(options.trackingContext)
            })),
            showGroupbar = BB.Modules.PipelineView.ShowHideGroupbarButton.create(_.extend(buttonOptions, {
                trackingContext: _.clone(options.trackingContext),
                hasButtonToRight: true
            })),
            feedFilter = BB.Modules.PipelineView.FeedFilterButton.create(_.extend(buttonOptions, {
                trackingContext: _.clone(options.trackingContext)
            })),
            showFeed = BB.Modules.PipelineView.ShowHideFeedButton.create($.extend({
                feed: options.feed,
                css: {
                    "float": "right",
                    marginRight: "0px"
                }
            }, buttonOptions, {
                trackingContext: _.clone(options.trackingContext)
            }));
        buttonOptions.buttonGroup = [];
        buttonOptions.buttonGroup.push(showGroupbar.el);
        buttonOptions.buttonGroup.push(showFeed.el);
        buttonOptions.buttonGroup.push(feedFilter.el);
        buttonOptions.buttonGroup.push(share.el);
        buttonOptions.buttonGroup.push(more.el);
        buttonOptions.buttonGroup.push(back.el);
        var fullScreen = BB.Modules.PipelineView.FullScreenSpreadsheetButton.create(_.extend(buttonOptions, {
            trackingContext: _.clone(options.trackingContext)
        }));
        $(newBox.el).addClass("newBoxOuterButton");
        $(deleteBox.getElement()).addClass("streak__deleteBoxButton");
        navGroup.el.append(back.el);
        refreshGroup.el.append(refresh.el);
        addboxGroup.el.append(newBox.el);
        delboxGroup.el.append(deleteBox.el);
        sheetGroup.el.append(savedViewsButton.el);
        sheetGroup.el.append(reports.el);
        sheetGroup.el.append(more.el);
        el.append(navGroup.el);
        el.append(refreshGroup.el);
        el.append(addboxGroup.el);
        el.append(delboxGroup.el);
        el.append(sheetGroup.el);
        el.append(share.el);
        el.append(feedFilter.el);
        feedFilter.el.css({
            "float": "right",
            marginRight: "0px",
            marginTop: "1px"
        });
        el.append(showFeed.el);
        fullScreen.button.el.css({
            "float": "right"
        });
        el.append(fullScreen.button.el);
        showGroupbar.el.css({
            "float": "right"
        });
        el.append(showGroupbar.el);
        spreadsheet.el.bind({
            "newBox": function (e) {
                newBox.on()
            },
            "deleteBox": function (e) {
                deleteBox.on()
            }
        });
        return {
            el: el,
            destroy: function () {
                fullScreen.destroy();
                el.remove();
                more.destroy()
            }
        }
    };
    BB.Modules.PipelineView.PipelineToolbar = PipelineToolbar
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        currentVersion: 1
    };
    var SortSettings = {
        load: function (pipeline, savedViewsController) {
            var settings;
            if (savedViewsController) settings = savedViewsController.getSortSettings();
            if (!settings) settings = this.create(pipeline);
            else settings = this.validateSettings(settings, pipeline);
            return settings
        },
        create: function (pipeline) {
            return {
                data: [],
                version: CONSTANTS.currentVersion
            }
        },
        validateSettings: function (settings,
            pipeline, noSave) {
            var changed = false;
            if (settings.version !== CONSTANTS.currentVersion) settings = this.convertSettings(settings, pipeline);
            var columnMap = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
            var foundColumns = [];
            for (var ii = 0; ii < settings.data.length; ii++) {
                var columnKey = settings.data[ii].columnKey;
                var type = columnKey.split("|");
                if (type.length !== 2) continue;
                if (type[0] === "property" || columnMap[columnKey]) foundColumns.push(settings.data[ii]);
                else changed =
                    true
            }
            settings.data = foundColumns;
            return settings
        },
        convertSettings: function (oldSettings, pipeline) {
            return oldSettings
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    BB.Modules.PipelineView.ViewSettings.SortSettings = SortSettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        currentVersion: 3
    };
    var FilterSettings = {
        load: function (pipeline, savedViewsController) {
            var settings;
            if (savedViewsController) settings = savedViewsController.getFilterSettings();
            if (!settings) settings = this.create(pipeline);
            else settings = this.validateSettings(settings, pipeline);
            return settings
        },
        create: function (pipeline) {
            return {
                filters: ["AND", ["AND"]],
                version: CONSTANTS.currentVersion
            }
        },
        validateSettings: function (settings, pipeline, noSave) {
            var changed = false;
            if (settings.version !== CONSTANTS.currentVersion) {
                settings = this.convertSettings(settings, pipeline);
                changed = true
            }
            var fieldKeys = _.map(pipeline.getFields(), function (field) {
                return field.key()
            });
            if (_.isReal(settings.property) && settings.property === "stageKey") {
                var stage = pipeline.getStage(settings.value);
                if (!_.isReal(stage)) changed = true
            } else
                for (var ii = 1; ii < settings.filters.length; ii++) {
                    var filterGroup = settings.filters[ii];
                    for (var jj = 1; jj <
                        filterGroup.length; jj++) {
                        var filter = filterGroup[jj];
                        if (_.isReal(filter.fieldKey) && fieldKeys.indexOf(filter.fieldKey) === -1) {
                            changed = true;
                            break
                        }
                    }
                    if (changed) break
                }
            if (changed) {
                var newSettings = FilterSettings.create(pipeline);
                settings.filters = newSettings.filters
            }
            return settings
        },
        convertSettings: function (oldSettings, pipeline) {
            if (oldSettings.version === 3) return oldSettings;
            else if (oldSettings.version === 2 && _.isArray(oldSettings.filters) && oldSettings.filters.length > 0) {
                var newSettings = FilterSettings.create(pipeline);
                newSettings.filters.remove(1);
                for (var ii = 0; ii < oldSettings.filters.length; ii++) {
                    var newGroup = ["AND"];
                    newGroup.push({
                        property: oldSettings.filters[ii].property,
                        fieldKey: oldSettings.filters[ii].fieldKey,
                        comparisonOperation: oldSettings.filters[ii].op,
                        value: null,
                        specificValue: oldSettings.filters[ii].value
                    });
                    newSettings.filters.push(newGroup)
                }
                return newSettings
            } else return FilterSettings.create(pipeline)
        }
    };
    BB.Modules.PipelineView.ViewSettings.FilterSettings = FilterSettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var ColumnSettingsUtilities = {
        getColumns: function (pipeline) {
            var ii = 0,
                key;
            var columns = [];
            var systemColumns = pipeline.getActiveSystemColumns();
            var fields = pipeline.getFields();
            for (ii = 0; ii < systemColumns.length; ii++) columns.push({
                columnKey: "property|" + (systemColumns[ii].uniqueKey || systemColumns[ii].property),
                systemColumn: systemColumns[ii],
                type: systemColumns[ii].filterAndGroupType,
                property: systemColumns[ii].property
            });
            for (ii = 0; ii < fields.length; ii++) {
                key = "field|" + fields[ii].key();
                columns.push({
                    columnKey: key,
                    field: fields[ii],
                    type: fields[ii].get("type")
                })
            }
            return columns
        },
        getColumnMap: function (pipeline) {
            var columns = this.getColumns(pipeline);
            var columnMap = {};
            for (var ii = 0; ii < columns.length; ii++) columnMap[columns[ii].columnKey] = columns[ii];
            return columnMap
        },
        isColumnKeyValid: function (columnKey, pipeline) {
            var columns = this.getColumns(pipeline);
            for (var ii = 0; ii < columns.length; ii++)
                if (columns[ii].columnKey ===
                    columnKey) return true;
            return false
        },
        getColumn: function (columnKey, pipeline) {
            var columns = this.getColumns(pipeline);
            for (var ii = 0; ii < columns.length; ii++)
                if (columns[ii].columnKey === columnKey) return columns[ii]
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.ColumnSettings) BB.Modules.PipelineView.ViewSettings.ColumnSettings = {};
    BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities = ColumnSettingsUtilities
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ViewSettingsUtility = BB.Modules.PipelineView.ViewSettingsUtility;
    var CONSTANTS = {
        CURRENT_VERSION: 1
    };
    var ColumnOrderSettings = {
        load: function (pipeline) {
            var settings = ViewSettingsUtility.getSharedSetting("columnOrder", pipeline);
            if (!settings) settings = this.create(pipeline);
            settings = this.validate(settings, pipeline);
            return settings
        },
        save: function (settings, pipeline,
            dontSave) {
            ViewSettingsUtility.setSharedSetting("columnOrder", settings, pipeline, dontSave)
        },
        create: function (pipeline) {
            var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumns(pipeline);
            var settings = {
                data: [],
                version: 1
            };
            for (var ii = 0; ii < columns.length; ii++) settings.data.push(columns[ii].columnKey);
            return settings
        },
        validate: function (settings, pipeline) {
            if (settings.version !== CONSTANTS.CURRENT_VERSION) settings = this.convert(settings);
            var allColumns = this.create(pipeline).data;
            var columnMap = {};
            var columnsToRemove = [];
            for (var ii = 0; ii < allColumns.length; ii++) columnMap[allColumns[ii]] = true;
            for (var ii = 0; ii < settings.data.length; ii++)
                if (columnMap[settings.data[ii]]) delete columnMap[settings.data[ii]];
                else columnsToRemove.push(settings.data[ii]);
            for (var ii = 0; ii < columnsToRemove.length; ii++) settings.data.removeVal(columnsToRemove[ii]);
            for (var columnKey in columnMap) settings.data.push(columnKey);
            return settings
        },
        convert: function (oldSettings) {
            return oldSettings
        },
        addNewColumn: function (settings,
            pipeline, columnKey, afterColumnKey) {
            var currIndex = settings.data.indexOf(afterColumnKey);
            settings.data.splice(currIndex + 1, 0, columnKey);
            this.save(settings, pipeline);
            return currIndex + 1
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.ColumnSettings) BB.Modules.PipelineView.ViewSettings.ColumnSettings = {};
    BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings = ColumnOrderSettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ViewSettingsUtility = BB.Modules.PipelineView.ViewSettingsUtility;
    var CONSTANTS = {
        CURRENT_VERSION: 1
    };
    var ColumnWidthSettings = {
        load: function (pipeline) {
            var settings = ViewSettingsUtility.getSharedSetting("columnWidth", pipeline);
            if (!settings) settings = this.create(pipeline);
            else if (settings.version !== CONSTANTS.CURRENT_VERSION) settings = this.convert(settings);
            return settings
        },
        save: function (settings, pipeline, dontSave) {
            ViewSettingsUtility.setSharedSetting("columnWidth", settings, pipeline, dontSave)
        },
        create: function (pipeline) {
            var settings = {
                data: {},
                version: 1
            };
            return settings
        },
        convert: function (oldSettings) {
            return oldSettings
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.ColumnSettings) BB.Modules.PipelineView.ViewSettings.ColumnSettings = {};
    BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnWidthSettings =
        ColumnWidthSettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ViewSettingsUtility = BB.Modules.PipelineView.ViewSettingsUtility;
    var CONSTANTS = {
        CURRENT_VERSION: 1
    };
    var ColumnVisibilitySettings = {
        load: function (pipeline) {
            var settings = ViewSettingsUtility.getPrivateSetting("columnVisibility", pipeline);
            if (!settings) settings = this.create(pipeline);
            else if (settings.version !== CONSTANTS.CURRENT_VERSION) settings = this.convert(settings);
            return settings
        },
        save: function (settings, pipeline, dontSave) {
            ViewSettingsUtility.setPrivateSetting("columnVisibility", settings, pipeline, dontSave)
        },
        create: function (pipeline) {
            var settings = {
                data: {},
                version: 1
            };
            return settings
        },
        convert: function (oldSettings) {
            return oldSettings
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.ColumnSettings) BB.Modules.PipelineView.ViewSettings.ColumnSettings = {};
    BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings =
        ColumnVisibilitySettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        currentVersion: 1
    };
    var GroupBySettings = {
        load: function (pipeline, savedViewsController) {
            var settings;
            if (savedViewsController) settings = savedViewsController.getGroupBySettings();
            if (!settings) settings = this.create(pipeline);
            else settings = this.validateSettings(settings, pipeline);
            return settings
        },
        create: function (pipeline) {
            return {
                data: "property|stageKey",
                version: CONSTANTS.currentVersion
            }
        },
        validateSettings: function (settings, pipeline, noSave) {
            if (settings.version !== CONSTANTS.currentVersion) settings = this.convertSettings(settings, pipeline);
            if (!BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.isColumnKeyValid(settings.data, pipeline)) settings = this.create(pipeline);
            return settings
        },
        convertSettings: function (oldSettings, pipeline) {
            return oldSettings
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.GroupSettings) BB.Modules.PipelineView.ViewSettings.GroupSettings = {};
    BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings = GroupBySettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ViewSettingsUtility = BB.Modules.PipelineView.ViewSettingsUtility;
    var CONSTANTS = {
        CURRENT_VERSION: 1
    };
    var GroupCalculationSettings = {
        load: function (pipeline) {
            var settings = ViewSettingsUtility.getSharedSetting("groupCalculations", pipeline);
            if (!settings) settings = this.create(pipeline);
            settings = this.validate(settings);
            return settings
        },
        save: function (settings, pipeline,
            dontSave) {
            ViewSettingsUtility.setSharedSetting("groupCalculations", settings, pipeline, dontSave)
        },
        create: function (pipeline) {
            var settings = {
                data: {
                    stageKey: {}
                },
                version: 1
            };
            return settings
        },
        validate: function (settings, pipeline) {
            if (settings.version !== CONSTANTS.CURRENT_VERSION) settings = this.convert(settings);
            return settings
        },
        convert: function (oldSettings) {
            return oldSettings
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.GroupSettings) BB.Modules.PipelineView.ViewSettings.GroupSettings = {};
    BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupCalculationSettings = GroupCalculationSettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ViewSettingsUtility = BB.Modules.PipelineView.ViewSettingsUtility;
    var CONSTANTS = {
        CURRENT_VERSION: 1
    };
    var GroupColorSettings = {
        load: function (pipeline) {
            var settings = ViewSettingsUtility.getSharedSetting("groupColors", pipeline);
            if (!settings) settings = this.create(pipeline);
            settings = this.validate(settings);
            return settings
        },
        save: function (settings, pipeline, dontSave) {
            ViewSettingsUtility.setSharedSetting("groupColors",
                settings, pipeline, dontSave)
        },
        create: function (pipeline) {
            var settings = {
                data: {},
                version: 1
            };
            return settings
        },
        validate: function (settings, pipeline) {
            if (settings.version !== CONSTANTS.CURRENT_VERSION) settings = this.convert(settings);
            return settings
        },
        convert: function (oldSettings) {
            return oldSettings
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.GroupSettings) BB.Modules.PipelineView.ViewSettings.GroupSettings = {};
    BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupColorSettings =
        GroupColorSettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ViewSettingsUtility = BB.Modules.PipelineView.ViewSettingsUtility;
    var CONSTANTS = {
        CURRENT_VERSION: 1
    };
    var GroupOpenCloseSettings = {
        load: function (pipeline) {
            var settings = ViewSettingsUtility.getPrivateSetting("groupOpenClose", pipeline);
            if (!settings) settings = this.create(pipeline);
            settings = this.validate(settings);
            return settings
        },
        save: function (settings, pipeline, dontSave) {
            ViewSettingsUtility.setPrivateSetting("groupOpenClose",
                settings, pipeline, dontSave)
        },
        create: function (pipeline) {
            var settings = {
                data: {},
                version: 1
            };
            return settings
        },
        validate: function (settings, pipeline) {
            if (settings.version !== CONSTANTS.CURRENT_VERSION) settings = this.convert(settings);
            return settings
        },
        convert: function (oldSettings) {
            return oldSettings
        }
    };
    if (!BB.Modules.PipelineView.ViewSettings) BB.Modules.PipelineView.ViewSettings = {};
    if (!BB.Modules.PipelineView.ViewSettings.GroupSettings) BB.Modules.PipelineView.ViewSettings.GroupSettings = {};
    BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupOpenCloseSettings =
        GroupOpenCloseSettings
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var FilterTransform = function (pipeline, transformedData, savedViewsController, inSettings) {
        var settings = inSettings || BB.Modules.PipelineView.ViewSettings.FilterSettings.load(pipeline, savedViewsController);
        _.each(transformedData.groups, function (group) {
            transformedData.lists[group].list = _.filter(transformedData.lists[group].list, function (box) {
                return FilterFunctions.checkBoxAgainstFilters(box, settings.filters)
            })
        })
    };
    var FilterFunctions = {
        checkBoxValueAgainstTextFilter: function (boxValue, filter) {
            var boxCompareValue = boxValue;
            var filterCompareValue = filter.specificValue;
            if (_.isNumeric(boxValue) && _.isNumeric(filterCompareValue) && filter.comparisonOperation !== "contains" && filter.comparisonOperation !== "notContains") {
                boxCompareValue = parseFloat(boxValue);
                filterCompareValue = parseFloat(filterCompareValue)
            } else {
                boxCompareValue = (boxCompareValue + "").toLowerCase();
                filterCompareValue = (filterCompareValue + "").toLowerCase()
            }
            switch (filter.comparisonOperation) {
            case "gt":
                return boxCompareValue >
                    filterCompareValue;
                break;
            case "lt":
                return boxCompareValue < filterCompareValue;
                break;
            case "eq":
                return boxCompareValue === filterCompareValue;
                break;
            case "ne":
                return boxCompareValue !== filterCompareValue;
                break;
            case "contains":
                return boxCompareValue.indexOf(filterCompareValue) > -1;
                break;
            case "notContains":
                return boxCompareValue.indexOf(filterCompareValue) === -1;
                break
            }
        },
        checkBoxValueAgainstDateFilter: function (boxValue, filter) {
            var boxCompareValue = Date.ccreate(boxValue);
            var boxCompareValueByDate = boxCompareValue.resetTime();
            var filterCompareValue = filter.specificValue;
            var lookDirectionModifier = 0;
            var timeUnit = null;
            if (_.isReal(filter.value) && _.isNotReal(filter.specificValue)) {
                filterCompareValue = filter.value;
                var filterParts = filterCompareValue.split(" ");
                if (filterParts.length === 1) {
                    filterCompareValue = Date.ccreate(filterCompareValue);
                    if (!_.isNumeric(filter.value)) filterCompareValue.resetTime()
                } else if (filterParts.length === 2) {
                    var direction = filterParts[0];
                    timeUnit = filterParts[1];
                    if (direction === "last") lookDirectionModifier = -1;
                    else if (direction === "next") lookDirectionModifier = 1;
                    filterCompareValue = Date.create();
                    switch (timeUnit) {
                    case "week":
                        filterCompareValue.setWeekday(0);
                        filterCompareValue.addWeeks(lookDirectionModifier);
                        break;
                    case "month":
                        filterCompareValue.setDate(1);
                        filterCompareValue.addMonths(lookDirectionModifier);
                        break;
                    case "year":
                        filterCompareValue.setMonth(0);
                        filterCompareValue.setDate(1);
                        filterCompareValue.addYears(lookDirectionModifier);
                        break
                    }
                    filterCompareValue.resetTime()
                } else if (filterParts.length === 3) {
                    var numberOfDaysToLook =
                        filterParts[1];
                    filterCompareValue = Date.create();
                    filterCompareValue.resetTime();
                    lookDirectionModifier = -1;
                    if (filterParts[0] === "next") lookDirectionModifier = 1;
                    filterCompareValue.addDays(lookDirectionModifier * numberOfDaysToLook)
                }
            } else filterCompareValue = Date.ccreate(filterCompareValue);
            switch (filter.comparisonOperation) {
            case "before":
                return boxCompareValue.isBefore(filterCompareValue);
                break;
            case "after":
                return boxCompareValue.isAfter(filterCompareValue);
                break;
            case "on":
                if (_.isReal(timeUnit)) {
                    var endBound =
                        filterCompareValue.clone();
                    switch (timeUnit) {
                    case "day":
                        endBound.addDays(1);
                        break;
                    case "week":
                        endBound.addWeeks(1);
                        break;
                    case "month":
                        endBound.addMonths(1);
                        break;
                    case "year":
                        endBound.addYears(1);
                        break
                    }
                    return boxCompareValue.isBetweenBeginningInclusive(filterCompareValue, endBound)
                }
                return boxCompareValue.is(filterCompareValue);
                break
            }
        },
        checkBoxValueAgainstPeopleFilter: function (boxValue, filter) {
            var boxCompareValue = boxValue;
            var filterCompareValue = filter.value || filter.specificValue;
            if (_.isString(boxCompareValue)) boxCompareValue =
                JSON.parse(boxCompareValue);
            if (!_.isArray(boxCompareValue)) return true;
            if (filterCompareValue === "me") filterCompareValue = {
                fullName: (BB.getUser().get("googleProfileFullName") || "").toLowerCase(),
                email: BB.getUser().get("email").toLowerCase()
            };
            else if (filterCompareValue === "__specific") filterCompareValue = filter.specificValue;
            var checkIfAnyPeopleMatch = function () {
                return _.any(boxCompareValue, function (person) {
                    var check = false;
                    if (!_.isReal(filterCompareValue)) return true;
                    if (_.isString(person.fullName) && _.isString(filterCompareValue.fullName)) check =
                        person.fullName.toLowerCase() === filterCompareValue.fullName.toLowerCase();
                    if (_.isString(person.email) && _.isString(filterCompareValue.email)) check = check || person.email.toLowerCase() === filterCompareValue.email.toLowerCase();
                    return check
                })
            };
            switch (filter.comparisonOperation) {
            case "includes":
                return checkIfAnyPeopleMatch();
                break;
            case "doesNotInclude":
                return !checkIfAnyPeopleMatch();
                break;
            case "isOnly":
                if (boxCompareValue.length > 1) return false;
                return checkIfAnyPeopleMatch();
                break;
            case "contains":
                return _.any(boxCompareValue,
                    function (person) {
                        var check = false;
                        if (_.isString(person.fullName) && person.fullName.length > 0) check = person.fullName.toLowerCase().indexOf(filterCompareValue.toLowerCase()) > -1;
                        if (_.isString(person.email) && person.email.length > 0) check = check || person.email.toLowerCase().indexOf(filterCompareValue.toLowerCase()) > -1;
                        return check
                    });
                break;
            case "notContains":
                return !_.any(boxCompareValue, function (person) {
                    var check = false;
                    if (_.isString(person.fullName) && person.fullName.length > 0) check = person.fullName.toLowerCase().indexOf(filterCompareValue.toLowerCase()) > -1;
                    if (_.isString(person.email) && person.email.length > 0) check = check || person.email.toLowerCase().indexOf(filterCompareValue.toLowerCase()) > -1;
                    return check
                });
                break
            }
        },
        checkBoxValueAgainstStageFilter: function (box, filter) {
            var stages = box.getPipeline().getStages().ordered;
            var boxValue = box.getStage();
            var boxStageIndex = boxValue.get("stageIndex");
            var filterCompareValue;
            if (_.isReal(filter.value)) filterCompareValue = filter.value.toLowerCase();
            else if (_.isReal(filter.specificValue)) filterCompareValue = filter.specificValue.toLowerCase();
            var filterCompareIndex = box.getPipeline().getStages().keyed[filterCompareValue].get("stageIndex");
            switch (filter.comparisonOperation) {
            case "gt":
                return boxStageIndex > filterCompareIndex;
                break;
            case "lt":
                return boxStageIndex < filterCompareIndex;
                break;
            case "eq":
                return boxValue.key() === filterCompareValue;
                break;
            case "ne":
                return boxValue.key() !== filterCompareValue;
                break;
            case "contains":
                return boxValue.displayName().toLowerCase().indexOf(filterCompareValue) > -1;
                break;
            case "notContains":
                return boxValue.displayName().toLowerCase().indexOf(filterCompareValue) === -1;
                break
            }
        },
        checkBoxAgainstFilter: function (box, filter) {
            var boxValue;
            var type;
            if (_.isReal(filter.property)) {
                boxValue = box.getFilterValue(filter.property);
                type = BB.Models.Pipeline.getPropertyFilterAndGroupType(filter.property)
            } else if (_.isReal(filter.fieldKey)) {
                boxValue = box.getFieldValue(filter.fieldKey);
                if (_.isReal(boxValue)) type = box.getPipeline().getField(filter.fieldKey).get("type")
            } else return true; if (filter.comparisonOperation === "isSet") {
                if (_.isReal(boxValue))
                    if (_.isString(boxValue) || _.isArray(boxValue)) {
                        if (boxValue.length >
                            0) return true
                    } else return true;
                return false
            } else if (filter.comparisonOperation === "notSet") {
                if (_.isReal(boxValue))
                    if (_.isString(boxValue) || _.isArray(boxValue)) {
                        if (boxValue.length > 0) return false
                    } else return false;
                return true
            } else if ((_.isNotReal(filter.value) || filter.value.length === 0) && (_.isNotReal(filter.specificValue) || filter.specificValue.length === 0)) return true;
            if (_.isNotReal(boxValue) || boxValue.length === 0) return false;
            if (_.isReal(filter.property) && filter.property === "stageKey") return this.checkBoxValueAgainstStageFilter(box,
                filter);
            switch (type) {
            case "TEXT":
            case "TEXT_INPUT":
            case "NUMBER":
                return this.checkBoxValueAgainstTextFilter(boxValue, filter);
                break;
            case "DATE":
                return this.checkBoxValueAgainstDateFilter(boxValue, filter);
                break;
            case "PERSON":
                return this.checkBoxValueAgainstPeopleFilter(boxValue, filter);
                break
            }
            return true
        },
        checkBoxAgainstFilters: function (box, filters) {
            var self = this;
            if (filters.length === 0) return true;
            else if (_.isString(filters[0])) {
                var joiningOperation = filters[0];
                var filterOperands = _.rest(filters);
                var results = [];
                for (var ii = 0; ii < filterOperands.length; ii++) {
                    var operand = filterOperands[ii];
                    if (_.isArray(operand)) results.push(self.checkBoxAgainstFilters(box, operand));
                    else if (_.isObject(operand)) results.push(self.checkBoxAgainstFilter(box, operand))
                }
                if (joiningOperation === "AND") return _.all(results, function (result) {
                    return result
                });
                else if (joiningOperation === "OR") return _.any(results, function (result) {
                    return result
                });
                else if (joiningOperation === "NONE") return !_.any(results, function (result) {
                    return result
                })
            } else if (_.isObject(filters[0])) {
                try {
                    return self.checkBoxAgainstFilter(box,
                        filters[0])
                } catch (err) {
                    BB.logError("Error in running filter", err)
                }
                return true
            }
        }
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(FilterTransform, 1, "filterTransform")
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var SortTransform = function (pipeline, transformedData, savedViewsController, inSettings) {
        var settings = inSettings || BB.Modules.PipelineView.ViewSettings.SortSettings.load(pipeline, savedViewsController);
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        var sorts = [];
        for (var ii = 0; ii < settings.data.length; ii++) {
            var column = columns[settings.data[ii].columnKey];
            if (!column) continue;
            var sortObj = {
                sort: settings.data[ii].sort
            };
            if (_.isReal(column.field)) sortObj.fieldKey = column.field.key();
            else if (_.isReal(column.systemColumn)) sortObj.property = column.systemColumn.property;
            sorts.push(sortObj)
        }
        sorts.push({
            sort: "ASC",
            property: "creationTimestamp"
        });
        _.each(transformedData.groups, function (group) {
            if (transformedData.lists[group] && transformedData.lists[group].list) sortBoxes(sorts, transformedData.lists[group].list, pipeline)
        })
    };
    var sortBoxes = function (sortSettings, boxes, pipeline) {
        boxes.sort(function (a,
            b) {
            for (var i = 0; i < sortSettings.length; i++) {
                var valA, valB;
                var sort = sortSettings[i];
                if (sort.property) {
                    valA = a.getSortValue(sort.property);
                    valB = b.getSortValue(sort.property)
                } else if (sort.fieldKey) {
                    valA = a.getProcessedFieldValue(sort.fieldKey);
                    valB = b.getProcessedFieldValue(sort.fieldKey)
                }
                if (valA !== valB) {
                    var res = 0;
                    if (_.isNumeric(valA) && _.isNumeric(valB)) res = valA - valB;
                    else if (_.isArray(valA) && _.isArray(valB)) {
                        var j;
                        for (j = 0; j < valA.length; j++)
                            if (valA[j] === valB[j]) continue;
                            else break;
                        if (valA.length === j) res = 0;
                        else res = valA[j] - valB[j]
                    } else if (!valA || valA === "") res = 1;
                    else if (!valB || valB === "") res = -1;
                    else if (_.isString(valA) && _.isString(valB)) {
                        valA = valA.toLowerCase();
                        valB = valB.toLowerCase();
                        res = (valA > valB) - (valA < valB)
                    }
                    return sort.sort === "DESC" ? -1 * res : res
                }
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(SortTransform, 2, "sortTransform")
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ColumnOrderSettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings;
    var ColumnOrderTransform = function (pipeline, transformedData, savedViewsController) {
        var settings = ColumnOrderSettings.load(pipeline);
        var columnOrder = settings.data;
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        _.each(columnOrder, function (columnKey, indexOf) {
            var column = columns[columnKey];
            transformedData.columns[columnKey] = {};
            transformedData.columns[columnKey].moveLeft = function () {
                var visIndex;
                for (visIndex = indexOf - 1; visIndex > -1; visIndex--)
                    if (transformedData.columns[columnOrder[visIndex]].isVisible) break;
                if (indexOf > 0 && visIndex > -1) {
                    columnOrder.removeVal(columnKey);
                    columnOrder.splice(visIndex, 0, columnKey);
                    ColumnOrderSettings.save(settings, pipeline);
                    savedViewsController.trigger("transformSettingsChanged")
                }
            };
            transformedData.columns[columnKey].moveRight =
                function () {
                    var visIndex;
                    for (visIndex = indexOf + 1; visIndex < columnOrder.length; visIndex++)
                        if (transformedData.columns[columnOrder[visIndex]].isVisible) break;
                    if (visIndex > 0 && visIndex < columnOrder.length) {
                        columnOrder.removeVal(columnKey);
                        columnOrder.splice(visIndex, 0, columnKey);
                        ColumnOrderSettings.save(settings, pipeline);
                        savedViewsController.trigger("transformSettingsChanged")
                    }
            };
            transformedData.columns[columnKey].setNewIndex = function (newVisibleIndex, isAfter) {
                var actualIndex;
                var visibleIndex;
                for (actualIndex =
                    0, visibleIndex = 0; actualIndex < columnOrder.length; actualIndex++)
                    if (transformedData.columns[columnOrder[actualIndex]].isVisible) {
                        if (visibleIndex === newVisibleIndex) break;
                        visibleIndex++
                    }
                if (isAfter) actualIndex += 1;
                if (actualIndex !== indexOf) {
                    if (actualIndex > indexOf) actualIndex = actualIndex - 1;
                    columnOrder.removeVal(columnKey);
                    columnOrder.splice(Math.max(actualIndex, 0), 0, columnKey);
                    ColumnOrderSettings.save(settings, pipeline)
                }
            };
            transformedData.columns[columnKey].isFirst = indexOf === 0;
            transformedData.columns[columnKey].isLast =
                indexOf === columnOrder.length - 1;
            if (_.isReal(column.systemColumn)) transformedData.columns[columnKey].property = column.systemColumn.property;
            else transformedData.columns[columnKey].fieldKey = column.field.key()
        });
        transformedData.columnOrder = columnOrder
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnOrderTransform, 1)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var ColumnAddRemoveTransform = function (pipeline, transformedData, savedViewsController) {
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        var columnOrderSettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.load(pipeline);
        _.each(transformedData.columns, function (transformedColumn,
            columnKey) {
            var column = columns[columnKey];
            if (column.systemColumn) transformedColumn.isRemovable = !column.systemColumn.isDefault;
            else transformedColumn.isDeletable = true;
            transformedColumn.remove = function (callback) {
                Gmail.showNotice(BB.Locale.getString("saving"));
                pipeline.setTriggersActive(false);
                if (transformedColumn.isRemovable || transformedColumn.isDeletable) {
                    if (column.systemColumn) pipeline.removeSystemColumn(column.systemColumn);
                    else pipeline.removeField(column.field.key());
                    columnOrderSettings.data.removeVal(columnKey);
                    Gmail.hideNotice()
                }
                pipeline.setTriggersActive(true);
                if (savedViewsController) savedViewsController.trigger("transformSettingsChanged");
                BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.save(columnOrderSettings, pipeline)
            };
            transformedColumn.addSystemColumn = function (systemColumn, callback) {
                Gmail.showNotice(BB.Locale.getString("saving"));
                pipeline.setTriggersActive(false);
                var uniqueKey = "property|" + pipeline.addSystemColumn(systemColumn);
                var newIndex = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.addNewColumn(columnOrderSettings,
                    pipeline, uniqueKey, columnKey);
                if (callback) {
                    callback(newIndex);
                    Gmail.hideNotice()
                }
                pipeline.setTriggersActive(true);
                if (savedViewsController) savedViewsController.trigger("transformSettingsChanged")
            };
            transformedColumn.addCustomColumn = function (type, callback) {
                Gmail.showNotice(BB.Locale.getString("saving"));
                pipeline.setTriggersActive(false);
                var fieldNames = pipeline.getFields().map(function (field) {
                    return field.displayName()
                });
                var t = transformedData.columnOrder.length;
                var name = "Column " + t;
                while (t < 100) {
                    if (fieldNames.indexOf(name) === -1) break;
                    t++;
                    name = "Column " + t
                }
                var model = BB.Models.PipelineField.create({
                    name: name,
                    type: type,
                    pipelineKey: pipeline.key()
                }, pipeline);
                pipeline.addField(model, function () {
                    var uniqueKey = "field|" + model.key();
                    var newIndex = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnOrderSettings.addNewColumn(columnOrderSettings, pipeline, uniqueKey, columnKey);
                    if (callback) {
                        callback(newIndex);
                        Gmail.hideNotice()
                    }
                    pipeline.setTriggersActive(true);
                    if (savedViewsController) savedViewsController.trigger("transformSettingsChanged")
                })
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnAddRemoveTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var ColumnEditStatusTransform = function (pipeline, transformedData) {
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            var column = columns[columnKey];
            if (column.systemColumn) {
                transformedColumn.isEditable = BB.Models.Pipeline.isPropertyEditable(column.systemColumn.property);
                transformedColumn.isRenameable = false
            } else if (column.field) {
                transformedColumn.isEditable = true;
                transformedColumn.isRenameable = true
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnEditStatusTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var ColumnFilterTransform = function (pipeline, transformedData, savedViewsController) {
        var settings = BB.Modules.PipelineView.ViewSettings.FilterSettings.load(pipeline, savedViewsController);
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            var column =
                columns[columnKey];
            transformedColumn.canFilterByContains = function () {
                return column.type === "TEXT" || column.type === "TEXT_INPUT" || column.type === "PERSON" || column.type === "STAGE"
            };
            transformedColumn.clearFilter = function () {
                var matchArray = getMatchedFilters(column, settings.filters);
                var removeArray = null;
                if (matchArray.length === 1) {
                    var matchedFilter = matchArray[0];
                    for (var ii = 1; ii < filterSetting.filters.length; ii++) {
                        var filterArray = settings.filters[ii];
                        var filterIndex = filterArray.indexOf(matchedFilter);
                        if (filterIndex > -1) {
                            filterArray.removeVal(matchedFilter);
                            removeArray = filterArray;
                            break
                        }
                    }
                    if (_.isArray(removeArray) && removeArray.length === 1) {
                        settings.filters.removeVal(removeArray);
                        settings.filters.push(["AND"]);
                        savedViewsController.setFilterSettings(settings)
                    }
                }
            };
            transformedColumn.setContainsFilter = function (filterValue) {
                var filterObject = {
                    comparisonOperation: "contains",
                    value: null,
                    specificValue: filterValue
                };
                if (_.isReal(column.systemColumn)) filterObject.property = column.systemColumn.property;
                else if (_.isReal(column.field)) filterObject.fieldKey =
                    column.field.key();
                if (settings.filters.length === 2 && settings.filters[1].length === 1) settings.filters[1].push(filterObject);
                else {
                    var matchArray = getMatchedFilters(column, settings.filters);
                    if (matchArray.length === 1) {
                        matchArray[0].comparisonOperation = "contains";
                        matchArray[0].value = null;
                        matchArray[0].specificValue = filterValue
                    } else if (matchArray.length === 0) settings.filters.push(["AND", filterObject])
                }
                savedViewsController.setFilterSettings(settings)
            };
            transformedColumn.setAdvancedFilter = function () {
                var filterObject = {
                    comparisonOperation: null,
                    value: null,
                    specificValue: null
                };
                if (_.isReal(column.systemColumn)) filterObject.property = column.systemColumn.property;
                else if (_.isReal(column.field)) filterObject.fieldKey = column.field.key();
                if (settings.filters.length === 2 && settings.filters[1].length === 1) settings.filters[1].push(filterObject);
                else settings.filters.push(["AND", filterObject]);
                savedViewsController.setFilterSettings(settings);
                savedViewsController.trigger("openSavedViewsEditArea")
            };
            transformedColumn.isAdvancedFiltered =
                function () {
                    var matchArray = getMatchedFilters(column, settings.filters);
                    if (matchArray.length > 1) return true;
                    else if (matchArray.length === 1) return matchArray[0].comparisonOperation !== "contains";
                    else return false
            };
            transformedColumn.getContainsFilter = function () {
                var numMatched = 0;
                var matchArray = getMatchedFilters(column, settings.filters);
                if (matchArray.length > 1) return null;
                else if (matchArray.length === 1 && matchArray[0].comparisonOperation === "contains") return matchArray[0].specificValue;
                return null
            }
        })
    };
    var getMatchedFilters =
        function (column, filters) {
            var matchArray = [];
            var checkColumnObject = {};
            if (_.isReal(column.systemColumn)) checkColumnObject.property = column.systemColumn.property;
            else if (_.isReal(column.field)) checkColumnObject.fieldKey = column.field.key();
            for (var ii = 1; ii < filters.length; ii++) {
                var filterArray = filters[ii];
                if (_.isArray(filterArray))
                    for (var jj = 1; jj < filterArray.length; jj++) {
                        var filter = filterArray[jj];
                        if (_.isObject(filter))
                            if (filter.property === checkColumnObject.property && _.isReal(filter.property) || filter.fieldKey ===
                                checkColumnObject.fieldKey && _.isReal(filter.fieldKey)) matchArray.push(filter)
                    }
            }
            return matchArray
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnFilterTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var ColumnGroupByTransform = function (pipeline, transformedData, savedViewsController) {
        var settings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.load(pipeline, savedViewsController);
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        var property = null;
        if (settings.data.indexOf("property") > -1) property = pipeline.getSystemColumn(settings.data.split("|")[1]).property;
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            var column = columns[columnKey];
            transformedColumn.isGroupedBy = function () {
                if (columnKey.indexOf("property") > -1) return property === pipeline.getSystemColumn(columnKey.split("|")[1]).property;
                else return columnKey === settings.data
            };
            transformedColumn.setGroupBy = function () {
                settings.data = columnKey;
                savedViewsController.setGroupBySettings(settings)
            };
            transformedColumn.unGroupBy =
                function () {
                    settings.data = "property|stageKey";
                    savedViewsController.setGroupBySettings(settings)
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnGroupByTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var ColumnNameTransform = function (pipeline, transformedData) {
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            var column = columns[columnKey];
            if (_.isReal(column.field)) {
                transformedColumn.isRenameable = true;
                transformedColumn.getField =
                    function () {
                        return column.field
                }
            }
            transformedColumn.getName = function () {
                if (_.isReal(column.field)) return column.field.displayName();
                else if (_.isReal(column.systemColumn)) return Pipeline.getPropertyName(column.systemColumn.property)
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnNameTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline;
    var ColumnSortTransform = function (pipeline, transformedData, savedViewsController) {
        var settings = BB.Modules.PipelineView.ViewSettings.SortSettings.load(pipeline, savedViewsController);
        var columns = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumnMap(pipeline);
        var sortMap = {};
        for (var ii = 0; ii < settings.data.length; ii++) sortMap[settings.data[ii].columnKey] =
            settings.data[ii];
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            var column = columns[columnKey];
            var sortObject = sortMap[columnKey];
            if (_.isReal(sortObject)) transformedColumn.sort = sortObject.sort;
            transformedColumn.changeSort = function (value) {
                if (value === "NONE") {
                    if (_.isReal(sortObject)) settings.data.removeVal(sortObject)
                } else if (_.isReal(sortObject)) sortObject.sort = value;
                else settings.data.push({
                    columnKey: columnKey,
                    sort: value
                });
                savedViewsController.setSortSettings(settings);
                savedViewsController.trigger("transformSettingsChanged")
            };
            if (column.systemColumn) transformedColumn.property = column.systemColumn.property;
            else if (column.field) transformedColumn.fieldKey = column.field.key()
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnSortTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ColumnVisibilitySettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnVisibilitySettings;
    var ColumnVisibilityTransform = function (pipeline, transformedData, savedViewsController) {
        var settings = ColumnVisibilitySettings.load(pipeline);
        var data = settings.data;
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            if (_.isReal(data[columnKey])) transformedColumn.isVisible =
                data[columnKey];
            else transformedColumn.isVisible = true; if (transformedColumn.property && transformedColumn.property.indexOf("linkedBoxes") > -1) {
                if (!BB.isFeatureEnabled("linkedBoxes")) {
                    transformedColumn.notPresent = true;
                    return
                }
                var parts = transformedColumn.property.split(".");
                if (parts.length > 1) {
                    var pipelineKey = parts[1];
                    var linkedPipeline = BB.Data.getPipeline(pipelineKey);
                    transformedColumn.notPresent = !linkedPipeline
                }
            }
            transformedColumn.hide = function () {
                data[columnKey] = false;
                ColumnVisibilitySettings.save(settings,
                    pipeline);
                savedViewsController.trigger("transformSettingsChanged")
            };
            transformedColumn.show = function () {
                var cIndex = transformedData.columnOrder.indexOf(columnKey);
                for (var ii = cIndex; ii > -1; ii--) {
                    var currColumnKey = transformedData.columnOrder[ii];
                    if (transformedData.columns[currColumnKey].isVisible) break;
                    else data[currColumnKey] = true
                }
                for (ii = cIndex + 1; ii < transformedData.columnOrder.length; ii++) {
                    var currColumnKey = transformedData.columnOrder[ii];
                    if (transformedData.columns[currColumnKey].isVisible) break;
                    else data[currColumnKey] =
                        true
                }
                ColumnVisibilitySettings.save(settings, pipeline)
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnVisibilityTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Pipeline = Streak.BentoBox.Models.Pipeline,
        ColumnWidthSettings = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnWidthSettings;
    var ColumnWidthTransform = function (pipeline, transformedData, savedViewsController) {
        var settings = ColumnWidthSettings.load(pipeline);
        var widthData = settings.data;
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            transformedColumn.width = widthData[columnKey];
            transformedColumn.setWidth = function (newWidth) {
                widthData[columnKey] = newWidth;
                transformedColumn.width = newWidth;
                savedViewsController.trigger("widthChange")
            };
            transformedColumn.saveWidth = function () {
                savedViewsController.disableTriggerOnUISettingsSet();
                ColumnWidthSettings.save(settings, pipeline);
                savedViewsController.enableTriggerOnUISettingsSet()
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(ColumnWidthTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var GroupByTransform = function (pipeline, transformedData, savedViewsController, inSettings) {
        var settings = inSettings || BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.load(pipeline, savedViewsController);
        var column = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumn(settings.data, pipeline);
        var lists = _(transformedData.lists).chain().values().pluck("list").flatten().groupByPlus(function (box) {
            if (column.systemColumn) return box.getGroupByValue(column.systemColumn.property);
            else if (column.field) {
                var pipeField = pipeline.getField(column.field.key());
                if (pipeField) {
                    var type = pipeField.get("type");
                    var val = box.getFieldValue(column.field.key());
                    if (!val) return ["no_value"];
                    switch (type) {
                    case "DATE":
                    case "TEXT_INPUT":
                        return [val];
                        break;
                    case "PERSON":
                        return val && val.length ? _.pluck(val, "fullName") : ["no_value"];
                        break
                    }
                } else return null
            }
        }).value();
        transformedData.lists = {};
        if (settings.data === "property|stageKey") {
            var stages = pipeline.get("stageOrder");
            for (var ii = 0; ii < stages.length; ii++) transformedData.lists[stages[ii]] = {
                list: lists[stages[ii]] || []
            }
        } else
            for (var group in lists) transformedData.lists[group] = {
                list: lists[group]
            }; if (column.systemColumn && column.systemColumn.property === "stageKey") transformedData.groups = pipeline.get("stageOrder");
        else {
            var columnType = column.type;
            transformedData.groups = _.keys(transformedData.lists).sortBy(function (group) {
                if (columnType === "DATE")
                    if (group === "no_value") return 4E15;
                    else return Date.ccreate(group).getTime();
                    else return group
            })
        }
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(GroupByTransform,
        1, "groupByTransform")
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var GroupCalculationTransform = function (pipeline, transformedData, savedViewsController, inSettings) {
        var settings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupCalculationSettings.load(pipeline);
        var groupBySetting = inSettings || BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.load(pipeline, savedViewsController);
        _.each(transformedData.lists, function (groupObject,
            group) {
            groupObject.getCalculationResult = function (columnKey) {
                var column = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumn(columnKey, pipeline);
                if (settings[groupBySetting.data])
                    if (settings[groupBySetting.data][group])
                        if (settings[groupBySetting.data][group][columnKey]) {
                            var values = _(groupObject.list).chain().map(function (box) {
                                var val;
                                if (column.field) val = box.getFieldValue(column.field.key());
                                else val = box.get(column.property);
                                val = parseFloat(val);
                                if (_.isReal(val) && !_.isNaN(val)) return val;
                                return null
                            }).filter(function (val) {
                                return _.isReal(val)
                            }).value();
                            var calc = settings[groupBySetting.data][group][columnKey];
                            var result = 0;
                            if (calc.parameters && calc.parameters.length > 0) result = _.reduce(values, function (current, next, index, list) {
                                return formulas[calc.formula](calc.parameters, current, next, index, list)
                            }, null);
                            else result = Math.round(100 * _.reduce(values, formulas[calc.formula], null)) / 100; if (column.type === "DATE") {
                                var d = Date.create(result);
                                if (d.isValid()) return d.prettyDate()
                            }
                            return result
                        }
                return ""
            };
            groupObject.changeCalculation = function (columnKey, formula, parameters) {
                if (!settings[groupBySetting.data]) settings[groupBySetting.data] = {};
                if (!settings[groupBySetting.data][group]) settings[groupBySetting.data][group] = {};
                if (_.isReal(formula)) settings[groupBySetting.data][group][columnKey] = {
                    formula: formula,
                    parameters: parameters
                };
                else delete settings[groupBySetting.data][group][columnKey];
                BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupCalculationSettings.save(settings, pipeline)
            };
            groupObject.getCurrentFormula =
                function (columnKey) {
                    if (settings[groupBySetting.data])
                        if (settings[groupBySetting.data][group])
                            if (settings[groupBySetting.data][group][columnKey]) return settings[groupBySetting.data][group][columnKey].formula;
                    return null
            }
        });
        _.each(transformedData.columns, function (transformedColumn, columnKey) {
            var column = BB.Modules.PipelineView.ViewSettings.ColumnSettings.ColumnSettingsUtilities.getColumn(columnKey, pipeline);
            transformedColumn.getGroupCalculationOptions = function () {
                var result = formulaMapping[column.type];
                if (result && result.length > 0) return result;
                return null
            };
            transformedColumn.isNameColumn = function () {
                return column.property === "name"
            };
            transformedColumn.isCalculationColumn = function () {
                if (BB.isFeatureEnabled("calculationRows")) return _.isArray(formulaMapping[column.type]) && formulaMapping[column.type].length > 0;
                return false
            };
            transformedColumn.columnKey = columnKey
        })
    };
    var formulas = {
        "MIN": function (current, next) {
            if (_.isNotReal(current)) current = Infinity;
            return Math.min(current, next)
        },
        "MAX": function (current, next) {
            if (_.isNotReal(current)) current = -Infinity;
            return Math.max(current, next)
        },
        "AVERAGE": function (current, next, index, list) {
            if (current === null) current = 0;
            return (current * index + next) / (index + 1)
        },
        "SUM": function (current, next, index, list) {
            if (current === null) current = 0;
            return current + next
        },
        "SUM_PRODUCT": function (params, current, next, index, list) {
            if (current === null) current = 0;
            return current + next * params[0]
        }
    };
    var formulaMapping = {
        "DATE": ["MIN", "MAX"],
        "NUMBER": ["MIN", "MAX", "AVERAGE", "SUM", "SUM_PRODUCT"],
        "TEXT_INPUT": ["MIN", "MAX", "AVERAGE", "SUM", "SUM_PRODUCT"]
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(GroupCalculationTransform, 100)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        COLORS: ["#FA573C", "#FFAD46", "#B3DC6C", "#16A765", "#9FC6E7", "#4986E7", "#7BD148", "#F83A22", "#AC725E", "#92E1C0", "#42D692", "#D06B64", "#FAD165", "#FF7537", "#9FE1E7"]
    };
    var GroupColorTransform = function (pipeline, transformedData, savedViewsController, inSettings) {
        var settings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupColorSettings.load(pipeline);
        var groupBySetting =
            inSettings || BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.load(pipeline, savedViewsController);
        if (_.isNotReal(settings.data[groupBySetting.data])) settings.data[groupBySetting.data] = {};
        var colorMap = settings.data[groupBySetting.data];
        var index = 0;
        _.each(transformedData.lists, function (groupObject, group) {
            if (_.isReal(colorMap[group])) groupObject.color = colorMap[group];
            else groupObject.color = {
                backgroundColor: getColor(index, colorMap),
                textColor: "white"
            };
            groupObject.changeColor = function (color) {
                colorMap[group] =
                    color;
                BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupColorSettings.save(settings, pipeline)
            };
            index++
        });
        if (groupBySetting.data === "property|stageKey") transformedData.groupMeta.nextColor = getColor(transformedData.groups.length, colorMap)
    };
    var getColor = function (index, colorMap) {
        var colors = _.pluck(_.values(colorMap), "backgroundColor");
        var maxColorLength = CONSTANTS.COLORS.length;
        var colorLength = colors.length;
        for (var ii = index; ii < 100; ii++) {
            var tempColor = CONSTANTS.COLORS[ii % CONSTANTS.COLORS.length];
            var cIndex =
                colors.indexOf(tempColor);
            if (cIndex === -1) return tempColor;
            if (Math.abs(index - cIndex) > 10) return tempColor
        }
        return CONSTANTS.COLORS[Number.random(0, CONSTANTS.COLORS.length - 1)]
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(GroupColorTransform, 11, "groupByTransform")
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var GroupEditingTransform = function (pipeline, transformedData, savedViewsController, inSettings) {
        var settings = inSettings || BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.load(pipeline, savedViewsController);
        _.each(transformedData.lists, function (groupObject, group) {
            if (settings.data === "property|stageKey") groupObject.groupModel = pipeline.getStage(group);
            groupObject.displayName =
                function () {
                    var name = "no_value";
                    if (settings.data === "property|stageKey") {
                        var stage = pipeline.getStage(group);
                        if (stage) name = pipeline.getStage(group).displayName()
                    } else if (settings.data.indexOf("property") > -1) {
                        var type = BB.Models.Pipeline.getPropertyFilterAndGroupType(settings.data.split("|")[1]);
                        switch (type) {
                        case "DATE":
                            var d = Date.ccreate(group);
                            if (d.isValid()) name = d.prettyDate(true);
                            break;
                        case "TEXT_INPUT":
                            name = $.cleanText(group, true);
                            break;
                        default:
                            name = group;
                            break
                        }
                    } else if (settings.data.indexOf("field") > -1) {
                        var field = pipeline.getField(settings.data.split("|")[1]);
                        switch (field.get("type")) {
                        case "DATE":
                            var d = Date.ccreate(group);
                            if (d.isValid()) name = d.prettyDate(true);
                            break;
                        case "TEXT_INPUT":
                            name = $.cleanText(group, true);
                            break;
                        case "PERSON":
                            name = group;
                            break
                        }
                    }
                    if (name === "no_value") return "No Value";
                    return name
            }
        });
        transformedData.groupMeta = {
            canEdit: settings.data === "property|stageKey"
        }
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(GroupEditingTransform, 10, "groupByTransform")
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var GroupOpenCloseTransform = function (pipeline, transformedData, savedViewsController, inSettings) {
        var settings = inSettings || BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupOpenCloseSettings.load(pipeline);
        var groupBySetting = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings.load(pipeline, savedViewsController);
        if (settings.data.columnKey !== groupBySetting.data) settings.data.openStatus = {};
        settings.data.columnKey = groupBySetting.data;
        _.each(transformedData.lists, function (groupObject, group) {
            if (_.isReal(settings.data.openStatus[group])) groupObject.isOpen = settings.data.openStatus[group];
            else groupObject.isOpen = true;
            groupObject.toggleOpen = function (status, dontSave) {
                if (_.isNotReal(status))
                    if (_.isReal(settings.data.openStatus[group])) status = !settings.data.openStatus[group];
                    else status = false;
                settings.data.openStatus[group] = status;
                BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupOpenCloseSettings.save(settings,
                    pipeline, dontSave)
            }
        })
    };
    BB.UI.PipelineSpreadsheetController.registerTransform(GroupOpenCloseTransform)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        FilterSettings = BB.Modules.PipelineView.ViewSettings.FilterSettings,
        SortSettings = BB.Modules.PipelineView.ViewSettings.SortSettings,
        GroupBySettings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings;
    var initialized = false;
    var defaults = {};
    var templates = {};

    function init() {
        if (!initialized) {
            templates.container = HTML.get("savedViewsEditArea")();
            templates.filterSection = HTML.get("savedViewsFilterSection")();
            templates.advancedSection = HTML.get("savedViewsAdvancedSection")();
            initialized = true
        }
    }
    var SavedViewsEditArea = function (options) {
        init();
        var self = this;
        this.options = options;
        this.pipeline = options.pipeline;
        this.dataSource = options.dataSource;
        this.trackingContext = options.trackingContext;
        this.trackingContext.widgetContext += "/savedViewsEditArea";
        this.containerElement = $(templates.container);
        this.filterContainer = $(templates.filterSection);
        this.advancedContainer = $(templates.advancedSection);
        this.savedViewsController =
            options.savedViewsController;
        this.createSections();
        this.createButtons();
        this.setupBindings();
        this.containerElement.hide()
    };
    SavedViewsEditArea.create = function (o) {
        var options = {};
        $.extend(options, defaults, o);
        return new SavedViewsEditArea(options)
    };
    _.extend(SavedViewsEditArea.prototype, {
        createSections: function () {
            var self = this;
            this.filterBar = BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.create({
                pipeline: this.pipeline,
                trackingContext: _.clone(this.trackingContext)
            });
            this.filterContainer.find(".savedViewsFilters").append(this.filterBar.containerElement);
            this.filterCollapse = BB.Widgets.CollapseSection.create({
                title: BB.Locale.getString("saved_views_filters"),
                bodyEl: this.filterContainer,
                startOpen: true
            });
            this.containerElement.find(".savedViewsEditAreaInner").append(this.filterCollapse.el);
            this.sortByBar = BB.Modules.PipelineView.SavedViewsEditArea.SortByBar.create({
                pipeline: this.pipeline,
                trackingContext: _.clone(this.trackingContext)
            });
            this.groupByBar = BB.Modules.PipelineView.SavedViewsEditArea.GroupByBar.create({
                pipeline: this.pipeline,
                trackingContext: _.clone(this.trackingContext)
            });
            this.advancedContainer.find(".savedViewsSortBy").append(this.sortByBar.containerElement);
            this.advancedContainer.find(".savedViewsGroupBy").append(this.groupByBar.containerElement);
            this.advancedCollapse = BB.Widgets.CollapseSection.create({
                title: BB.Locale.getString("saved_views_advanced"),
                bodyEl: this.advancedContainer,
                startOpen: false
            });
            this.containerElement.find(".savedViewsEditAreaInner").append(this.advancedCollapse.el)
        },
        createButtons: function () {
            var self = this;
            this.buttons = {};
            this.buttons.saveButton =
                BB.Widgets.Button.create({
                    name: BB.Locale.getString("saved_views_apply_and_save"),
                    color: "blue",
                    tabIndex: 0,
                    onFunc: this.saveView.bind(this)
                });
            this.buttons.saveButton.el.addClass("streak__savedViewsSaveButton");
            this.buttons.cancelButton = BB.Widgets.Button.create({
                name: BB.Locale.getString("cancel").capitalize(),
                tabIndex: 0,
                onFunc: function () {
                    self.updateDisplay();
                    self.savedViewsController.trigger("closeSavedViewsEditArea")
                }
            });
            this.buttons.applyButton = BB.Widgets.Button.create({
                name: BB.Locale.getString("apply"),
                color: "blue",
                tabIndex: 0,
                onFunc: this.applySettings.bind(this)
            });
            this.buttons.applyButton.el.addClass("streak__savedViewsApplyButton");
            var actionButtonElement = this.containerElement.find(".savedViewsActionButtons");
            actionButtonElement.append(this.buttons.saveButton.el);
            actionButtonElement.append(this.buttons.applyButton.el);
            actionButtonElement.append(this.buttons.cancelButton.el)
        },
        setupBindings: function () {
            var self = this;
            this.savedViewsController.bind("transformSettingsChanged", this.updateDisplay.bind(this));
            this.savedViewsController.bind("openSavedViewsEditArea", this.expandArea.bind(this));
            this.savedViewsController.bind("closeSavedViewsEditArea", this.collapseArea.bind(this));
            this.savedViewsController.bind("toggleSavedViewsEditArea", this.toggleArea.bind(this));
            this.pipeline.bind("openSavedViewsEditArea", null, this.expandArea.bind(this), "savedViewsEditArea")
        },
        firstRender: function () {
            var currentState = this.savedViewsController.getCurrentSettingsState();
            this.firstLoaded = true;
            if (currentState.isDefaultSettingsActive) this.containerElement.hide();
            else {
                this.containerElement.show();
                this.collapseArea()
            }
        },
        updateDisplay: function () {
            var currentState = this.savedViewsController.getCurrentSettingsState();
            var filterCollapseState = this.filterCollapse.isOpen();
            var advancedCollapseState = this.advancedCollapse.isOpen();
            this.filterCollapse.toggle(true);
            this.advancedCollapse.toggle(true);
            this.filterBar.updateDisplay(JSON.deepClone(currentState.filterSettings.filters));
            this.sortByBar.updateDisplay(JSON.deepClone(currentState.listOfSortedColumns));
            this.groupByBar.updateDisplay(JSON.deepClone(currentState.groupBySetting));
            this.filterCollapse.toggle(filterCollapseState);
            this.advancedCollapse.toggle(advancedCollapseState);
            this.buttons.applyButton.el.hide();
            this.buttons.saveButton.el.hide();
            if (currentState.isASavedViewActive) this.buttons.saveButton.el.show();
            else this.buttons.applyButton.el.show()
        },
        collapseArea: function () {
            this.containerElement.hide();
            this.savedViewsController.trigger("savedViewsEditAreaChanged")
        },
        expandArea: function () {
            this.containerElement.show();
            this.updateDisplay();
            this.savedViewsController.trigger("savedViewsEditAreaChanged")
        },
        toggleArea: function () {
            if (this.isAreaOpen()) this.collapseArea();
            else this.expandArea()
        },
        isAreaOpen: function () {
            return this.containerElement.is(":FastVisible")
        },
        toggleContainer: function () {
            if (!this.firstLoaded) return;
            this.toggleArea()
        },
        openContainer: function () {
            if (!this.firstLoaded) return;
            if (!this.containerElement.is(":FastVisible")) this.expandArea()
        },
        applySettings: function () {
            this.savedViewsController.trigger("closeSavedViewsEditArea");
            this.savedViewsController.applyViewSettings(this.getSettings())
        },
        saveView: function () {
            this.savedViewsController.trigger("closeSavedViewsEditArea");
            this.savedViewsController.updateActiveViewWithNewSettings(this.getSettings())
        },
        createNewView: function () {
            var self = this;
            self.track("createSavedViewAttempt");
            BB.Widgets.Modal.textboxModal({
                title: BB.Locale.getString("saved_view_create_modal_title"),
                placeholderText: BB.Locale.getString("Set the name of the new view"),
                callback: function (name) {
                    self.track("createSavedViewSuccess");
                    self.savedViewsController.saveSettingsAsView(name, self.getSettings())
                }
            })
        },
        clearSettings: function () {
            this.savedViewsController.setToDefaultView()
        },
        getSettings: function () {
            var sortSettings = SortSettings.create(this.pipeline);
            var filterSettings = FilterSettings.create(this.pipeline);
            var groupBySettings = GroupBySettings.create(this.pipeline);
            filterSettings.filters = this.filterBar.getStatus();
            sortSettings.data = this.sortByBar.getStatus();
            groupBySettings.data = this.groupByBar.getStatus();
            return {
                filterSettings: filterSettings,
                sortSettings: sortSettings,
                groupBySettings: groupBySettings
            }
        },
        destroy: function () {
            this.pipeline.unbindAll("savedViewsEditArea")
        },
        track: function (event,
            properties) {
            BB.Tracker.trackStreakActive(this.trackingContext, properties, {
                eventName: event
            })
        }
    });
    BB.Modules.PipelineView.SavedViewsEditArea = SavedViewsEditArea
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var defaults = {};
    BB.Modules.PipelineView.SavedViewsEditArea.FilterBar = function (options) {
        var self = this;
        this.options = options;
        this.pipeline = options.pipeline;
        this.containerElement = HTML.get("filterBarContainer", true);
        this.filterGroupViews = [];
        this.filterBarContents = this.containerElement.find(".filterBarContents");
        this.filterGroupList = this.containerElement.find(".filterGroupList");
        this.filterBarConnectors =
            this.containerElement.find(".filterBarConnectors");
        this.trackingContext = options.trackingContext;
        this.trackingContext.widgetContext += "/filterBar";
        this.settings = null;
        this.joiningOperator = null
    };
    BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.create = function (o) {
        var options = {};
        $.extend(options, defaults, o);
        return new BB.Modules.PipelineView.SavedViewsEditArea.FilterBar(options)
    };
    _.extend(BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.prototype, {
        updateDisplay: function (filterSettings) {
            this.settings =
                filterSettings || this.settings;
            this.filterGroupViews.length = 0;
            this.filterGroupList.empty();
            this.containerElement.removeClass("multipleFilterGroups");
            this.joiningOperator = this.settings[0];
            for (var ii = 1; ii < this.settings.length; ii++) this.addFilterGroup(this.settings[ii], ii, ii === this.settings.length - 1);
            this.addConnectors()
        },
        addFilterGroup: function (filterStatementGroup, index, isLast) {
            var self = this;
            var filterGroup = new BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.FilterStatementGroup({
                pipeline: this.pipeline,
                trackingContext: _.clone(this.trackingContext),
                filters: filterStatementGroup,
                removeCallback: function () {
                    self.settings.remove(index);
                    if (self.settings.length === 1) self.settings.push(["AND"]);
                    self.updateDisplay()
                },
                resizeCallback: function () {
                    self.addConnectors()
                }
            });
            this.filterGroupViews.push(filterGroup);
            this.filterGroupList.append(filterGroup.containerElement)
        },
        addConnectors: function () {
            this.filterBarConnectors.empty();
            var numGroups = this.filterGroupViews.length;
            var vertTop = 0,
                vertBottom = 0;
            for (var ii = 0; ii < numGroups; ii++) {
                var hrule =
                    $('<div class="streak__connectorHorizontal"></div>');
                var currentTop = this.filterGroupViews[ii].containerElement.position().top;
                currentTop += this.filterGroupViews[ii].containerElement.outerHeight() / 2;
                hrule.css("top", currentTop + "px");
                this.filterBarConnectors.append(hrule);
                if (ii === 0) vertTop = currentTop;
                else if (ii === numGroups - 1) vertBottom = currentTop
            }
            var verticalBar = $('<div class="streak__connectorVertical"></div>');
            verticalBar.css("top", vertTop + "px");
            this.filterBarConnectors.append(verticalBar);
            if (numGroups >
                1) {
                this.containerElement.addClass("multipleFilterGroups");
                var switchButtonContainer = this.addSwitchButtons(vertTop + Math.round((vertBottom - vertTop) / 2) - 14);
                switchButtonContainer.css("top", +"px")
            }
            this.addPlusButton()
        },
        addSwitchButtons: function (top) {
            var self = this;
            var connector = $('<div class="filterGroupConnector"></div>');
            var switchButton = BB.Widgets.ButtonCustomDropdown.create({
                trackingContext: _.clone(this.trackingContext),
                list: [{
                    name: "All",
                    value: "AND"
                }, {
                    name: "Any",
                    value: "OR"
                }, {
                    name: "None",
                    value: "NONE"
                }],
                changeFunc: function (newOp) {
                    self.settings[0] = newOp.value;
                    self.updateDisplay()
                }
            });
            switchButton.setSelected(this.joiningOperator);
            connector.append(switchButton.el);
            var hrule = $('<div class="streak__connectorHorizontal"></div>');
            connector.append(hrule);
            connector.css("top", top);
            this.filterBarConnectors.append(connector);
            return connector
        },
        addPlusButton: function () {
            var self = this;
            var addButton = BB.Widgets.Button.create({
                iconClassName: "bbPlus",
                onFunc: function () {
                    self.settings.push(["AND"]);
                    self.updateDisplay()
                }
            });
            addButton.el.css({
                bottom: "0",
                position: "absolute",
                marginRight: "0"
            });
            this.filterBarConnectors.append(addButton.el)
        },
        getNumberOfFilters: function () {
            return _(this.settings).chain().flatten().filter(function (filter) {
                return _.isObject(filter) && (_.isReal(filter.property) || _.isReal(filter.fieldKey))
            }).value().length
        },
        getStatus: function () {
            return this.settings
        },
        destroy: function () {},
        track: function (event, properties) {
            BB.Tracker.trackStreakActive(this.trackingContext, properties, {
                eventName: event
            })
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var trackingContext;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(trackingContext, props, {
            eventName: event
        })
    };
    BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.FilterStatement = function (options) {
        var self = this;
        this.column = null;
        this.operation = null;
        this.value = null;
        this.specificValue = null;
        this.pipeline = options.pipeline;
        this.options = options;
        this.filter = this.options.filter;
        if (_.isReal(this.filter)) {
            this.column = {};
            if (_.isReal(this.filter.fieldKey)) this.column.fieldKey = this.filter.fieldKey;
            else if (_.isReal(this.filter.property)) this.column.property = this.filter.property;
            this.operation = this.filter.comparisonOperation;
            this.value = this.filter.value;
            this.specificValue = this.filter.specificValue
        }
        this.trackingContext = options.trackingContext.widgetContext + "/filterStatement";
        this.containerElement = HTML.get("filterStatement", true);
        this.columnDropdown = BB.Widgets.ButtonCustomDropdown.create({
            trackingContext: _.clone(options.trackingContext),
            list: getFilterableColumns(this.pipeline),
            unselectedDisplayText: BB.Locale.getString("filter_choose_column"),
            maxHeight: 300,
            changeFunc: function (column) {
                self.column = column.value;
                self.updateStatement();
                self.updateDisplay()
            },
            comparisonFunction: function (listItemValue, potentialItemValue) {
                return listItemValue.fieldKey === potentialItemValue.fieldKey && _.isReal(listItemValue.fieldKey) || listItemValue.property === potentialItemValue.property && _.isReal(listItemValue.property)
            }
        });
        this.containerElement.find(".filterColumnOptions").append(this.columnDropdown.el);
        this.operationsDropdown = BB.Widgets.ButtonCustomDropdown.create({
            trackingContext: _.clone(options.trackingContext),
            unselectedDisplayText: BB.Locale.getString("filter_choose_operation"),
            maxHeight: 300,
            changeFunc: function (operation) {
                self.operation = operation.value;
                self.value = null;
                self.specificValue = null;
                self.updateStatement();
                self.updateDisplay()
            }
        });
        this.containerElement.find(".filterOperationOptions").append(this.operationsDropdown.el);
        this.valuesDropdown = BB.Widgets.ButtonCustomDropdown.create({
            trackingContext: _.clone(options.trackingContext),
            unselectedDisplayText: BB.Locale.getString("filter_choose_value"),
            maxHeight: 300,
            changeFunc: function (filterValue) {
                self.value = filterValue.value;
                self.updateStatement();
                self.updateDisplay()
            }
        });
        this.containerElement.find(".filterValueOptions").append(this.valuesDropdown.el);
        this.specificValuePeopleDropdown = BB.Widgets.ButtonCustomDropdown.create({
            trackingContext: _.clone(options.trackingContext),
            unselectedDisplayText: BB.Locale.getString("filter_choose_specific"),
            maxHeight: 300,
            changeFunc: function (filterValue) {
                self.specificValue =
                    filterValue.value;
                self.updateStatement()
            },
            comparisonFunction: function (listItemValue, potentialSelectedItemValue) {
                if (!_.isReal(potentialSelectedItemValue) || !_.isReal(potentialSelectedItemValue.email)) return false;
                return listItemValue.email.toLowerCase() === potentialSelectedItemValue.email.toLowerCase()
            }
        });
        this.specificValueInput = $('<input type="text" />');
        this.specificValueInput[0].oninput = function () {
            self.updateStatement()
        };
        this.specificValueDateInput = $('<input type="text" class="streak__filterDateInput" />');
        this.specificValueDateInput.will_pickdate({
            animationDuration: 0,
            body: Gmail.elements.body,
            allowEmpty: false,
            appendTo: this.containerElement.find(".filterValueSpecific"),
            format: "m/d/Y",
            onSelect: function (aDate) {
                self.specificValue = aDate.getTime();
                self.updateStatement()
            }
        });
        this.specificValueDateInput.on("blur", function (e) {
            self.updateStatement()
        });
        this.specificValueDateInput.on("focus", function (e) {
            $(this).trigger("onfocus")
        });
        this.containerElement.find(".filterValueSpecific").append(this.specificValueInput);
        this.containerElement.find(".filterValueSpecific").append(this.specificValuePeopleDropdown.el);
        this.containerElement.find(".filterValueSpecific").append(this.specificValueDateInput);
        this.removeStatementElement = this.containerElement.find(".filterRemoveStatement");
        this.removeStatementElement.click(function (e) {
            self.removeStatement()
        });
        this.updateDisplay()
    };
    _.extend(BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.FilterStatement.prototype, {
        updateDisplay: function () {
            var columnType;
            this.resetDropdowns();
            if (this.column.property) columnType = BB.Models.Pipeline.getPropertyFilterAndGroupType(this.column.property);
            else if (this.column.fieldKey) columnType = this.pipeline.getField(this.column.fieldKey).get("type");
            if (_.isNotReal(columnType)) this.columnDropdown.deselect();
            else {
                this.columnDropdown.setSelected(this.column);
                var filterOperations = getFilterOperations(columnType);
                if (isInvalidFilterOperation(this.operation, filterOperations)) {
                    this.operation = null;
                    this.value = null
                }
                this.operationsDropdown.setMenuList(filterOperations);
                this.operationsDropdown.enable();
                if (_.isReal(this.operation)) {
                    this.operationsDropdown.setSelected(this.operation);
                    if (this.operation === "isSet" || this.operation === "notSet") {
                        this.valuesDropdown.el.hide();
                        this.specificValueInput.hide()
                    } else if (columnType === "TEXT" || columnType === "TEXT_INPUT" || columnType === "NUMBER" || this.operation === "contains" || this.operation === "notContains") {
                        this.valuesDropdown.el.hide();
                        this.value = "__specific";
                        this.specificValueInput.show();
                        this.specificValueInput.val(this.specificValue)
                    } else {
                        this.valuesDropdown.el.show();
                        this.valuesDropdown.enable();
                        var filterValues = getFilterValues(columnType, this.operation, this.pipeline);
                        this.valuesDropdown.setMenuList(filterValues);
                        this.valuesDropdown.setSelected(this.value);
                        if (this.value && this.value.indexOf("__specific") > -1) switch (columnType) {
                        case "PERSON":
                            var peopleValues = getSpecifcPeopleValues(this.column, this.pipeline);
                            this.specificValuePeopleDropdown.el.show();
                            this.specificValuePeopleDropdown.setMenuList(peopleValues);
                            this.specificValuePeopleDropdown.setSelected(this.specificValue);
                            break;
                        case "DATE":
                            if (this.value === "__specific") {
                                this.specificValueDateInput.show();
                                var aDate = Date.create(this.specificValue);
                                if (aDate.isValid()) {
                                    this.specificValueDateInput.val(aDate.prettyDate(true));
                                    this.specificValueDateInput.data("time", aDate.getTime())
                                } else tthis.specificValueDateInput.val("")
                            } else {
                                this.specificValueInput.show();
                                this.specificValueInput.val(this.specificValue)
                            }
                            break;
                        default:
                            this.specificValueInput.show();
                            this.specificValueInput.val(this.specificValue)
                        } else this.specificValueInput.hide()
                    }
                } else {
                    this.operationsDropdown.deselect();
                    this.operationsDropdown.el.show();
                    this.specificValueInput.hide();
                    this.valuesDropdown.el.show();
                    this.valuesDropdown.disable()
                }
            }
        },
        removeStatement: function () {
            this.containerElement.remove();
            if (this.options.removeCallback) this.options.removeCallback()
        },
        resetDropdowns: function () {
            this.columnDropdown.deselect();
            this.operationsDropdown.deselect();
            this.operationsDropdown.disable();
            this.valuesDropdown.deselect();
            this.valuesDropdown.el.show();
            this.valuesDropdown.disable();
            this.specificValueInput.hide();
            this.specificValueDateInput.hide();
            this.specificValuePeopleDropdown.el.hide()
        },
        updateStatement: function () {
            if (_.isReal(this.column)) {
                this.filter.fieldKey = this.column.fieldKey;
                this.filter.property = this.column.property;
                this.filter.comparisonOperation = this.operationsDropdown.getSelected().value;
                if (this.filter.comparisonOperation === "__unselected") this.filter.comparisonOperation = null;
                this.filter.value = this.valuesDropdown.getSelected().value;
                if (this.filter.value === "__unselected") this.filter.value = null;
                if (this.specificValueInput.isVisible()) this.filter.specificValue =
                    this.specificValueInput.val();
                else if (this.specificValueDateInput.isVisible()) {
                    var aDate = Date.ccreate(this.specificValueDateInput.val());
                    if (aDate.isValid()) this.filter.specificValue = aDate.getTime();
                    else this.filter.specificValue = null
                } else if (this.specificValuePeopleDropdown.el.isVisible()) this.filter.specificValue = this.specificValuePeopleDropdown.getSelected().value;
                else this.filter.specificValue = null
            } else {
                this.filter.property = null;
                this.filter.fieldKey = null
            }
        }
    });

    function getFilterableColumns(pipeline) {
        var returnColumns;
        var fieldColumns = _.map(pipeline.getFields(), function (field) {
            return {
                name: field.displayName(),
                value: {
                    fieldKey: field.key()
                }
            }
        });
        var filterableColumns = BB.Models.Pipeline.getFilterableSystemProperties();
        var activeSystemColumns = pipeline.getActiveSystemColumns();
        filterableColumns = _.differencePlus(filterableColumns, activeSystemColumns, function (c1, c2) {
            return c1.property === c2.property
        });
        activeSystemColumns = _.map(activeSystemColumns, function (systemColumn) {
            return {
                name: systemColumn.title,
                value: {
                    property: systemColumn.property
                }
            }
        });
        filterableColumns = _.map(filterableColumns, function (systemColumn) {
            return {
                name: systemColumn.title,
                value: {
                    property: systemColumn.property
                }
            }
        });
        returnColumns = _.sortBy(fieldColumns.concat(activeSystemColumns), function (column) {
            return column.name
        });
        returnColumns.push("__separator");
        returnColumns = returnColumns.concat(_.sortBy(filterableColumns, function (column) {
            return column.name
        }));
        return returnColumns
    }

    function getFilterOperations(columnType) {
        switch (columnType) {
        case "TEXT":
        case "TEXT_INPUT":
            return [{
                name: BB.Locale.getString("filter_contains"),
                value: "contains"
            }, {
                name: BB.Locale.getString("filter_not_contains"),
                value: "notContains"
            }, "__separator", {
                name: BB.Locale.getString("filter_equals"),
                value: "eq"
            }, {
                name: BB.Locale.getString("filter_not_equals"),
                value: "ne"
            }, {
                name: BB.Locale.getString("filter_greater_than"),
                value: "gt"
            }, {
                name: BB.Locale.getString("filter_less_than"),
                value: "lt"
            }, "__separator", {
                name: BB.Locale.getString("filter_is_set"),
                value: "isSet"
            }, {
                name: BB.Locale.getString("filter_not_set"),
                value: "notSet"
            }];
            break;
        case "STAGE":
            return [{
                name: BB.Locale.getString("filter_equals"),
                value: "eq"
            }, {
                name: BB.Locale.getString("filter_not_equals"),
                value: "ne"
            }, "__separator", {
                name: BB.Locale.getString("filter_contains"),
                value: "contains"
            }, {
                name: BB.Locale.getString("filter_not_contains"),
                value: "notContains"
            }];
            break;
        case "NUMBER":
            return [{
                name: BB.Locale.getString("filter_equals"),
                value: "eq"
            }, {
                name: BB.Locale.getString("filter_not_equals"),
                value: "ne"
            }, {
                name: BB.Locale.getString("filter_greater_than"),
                value: "gt"
            }, {
                name: BB.Locale.getString("filter_less_than"),
                value: "lt"
            }, "__separator", {
                name: BB.Locale.getString("filter_is_set"),
                value: "isSet"
            }, {
                name: BB.Locale.getString("filter_not_set"),
                value: "notSet"
            }];
            break;
        case "DATE":
            return [{
                name: BB.Locale.getString("date_filter_before"),
                value: "before"
            }, {
                name: BB.Locale.getString("date_filter_after"),
                value: "after"
            }, {
                name: BB.Locale.getString("date_filter_range"),
                value: "on"
            }, "__separator", {
                name: BB.Locale.getString("filter_is_set"),
                value: "isSet"
            }, {
                name: BB.Locale.getString("filter_not_set"),
                value: "notSet"
            }];
            break;
        case "PERSON":
            return [{
                name: BB.Locale.getString("people_filter_includes"),
                value: "includes"
            }, {
                name: BB.Locale.getString("people_filter_not_includes"),
                value: "doesNotInclude"
            }, {
                name: BB.Locale.getString("people_filter_only"),
                value: "isOnly"
            }, "__separator", {
                name: BB.Locale.getString("filter_contains"),
                value: "contains"
            }, {
                name: BB.Locale.getString("filter_not_contains"),
                value: "notContains"
            }, "__separator", {
                name: BB.Locale.getString("filter_is_set"),
                value: "isSet"
            }, {
                name: BB.Locale.getString("filter_not_set"),
                value: "notSet"
            }];
            break
        }
    }

    function isInvalidFilterOperation(operationValue, operations) {
        if (_.isNotReal(operationValue)) return true;
        return !_.any(operations, function (operation) {
            return operation.value === operationValue
        })
    }

    function getFilterValues(columnType, currentOperation, pipeline) {
        switch (columnType) {
        case "STAGE":
            return _.map(pipeline.getStages().ordered, function (stage) {
                return {
                    name: stage.displayName(),
                    value: stage.key()
                }
            });
            break;
        case "DATE":
            switch (currentOperation) {
            case "on":
                return [{
                        name: BB.Locale.getString("date_filter_value_today"),
                        value: "today"
                    }, {
                        name: BB.Locale.getString("date_filter_value_yesterday"),
                        value: "yesterday"
                    }, {
                        name: BB.Locale.getString("date_filter_value_tomorrow"),
                        value: "tomorrow"
                    }, "__separator", {
                        name: BB.Locale.getString("date_filter_value_this_week"),
                        value: "this week"
                    }, {
                        name: BB.Locale.getString("date_filter_value_this_month"),
                        value: "this month"
                    }, {
                        name: BB.Locale.getString("date_filter_value_this_year"),
                        value: "this year"
                    }, "__separator", {
                        name: BB.Locale.getString("date_filter_value_last_week"),
                        value: "last week"
                    }, {
                        name: BB.Locale.getString("date_filter_value_last_month"),
                        value: "last month"
                    }, {
                        name: BB.Locale.getString("date_filter_value_last_year"),
                        value: "last year"
                    },
                    "__separator", {
                        name: BB.Locale.getString("date_filter_value_next_week"),
                        value: "next week"
                    }, {
                        name: BB.Locale.getString("date_filter_value_next_month"),
                        value: "next month"
                    }, {
                        name: BB.Locale.getString("date_filter_value_next_year"),
                        value: "next year"
                    }];
                break;
            default:
                return [{
                    name: BB.Locale.getString("date_filter_specific"),
                    value: "__specific"
                }, {
                    name: BB.Locale.getString("date_filter_specific_range"),
                    value: "__specific_range"
                }, "__separator", {
                    name: BB.Locale.getString("date_filter_value_today"),
                    value: "today"
                }, {
                    name: BB.Locale.getString("date_filter_value_yesterday"),
                    value: "yesterday"
                }, {
                    name: BB.Locale.getString("date_filter_value_tomorrow"),
                    value: "tomorrow"
                }, "__separator", {
                    name: BB.Locale.getString("date_filter_value_last_days_ago", {
                        number: 7
                    }),
                    value: "last 7 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_last_days_ago", {
                        number: 30
                    }),
                    value: "last 30 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_last_days_ago", {
                        number: 90
                    }),
                    value: "last 90 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_last_days_ago", {
                        number: 180
                    }),
                    value: "last 180 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_last_days_ago", {
                        number: 365
                    }),
                    value: "last 365 days"
                }, "__separator", {
                    name: BB.Locale.getString("date_filter_value_days_from_now", {
                        number: 7
                    }),
                    value: "next 7 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_days_from_now", {
                        number: 30
                    }),
                    value: "next 30 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_days_from_now", {
                        number: 90
                    }),
                    value: "next 90 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_days_from_now", {
                        number: 180
                    }),
                    value: "next 180 days"
                }, {
                    name: BB.Locale.getString("date_filter_value_days_from_now", {
                        number: 365
                    }),
                    value: "next 365 days"
                }];
                break
            }
            break;
        case "PERSON":
            return [{
                name: "Me",
                value: "me"
            }, {
                name: "Specific Person",
                value: "__specific"
            }];
            break
        }
    }

    function getSpecifcPeopleValues(column, pipeline) {
        if (_.isReal(column.property)) return BB.UI.getPropertyValues(pipeline, column.property);
        else if (_.isReal(column.fieldKey)) return BB.UI.getFieldValues(pipeline, column.fieldKey)
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.FilterStatementGroup = function (options) {
        var self = this;
        this.options = options;
        this.pipeline = this.options.pipeline;
        this.filterStatementObjects = [];
        this.filterStatementViews = [];
        this.joiningOperator = null;
        this.filters = this.options.filters;
        this.joiningOperator = this.filters[0];
        this.trackingContext = options.trackingContext.widgetContext + "/filterStatementGroup";
        this.containerElement = HTML.get("filterGroup", true);
        this.statementListContainer = this.containerElement.find(".filterGroupStatementList");
        this.connectorsArea = this.containerElement.find(".filterGroupConnectors");
        this.containerElement.find(".filterRemoveGroup").on("click", function (e) {
            if (options.removeCallback) options.removeCallback()
        });
        this.updateDisplay()
    };
    _.extend(BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.FilterStatementGroup.prototype, {
        updateDisplay: function () {
            var self = this;
            this.statementListContainer.empty();
            this.connectorsArea.empty();
            this.filterStatementViews.length = 0;
            this.joiningOperator = this.filters[0];
            if (this.filters.length > 1)
                for (var ii = 1; ii < this.filters.length; ii++) this.addStatement(this.filters[ii], ii);
            else {
                var emptyFilterObject = {};
                this.filters.push(emptyFilterObject);
                this.addStatement(emptyFilterObject, 0, true)
            }
            this.addConnectors()
        },
        addStatement: function (filterStatementObject, index, isLast) {
            var self = this;
            var statementView = new BB.Modules.PipelineView.SavedViewsEditArea.FilterBar.FilterStatement({
                trackingContext: _.clone(this.trackingContext),
                pipeline: this.pipeline,
                filter: filterStatementObject,
                removeCallback: function () {
                    self.removeStatement(index)
                }
            });
            this.statementListContainer.append(statementView.containerElement)
        },
        removeStatement: function (index) {
            this.filters.remove(index);
            if (this.filters.length === 1) {
                if (this.options.removeCallback) this.options.removeCallback()
            } else {
                this.updateDisplay();
                if (this.options.resizeCallback) this.options.resizeCallback()
            }
        },
        addConnectors: function () {
            var numFilters = this.filters.length - 1;
            if (numFilters > 1) {
                this.containerElement.addClass("multipleFilterStatements");
                for (var ii = 0; ii < numFilters; ii++) this.connectorsArea.append('<div class="filterConnectorHorizontal"></div>');
                this.connectorsArea.append('<div class="filterConnectorVertical"></div>');
                this.addSwitchButtons()
            } else this.containerElement.removeClass("multipleFilterStatements");
            this.addPlusButton(numFilters > 1)
        },
        addSwitchButtons: function () {
            var self = this;
            var connector = $('<div class="filterGroupStatementConnector"></div>');
            var switchButton = BB.Widgets.ButtonCustomDropdown.create({
                trackingContext: _.clone(this.trackingContext),
                list: [{
                    name: "All",
                    value: "AND"
                }, {
                    name: "Any",
                    value: "OR"
                }, {
                    name: "None",
                    value: "NONE"
                }],
                changeFunc: function (newOp) {
                    self.filters[0] = newOp.value;
                    self.updateDisplay()
                }
            });
            connector.append(switchButton.el);
            switchButton.setSelected(this.joiningOperator);
            this.connectorsArea.append(connector)
        },
        addPlusButton: function (hasMultipleStatements) {
            var self = this;
            var addButton = BB.Widgets.Button.create({
                iconClassName: "bbPlus",
                onFunc: function () {
                    self.filters.push({});
                    self.updateDisplay();
                    if (self.options.resizeCallback) self.options.resizeCallback()
                }
            });
            addButton.el.css({
                paddingLeft: "3px",
                paddingRight: "3px",
                position: "absolute",
                left: "17px",
                bottom: hasMultipleStatements ? "-30px" : "0"
            });
            this.connectorsArea.append(addButton.el)
        },
        getFilterGroupState: function () {
            var returnArray = [this.joiningOperator];
            for (var ii = 0; ii < this.filterStatementViews.length; ii++) {
                var statement = this.filterStatementViews[ii].getStatement();
                if (_.isReal(statement)) returnArray.push(statement)
            }
            return returnArray
        },
        track: function (event, props) {
            BB.Tracker.trackStreakActive(this.trackingContext,
                props, {
                    eventName: event
                })
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var initialized = false;
    var defaults = {};
    var templates = {};

    function init() {
        if (!initialized) {
            templates.container = '<div class="groupByBarContainer"><span class="streak__statementConnectorText">' + BB.Locale.getString("saved_views_group_by_connector") + "</span></div>";
            initialized = true
        }
    }
    BB.Modules.PipelineView.SavedViewsEditArea.GroupByBar = function (options) {
        init();
        var self = this;
        this.options =
            options;
        this.pipeline = options.pipeline;
        this.containerElement = $(templates.container);
        this.trackingContext = options.trackingContext;
        this.trackingContext.widgetContext += "/groupByBar";
        this.columnDropdown = BB.Widgets.ButtonCustomDropdown.create({
            trackingContext: _.clone(this.trackingContext),
            unselectedDisplayText: BB.Locale.getString("filter_choose_column"),
            maxHeight: 300,
            changeFunc: function (column) {},
            comparisonFunction: function (listItemValue, potentialItemValue) {
                if (!listItemValue || !potentialItemValue) return false;
                return listItemValue.columnKey === potentialItemValue.columnKey
            }
        });
        this.containerElement.append(this.columnDropdown.el)
    };
    BB.Modules.PipelineView.SavedViewsEditArea.GroupByBar.create = function (o) {
        var options = {};
        $.extend(options, defaults, o);
        return new BB.Modules.PipelineView.SavedViewsEditArea.GroupByBar(options)
    };
    _.extend(BB.Modules.PipelineView.SavedViewsEditArea.GroupByBar.prototype, {
        updateDisplay: function (groupedByColumn) {
            this.columnDropdown.setMenuList(BB.UI.getPipelineColumnList(this.pipeline, this.pipeline.getGroupableSystemColumns()));
            this.columnDropdown.setSelected({
                columnKey: groupedByColumn
            })
        },
        getStatus: function () {
            return this.columnDropdown.getSelected().value.columnKey
        },
        destroy: function () {}
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var initialized = false;
    var defaults = {};
    var templates = {};

    function init() {
        if (!initialized) {
            templates.container = HTML.get("sortByBarContainer")();
            initialized = true
        }
    }
    BB.Modules.PipelineView.SavedViewsEditArea.SortByBar = function (options) {
        init();
        var self = this;
        this.options = options;
        this.pipeline = options.pipeline;
        this.containerElement = $(templates.container);
        this.connectorsContainerElement =
            this.containerElement.find(".sortByBarConnectors");
        this.statementListContainerElement = this.containerElement.find(".sortByStatementList");
        this.trackingContext = options.trackingContext;
        this.trackingContext.widgetContext += "/sortByBar";
        this.sortStatements = []
    };
    BB.Modules.PipelineView.SavedViewsEditArea.SortByBar.create = function (o) {
        var options = {};
        $.extend(options, defaults, o);
        return new BB.Modules.PipelineView.SavedViewsEditArea.SortByBar(options)
    };
    _.extend(BB.Modules.PipelineView.SavedViewsEditArea.SortByBar.prototype, {
        updateDisplay: function (sortedColumns) {
            this.sortStatements.length = 0;
            this.statementListContainerElement.empty();
            if (sortedColumns.length > 0)
                for (var ii = 0; ii < sortedColumns.length; ii++) this.addSortStatement(sortedColumns[ii]);
            else this.addSortStatement({
                property: "creationTimestamp",
                sort: "ASC"
            });
            this.addConnectors()
        },
        addSortStatement: function (sortedColumn) {
            var self = this;
            var sortStatement = BB.Modules.PipelineView.SavedViewsEditArea.SortByStatement.create({
                pipeline: this.pipeline,
                trackingContext: _.clone(this.trackingContext),
                removeCallback: function () {
                    self.sortStatements.removeVal(sortStatement);
                    if (self.sortStatements.length === 0) self.updateDisplay([]);
                    else self.addConnectors()
                }
            });
            sortStatement.updateDisplay(sortedColumn);
            this.sortStatements.push(sortStatement);
            this.statementListContainerElement.append(sortStatement.containerElement)
        },
        addConnectors: function () {
            this.connectorsContainerElement.empty();
            var vertTop = 0,
                vertBottom = 0;
            var numGroups = this.sortStatements.length;
            for (var ii = 0; ii < numGroups; ii++) {
                var hrule = $('<div class="streak__connectorHorizontal"></div>');
                var currentTop = this.sortStatements[ii].containerElement.position().top;
                currentTop += this.sortStatements[ii].containerElement.outerHeight() / 2;
                hrule.css("top", currentTop + "px");
                this.connectorsContainerElement.append(hrule);
                if (ii === 0) vertTop = currentTop;
                else if (ii === numGroups - 1) vertBottom = currentTop;
                this.sortStatements[ii].setIndex(ii)
            }
            var verticalBar = $('<div class="streak__connectorVertical"></div>');
            verticalBar.css("top", vertTop + "px");
            this.connectorsContainerElement.append(verticalBar);
            this.addPlusButton()
        },
        addPlusButton: function () {
            var self = this;
            var addButton = BB.Widgets.Button.create({
                iconClassName: "bbPlus",
                onFunc: function () {
                    self.addSortStatement({
                        property: "creationTimestamp",
                        sort: "ASC"
                    });
                    self.addConnectors()
                }
            });
            addButton.el.css({
                bottom: "0",
                position: "absolute",
                marginRight: "0"
            });
            this.connectorsContainerElement.append(addButton.el)
        },
        getStatus: function () {
            return _(this.sortStatements).chain().map(function (statement) {
                return statement.getStatus()
            }).filter(function (sortObject) {
                return _.isReal(sortObject.columnKey) &&
                    _.isReal(sortObject.sort)
            }).value()
        },
        destroy: function () {}
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var initialized = false;
    var defaults = {};
    var templates = {};

    function init() {
        if (!initialized) {
            templates.container = '<div class="savedViewsSortByStatement"><span class="streak__removeElement"></span></div>';
            initialized = true
        }
    }
    BB.Modules.PipelineView.SavedViewsEditArea.SortByStatement = function (options) {
        init();
        var self = this;
        this.options = options;
        this.pipeline = options.pipeline;
        this.containerElement =
            $(templates.container);
        this.trackingContext = options.trackingContext;
        this.trackingContext.widgetContext += "/sortByStatement";
        this.columnDropdown = BB.Widgets.ButtonCustomDropdown.create({
            trackingContext: _.clone(this.trackingContext),
            unselectedDisplayText: BB.Locale.getString("filter_choose_column"),
            maxHeight: 300,
            changeFunc: function (listItem) {
                self.directionDropdown.setMenuList(self.getSortDirectionList(listItem.value));
                self.directionDropdown.setSelected("ASC")
            },
            comparisonFunction: function (listItemValue,
                potentialItemValue) {
                return listItemValue.columnKey === potentialItemValue.columnKey
            }
        });
        this.directionDropdown = BB.Widgets.ButtonCustomDropdown.create({
            trackingContext: _.clone(this.trackingContext),
            changeFunc: function (sortDirection) {}
        });
        this.containerElement.find(".streak__removeElement").on("click", function (e) {
            self.containerElement.remove();
            options.removeCallback()
        });
        this.connectorText = $('<span class="streak__statementConnectorText"></span>');
        this.containerElement.prepend(this.directionDropdown.el);
        this.containerElement.prepend(this.columnDropdown.el);
        this.containerElement.prepend(this.connectorText)
    };
    BB.Modules.PipelineView.SavedViewsEditArea.SortByStatement.create = function (o) {
        var options = {};
        $.extend(options, defaults, o);
        return new BB.Modules.PipelineView.SavedViewsEditArea.SortByStatement(options)
    };
    _.extend(BB.Modules.PipelineView.SavedViewsEditArea.SortByStatement.prototype, {
        updateDisplay: function (column) {
            this.columnDropdown.setMenuList(BB.UI.getPipelineColumnList(this.pipeline, this.pipeline.getAllSystemColumns()));
            this.columnDropdown.setSelected(column);
            this.directionDropdown.setMenuList(this.getSortDirectionList(column));
            this.directionDropdown.setSelected(column.sort)
        },
        getSortDirectionList: function (column) {
            var columnType;
            if (column.property) columnType = BB.Models.Pipeline.getPropertySortType(column.property);
            else if (column.fieldKey) columnType = this.pipeline.getField(column.fieldKey).get("type");
            var sortTextKey = "sort_";
            switch (columnType) {
            case "NUMBER":
                sortTextKey = "sort_number_";
                break;
            case "DATE":
                sortTextKey = "sort_date_";
                break
            }
            _sortDirections[0].name = BB.Locale.getString(sortTextKey + "asc");
            _sortDirections[1].name = BB.Locale.getString(sortTextKey + "desc");
            return _sortDirections
        },
        setIndex: function (index) {
            if (index === 0) this.connectorText[0].innerHTML = BB.Locale.getString("saved_views_sortby_first_connector");
            else this.connectorText[0].innerHTML = BB.Locale.getString("saved_views_sortby_connector")
        },
        getStatus: function () {
            return {
                columnKey: this.columnDropdown.getSelected().value.columnKey,
                sort: this.directionDropdown.getSelected().value
            }
        }
    });
    var _sortDirections = [{
        name: null,
        value: "ASC"
    }, {
        name: null,
        value: "DESC"
    }]
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Eventer = Streak.Eventer,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox,
        FilterSettings = BB.Modules.PipelineView.ViewSettings.FilterSettings,
        SortSettings = BB.Modules.PipelineView.ViewSettings.SortSettings,
        GroupBySettings = BB.Modules.PipelineView.ViewSettings.GroupSettings.GroupBySettings;
    var defaults = {
        pipeline: null
    };
    var _lastPipelineViewKey = {};
    var currentSavedViewController;
    SavedViewsController = function (options) {
        Eventer.call(this);
        this.pipeline = options.pipeline;
        this.uiSettingsTriggerEnabled = true;
        this.viewSettings = {
            filterSettings: null,
            sortSettings: null,
            groupBySettings: null
        };
        this.activeView = null;
        this.setupBindings();
        this.parseView()
    };
    SavedViewsController.create = function (options) {
        var o = _.extend({}, defaults, options);
        return new SavedViewsController(o)
    };
    SavedViewsController.prototype = Streak.Eventer.prototype;
    _.extend(SavedViewsController.prototype, {
        setupBindings: function () {
            var self = this;
            this.pipeline.bind("set", "uiSettings", function () {
                    if (self.uiSettingsTriggerEnabled) self.trigger("transformSettingsChanged")
                },
                "savedViewsController");
            this.pipeline.bind("savedViewDeleted", null, function (model, property, viewKey) {
                if (self.activeView && self.activeView.viewKey === viewKey) self.setToDefaultView();
                self.trigger("changed")
            }, "savedViewsController")
        },
        disableTriggerOnUISettingsSet: function () {
            this.uiSettingsTriggerEnabled = false
        },
        enableTriggerOnUISettingsSet: function () {
            this.uiSettingsTriggerEnabled = true
        },
        isASavedViewActive: function () {
            return _.isReal(this.activeView)
        },
        getCurrentSettingsState: function () {
            var ii = 0,
                jj = 0;
            var filterSettings =
                this.viewSettings.filterSettings;
            var sortSettings = this.viewSettings.sortSettings;
            var groupBySettings = this.viewSettings.groupBySettings;
            if (this.activeView && this.activeView.viewKey) this.activeView = this.pipeline.getSavedView(this.activeView.viewKey);
            var settingState = {
                uniqueFilteredColumns: 0,
                numberOfFilterGroups: 0,
                numberOfFilterStatements: 0,
                listOfSortedColumns: [],
                groupBySetting: null,
                isASavedViewActive: this.isASavedViewActive(),
                activeView: this.activeView,
                isInHeadsUp: false,
                isDefaultSettingsActive: true
            };
            var foundColumns = [];
            for (ii = 1; ii < filterSettings.filters.length; ii++) {
                settingState.numberOfFilterGroups += 1;
                var filterArray = filterSettings.filters[ii];
                for (jj = 1; jj < filterArray.length; jj++)
                    if (_.isReal(filterArray[jj].comparisonOperation)) {
                        settingState.numberOfFilterStatements += 1;
                        if (_.isReal(filterArray[jj].property)) foundColumns.push(filterArray[jj].property);
                        else if (_.isReal(filterArray[jj].fieldKey)) foundColumns.push(filterArray[jj].fieldKey)
                    }
            }
            settingState.uniqueFilteredColumns = _.unique(foundColumns).length;
            settingState.filterSettings = filterSettings;
            settingState.groupBySetting = groupBySettings.data;
            settingState.listOfSortedColumns = sortSettings.data;
            if (settingState.isASavedViewActive) settingState.isInHeadsUp = this._isSavedViewInHeadsUp(settingState.activeView.viewKey);
            settingState.isDefaultSettingsActive = settingState.uniqueFilteredColumns === 0 && settingState.listOfSortedColumns.length === 0 && settingState.groupBySetting === "property|stageKey" && settingState.isASavedViewActive === false;
            return settingState
        },
        setToDefaultView: function () {
            this.viewSettings.filterSettings =
                FilterSettings.create(this.pipeline);
            this.viewSettings.sortSettings = SortSettings.create(this.pipeline);
            this.viewSettings.groupBySettings = GroupBySettings.create(this.pipeline);
            this.activeView = null;
            this.trigger("transformSettingsChanged")
        },
        addCurrentSettingsToSavedViews: function (viewName) {
            var savedView = this.pipeline.addSavedView(viewName, this.viewSettings);
            this.activeView = savedView;
            this.trigger("transformSettingsChanged")
        },
        saveSettingsAsView: function (viewName, settings) {
            var savedView = this.pipeline.addSavedView(viewName,
                settings);
            this.activeView = savedView;
            this.trigger("transformSettingsChanged")
        },
        getCreatedSavedViews: function () {
            return this.pipeline.getSavedViews()
        },
        getSystemSavedViews: function () {},
        activateSavedView: function (viewKey) {
            var savedView = this.pipeline.getSavedView(viewKey);
            if (_.isReal(savedView)) {
                this.viewSettings.filterSettings = savedView.settings.filterSettings;
                this.viewSettings.groupBySettings = savedView.settings.groupBySettings;
                this.viewSettings.sortSettings = savedView.settings.sortSettings;
                this.activeView =
                    savedView;
                this.trigger("transformSettingsChanged");
                _lastPipelineViewKey[this.pipeline.key()] = this.activeView.viewKey
            } else {
                this.acitveView = null;
                _lastPipelineViewKey[this.pipeline.key()] = null
            }
        },
        updateSavedView: function (viewObject) {
            this.pipeline.updateSavedView(viewObject);
            if (this.activeView && this.activeView.viewKey === viewObject.viewKey) this.activeView = viewObject;
            this.trigger("changed")
        },
        updateActiveViewWithNewSettings: function (newSettings) {
            if (this.activeView) {
                this.activeView.settings = newSettings;
                this.pipeline.updateSavedView(this.activeView);
                this.viewSettings.filterSettings = this.activeView.settings.filterSettings;
                this.viewSettings.groupBySettings = this.activeView.settings.groupBySettings;
                this.viewSettings.sortSettings = this.activeView.settings.sortSettings;
                this.trigger("transformSettingsChanged")
            }
        },
        deleteSavedView: function (savedViewKey) {
            var savedViews = this.getCreatedSavedViews();
            var newSavedViews = _.filter(savedViews, function (savedView) {
                return savedView.viewKey !== savedViewKey
            });
            this.removeFromHeadsUp(savedViewKey);
            if (_.isReal(this.activeView))
                if (this.activeView.viewKey ===
                    savedViewKey) this.setToDefaultView();
            this._save(newSavedViews);
            this.trigger("changed");
            this.pipeline.trigger("savedViewsChanged")
        },
        applyViewSettings: function (settings) {
            this.viewSettings.filterSettings = settings.filterSettings;
            this.viewSettings.groupBySettings = settings.groupBySettings;
            this.viewSettings.sortSettings = settings.sortSettings;
            this.trigger("changed");
            this.trigger("transformSettingsChanged")
        },
        setFilterSettings: function (settings) {
            this.viewSettings.filterSettings = settings;
            this.trigger("transformSettingsChanged")
        },
        getFilterSettings: function () {
            return this.viewSettings.filterSettings
        },
        setSortSettings: function (settings) {
            this.viewSettings.sortSettings = settings
        },
        getSortSettings: function () {
            return this.viewSettings.sortSettings
        },
        setGroupBySettings: function (settings) {
            this.viewSettings.groupBySettings = settings;
            this.trigger("transformSettingsChanged")
        },
        getGroupBySettings: function () {
            return this.viewSettings.groupBySettings
        },
        destroy: function () {
            this.pipeline.unbindAll("savedViewsController")
        },
        parseView: function () {
            if (Gmail.hash.query)
                if (Gmail.hash.query ===
                    "clear") this.setToDefaultView();
                else this.activateSavedView(Gmail.hash.query);
                else if (_lastPipelineViewKey[this.pipeline.key()]) this.activateSavedView(_lastPipelineViewKey[this.pipeline.key()]);
            else this.setToDefaultView()
        },
        removeFromHeadsUp: function (viewKey) {
            if (this._isSavedViewInHeadsUp(viewKey)) BB.Modules.HeadsUp.removeSection(viewKey)
        },
        _isSavedViewInHeadsUp: function (viewKey) {
            return SavedViewsController.externalIsInHeadsUp(viewKey)
        },
        _save: function (savedViews) {
            Gmail.showNotice(BB.Locale.getString("saving"));
            this.pipeline.setUISettings("savedViews/list", savedViews, function () {
                Gmail.showNotice(BB.Locale.getString("saved"), 5E3)
            })
        }
    });
    SavedViewsController.externalIsInHeadsUp = function (viewKey) {
        var headsUpSections = BB.getUser().getHeadsUpSections();
        for (var ii = 0; ii < headsUpSections.length; ii++)
            if (headsUpSections[ii].viewKey === viewKey) return true;
        return false
    };
    SavedViewsController.externalDeleteSavedView = function (pipeline, savedView) {
        var savedViews = pipeline.getSavedViews();
        var savedViewKey = savedView.viewKey;
        var newSavedViews =
            _.filter(savedViews, function (savedView) {
                return savedView.viewKey !== savedViewKey
            });
        BB.Modules.HeadsUp.removeSection(savedViewKey);
        pipeline.setUISettings("savedViews/list", newSavedViews);
        pipeline.trigger("savedViewDeleted", null, savedViewKey);
        pipeline.trigger("savedViewsChanged")
    };
    BB.Modules.PipelineView.SavedViewsController = SavedViewsController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Date = Streak.Date,
        BB = Streak.BentoBox;
    var defaults = {
        savedViewsController: null
    };
    var SavedViewsButton = function (options) {
        this.savedViewsController = options.savedViewsController;
        this.trackingContext = options.trackingContext;
        this.trackingContext.widgetContext += "/savedViewsButton";
        this.createButtons();
        this.updateMenu();
        this.savedViewsController.bind("changed", this.updateMenu.bind(this));
        this.savedViewsController.bind("transformSettingsChanged",
            this.updateMenu.bind(this))
    };
    SavedViewsButton.create = function (o) {
        var options = {};
        $.extend(options, this.defaults, o);
        return new SavedViewsButton(options)
    };
    _.extend(SavedViewsButton.prototype, {
        createButtons: function () {
            var self = this;
            this.el = $('<div class="J-J5-Ji"></div>');
            this.menu = BB.Widgets.Menu.create();
            this.buttonMenu = BB.Widgets.ButtonMenu.create({
                buttonInner: BB.Locale.getString("status_view_button_text"),
                menu: this.menu.el
            });
            this.el.append(this.buttonMenu.el);
            this.createButton = BB.Widgets.Button.create({
                name: BB.Locale.getString("saved_view_make_new"),
                iconClassName: "streak__savedViewsIcon",
                onFunc: function () {
                    self.track("makeNewSavedView", {
                        source: "button"
                    });
                    self.savedViewsController.setToDefaultView();
                    self.savedViewsController.trigger("openSavedViewsEditArea")
                }
            });
            this.el.append(this.createButton.el)
        },
        updateMenu: function () {
            var self = this;
            this.menu.empty();
            var currentState = self.savedViewsController.getCurrentSettingsState();
            this.menu.addCheckItem(BB.Locale.getString("saved_view_clear"), function () {
                self.savedViewsController.setToDefaultView()
            }, currentState.isDefaultSettingsActive);
            var savedViews = _.sortBy(this.savedViewsController.getCreatedSavedViews(), "name");
            if (savedViews.length > 0) {
                this.createButton.el.hide();
                this.buttonMenu.el.show();
                this.menu.addSeparator();
                _.each(savedViews, function (savedView) {
                    self.menu.addCheckItem(savedView.name, function () {
                        self.track("activateSavedView");
                        self.savedViewsController.activateSavedView(savedView.viewKey)
                    }, currentState.isASavedViewActive && currentState.activeView.viewKey === savedView.viewKey)
                });
                this.menu.addSeparator();
                this.menu.addItem(BB.Locale.getString("saved_view_make_new"),
                    function () {
                        self.track("makeNewSavedView", {
                            source: "menu"
                        });
                        self.savedViewsController.setToDefaultView();
                        self.savedViewsController.trigger("openSavedViewsEditArea")
                    })
            } else {
                this.createButton.el.show();
                this.buttonMenu.el.hide()
            }
        },
        track: function (event, props) {
            BB.Tracker.trackStreakActive(this.trackingContext, props, {
                eventName: event
            })
        }
    });
    BB.Modules.PipelineView.SavedViewsButton = SavedViewsButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var initialized = false;
    var templates = {};
    var defaults = {
        pipeline: null,
        savedViewsController: null
    };

    function init() {
        if (!initialized) {
            templates.container = HTML.get("statusBarContainer")();
            initialized = true
        }
    }
    var SavedViewsStatusBar = function (options) {
        init();
        var self = this;
        this.savedViewsController = options.savedViewsController;
        this.pipeline = options.pipeline;
        this.trackingContext = options.trackingContext;
        this.trackingContext.widgetContext += "/savedViewsStatusBar";
        this.containerElement = $(templates.container);
        this.messageElement = this.containerElement.find(".streak__statusBarMessage");
        this.linksElement = this.containerElement.find(".streak__statusBarLinks");
        this.viewLinks = this.containerElement.find(".streak__statusBarViewLinks");
        this.nonViewLinks = this.containerElement.find(".streak__statusBarNonViewLinks");
        this.toggleChevron = this.containerElement.find(".toggleChevron");
        this.savedViewsEditArea = options.savedViewsEditArea;
        this.unbinders = [];
        this.initFunctionality()
    };
    SavedViewsStatusBar.create = function (o) {
        var options = {};
        $.extend(options, defaults, o);
        return new SavedViewsStatusBar(options)
    };
    _.extend(SavedViewsStatusBar.prototype, {
        updateDisplay: function () {
            var currentState = this.savedViewsController.getCurrentSettingsState();
            var shouldShowBar = !currentState.isDefaultSettingsActive;
            if (shouldShowBar) {
                this.containerElement.show();
                if (currentState.isASavedViewActive) this.renderActiveViewMessage(currentState);
                else this.renderSettingsMessage(currentState);
                this.updateOpenStatus()
            } else this.containerElement.hide();
            this.currentState = currentState
        },
        initFunctionality: function () {
            var self = this;
            this.containerElement.on("click", function (e) {
                self.track("toggleSavedViewsEditArea");
                self.savedViewsController.trigger("toggleSavedViewsEditArea")
            });
            this.containerElement.find(".streak__statusBarClearLink").on("click", function (e) {
                self.savedViewsController.setToDefaultView();
                self.track("statusBarClear");
                self.savedViewsController.trigger("closeSavedViewsEditArea");
                e.stopPropagation()
            });
            this.containerElement.find(".streak__statusBarAdvancedFilters").on("click", function (e) {
                self.savedViewsController.trigger("toggleSavedViewsEditArea");
                self.track("toggleFiltersArea");
                e.stopPropagation()
            });
            this.containerElement.find(".streak__statusBarMakeView").on("click", function (e) {
                self.track("createSavedViewAttempt");
                BB.Widgets.Modal.textboxModal({
                    title: BB.Locale.getString("saved_view_create_modal_title"),
                    placeholderText: BB.Locale.getString("Set the name of the new view"),
                    callback: function (name) {
                        self.track("createSavedViewSuccess");
                        self.savedViewsController.addCurrentSettingsToSavedViews(name)
                    }
                });
                e.stopPropagation()
            });
            this.inboxCheckbox = Gmail.widgets.getCheckbox(BB.Locale.getString("saved_view_add_to_inbox"));
            this.viewLinks.append(this.inboxCheckbox);
            this.inboxCheckbox.on("change", function (e) {
                if (self.inboxCheckbox.isChecked()) {
                    self.track("addSavedViewToInbox");
                    BB.Modules.HeadsUp.addSection(self.currentState.activeView.viewKey, self.pipeline.key())
                } else {
                    self.track("removeSavedViewFromInbox");
                    self.savedViewsController.removeFromHeadsUp(self.currentState.activeView.viewKey)
                }
            });
            this.unbinders.push(this.savedViewsController.bind("transformSettingsChanged", this.updateDisplay.bind(this)));
            this.unbinders.push(this.savedViewsController.bind("changed", this.updateDisplay.bind(this)));
            this.unbinders.push(this.savedViewsController.bind("savedViewsEditAreaChanged", this.updateOpenStatus.bind(this)));
            this.unbinders.push(this.pipeline.bind("savedViewsChanged", null, this.updateDisplay.bind(this)))
        },
        renderActiveViewMessage: function (currentState) {
            this.viewLinks.show();
            this.nonViewLinks.hide();
            this.inboxCheckbox.setChecked(currentState.isInHeadsUp);
            this.messageElement.empty();
            this.messageElement[0].innerHTML = this.getSettingsMessage(currentState);
            this.containerElement.addClass("streak__savedViewActive")
        },
        renderSettingsMessage: function (currentState) {
            this.viewLinks.hide();
            this.nonViewLinks.show();
            this.messageElement.empty();
            this.messageElement[0].innerHTML = this.getSettingsMessage(currentState);
            this.containerElement.removeClass("streak__savedViewActive")
        },
        updateOpenStatus: function () {
            if (this.savedViewsEditArea.isAreaOpen()) this.toggleChevron.removeClass("downChevron");
            else this.toggleChevron.addClass("downChevron")
        },
        getSettingsMessage: function (currentState) {
            var viewName = BB.Locale.getString("unsaved_view");
            if (currentState.activeView) viewName = currentState.activeView.name;
            var message = BB.Locale.getString("saved_view_active", {
                savedView: viewName
            });
            var messageParts = [];
            if (currentState.uniqueFilteredColumns > 0) messageParts.push(BB.Locale.getString("status_view_filter_message", {
                number: currentState.uniqueFilteredColumns,
                pluralize: [currentState.uniqueFilteredColumns]
            }));
            if (currentState.listOfSortedColumns.length >
                0) messageParts.push(BB.Locale.getString("status_view_sort_message", {
                number: currentState.listOfSortedColumns.length,
                pluralize: [currentState.listOfSortedColumns.length]
            }));
            if (_.isReal(currentState.groupBySetting)) {
                if (currentState.groupBySetting.indexOf("field|") === -1 && currentState.groupBySetting !== "property|stageKey") messageParts.push(BB.Locale.getString("status_view_group_message", {
                    column: this.pipeline.getSystemColumn(currentState.groupBySetting.split("|")[1]).title
                }));
                if (currentState.groupBySetting.indexOf("field|") > -1) messageParts.push(BB.Locale.getString("status_view_group_message", {
                    column: this.pipeline.getField(currentState.groupBySetting.split("|")[1]).displayName()
                }))
            }
            return message + messageParts.join(", ")
        },
        track: function (event, properties) {
            BB.Tracker.trackStreakActive(this.trackingContext, properties, {
                eventName: event
            })
        },
        destroy: function () {
            for (var ii = 0; ii < this.unbinders.length; ii++) this.unbinders[ii]()
        }
    });
    BB.Modules.PipelineView.SavedViewsStatusBar = SavedViewsStatusBar
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var ShareButton = {
        defaults: {
            pipeline: null,
            color: "blue",
            isButton: true,
            isDark: false,
            iconAfter: false
        },
        init: function (cb) {
            var self = this;
            this.currentOptions = null;
            this.pipeline = null;
            this.acl = null;
            this.updateButtonStatus = null;
            this.isPrivate = true;
            this.orgWide = false;
            this.templates = {};
            this.templates.button = HTML.get("shareButtonButton");
            this.templates.modal = HTML.get("shareButtonModal");
            this.templates.item = HTML.get("shareButtonItem");
            this.initStaticModal();
            if (cb) cb()
        },
        initStaticModal: function () {
            var self = this;
            this.elements = {};
            this.elements.innerModal = $(this.templates.modal());
            this.elements.innerModal.find(".private").click(function (e) {
                self.elements.innerModal.find(".private").addClass("active");
                self.elements.innerModal.find(".shared").removeClass("active");
                self.elements.innerModal.find(".sharingOptionsWrapper").hide();
                self.isPrivate = true;
                e.preventDefault()
            });
            self.elements.innerModal.find(".shared").click(function (e) {
                self.elements.innerModal.find(".shared").addClass("active");
                self.elements.innerModal.find(".private").removeClass("active");
                self.elements.innerModal.find(".sharingOptionsWrapper").show();
                self.isPrivate = false;
                e.preventDefault()
            });
            this.elements.personPicker = BB.Widgets.PersonPicker.create({
                selectFunc: function (person) {
                    self.acl.push(person);
                    var row = self.renderACLRow(person);
                    row.scrollintoview({
                        duration: 0
                    });
                    self.elements.personPicker.setExcluded(self.acl.concat(self.pipeline.get("owner")))
                },
                allowName: false
            });
            this.elements.personPicker.el.addClass("bb_boxflex1 bb_vbox");
            this.elements.innerModal.find(".sharingEnter").append(this.elements.personPicker.el);
            this.elements.addButton = BB.Widgets.Button.create({
                color: "red",
                name: BB.Locale.getString("add"),
                onFunc: function () {
                    self.elements.personPicker.el.find("input").trigger("bbSelect")
                }
            });
            this.elements.innerModal.find(".sharingEnter").append(this.elements.addButton.el);
            this.elements.shareModal = BB.Widgets.Modal.create({
                title: BB.Locale.getString("share_settings"),
                confirmText: BB.Locale.getString("save"),
                inner: this.elements.innerModal,
                confirmFunc: this.saveSharingSettings.bind(this),
                width: "500px"
            })
        },
        updateOptions: function (options, updateButtonStatus) {
            this.currentOptions = options;
            this.pipeline = options.pipeline;
            this.updateButtonStatus = updateButtonStatus;
            this.acl = _.clone(this.pipeline.get("aclEntries"));
            this.orgWide = this.pipeline.get("orgWide");
            this.isPrivate = !this.orgWide && (!this.acl || _.filter(this.acl, function (person) {
                return !person.isOwner
            }).length === 0);
            this.elements.personPicker.setExcluded(this.acl.concat(this.pipeline.get("owner")))
        },
        saveSharingSettings: function () {
            var self = this;
            this.pipeline.startTransaction();
            if (this.isPrivate) {
                this.pipeline.set("orgWide", false);
                this.pipeline.set("aclEntries", [])
            } else {
                this.pipeline.set("orgWide", this.elements.innerModal.find(".shareOrgCheck")[0].checked);
                this.pipeline.set("aclEntries", this.acl)
            }
            this.pipeline.endTransaction();
            Gmail.showNotice(BB.Locale.getString("saving"));
            this.pipeline.save(function () {
                Gmail.showNotice(BB.Locale.getString("saved"), 5E3);
                self.updateStatus()
            })
        },
        renderACLRow: function (person) {
            var self =
                this;
            var row = $(this.templates.item({
                name: person.fullName || person.email,
                email: person.fullName === person.email ? "" : person.email,
                status: BB.Locale.getString(person.isOwner ? "share_owner" : "share_edit")
            }));
            if (person.imageUrl) row.find(".image").append('<img src="' + person.imageUrl + '" />');
            else row.find(".image").append('<div class="noUserImageWrapper"><div class="noUserImage"></div></div>'); if (person.isOwner) row.find(".remove").empty();
            else row.find(".remove").click(function (e) {
                row.remove();
                self.acl.removeVal(person);
                self.elements.personPicker.setExcluded(self.acl.concat(self.pipeline.get("owner")));
                e.preventDefault()
            });
            this.elements.innerModal.find(".acl").append(row);
            return row
        },
        updateStatus: function () {
            var self = this;
            this.elements.innerModal.find(".aclRealRow").remove();
            this.renderACLRow(this.pipeline.get("owner"));
            _.each(this.acl, function (person) {
                self.renderACLRow(person)
            });
            if (this.isPrivate) this.elements.innerModal.find(".private").click();
            else {
                this.elements.innerModal.find(".shared").click();
                if (this.orgWide) this.elements.innerModal.find(".shareOrgCheck")[0].checked =
                    true;
                else this.elements.innerModal.find(".shareOrgCheck")[0].checked = false
            }
            self.updateButtonStatus()
        },
        showModal: function () {
            this.elements.shareModal.show();
            var domain = BB.userEmail.split("@")[1];
            if (BB.Constants.EMAIL_BLACK_LIST.indexOf(domain) > -1 || this.pipeline.get("orgKey") !== BB.getUser().get("orgKey")) this.elements.innerModal.find(".shareOrg").hide();
            else {
                this.elements.innerModal.find(".shareOrg").show();
                this.elements.innerModal.find(".orgName").text(domain.capitalize())
            }
            this.updateStatus();
            var ok =
                this.elements.shareModal.getOkButton().el;
            this.elements.personPicker.setTab(ok, ok);
            ok.easyTab({
                next: this.elements.personPicker.el,
                prev: this.elements.personPicker.el
            })
        },
        create: function (o) {
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        }
    };
    ShareButton.impl = function (o) {
        var options = o;
        var pipeline = options.pipeline;
        var acl = [];
        var updateStatus = function () {
            var acl = _.clone(pipeline.get("aclEntries"));
            var orgWide = pipeline.get("orgWide");
            var isPrivate = !orgWide && (!acl || _.filter(acl,
                function (person) {
                    return !person.isOwner
                }).length === 0);
            b.el.find(".bbSharedIcon").hide();
            if (isPrivate) b.el.find(".bbSharedPrivate").show();
            else if (orgWide) b.el.find(".bbSharedGroup").show();
            else b.el.find(".bbSharedPeople").show()
        };
        var buttonOptions = {
            isToggle: false,
            onFunc: function () {
                ShareButton.updateOptions(options, updateStatus);
                ShareButton.showModal()
            }
        };
        if (options.isButton) {
            buttonOptions.name = ShareButton.templates.button();
            buttonOptions.color = options.color
        } else {
            var buttonDiv = document.createElement("div");
            buttonDiv.innerHTML = ShareButton.templates.button();
            if (options.isDark) buttonDiv.setAttribute("class", "dark");
            buttonOptions.customButton = buttonDiv
        }
        var b = BB.Widgets.Button.create(buttonOptions);
        if (options.iconAfter) {
            var span = b.el.find("span").detach();
            b.el.prepend(span)
        }
        b.setPipeline = function (newPipeline) {
            options.pipeline = newPipeline;
            pipeline = newPipeline;
            updateStatus()
        };
        if (pipeline) {
            pipeline.bind("set", "orgWide", function () {
                updateStatus()
            });
            pipeline.bind("set", "aclEntries", function () {
                updateStatus()
            });
            updateStatus()
        }
        b.getElement().addClass("streak__shareButton");
        return b
    };
    Streak.DependencyManager.addFunction({
        functionKey: "pipelineView.shareButtonInitialized",
        functionToCall: ShareButton.init,
        functionContext: ShareButton,
        dependentFunctionKeys: ["htmlLoaded", "pipelineViewInitialized"]
    });
    BB.Modules.PipelineView.ShareButton = ShareButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var ShowHideFeedButton = {
        defaults: {
            pipeline: null
        },
        create: function (o) {
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        }
    };
    ShowHideFeedButton.impl = function (o) {
        var options = o,
            pipeline = options.pipeline,
            css = options.css,
            feed = options.feed,
            feedSetting = BB.UserSettings.getSetting(pipeline.key() + "/showFeed");
        var hideFeedClass = "apJ",
            showFeedClass = "apK",
            displayFeed = function () {
                button.innerEl.removeClass(showFeedClass).addClass(hideFeedClass);
                var container = BB.UI.getCanvas().find(".pv_container");
                container = container.filter(":FastVisible");
                container.find(".feed_sidebar").show();
                feed.refreshData()
            }, hideFeed = function () {
                button.innerEl.removeClass(hideFeedClass).addClass(showFeedClass);
                var container = BB.UI.getCanvas().find(".pv_container");
                container = container.filter(":FastVisible");
                container.find(".feed_sidebar").hide()
            }, toggleAndSaveFeedSetting = function () {
                if (!dontSaveFeed) {
                    feedSetting = !feedSetting;
                    BB.UserSettings.setSetting(pipeline.key() + "/showFeed",
                        feedSetting);
                    BB.UserSettings.save()
                }
            }, button = BB.Widgets.Button.create({
                hasButtonToRight: true,
                isToggle: true,
                enableDepressedState: false,
                isOn: !feedSetting,
                name: "",
                onFunc: function () {
                    displayFeed();
                    toggleAndSaveFeedSetting()
                },
                offFunc: function () {
                    hideFeed();
                    toggleAndSaveFeedSetting()
                },
                trackingContext: options.trackingContext
            });
        button.el.addClass("apF showHideFeedButton");
        if (css) button.el.css(css);
        button.innerEl.addClass("apH T-I-J3 J-J5-Ji");
        button.innerEl.after(BB.Locale.getString("newsfeed"));
        var dontSaveFeed =
            true;
        setTimeout(function () {
            if (typeof feedSetting === "undefined" || feedSetting === "") feedSetting = true;
            if (feedSetting) button.on();
            else button.off();
            dontSaveFeed = false
        }, 1);
        return button
    };
    BB.Modules.PipelineView.ShowHideFeedButton = ShowHideFeedButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var ShowHideGroupbarButton = {
        defaults: {
            pipeline: null
        },
        create: function (o) {
            var options = {};
            $.extend(options, this.defaults, o);
            return new this.impl(options)
        }
    };
    ShowHideGroupbarButton.impl = function (o) {
        var options = o,
            pipeline = options.pipeline,
            displaySetting = BB.UserSettings.getSetting(pipeline.key() + "/showGroupbar");
        options.trackingContext.widgetContext += "/showHideGroupbarButton";
        var hideBarClass = "apJ",
            showBarClass =
                "apI",
            show = function () {
                innerImage.removeClass(showBarClass).addClass(hideBarClass);
                var container = BB.UI.getCanvas().find(".pv_container");
                container = container.filter(":FastVisible");
                container.find(".groups").show()
            }, hide = function () {
                innerImage.removeClass(hideBarClass).addClass(showBarClass);
                var container = BB.UI.getCanvas().find(".pv_container");
                container = container.filter(":FastVisible");
                container.find(".groups").hide()
            }, toggleAndSaveSetting = function () {
                if (!dontSave) {
                    displaySetting = !displaySetting;
                    BB.UserSettings.setSetting(pipeline.key() +
                        "/showGroupbar", displaySetting);
                    BB.UserSettings.save()
                }
            }, button = BB.Widgets.Button.create({
                hasButtonToRight: true,
                isToggle: true,
                enableDepressedState: false,
                isOn: !displaySetting,
                tooltip: BB.Locale.getString("groupbar"),
                onFunc: function () {
                    show();
                    toggleAndSaveSetting()
                },
                offFunc: function () {
                    hide();
                    toggleAndSaveSetting()
                },
                trackingContext: options.trackingContext
            });
        button.el.addClass("apF showHideGroupbarButton");
        var outerImage = $(document.createElement("div"));
        var innerImage = $(document.createElement("div"));
        outerImage.addClass("rotate180");
        innerImage.addClass("apH T-I-J3 J-J5-Ji");
        outerImage.append(innerImage);
        button.el.prepend(outerImage);
        var dontSave = true;
        setTimeout(function () {
            if (displaySetting !== false) displaySetting = true;
            if (displaySetting) button.on();
            else button.off();
            dontSave = false
        }, 1);
        return button
    };
    BB.Modules.PipelineView.ShowHideGroupbarButton = ShowHideGroupbarButton
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var Promote = {
        boxesMin: 10,
        init: function (cb) {
            if (this.shouldRender()) this.render();
            if (cb) cb()
        },
        shouldRender: function () {
            if (BB.UserSettings.getSetting("promote/hasShown")) return false;
            return true
        },
        render: function (force) {
            var modal = $(HTML.get("promoteModal")());
            var numBoxes = _.filter(BB.Data.getAllBoxes(), function (item) {
                return item.get("creatorKey") === BB.getUser().key()
            }).length;
            if (numBoxes < this.boxesMin && !force) return;
            var numPipes = _.filter(BB.Data.getAllPipelines(), function (item) {
                return item.get("creatorKey") === BB.getUser().key()
            }).length;
            var numSnips = _.filter(BB.Data.getAllSnippets(), function (item) {
                return item.get("userKey") === BB.getUser().key()
            }).length;
            var numSLs = BB.Data.getAllSendLaters().length;
            modal.find(".number.box strong").html(numBoxes);
            this.renderStat(modal, numBoxes, "box", "es");
            if (numSnips + numSLs + numPipes === 0);
            else if (numSnips + numSLs === 0 && numBoxes > 0) modal.find(".number.box").after(" " +
                BB.Locale.getString("and") + " ");
            else if (numBoxes > 0) modal.find(".number.box").after(", ");
            this.renderStat(modal, numPipes, "pipeline");
            if (numSnips > 0 && numSLs > 0) modal.find(".number.pipeline").after(", ");
            else if (numSnips > 0 || numSLs > 0) modal.find(".number.pipeline").after(" " + BB.Locale.getString("and") + " ");
            if (numSnips === 0) modal.find(".number.snippet").hide();
            else {
                this.renderStat(modal, numSnips, "snippet");
                if (numSLs > 0) modal.find(".number.snippet").after(" " + BB.Locale.getString("and") + " ")
            }
            this.renderStat(modal,
                numSLs, "sendlater");
            var promoteModal = BB.Widgets.Modal.create({
                title: "",
                confirmText: force ? BB.Locale.getString("modal_done") : BB.Locale.getString("dismiss_forever"),
                inner: modal,
                confirmFunc: function () {
                    BB.UserSettings.setSetting("promote/hasShown", true);
                    BB.UserSettings.saveSettings()
                },
                showCancel: !force,
                cancelText: BB.Locale.getString("not_now"),
                width: "800px",
                minHeight: "551px",
                showTitle: false
            });
            promoteModal.show()
        },
        renderStat: function (modal, num, name, suffix) {
            var el = modal.find(".number." + name);
            el.find("strong").html(num);
            if (num > 0) el.find("strong").after(" " + BB.Locale.getString(name + (num > 1 ? suffix ? suffix : "s" : "")).toLowerCase());
            else el.hide()
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "promoteInitialized",
        functionToCall: Promote.init,
        functionContext: Promote,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "localeLoaded", "userSettingsInitialized"]
    });
    BB.Modules.Promote = Promote
})(Streak);
(function (Streak) {
    var $ = Streak.$,
        _ = Streak._,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports,
        Tracker = Streak.BentoBox.Tracker,
        UI = Streak.UI;
    var superclass = Streak.Object;
    BB.Modules.EmailFilters = {};
    BB.Modules.EmailFilters.EmailFilterViewController = Streak.Class.subclass({
        className: "EmailFilter",
        superclass: superclass,
        memberVariables: [{
            name: "_boxKey",
            get: true,
            set: true,
            destroy: false,
            defaultValue: null
        }, {
            name: "_contacts",
            get: true,
            set: true,
            destroy: false
        }, {
            name: "_element",
            get: true,
            destroy: true
        }, {
            name: "_emailFilterBlacklists",
            destroy: false
        }, {
            name: "_emailFilters",
            destroy: false
        }, {
            name: "_emailFiltersInner",
            destroy: true
        }, {
            name: "_emailFilterCollectionUnbinder",
            destroy: true
        }, {
            name: "_useLinkButtonForNewFilter",
            get: true,
            set: true,
            destroy: true,
            defaultValue: false
        }, {
            name: "_fetchInfoFromServer",
            get: true,
            set: true,
            destroy: true,
            defaultValue: false
        }, {
            name: "_showTitle",
            get: true,
            set: true,
            destroy: true,
            defaultValue: true
        }, {
            name: "_suggestionsFromThread",
            get: true,
            set: true,
            destroy: true,
            defaultValue: true
        }],
        _initialize: function (options) {
            superclass.prototype._initialize.call(this);
            if (!options.boxKey) throw "boxKey is a mandatory argument to emailFilters._initialize";
            this.setBoxKey(options.boxKey);
            if (options.useLinkButtonForNewFilter !== undefined) this._useLinkButtonForNewFilter = options.useLinkButtonForNewFilter;
            if (options.fetchInfoFromServer !== undefined) this._fetchInfoFromServer = options.fetchInfoFromServer;
            if (options.showTitle !== undefined) this._showTitle =
                options.showTitle;
            if (options.suggestionsFromThread !== undefined) this._suggestionsFromThread = options.suggestionsFromThread;
            this._element = $(HTML.getElement("boxSidebarEmailFilters"));
            this._setupEmailFilterCreationModal();
            this._setupNewEmailFilterMenuButton();
            this._setupTitle();
            if (this._fetchInfoFromServer) this._setupCollections()
        },
        destroy: function () {
            superclass.prototype._initialize.call(this);
            this.setEmailFilters(null);
            this.setEmailFilterBlacklists(null);
            if (this._fetchInfoFromServer);
        },
        _setupCollections: function () {
            var self =
                this;
            var emailFilterBlacklistCollection = BB.Data.getEmailFilterBlacklistCollection(this.getBoxKey());
            emailFilterBlacklistCollection.refresh(function () {
                self.setEmailFilterBlacklists(emailFilterBlacklistCollection)
            });
            var emailFilterCollection = BB.Data.getEmailFilterCollection(this.getBoxKey());
            emailFilterCollection.refresh(function () {
                self.setEmailFilters(emailFilterCollection)
            })
        },
        _setupTitle: function () {
            if (!this._showTitle) this._element.find(".streak__emailFilters_title").remove()
        },
        setEmailFilters: function (emailFilters) {
            if (this._emailFilterCollectionUnbinder) {
                this._emailFilterCollectionUnbinder();
                this._emailFilterCollectionUnbinder = null
            }
            this._emailFilterCollection = emailFilters;
            if (this._emailFilterCollection) {
                var self = this;
                this._emailFilterCollectionUnbinder = this._emailFilterCollection.bind("collectionChange", function () {
                    self._emailFilterCollectionUpdated()
                })
            }
            this._emailFilterCollectionUpdated()
        },
        setEmailFilterBlacklists: function (emailFilterBlacklists) {
            this._emailFilterBlacklists = emailFilterBlacklists;
            this.updateEmailFilterCreationModalSuggestions()
        },
        _emailFilterCollectionUpdated: function () {
            this.updateEmailFilters();
            this.updateEmailFilterCreationModalSuggestions()
        },
        updateEmailFilters: function () {
            if (!this._emailFiltersInner) this._emailFiltersInner = this._element.find(".streak__emailFiltersInner");
            this._emailFiltersInner.empty();
            var self = this;
            if (this._emailFilterCollection.length > 0) {
                var emailFiltersList = $(document.createElement("ul"));
                _.each(this._emailFilterCollection, function (emailFilter) {
                    var row = $(HTML.get("boxSidebarEmailFilter")({
                        content: emailFilter.filterDisplayHtml()
                    }));
                    row.find(".ar9").on("click", function (e) {
                        self.removeFilter(emailFilter)
                    });
                    emailFiltersList.append(row)
                });
                this._emailFiltersInner.append(emailFiltersList)
            } else {
                var empty = $(document.createElement("div"));
                empty.text(Locale.getString("email_suggestion_no_filters"));
                empty.addClass("asd ja streak__emailFilters_empty");
                this._emailFiltersInner.html(empty)
            }
        },
        _setupNewEmailFilterMenuButton: function () {
            var self = this;
            var menu = BB.Widgets.Menu.create();
            menu.addSection(self._emailFilterCreationModal);
            var baseOptions = {
                text: Locale.getString("email_filters_new_filter"),
                color: "blue",
                isFixedPosition: true,
                isRightAligned: true,
                menu: menu,
                postOnFunction: this._emailFilterCreationModalOn.bind(this)
            };
            if (this._useLinkButtonForNewFilter) {
                this._newEmailFilterButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton(_.extend(baseOptions, {
                    type: "Text",
                    text: Locale.getString("link_create_new")
                }));
                this._newEmailFilterButton.getElement()[0].style.textDecoration = "none"
            } else this._newEmailFilterButton = BB.Widgets.Buttons.ButtonFactory.createMenuButton(_.extend(baseOptions, {
                type: "Gmail"
            }));
            this._element.find(".streak__emailFilters_newFilter").html(this._newEmailFilterButton.getElement())
        },
        getNewEmailFilterButtonElement: function () {
            return this._newEmailFilterButton.getElement()
        },
        _setupEmailFilterCreationModalConfirmButton: function () {
            var self = this;
            if (!this._emailFilterCreationModalConfirmButton) this._emailFilterCreationModalConfirmButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Gmail",
                text: Locale.getString("email_suggestion_create_filter"),
                color: "blue",
                onFunction: function () {
                    var elt = self._emailFilterCreationModal;
                    var type = elt.find("input:radio:checked[name=emailFilterType]").val();
                    if (type === "email") {
                        var email = self._emailFilterCreationModalEmailTextbox.getText();
                        self.createEmailFilter(email)
                    } else if (type === "domain") {
                        var domain = self._emailFilterCreationModalDomainTextbox.getText();
                        self.createDomainFilter(domain)
                    }
                    self._newEmailFilterButton.off()
                }
            });
            this._emailFilterCreationModal.find(".streak__filter_creator_confirm_button").html(this._emailFilterCreationModalConfirmButton.getElement())
        },
        _setupEmailFilterCreationModalXButton: function () {
            var self = this;
            if (!this._emailFilterCreationModalXButton) this._emailFilterCreationModalXButton =
                BB.Widgets.Buttons.ButtonFactory.createButton({
                    type: "X",
                    onFunction: function () {
                        self._newEmailFilterButton.off()
                    }
                });
            this._emailFilterCreationModal.find(".streak__filter_creator_cancel_button").html(this._emailFilterCreationModalXButton.getElement())
        },
        _emailFilterCreationModalOn: function () {
            this._emailFilterCreationModalEmailTextbox.setHTML(null);
            this._emailFilterCreationModalDomainTextbox.setHTML(null);
            this._emailFilterCreationModal.find("input:radio[name=emailFilterType][value=email]").click()
        },
        updateEmailFilterCreationModalSuggestions: function () {
            var self =
                this;
            var suggestionList = this._emailFilterCreationModal.find(".emailFilterCreatorSuggestions");
            suggestionList.empty();
            var suggestions = this.getEmailFilterSuggestions();
            _.each(suggestions, function (suggestion) {
                var link = BB.Widgets.Buttons.ButtonFactory.createButton({
                    type: "Text",
                    text: suggestion.text,
                    color: "cornflowerblue",
                    onFunction: function () {
                        self._emailFilterCreationModal.find("input:radio[name=emailFilterType][value=" + suggestion.type + "]").click();
                        if (suggestion.type === "email") {
                            self._emailFilterCreationModalEmailTextbox.setHTML(suggestion.email);
                            self._emailFilterCreationModalDomainTextbox.setHTML(null)
                        } else {
                            self._emailFilterCreationModalEmailTextbox.setHTML(null);
                            self._emailFilterCreationModalDomainTextbox.setHTML(suggestion.domain)
                        }
                    }
                });
                suggestionList.append($(document.createElement("li")).html(link.getElement()))
            })
        },
        _setupEmailFilterCreationModal: function () {
            if (!this._emailFilterCreationModal) this._emailFilterCreationModal = $(HTML.getElement("boxSidebarEmailFilterCreator"));
            this._setupEmailFilterCreationModalConfirmButton();
            this._setupEmailFilterCreationModalXButton();
            if (!this._emailFilterCreationModalEmailTextbox) this._emailFilterCreationModalEmailTextbox = new BB.Widgets.GmailTextareaViewController({
                plainTextOnly: true
            });
            this._emailFilterCreationModal.find(".emailFilterEmail").html(this._emailFilterCreationModalEmailTextbox.getView().getElement());
            if (!this._emailFilterCreationModalDomainTextbox) this._emailFilterCreationModalDomainTextbox = new BB.Widgets.GmailTextareaViewController({
                plainTextOnly: true
            });
            this._emailFilterCreationModal.find(".emailFilterDomain").html(this._emailFilterCreationModalDomainTextbox.getView().getElement());
            this.updateEmailFilterCreationModalSuggestions()
        },
        setContacts: function (contacts) {
            this._contacts = contacts;
            this.updateEmailFilterCreationModalSuggestions()
        },
        getEmailFilterSuggestions: function () {
            if (this._suggestionsFromThread) var emails = this.getEmailAddressesInGmailThread().unique();
            else var emails = _.map(this._contacts, function (contact) {
                return contact.email
            });
            emails.removeVal(BB.getUser().getEmail());
            var domains = _.chain(emails).map(function (email) {
                return email.split("@")[1]
            }).uniq().value();
            var filters =
                this._emailFilterCollection;
            if (filters) {
                emails = _.reject(emails, function (email) {
                    for (var i = 0; i < filters.length; i++) {
                        var filter = filters[i];
                        if (filter.get("type") === "EMAIL_ADDRESS_FILTER" && filter.get("value") === email) return true
                    }
                    return false
                });
                domains = _.reject(domains, function (domain) {
                    for (var i = 0; i < filters.length; i++) {
                        var filter = filters[i];
                        if (filter.get("type") === "DOMAIN_FILTER" && filter.get("value") === domain) return true
                    }
                    return false
                })
            }
            var blacklists = this._emailFilterBlacklistCollection;
            if (blacklists) emails =
                _.reject(emails, function (email) {
                    return _.some(blacklists, function (blacklists) {
                        return blacklists.get("blacklistEmail") === email
                    })
                });
            var emailSuggestions = _.map(emails, function (email) {
                return {
                    type: "email",
                    email: email,
                    text: Locale.getString("email_suggestion_creation_one_email", {
                        email: email
                    })
                }
            });
            var domainSuggestions = _.map(domains, function (domain) {
                return {
                    type: "domain",
                    domain: domain,
                    text: Locale.getString("email_suggestion_creation_one_domain", {
                        domain: domain
                    })
                }
            });
            return emailSuggestions.concat(domainSuggestions)
        },
        createEmailFilter: function (emailAddress) {
            var newFilter = this._emailFilterCollection.addAndSave({
                type: "EMAIL_ADDRESS_FILTER",
                value: emailAddress,
                caseKey: this._boxKey
            }, function () {
                Gmail.showNotice(Locale.getString("saved"), 3E3)
            });
            Gmail.showNotice(Locale.getString("saving"))
        },
        createDomainFilter: function (domain) {
            var newFilter = this._emailFilterCollection.addAndSave({
                type: "DOMAIN_FILTER",
                value: domain,
                caseKey: this._boxKey
            }, function () {
                Gmail.showNotice(Locale.getString("saved"), 3E3)
            });
            Gmail.showNotice(Locale.getString("saving"))
        },
        removeFilter: function (filter) {
            Gmail.showNotice(Locale.getString("deleting"));
            filter.del(function () {
                Gmail.showNotice(Locale.getString("deleted"), 3E3)
            })
        },
        getEmailAddressesInGmailThread: function () {
            var activeThread = BB.Threads.getActiveThread();
            if (activeThread) return activeThread.get("emailAddresses");
            else return []
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Gmail = Streak.Gmail;
    var TrackedThread = function (data) {
        APIModel.call(this, data)
    };
    TrackedThread.prototype = Object.create(APIModel.prototype);
    _.extend(TrackedThread.prototype, {
        keyName: "key",
        entityType: "TrackedThreads",
        apiURLs: {
            get: "trackedthreads/hexgmailthreadid/<%=hexGmailThreadId%>"
        },
        addTrackedLink: function (trackedLink) {
            var links = this.get("links");
            if (!_.isArray(links)) links = [];
            links.push(trackedLink);
            this.set("links", links)
        }
    });
    TrackedThread.create = function (data) {
        return new TrackedThread(data)
    };
    TrackedThread.createCollection = function (caseKey) {
        var c = new Collection;
        c.init({
            entityType: "TrackedThreads",
            key: "key",
            onlyUnique: true,
            makeModel: function (obj) {
                return TrackedThread.create(obj)
            }
        });
        return c
    };
    BB.Models.TrackedThread = TrackedThread
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Gmail = Streak.Gmail;
    var TrackedLink = function (data) {
        APIModel.call(this, data)
    };
    TrackedLink.prototype = Object.create(APIModel.prototype);
    _.extend(TrackedLink.prototype, {
        keyName: "trackedLinkKey",
        entityType: "TrackedLink",
        createProperties: ["guid", "hexGmailThreadId", "subject", "names", "emails", "snippetKeyList", "isMailMerge", "rfcMessageId"],
        apiURLs: {
            create: "trackedlinks"
        }
    });
    TrackedLink.create = function (data) {
        return new TrackedLink(data)
    };
    TrackedLink.createCollection = function (caseKey) {
        var c = new Collection;
        c.init({
            entityType: "TrackedLink",
            key: "TrackedLinkKey",
            onlyUnique: true,
            makeModel: function (obj) {
                return TrackedLink.create(obj)
            }
        });
        return c
    };
    BB.Models.TrackedLink = TrackedLink
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIModel = Streak.APIModel,
        Collection = Streak.Collection,
        BB = Streak.BentoBox,
        Gmail = Streak.Gmail;
    var APIKey = function (data) {
        APIModel.call(this, data)
    };
    APIKey.prototype = Object.create(APIModel.prototype);
    _.extend(APIKey.prototype, {
        keyName: "apiKeyKey",
        entityType: "APIKey",
        createProperties: [],
        apiURLs: {
            create: "apikeys",
            "delete": "apikeys/<%= apiKeyKey %>"
        }
    });
    APIKey.create = function (data) {
        return new APIKey(data)
    };
    APIKey.createCollection =
        function () {
            var c = new Collection;
            c.init({
                entityType: "APIKey",
                key: "apiKeyKey",
                onlyUnique: true,
                makeModel: function (obj) {
                    return APIKey.create(obj)
                },
                apiURL: "apikeys"
            });
            return c
    };
    BB.Models.APIKey = APIKey
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var MAX_EMAILS = 200;
    var INVITES_NEEDED = 5;
    var PixelTrackingLimiter = Streak.Class.subclass({
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_invitesSent",
            destroy: false
        }, {
            name: "_shareModalSeen",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            this._shareModalSeen = false;
            this._getSentInvites();
            this._bindToSendEvents()
        },
        _getSentInvites: function () {
            var self = this;
            Streak.APIRequester.get({
                msgUrl: "apps/EmailTracking/invites"
            }, function (result) {
                self._processSentInvites(result)
            })
        },
        _processSentInvites: function (result) {
            if (!result || !result.emailAddresses) {
                this._invitesSent = false;
                return
            }
            if (result.emailAddresses.length >= INVITES_NEEDED) {
                this._invitesSent = true;
                return
            }
            this._invitesSent = false;
            return
        },
        _bindToSendEvents: function () {
            NotificationCenter.addFunction({
                eventName: "trackedEmailSent",
                functionToCall: this._trackedEmailSent,
                functionContext: this
            })
        },
        _trackedEmailSent: function (number) {
            if (!number || !_.isNumber(number)) number = 1;
            var currentCount = BB.LocalSettings.get("trackedEmails/currentCount");
            var month = Date.create().getMonth();
            if (!currentCount) {
                BB.LocalSettings.set("trackedEmails/currentCount", {
                    count: number,
                    month: month
                });
                return
            }
            if (!_.isNumber(currentCount.count)) currentCount.count = 1;
            if (currentCount.month !== month) {
                BB.LocalSettings.set("trackedEmails/currentCount/month", month);
                BB.LocalSettings.set("trackedEmails/currentCount/count",
                    number)
            } else BB.LocalSettings.set("trackedEmails/currentCount/count", currentCount.count + number)
        },
        _isUnderTheLimit: function () {
            var sentThisMonth = this._getTrackedEmailsSentThisMonth();
            return sentThisMonth < MAX_EMAILS
        },
        _getTrackedEmailsSentThisMonth: function () {
            var currentCount = BB.LocalSettings.get("trackedEmails/currentCount");
            var month = Date.create().getMonth();
            if (!currentCount) return 0;
            if (!_.isNumber(currentCount.count)) currentCount.count = 1;
            if (currentCount.month === month) return currentCount.count;
            return 0
        },
        registerInvitesSent: function (emailAddresses) {
            Streak.APIRequester.post({
                msgUrl: "apps/EmailTracking/invites",
                emails: emailAddresses
            });
            this._invitesSent = true
        },
        canTrackEmails: function () {
            if (this._invitesSent) return true;
            if (BB.isFeatureEnabled("unlimitedPixelTracking")) return true;
            return this._isUnderTheLimit()
        },
        isTrackingEnabled: function () {
            return true
        },
        hasSentInvites: function () {
            return this._invitesSent
        },
        shouldShowShareModalOnOpen: function () {
            return !this._shareModalSeen
        },
        registerSeenShareModal: function () {
            this._shareModalSeen =
                true
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackingLimiterInitialized",
        functionToCall: function (callback) {
            Library.set("BentoBox.Services.PixelTrackingLimiter", new PixelTrackingLimiter);
            if (callback) callback()
        },
        dependentFunctionKeys: ["userLoggedIn"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        RECENT_VIEWS_URL_KEY: "label%3Aall+before%3A5000%2F01%2F01"
    };
    var PixelTrackerUtils = {
        _loadingResultsPage: false,
        init: function () {
            Gmail.observe("viewChanged", this._handleViewChanged.bind(this));
            this._bindToRecentViewsNotifications()
        },
        _handleViewChanged: function () {
            this._loadingResultsPage =
                false
        },
        _bindToRecentViewsNotifications: function () {
            NotificationCenter.addFunction({
                eventName: "pixelTracker.recentViewsClicked",
                functionToCall: this._recentViewsClicked,
                functionContext: this
            })
        },
        _recentViewsClicked: function () {
            this._loadingResultsPage = !this.isRecentViewsResultsPage()
        },
        isRecentViewsResultsPage: function () {
            return !this._loadingResultsPage && Gmail.isListView() && location.hash.indexOf(CONSTANTS.RECENT_VIEWS_URL_KEY) > -1
        }
    };
    PixelTrackerUtils.init();
    Library.set("BentoBox.Modules.PixelTrackerUtils",
        PixelTrackerUtils)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        Data = Streak.BentoBox.Data,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._,
        BLOCK_TYPES = Streak.Gmail.GmailConversationGeometryModel.BLOCK_TYPES;
    var PixelTrackerDetailsModel = function (messagesModel, trackedThread) {
        this._messageBlocks = messagesModel.getMessageBlocks();
        this._trackedLinks = trackedThread.get("links");
        this._processedMessageBlocks = [];
        this._updateBlockGeometry();
        this._matchMessageBlocks();
        this._processViewInformationForBlocks()
    };
    PixelTrackerDetailsModel.MATCH_TYPES = {
        UNMATCHED: "UNMATCHED",
        MATCHED: "MATCHED"
    };
    _.extend(PixelTrackerDetailsModel.prototype, {
        _updateBlockGeometry: function () {
            var containerOffset = Gmail.getCurrentMain().find("td.Bu").first().offset();
            var streakOffset = Streak.$("#streakSidebar .__streak_CS_body").offset();
            var diff = 0;
            if (containerOffset && streakOffset) diff = containerOffset.top - streakOffset.top;
            for (var ii = 0; ii < this._messageBlocks.length; ii++) {
                var messageBlock = this._messageBlocks[ii];
                messageBlock.sidebarGeometry = {
                    top: messageBlock.geometry.top + diff,
                    bottom: messageBlock.geometry.bottom + diff,
                    middle: messageBlock.geometry.middle + diff
                }
            }
        },
        _matchMessageBlocks: function () {
            if (!this._messageBlocks) return;
            var ii;
            var messageBlockIndex = 0;
            var lastTrackedLinkIndex = -1;
            var unmatchedTrackedLinks = [];
            var unmatchedMessageBlocks = [];
            for (; messageBlockIndex < this._messageBlocks.length; messageBlockIndex++) {
                unmatchedTrackedLinks.length = 0;
                var messageBlock = this._messageBlocks[messageBlockIndex];
                var messageGuid = this._extractGuid(messageBlock);
                if (messageGuid) {
                    for (ii = lastTrackedLinkIndex + 1; ii < this._trackedLinks.length; ii++) {
                        var trackedLink = this._trackedLinks[ii];
                        if (messageGuid === trackedLink.guid) {
                            if (unmatchedMessageBlocks.length > 0) {
                                this._processedMessageBlocks.push(this._groupMessageBlocks(unmatchedMessageBlocks, _.clone(unmatchedTrackedLinks)));
                                unmatchedMessageBlocks.length = 0
                            }
                            messageBlock.trackedLink = trackedLink;
                            messageBlock.matchType = PixelTrackerDetailsModel.MATCH_TYPES.MATCHED;
                            this._processedMessageBlocks.push(messageBlock);
                            lastTrackedLinkIndex =
                                ii;
                            break
                        } else unmatchedTrackedLinks.push(trackedLink)
                    }
                    if (ii === this._trackedLinks.length) unmatchedMessageBlocks.push(messageBlock)
                } else unmatchedMessageBlocks.push(messageBlock)
            }
            if (unmatchedMessageBlocks.length > 0) {
                for (ii = lastTrackedLinkIndex + 1; ii < this._trackedLinks.length; ii++) unmatchedTrackedLinks.push(this._trackedLinks[ii]);
                this._processedMessageBlocks.push(this._groupMessageBlocks(unmatchedMessageBlocks, unmatchedTrackedLinks))
            }
        },
        _getNextPotentialMatchBlockIndex: function (currentOpenBlockIndex) {
            for (var ii =
                currentOpenBlockIndex; ii > -1; ii--) {
                var messageBlock = this._messageBlocks[ii];
                if (messageBlock && messageBlock.type === BLOCK_TYPES.EXPANDED && messageBlock.sender.email === BB.getUser().getEmail()) return ii
            }
            return -1
        },
        _getNextTrackedLinkIndex: function (currentTrackedLinkIndex, messageGuid) {
            for (var ii = currentTrackedLinkIndex; ii > -1; ii--) {
                var trackedLink = this._trackedLinks[ii];
                if (trackedLink && trackedLink.guid === messageGuid) return ii
            }
            return -1
        },
        _getUnmatchedBlocks: function (currentOpenBlockIndex, nextPotentialMatchBlockIndex) {
            var blocks = [];
            for (var ii = currentOpenBlockIndex - 1; ii > nextPotentialMatchBlockIndex; ii--) {
                var messageBlock = this._messageBlocks[ii];
                if (messageBlock) blocks.push(messageBlock)
            }
            return blocks.reverse()
        },
        _extractGuid: function (messageBlock) {
            if (messageBlock.type === BLOCK_TYPES.EXPANDED && messageBlock.sender.email === BB.getUser().getEmail()) {
                var body = messageBlock.body;
                var images = body.find('> div > img[src*="' + Streak.server + '"]');
                images = $.merge(images, body.find("> div > div").first().find('img[src*="' + Streak.server + '"]'));
                var guids = [];
                for (var ii = 0; ii < images.length; ii++) {
                    var src = images[ii].src;
                    var index = src.indexOf("guid=");
                    if (index > -1) guids.push(src.substring(index + 5))
                }
                guids.sort().reverse();
                return guids[0]
            }
        },
        _groupMessageBlocks: function (messageBlocks, trackedLinks) {
            var containerOffset = Gmail.getCurrentMain().find("td.Bu").first().offset();
            var streakOffset = Streak.$("#streakSidebar .__streak_CS_body").offset();
            var diff = 0;
            if (containerOffset && streakOffset) diff = containerOffset.top - streakOffset.top;
            var firstBlock = messageBlocks[0];
            var lastBlock = _.last(messageBlocks);
            var groupedMessageBlock = {
                el: [],
                matchType: PixelTrackerDetailsModel.MATCH_TYPES.UNMATCHED,
                trackedLinks: trackedLinks
            };
            var geometry = {
                left: firstBlock.geometry.left,
                width: firstBlock.geometry.width,
                top: firstBlock.geometry.top,
                bottom: lastBlock.geometry.bottom,
                height: lastBlock.geometry.bottom - firstBlock.geometry.top
            };
            geometry.middle = (geometry.top + geometry.bottom) / 2;
            groupedMessageBlock.geometry = geometry;
            groupedMessageBlock.sidebarGeometry = {
                top: geometry.top + diff,
                bottom: geometry.bottom +
                    diff,
                middle: geometry.middle + diff
            };
            for (var ii = 0; ii < messageBlocks.length; ii++) groupedMessageBlock.el = groupedMessageBlock.el.concat(messageBlocks[ii].el);
            return groupedMessageBlock
        },
        _processViewInformationForBlocks: function () {
            for (var ii = 0; ii < this._processedMessageBlocks.length; ii++) this._processMessageBlockViews(this._processedMessageBlocks[ii])
        },
        _processMessageBlockViews: function (messageBlock) {
            var views = [];
            var displayNameMap = {};
            var mostRecentView = -1;
            var trackedLinkArray;
            if (messageBlock.trackedLink) trackedLinkArray = [messageBlock.trackedLink];
            else if (messageBlock.trackedLinks) trackedLinkArray = messageBlock.trackedLinks;
            for (var ii = 0; ii < trackedLinkArray.length; ii++) views = views.concat(trackedLinkArray[ii].views);
            for (var ii = 0; ii < views.length; ii++) {
                var view = views[ii];
                if (view.timestamp > mostRecentView) mostRecentView = view.timestamp;
                if (_.isNotReal(displayNameMap[view.displayName])) displayNameMap[view.displayName] = {
                    displayName: view.displayName,
                    viewCount: 1,
                    mostRecentView: view.timestamp,
                    requestInformation: view.requestInformation
                };
                else {
                    var oldView = displayNameMap[view.displayName];
                    if (oldView.mostRecentView < view.timestamp) {
                        oldView.mostRecentView = view.timestamp;
                        oldView.requestInformation = view.requestInformation
                    }
                    oldView.viewCount += 1
                }
            }
            messageBlock.processedViews = _(displayNameMap).chain().values(displayNameMap).sortBy(function (viewObject) {
                return viewObject.mostRecentView
            }).reverse().value();
            messageBlock.views = views;
            messageBlock.identifier = views.length + "_" + mostRecentView
        },
        getMessageBlocks: function () {
            return this._processedMessageBlocks
        },
        fakefuxn: null
    });
    BB.Modules.PixelTrackerDetailsModel = PixelTrackerDetailsModel
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var PixelTrackerViewsHelper = function () {
        var self = this
    };
    _.extend(PixelTrackerViewsHelper.prototype, {
        getViewsLimited: function (matches, count) {
            var self = this;
            var allViews = self._getViews(matches);
            var sortedViews = self._mergeViewsByDisplayName(allViews);
            return sortedViews.splice(0, count)
        },
        _mergeViewsByDisplayName: function (views) {
            var self =
                this;
            var viewsMap = {};
            _.each(views, function (view) {
                var displayName = view.displayName;
                if (!_.isReal(viewsMap[displayName])) viewsMap[displayName] = [];
                viewsMap[displayName].push(view)
            });
            var sortedViewArray = [];
            _.each(viewsMap, function (views, displayName) {
                var lastSeenView = self._getLatestTimestamp(views);
                var viewObj = {
                    displayName: displayName,
                    device: lastSeenView.device,
                    timesViewed: views.length,
                    lastSeen: lastSeenView.timestamp
                };
                sortedViewArray.push(viewObj)
            });
            sortedViewArray = _.sortBy(sortedViewArray, function (view) {
                return view.lastSeen
            });
            return sortedViewArray
        },
        _getLatestTimestamp: function (views) {
            var self = this;
            var viewsSorted = _.sortBy(views, function (view) {
                return view.timestamp
            });
            return viewsSorted[0]
        },
        _getViews: function (matches) {
            var self = this;
            var views = [];
            _.each(matches, function (match) {
                views = views.concat(match.views)
            });
            return views
        },
        ffdsfs12342132jkdjksdkjdfsfs: null
    });
    BB.Modules.PixelTrackerViewsHelper = PixelTrackerViewsHelper
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._,
        MATCH_TYPES = Streak.BentoBox.Modules.PixelTrackerDetailsModel.MATCH_TYPES;
    var PixelTrackerCircleLineView = function () {
        this._delegates = [];
        this._templates = {};
        this._templates.circle = HTML.get("pixelTrackerCircle");
        this._templates.line = HTML.get("pixelTrackerLine");
        this._container = $("<div></div>");
        this._messageBlocks = null;
        this._singleBlock = null;
        this._isInSingleMode = false
    };
    _.extend(PixelTrackerCircleLineView.prototype, {
        addDelegate: function (delegate) {
            var self = this;
            self._delegates.push(delegate)
        },
        getElement: function () {
            var self = this;
            return self._container
        },
        destroy: function () {
            var self = this;
            self._container.remove()
        },
        refresh: function (messageBlocks) {
            var self = this;
            self._messageBlocks = messageBlocks;
            self._setLeftPosition();
            self._container.height(_.last(messageBlocks).sidebarGeometry.bottom);
            if (self._isInSingleMode) {
                var newSingleBlock = _.find(messageBlocks, function (messageBlock) {
                    return messageBlock.identifier === self._singleBlock.identifier
                });
                if (newSingleBlock) {
                    this._singleBlock = newSingleBlock;
                    this._refreshDetailMode()
                }
            } else {
                self._container.empty();
                self._refreshCirclesAndLines()
            }
        },
        _setLeftPosition: function () {
            if (this._isMarginBetweenConversationAndSidebarWide()) this._container.parent().css("left", "");
            else this._container.parent().css("left", "-18px")
        },
        _isMarginBetweenConversationAndSidebarWide: function () {
            var bodyRightMargin = Gmail.getCurrentMain().find("td.Bu").first().find("> .if").css("margin-right");
            try {
                if (parseInt(bodyRightMargin, 10) <
                    20) return false;
                else return true
            } catch (err) {
                return true
            }
        },
        renderDetailMode: function (messageBlock) {
            this._isInSingleMode = true;
            this._singleBlock = messageBlock;
            this._refreshDetailMode()
        },
        _refreshDetailMode: function () {
            this._container.empty();
            this._renderCircle(this._singleBlock);
            this._renderVerticalLine(this._getTopMostPosition(), this._singleBlock.sidebarGeometry.middle);
            this._renderVerticalLine(this._singleBlock.sidebarGeometry.middle, this._getBottomMostPosition())
        },
        _getTopMostPosition: function () {
            var firstBlock =
                _.first(this._messageBlocks);
            if (firstBlock) return firstBlock.sidebarGeometry.top;
            return 0
        },
        _getBottomMostPosition: function () {
            var lastBlock = _.last(this._messageBlocks);
            if (lastBlock) return lastBlock.sidebarGeometry.bottom;
            return 0
        },
        renderListMode: function () {
            this._isInSingleMode = false;
            this._container.empty();
            this._refreshCirclesAndLines()
        },
        _refreshCirclesAndLines: function () {
            this._renderCircles();
            this._renderLines()
        },
        _renderCircles: function () {
            for (var ii = 0; ii < this._messageBlocks.length; ii++) this._renderCircle(this._messageBlocks[ii])
        },
        _renderCircle: function (messageBlock, inTop) {
            var self = this;
            var top = inTop || messageBlock.sidebarGeometry.middle;
            var el = $(self._templates.circle());
            el.css({
                "top": top + "px",
                "left": 0 + "px"
            });
            if (messageBlock.matchType === MATCH_TYPES.UNMATCHED)
                if (messageBlock.trackedLinks && messageBlock.trackedLinks.length > 0) el.addClass("streak__pt_unmatchedCircle");
                else el = null;
            if (el) {
                el.click(function () {
                    if (self._isInSingleMode) self._callZoomOutDelegates(messageBlock);
                    else self._callZoomInDelegates(messageBlock)
                });
                this._container.append(el);
                return el
            }
        },
        _renderLines: function () {
            var lastTracked = false;
            var lastTrackedStart = 0;
            for (var ii = 0; ii < this._messageBlocks.length; ii++) {
                var messageBlock = this._messageBlocks[ii];
                if (messageBlock.matchType === MATCH_TYPES.MATCHED) {
                    if (lastTracked) this._renderVerticalLine(lastTrackedStart, messageBlock.sidebarGeometry.middle);
                    else this._renderVerticalLine(messageBlock.sidebarGeometry.top, messageBlock.sidebarGeometry.middle); if (ii > 0 || ii === this._messageBlocks.length - 1) {
                        this._renderVerticalLine(messageBlock.sidebarGeometry.middle,
                            messageBlock.sidebarGeometry.bottom);
                        lastTrackedStart = messageBlock.sidebarGeometry.bottom
                    } else lastTrackedStart = messageBlock.sidebarGeometry.middle;
                    lastTracked = true
                } else {
                    if (lastTracked) this._renderVerticalLine(lastTrackedStart, messageBlock.sidebarGeometry.top);
                    this._renderVerticalLine(messageBlock.sidebarGeometry.top, messageBlock.sidebarGeometry.bottom, true);
                    this._renderHorizontalLine(messageBlock.sidebarGeometry.top);
                    this._renderHorizontalLine(messageBlock.sidebarGeometry.bottom);
                    lastTracked = false
                }
            }
        },
        _renderVerticalLine: function (top, bottom, isDashed) {
            var el = $(this._templates.line());
            el.css({
                "top": top + "px",
                "height": bottom - top + "px"
            });
            if (isDashed) el.addClass("streak__pt_dashedBorder");
            this._container.append(el);
            return el
        },
        _renderHorizontalLine: function (top) {
            var el = $(this._templates.line());
            el.css({
                "top": top + "px"
            });
            el.addClass("streak__pt_horizontalBorder");
            this._container.append(el)
        },
        _callZoomOutDelegates: function (selecteMessageBlock) {
            var self = this;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.circleDidZoomOut)) delegate.circleDidZoomOut(selecteMessageBlock,
                    true)
            });
            track("pixel_track_show_overview", {
                source: "circleLine"
            })
        },
        _callZoomInDelegates: function (selecteMessageBlock) {
            var self = this;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.circleDidZoomIn)) delegate.circleDidZoomIn(selecteMessageBlock, true)
            });
            track("pixel_track_show_detail", {
                source: "circleLine"
            })
        }
    });
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    BB.Modules.PixelTrackerCircleLineView = PixelTrackerCircleLineView
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        Requester = Streak.Requester,
        APIRequester = Streak.APIRequester,
        Model = Streak.Model,
        Collection = Streak.Collection,
        BB = Streak.BentoBox;
    var ConversationCircleLineViewController = function () {
        var self = this;
        self._delegates = [];
        self._view = new BB.Modules.PixelTrackerCircleLineView;
        self._view.addDelegate(self)
    };
    _.extend(ConversationCircleLineViewController.prototype, {
        addDelegate: function (delegate) {
            var self = this;
            self._delegates.push(delegate)
        },
        _callDelegatesForCricleZoomOut: function () {
            var self = this;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.circleDidZoomOut)) delegate.circleDidZoomOut()
            })
        },
        _callDelegatesForCricleZoomIn: function (selectedMessageBlock) {
            var self = this;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.circleDidZoomIn)) delegate.circleDidZoomIn(selectedMessageBlock)
            })
        },
        gmailThreadRowsChanged: function (circlesGeometry) {
            var self = this;
            self._view.refresh(circlesGeometry)
        },
        lessDetailsLinkClick: function () {
            var self =
                this;
            self._view.renderListMode();
            BB.Tracker.track("pixel tracking less details clicked")
        },
        moreDetailsLinkClick: function (messageBlock) {
            var self = this;
            self._view.renderDetailMode(messageBlock);
            BB.Tracker.track("pixel tracking more details clicked")
        },
        circleDidZoomOut: function () {
            var self = this;
            self._callDelegatesForCricleZoomOut();
            self.lessDetailsLinkClick();
            BB.Tracker.track("pixel tracking circle zoom out")
        },
        circleDidZoomIn: function (selectedMessageBlock) {
            if (!selectedMessageBlock.processedViews || selectedMessageBlock.processedViews.length ===
                0) return;
            var self = this;
            self._callDelegatesForCricleZoomIn(selectedMessageBlock);
            self.moreDetailsLinkClick(selectedMessageBlock);
            BB.Tracker.track("pixel tracking circle zoom in")
        },
        destroy: function () {
            var self = this;
            self._view.destroy()
        }
    });
    BB.Modules.ConversationCircleLineViewController = ConversationCircleLineViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Locale = Streak.Locale,
        HTML = Streak.HTML,
        Data = Streak.BentoBox.Data,
        BB = Streak.BentoBox;
    var initialized = false;
    var activeSidebar = null;

    function init(cb) {
        if (!initialized) {
            initialized = true;
            if (!BB.Services.PixelTrackingLimiter.isTrackingEnabled()) {
                if (cb) cb();
                return
            }
            Gmail.observe("conversationThreadLoadedEvent", function () {
                if (activeSidebar && activeSidebar.destroy) activeSidebar.destroy();
                activeSidebar = new BB.Modules.PixelTrackerSidebarViewController;
                BB.Tracker.track("pixel tracker sidebar showed up")
            });
            Gmail.observe("viewChanged", function () {
                if (!Gmail.isConversation() && activeSidebar && activeSidebar.destroy) activeSidebar.destroy()
            })
        }
        if (cb) cb()
    }
    var PixelTrackerSidebarViewController = function () {
        var self = this;
        Streak.ViewControllerBase.call(this);
        self._view = new BB.Modules.PixelTrackerSidebarView;
        self._circleSidebarController = null;
        self._infoSidebarController = null;
        self._trackedLinkMatchController = null;
        self._sidebarId = null;
        self._load()
    };
    PixelTrackerSidebarViewController.prototype =
        Object.create(Streak.ViewControllerBase.prototype);
    PixelTrackerSidebarViewController.create = function () {
        return new PixelTrackerSidebarViewController
    };
    _.extend(PixelTrackerSidebarViewController.prototype, {
        _load: function () {
            if (this._isThereFullCachedVersion()) this._loadPixelTrackSidebarWithFullCache();
            else if (this._isThereIndicatorCachedVersion()) this._loadPixelTrackSidebarWithIndicatorCache();
            else this._loadPixelTrackSidebarWithNoCache()
        },
        _isThereFullCachedVersion: function () {
            return _.isReal(this._getTrackedThreadForActiveThread())
        },
        _isThereIndicatorCachedVersion: function () {
            return _.isReal(this._getTrackedThreadIndicatorForActiveThread())
        },
        _getTrackedThreadForActiveThread: function () {
            var activeThread = BB.Threads.getActiveThread();
            if (!activeThread) return;
            var threadInfo = activeThread.get("threadInfo");
            if (!threadInfo) return;
            var trackedThread = threadInfo.get("trackedThread");
            if (!trackedThread) return;
            return trackedThread
        },
        _getTrackedThreadIndicatorForActiveThread: function () {
            var activeThread = BB.Threads.getActiveThread();
            if (!activeThread) return;
            var threadInfo = activeThread.get("threadInfo");
            if (!threadInfo) return;
            var listTrackedThread = threadInfo.get("listTrackedThread");
            if (!listTrackedThread) return;
            return listTrackedThread
        },
        _loadPixelTrackSidebarWithFullCache: function () {
            var self = this;
            this._registerWithTabbedSidebar();
            this._setupSubViewControllers();
            this._getTrackedThreadFromServer();
            this._callDelegateFunction("trackedThreadLoaded", self._getTrackedThreadForActiveThread());
            this._callDelegateFunction("refreshingTrackedThread")
        },
        _loadPixelTrackSidebarWithIndicatorCache: function () {
            var self =
                this;
            this._registerWithTabbedSidebar();
            this._getTrackedThreadFromServer(function () {
                self._setupSubViewControllers()
            })
        },
        _loadPixelTrackSidebarWithNoCache: function () {
            var self = this;
            this._getTrackedThreadFromServer(function (trackedThread) {
                if (trackedThread) {
                    self._registerWithTabbedSidebar();
                    self._setupSubViewControllers()
                }
            })
        },
        _getTrackedThreadFromServer: function (callback) {
            var theCallback = callback || $.noop;
            var self = this;
            var activeThread = BB.Threads.getActiveThread();
            if (!activeThread) {
                theCallback();
                return
            }
            var threadInfo =
                activeThread.get("threadInfo");
            if (!threadInfo) {
                theCallback();
                return
            }
            threadInfo.bind("modified", null, function () {
                var currentActiveThread = BB.Threads.getActiveThread();
                if (!currentActiveThread || currentActiveThread.key() !== activeThread.key()) return true;
                var trackedThread = threadInfo.get("trackedThread");
                theCallback(trackedThread);
                if (trackedThread) self._callDelegateFunction("trackedThreadLoaded", trackedThread);
                return true
            })
        },
        _registerWithTabbedSidebar: function () {
            var self = this;
            var sidebarObject = {
                getElement: function () {
                    return self._view.getElement()
                },
                destroy: function () {
                    self.destroy()
                }
            };
            var iconClass = this._getTabIconClass();
            this._sidebarId = BB.Modules.TabbedSidebarMaster.registerNewSidebar({
                prettyTitle: Locale.getString("pixel_track_sidebar_tab_title"),
                sidebar: sidebarObject,
                iconClass: iconClass,
                priority: 3,
                tabIdentifier: "pixelTrackerSidebar"
            }, BB.Threads.getActiveThread().key())
        },
        _getTabIconClass: function () {
            var returnClass = "openEyeIcon";
            if (this._hasAnEmailBeenViewed()) returnClass += " openEyeIconViewed";
            return returnClass
        },
        _hasAnEmailBeenViewed: function () {
            var trackedThread =
                this._getTrackedThreadForActiveThread();
            var totalViews = 0;
            if (trackedThread) totalViews = trackedThread.get("totalViews");
            else {
                var indicatorObject = this._getTrackedThreadIndicatorForActiveThread();
                if (indicatorObject) totalViews = indicatorObject.totalViews
            }
            return totalViews > 0
        },
        _setupSubViewControllers: function () {
            var self = this;
            self._view.removeLoading();
            self._circleSidebarController = new BB.Modules.ConversationCircleLineViewController;
            self._view.addCircleLineSubView(self._circleSidebarController._view);
            self._infoSidebarController =
                new BB.Modules.TrackedLinkInformationViewController;
            self._view.addTrackedInfoView(self._infoSidebarController._view);
            self._trackedLinkMatchController = new BB.Modules.TrackedLinkMatchController;
            self._trackedLinkMatchController.addDelegate(self._circleSidebarController);
            self._trackedLinkMatchController.addDelegate(self._infoSidebarController);
            self._infoSidebarController.addDelegate(self._circleSidebarController);
            self._circleSidebarController.addDelegate(self._infoSidebarController);
            self.addDelegate(self._infoSidebarController);
            self.addDelegate(self._trackedLinkMatchController)
        },
        destroy: function () {
            if (this._view) this._view.destroy();
            if (this._circleSidebarController) {
                this._circleSidebarController.destroy();
                this._circleSidebarController = null
            }
            if (this._infoSidebarController) {
                this._infoSidebarController.destroy();
                this._infoSidebarController = null
            }
            if (this._trackedLinkMatchController) {
                this._trackedLinkMatchController.destroy();
                this._trackedLinkMatchController = null
            }
            BB.Modules.TabbedSidebarMaster.removeSidebar(this._sidebarId);
            activeSidebar =
                null;
            Streak.ViewControllerBase.prototype.destroy.call(this)
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerSidebarViewControllerInitialized",
        functionToCall: init,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "localeLoaded", "userLoggedIn", "threadsInitialized", "pixelTrackingLimiterInitialized"]
    });
    BB.Modules.PixelTrackerSidebarViewController = PixelTrackerSidebarViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var PixelTrackerSidebarView = function () {
        var self = this;
        var container = $(HTML.get("pixelTrackerContainer")());
        self._container = container;
        self._circleContainer = container.find(".streak_circle_container");
        self._infoContainer = container.find(".streak_info_container");
        self._addSpaceToConversationHeader()
    };
    _.extend(PixelTrackerSidebarView.prototype, {
        getElement: function () {
            var self = this;
            return self._container
        },
        removeLoading: function () {
            this._container.find(".pt_info_main_loading").remove()
        },
        addCircleLineSubView: function (view) {
            var self = this;
            self._circleView = view;
            self._circleContainer.append(view.getElement())
        },
        destroy: function () {
            var self = this
        },
        addTrackedInfoView: function (view) {
            var self = this;
            self._infoView = view;
            self._infoContainer.append(view.getElement())
        },
        _addSpaceToConversationHeader: function () {
            Gmail.getConversationSubjectHeader().addClass("streak__pixelTrackConversationSubject")
        }
    });
    BB.Modules.PixelTrackerSidebarView = PixelTrackerSidebarView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        _ = Streak._;
    var TrackedLinkMatchController = function () {
        var self = this;
        self._trackedThread = null;
        self._delegates = [];
        self._conversationWatcher = new Gmail.GmailConversationWatchController;
        self._conversationWatcher.addDelegate(self)
    };
    _.extend(TrackedLinkMatchController.prototype, {
        gmailThreadRowsChanged: function (gmailMessagesModel) {
            var self = this;
            self._gmailMessagesModel =
                gmailMessagesModel;
            self._callDelegatesForGmailMessagesChange()
        },
        trackedThreadLoaded: function (trackedThread) {
            this._trackedThread = trackedThread;
            this._callDelegatesForGmailMessagesChange();
            this._observeTrackedLinkChanges()
        },
        _observeTrackedLinkChanges: function () {
            var self = this;
            this._trackedThread.bind("set", "links", function () {
                self._callDelegatesForGmailMessagesChange()
            }, "trackedLinkMatchController")
        },
        _callDelegatesForGmailMessagesChange: function () {
            var self = this;
            if (!_.isReal(self._trackedThread) || !_.isReal(self._gmailMessagesModel)) return;
            var detailsModel = new BB.Modules.PixelTrackerDetailsModel(self._gmailMessagesModel, self._trackedThread);
            var gmailMessages = detailsModel.getMessageBlocks();
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.gmailThreadRowsChanged)) delegate.gmailThreadRowsChanged(gmailMessages)
            })
        },
        addDelegate: function (delegate) {
            var self = this;
            self._delegates.push(delegate)
        },
        destroy: function () {
            this._conversationWatcher.destroy();
            this._delegates.length = 0;
            this._delegates = null;
            if (this._trackedThread) this._trackedThread.unbindAll("trackedLinkMatchController")
        }
    });
    BB.Modules.TrackedLinkMatchController = TrackedLinkMatchController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var TrackedLinkDetailsView = function () {
        var self = this;
        self._delegates = [];
        self._templates = {};
        self._templates.entry = HTML.get("pt_overview_view_detail_entry");
        self._templates.viewsHeader = HTML.get("pt_views");
        self._el = $(HTML.get("pt_detail_block")());
        self._blockContainer = self._el.find(".streak__pt_detail_container");
        self._mapContainer = self._el.find(".streak__pt_map_container");
        self._graphContainer = self._el.find(".streak__pt_graph_container");
        self._viewCountContainer = self._el.find(".streak__pt_view_count_container");
        self._graphFrame = null;
        self._mapFrame = null;
        self._bindButtonEvent(self._el.find(".button"));
        self._setupIFrames()
    };
    _.extend(TrackedLinkDetailsView.prototype, {
        _setupIFrames: function () {
            this._graphFrame = new BB.Widgets.IframeBridge({
                path: "graphiFrame",
                cssClass: "__streak_PT_graphiFrame"
            });
            this._mapFrame = new BB.Widgets.IframeBridge({
                path: "mapiFrame",
                cssClass: "__streak_PT_mapiFrame"
            });
            this._graphContainer.append(this._graphFrame.getFrameElement());
            this._mapContainer.append(this._mapFrame.getFrameElement())
        },
        refresh: function (block) {
            var self = this;
            self._blockContainer.empty();
            var viewCount = self._getViewCount(block.processedViews);
            var uniqueViews = self._getUniqueViewCount(block);
            var viewsHeader = self._templates.viewsHeader({
                viewCount: viewCount,
                uniqueViews: uniqueViews
            });
            self._viewCountContainer.empty();
            self._viewCountContainer.append(viewsHeader);
            self._blockContainer.empty();
            self._renderGraph(block.views);
            self._renderMap(block.views);
            self._renderViewEntries(_.first(block.views, 100))
        },
        getElement: function () {
            var self = this;
            return self._el
        },
        _getViewCount: function (processedViews) {
            var totalViewCount = 0;
            _.each(processedViews, function (view) {
                totalViewCount += view.viewCount
            });
            return totalViewCount
        },
        _getUniqueViewCount: function (block) {
            return block.processedViews.length
        },
        _renderGraph: function (views) {
            var points = this._getViewPoints(views);
            this._graphFrame.sendMessage("drawDateGraph", points)
        },
        _getViewPoints: function (views) {
            var self =
                this;
            var viewPointsMap = {};
            _.each(views, function (view) {
                var date = Date.create(view.timestamp);
                date.resetTime();
                date = date.getTime();
                if (!_.isReal(viewPointsMap[date])) viewPointsMap[date] = 0;
                viewPointsMap[date]++
            });
            var viewArray = [];
            _.each(viewPointsMap, function (pointValue, date) {
                viewArray.push([date, pointValue])
            });
            viewArray = _.sortBy(viewArray, function (view) {
                return view[0]
            });
            var viewPoints = [
                ["Date", "Views"]
            ];
            return viewPoints.concat(viewArray)
        },
        _renderMap: function (views) {
            var points = this._getLatPoints(views);
            if (points && points.length > 0) {
                this._mapFrame.sendMessage("loadMap", points);
                this._mapContainer.show()
            } else this._mapContainer.hide()
        },
        _getLatPoints: function (views) {
            var self = this;
            return _.chain(views).filter(function (view) {
                return view.requestInformation && view.requestInformation.latLong && (view.requestInformation.latLong.latitude !== 0 || view.requestInformation.latLong.longitude !== 0)
            }).map(function (view) {
                return {
                    lat: view.requestInformation.latLong.latitude,
                    lon: view.requestInformation.latLong.longitude
                }
            }).value()
        },
        _renderViewEntries: function (views) {
            var self = this;
            for (var ii = 0; ii < views.length; ii++) {
                var renderedMatch = self._renderViewEntry(views[ii]);
                self._blockContainer.append(renderedMatch)
            }
        },
        _renderViewEntry: function (viewObj) {
            var self = this;
            var city = viewObj.requestInformation.city;
            var region = viewObj.requestInformation.region;
            var regionText;
            if (city && city !== "?") {
                regionText = city.capitalize(true);
                if (region) regionText += ", " + region.toUpperCase()
            } else if (region && region !== "?") regionText = region.toUpperCase();
            else regionText =
                BB.Locale.getString("unknown_location");
            return $(self._templates.entry({
                name: viewObj.displayName,
                details: BB.Locale.getString("pixel_track_entry_details", {
                    time: Date.create(viewObj.timestamp).customFormat("pixelTrack"),
                    location: regionText
                }),
                iconClass: CONSTANTS.DEVICE_MAP[viewObj.requestInformation.device],
                deviceName: BB.Locale.getString(CONSTANTS.TRANSLATION_MAP[viewObj.requestInformation.device])
            }))
        },
        _bindButtonEvent: function (button) {
            var self = this;
            button.click(function () {
                self._callClickDelegates()
            })
        },
        _callClickDelegates: function () {
            var self = this;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.lessDetailsLinkClick)) delegate.lessDetailsLinkClick()
            });
            track("pixel_track_show_overview", {
                source: "detailView"
            })
        },
        destroy: function () {
            this._graphFrame.destroy();
            this._mapFrame.destroy();
            this._blockContainer.remove()
        },
        addDelegate: function (delegate) {
            var self = this;
            self._delegates.push(delegate)
        }
    });
    var CONSTANTS = {
        DEVICE_MAP: {
            "MAC": "streak__macIcon",
            "WINDOWS_PC": "streak__windowsIcon",
            "IPAD": "streak__ipadIcon",
            "IPHONE": "streak__iphoneIcon",
            "ANDROID_PHONE": "streak__androidPhoneIcon",
            "ANDROID_TABLET": "streak__androidTabletIcon",
            "OTHER": "streak__otherDeviceIcon",
            "GMAIL_PROXY": "streak__gmailProxyIcon"
        },
        TRANSLATION_MAP: {
            "MAC": "device_mac",
            "WINDOWS_PC": "device_windows_pc",
            "IPAD": "device_ipad",
            "IPHONE": "device_iphone",
            "ANDROID_PHONE": "device_android_phone",
            "ANDROID_TABLET": "device_android_tablet",
            "OTHER": "device_other",
            "GMAIL_PROXY": "device_gmail_proxy"
        }
    };
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    BB.Modules.TrackedLinkDetailsView = TrackedLinkDetailsView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var TrackedLinkDetailsViewController = function () {
        var self = this;
        self._delegates = [];
        self._view = new BB.Modules.TrackedLinkDetailsView;
        self._view.addDelegate(self)
    };
    _.extend(TrackedLinkDetailsViewController.prototype, {
        addDelegate: function (delegate) {
            var self = this;
            self._delegates.push(delegate)
        },
        getView: function () {
            var self = this;
            return self._view
        },
        update: function (messageBlock) {
            var self =
                this;
            self._view.refresh(messageBlock)
        },
        lessDetailsLinkClick: function () {
            var self = this;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.lessDetailsLinkClick)) delegate.lessDetailsLinkClick()
            })
        },
        destroy: function () {
            this._view.destroy()
        }
    });
    BB.Modules.TrackedLinkDetailsViewController = TrackedLinkDetailsViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var TrackedLinkOverviewView = function () {
        var self = this;
        self._templates = {};
        self._templates.block = HTML.get("pt_overview_block");
        self._templates.emptyBlock = HTML.get("pt_overview_emptyBlock");
        self._templates.entry = HTML.get("pt_overview_view_entry");
        self._templates.viewsHeader = HTML.get("pt_views");
        self._el = $(HTML.get("pt_overview_block_container")());
        self._delegates = []
    };
    _.extend(TrackedLinkOverviewView.prototype, {
        _callDelegatesForClick: function (block) {
            var self = this;
            _.each(self._delegates, function (delegate) {
                if (_.isReal(delegate.moreDetailsLinkClick)) delegate.moreDetailsLinkClick(block)
            })
        },
        addDelegate: function (delegate) {
            var self = this;
            self._delegates.push(delegate)
        },
        getElement: function () {
            var self = this;
            return self._el
        },
        _getProcessedViewCount: function (processedViews) {
            var totalViewCount = 0;
            _.each(processedViews, function (view) {
                totalViewCount += view.viewCount
            });
            return totalViewCount
        },
        _getViewCount: function (messageBlocks) {
            var self = this;
            var total = 0;
            _.each(messageBlocks, function (block) {
                total += self._getProcessedViewCount(block.processedViews)
            });
            return total
        },
        _getUniqueViewCount: function (messageBlocks) {
            var self = this;
            var total = 0;
            _.each(messageBlocks, function (block) {
                total += block.processedViews.length
            });
            return total
        },
        refresh: function (messageBlocks) {
            var self = this;
            self._el.empty();
            var viewCount = self._getViewCount(messageBlocks);
            var uniqueViews = self._getUniqueViewCount(messageBlocks);
            var viewsHeader =
                self._templates.viewsHeader({
                    viewCount: viewCount,
                    uniqueViews: uniqueViews
                });
            self._el.append(viewsHeader);
            _.each(messageBlocks, function (messageBlock) {
                if (messageBlock.processedViews && messageBlock.processedViews.length > 0) self._renderBlock(messageBlock);
                else if (_.isReal(messageBlock).trackedLinks && messageBlock.trackedLinks.length > 0 || _.isReal(messageBlock.trackedLink)) self._renderEmptyBlock(messageBlock)
            })
        },
        _renderEmptyBlock: function (messageBlock) {
            var blockContainer = $(this._templates.emptyBlock());
            var blockHeight =
                messageBlock.sidebarGeometry.bottom - messageBlock.sidebarGeometry.top;
            blockContainer.css({
                "top": messageBlock.sidebarGeometry.top + "px",
                "height": blockHeight + "px"
            });
            this._el.append(blockContainer)
        },
        _renderBlock: function (messageBlock) {
            var self = this;
            var blockContainer = $(self._templates.block());
            var blockHeight = messageBlock.sidebarGeometry.bottom - messageBlock.sidebarGeometry.top;
            blockContainer.css({
                "top": messageBlock.sidebarGeometry.top + "px",
                "height": blockHeight + "px"
            });
            var maxViewsToRender = Math.max(Math.floor((blockHeight -
                20) / 50), 0);
            self._renderViewEntries(blockContainer.find(".streak__pt_viewEntries"), messageBlock.processedViews, maxViewsToRender);
            blockContainer.find(".streak__pt_detailsLink").click(function () {
                self._callDelegatesForClick(messageBlock)
            });
            this._el.append(blockContainer)
        },
        _renderViewEntries: function (parentEl, processedViews, maxViewsToRender) {
            var self = this;
            for (var ii = 0; ii < Math.min(processedViews.length, maxViewsToRender); ii++) {
                var renderedView = self._renderViewEntry(processedViews[ii]);
                parentEl.append(renderedView)
            }
        },
        _getDate: function (viewObj) {
            var date = Date.create(viewObj.mostRecentView).customFormat("longDateTime");
            var timeSummary = Streak.moment(viewObj.mostRecentView).fromNow();
            var viewed = Locale.getString("pt_most_recently");
            if (viewObj.viewCount === 1) viewed = Locale.getString("pt_viewed");
            var timeString = viewed + "<b>" + timeSummary + "</b>";
            return timeString
        },
        _renderViewEntry: function (viewObj) {
            var self = this;
            var date = self._getDate(viewObj);
            return $(self._templates.entry({
                name: viewObj.displayName,
                time: date,
                view_count: BB.Locale.getString("pixel_track_view_count", {
                    number: viewObj.viewCount,
                    pluralize: [viewObj.viewCount]
                }),
                iconClass: CONSTANTS.DEVICE_MAP[viewObj.requestInformation.device],
                deviceName: BB.Locale.getString(CONSTANTS.TRANSLATION_MAP[viewObj.requestInformation.device])
            }))
        },
        refreshingTrackedThread: function () {
            this._el.find(".pt_views_refreshing").show()
        },
        destroy: function () {
            this._el.remove()
        }
    });
    var CONSTANTS = {
        DEVICE_MAP: {
            "MAC": "streak__macIcon",
            "WINDOWS_PC": "streak__windowsIcon",
            "IPAD": "streak__ipadIcon",
            "IPHONE": "streak__iphoneIcon",
            "ANDROID_PHONE": "streak__androidPhoneIcon",
            "ANDROID_TABLET": "streak__androidTabletIcon",
            "OTHER": "streak__otherDeviceIcon",
            "GMAIL_PROXY": "streak__gmailProxyIcon"
        },
        TRANSLATION_MAP: {
            "MAC": "device_mac",
            "WINDOWS_PC": "device_windows_pc",
            "IPAD": "device_ipad",
            "IPHONE": "device_iphone",
            "ANDROID_PHONE": "device_android_phone",
            "ANDROID_TABLET": "device_android_tablet",
            "OTHER": "device_other",
            "GMAIL_PROXY": "device_gmail_proxy"
        }
    };
    BB.Modules.TrackedLinkOverviewView = TrackedLinkOverviewView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var TrackedLinkOverviewViewController = function () {
        var self = this;
        Streak.ViewControllerBase.call(this);
        self._view = new BB.Modules.TrackedLinkOverviewView;
        self._view.addDelegate(self)
    };
    TrackedLinkOverviewViewController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(TrackedLinkOverviewViewController.prototype, {
        getView: function () {
            var self = this;
            return self._view
        },
        destroy: function () {
            var self = this;
            if (_.isReal(self._view)) self._view.destroy()
        },
        gmailThreadRowsChanged: function (messageBlocks) {
            this._view.refresh(messageBlocks)
        },
        moreDetailsLinkClick: function (selectedMessageBlock) {
            this._callDelegateFunction("moreDetailsLinkClick", selectedMessageBlock)
        },
        refreshingTrackedThread: function () {
            this._view.refreshingTrackedThread()
        },
        trackedThreadRefreshed: function () {
            this._view.trackedThreadRefreshed()
        }
    });
    BB.Modules.TrackedLinkOverviewViewController = TrackedLinkOverviewViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var TrackedLinkInformationView = function () {
        var self = this;
        self._delegates = [];
        self._el = $(HTML.get("pt_info_main_container")());
        self._activeView = null;
        self._detailView = null;
        self._overviewView = null;
        self._isDetailView = false;
        self._messageBlocks = null
    };
    _.extend(TrackedLinkInformationView.prototype, {
        setOverviewView: function (view) {
            var self = this;
            self._overviewView = view;
            view.getElement().smallHide();
            self._el.append(view.getElement())
        },
        setDetailView: function (view) {
            var self = this;
            self._detailView = view;
            view.getElement().smallHide();
            self._el.append(view.getElement())
        },
        detailsDidShow: function () {
            var self = this;
            if (_.isReal(self._activeView)) self._activeView.getElement().smallHide();
            self._activeView = self._detailView;
            self._activateNewActiveView();
            self._isDetailView = true;
            self._setDetailViewHeight()
        },
        overviewDidShow: function () {
            var self = this;
            if (_.isReal(self._activeView)) self._activeView.getElement().smallHide();
            self._activeView = self._overviewView;
            self._activateNewActiveView();
            self._isDetailView = false;
            self._setOverviewHeight()
        },
        gmailThreadRowsChanged: function (messageBlocks) {
            this._messageBlocks = messageBlocks;
            if (this._isDetailView) this._setDetailViewHeight();
            else this._setOverviewHeight()
        },
        _setOverviewHeight: function () {
            if (!this._messageBlocks) return;
            var lastBlock = _.last(this._messageBlocks);
            this._el.height(lastBlock.geometry.bottom);
            this._el.removeClass("pt_info_main_container__detailView")
        },
        _setDetailViewHeight: function () {
            if (!this._messageBlocks) return;
            var lastBlock = _.last(this._messageBlocks);
            this._el.css("height", "");
            this._el.addClass("pt_info_main_container__detailView")
        },
        _activateNewActiveView: function () {
            var self = this;
            self._activeView.getElement().smallShow()
        },
        getElement: function () {
            var self = this;
            return self._el
        },
        refresh: function () {
            var self = this;
            self._activeView.refresh()
        },
        destroy: function () {
            var self = this;
            if (_.isReal(self._view) && _.isReal(self._view.remove)) self._el.remove()
        }
    });
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    BB.Modules.TrackedLinkInformationView = TrackedLinkInformationView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var TrackedLinkInformationViewController = function () {
        var self = this;
        Streak.ViewControllerBase.call(this);
        self._view = new BB.Modules.TrackedLinkInformationView;
        self._overviewController = new BB.Modules.TrackedLinkOverviewViewController;
        self._overviewController.addDelegate(self);
        self._view.setOverviewView(self._overviewController.getView());
        self._detailsController = new BB.Modules.TrackedLinkDetailsViewController;
        self._detailsController.addDelegate(self);
        self._view.setDetailView(self._detailsController.getView());
        self._viewRefreshCallback = $.noop();
        self._view.overviewDidShow()
    };
    TrackedLinkInformationViewController.prototype = Object.create(Streak.ViewControllerBase.prototype);
    _.extend(TrackedLinkInformationViewController.prototype, {
        gmailThreadRowsChanged: function (gmailMessageBlocks) {
            var self = this;
            self._overviewController.gmailThreadRowsChanged(gmailMessageBlocks);
            self._view.gmailThreadRowsChanged(gmailMessageBlocks)
        },
        moreDetailsLinkClick: function (selectedMessageBlock) {
            var self = this;
            self._detailsController.update(selectedMessageBlock);
            self._view.detailsDidShow();
            self._callDelegateFunction("moreDetailsLinkClick", selectedMessageBlock)
        },
        circleDidZoomIn: function (selectedMessageBlock) {
            var self = this;
            self._detailsController.update(selectedMessageBlock);
            self._view.detailsDidShow()
        },
        circleDidZoomOut: function () {
            var self = this;
            self._view.overviewDidShow()
        },
        lessDetailsLinkClick: function () {
            var self = this;
            self._view.overviewDidShow();
            self._callDelegateFunction("lessDetailsLinkClick")
        },
        refreshingTrackedThread: function () {
            this._callDelegateFunction("refreshingTrackedThread")
        },
        destroy: function () {
            var self = this;
            this._overviewController.destroy();
            this._detailsController.destroy();
            this._view.destroy()
        }
    });
    BB.Modules.TrackedLinkInformationViewController = TrackedLinkInformationViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var PixelTrackerOnComposeViewController = Streak.Class.subclass({
        superclass: BB.Modules.ComposeViewControllerBase,
        _memberVariables: [{
            name: "_usedSnippets",
            destroy: false
        }, {
            name: "_isTrackedSend",
            destroy: true
        }, {
            name: "_shareModal",
            destroy: true
        }, {
            name: "_button",
            destroy: true
        }, {
            name: "_notificationUnbinder",
            destroy: false
        }, {
            name: "_backupContacts",
            destroy: false
        }],
        _initialize: function () {
            BB.Modules.ComposeViewControllerBase.prototype._initialize.call(this);
            this._usedSnippets = [];
            this._guid = null;
            this._isTrackedSend = false;
            this._shareModal = null;
            this._button = null;
            this._notificationUnbinder = null;
            this._debouncedCreateThread = _.debounce(this._createTrackedLink.bind(this), 500)
        },
        initialize: function (composeWindowViewController) {
            this._composeWindowViewController = composeWindowViewController;
            this._setupTrackingToggleButton();
            return this
        },
        shouldProcessModification: function () {
            return BB.Services.PixelTrackingLimiter.isTrackingEnabled()
        },
        getModificationType: function () {
            return "ADD_ELEMENT"
        },
        getModificationArea: function () {
            return "BOTTOM_TOOLBAR"
        },
        getModificationPlacement: function () {
            return "BEFORE_FORMATTING"
        },
        getModificationPriority: function () {
            return 5
        },
        getModificationElement: function () {
            return this._button.getElement()
        },
        allModificationsInitialized: function () {
            if (!this._button) this._setupTrackingToggleButton();
            this._isTrackedSend = this._shouldTrackByDefault() && BB.Services.PixelTrackingLimiter.isTrackingEnabled();
            if (this._shouldTrack() && this._overLimit()) {
                this._setCurrentTrackingStatusOff(BB.Locale.getString("tracking_over_limit"));
                return
            }
            if (this._shouldTrack()) this._setCurrentTrackingStatusOn();
            else this._setCurrentTrackingStatusOff()
        },
        _overLimit: function () {
            return !BB.Services.PixelTrackingLimiter.canTrackEmails()
        },
        turnOffTracking: function () {
            this._setCurrentTrackingStatusOff();
            this._composeWindowViewController.notify("pixelTrackingOff")
        },
        sendLaterScheduled: function () {
            this._button.disable();
            this._setCurrentTrackingStatusOff(BB.Locale.getString("tracking_off_because_send_later"))
        },
        sendLaterCancelled: function () {
            this._button.enable()
        },
        _setupTrackingToggleButton: function () {
            var self = this;
            this._button = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "GmailIcon",
                color: "icon",
                iconClass: "streak__pixelTrackerIconOnCompose",
                onFunction: function () {
                    self._toggleTracking()
                }
            });
            this._button.addClass("streak__pixelTrackerOnComposeButton");
            this._notificationUnbinder = Streak.NotificationCenter.addFunction({
                eventName: "defaultTrackingSettingChanged",
                functionToCall: this._notificationToggleTracking,
                functionContext: this
            })
        },
        _notificationToggleTracking: function () {
            if (this._shouldTrackByDefault()) this._setCurrentTrackingStatusOn();
            else this._setCurrentTrackingStatusOff()
        },
        _toggleTracking: function () {
            if (!BB.Services.PixelTrackingLimiter.canTrackEmails()) {
                this._showShareModal();
                return
            }
            if (this._shouldTrack()) {
                this._setTrackingOff();
                BB.Tracker.track("pixel tracking toggled on")
            } else {
                this._setTrackingOn();
                BB.Tracker.track("pixel tracking toggled off")
            }
        },
        _setTrackingOn: function () {
            track("pixel_track_disable");
            this._setCurrentTrackingStatusOn();
            this._composeWindowViewController.notify("pixelTrackingOn")
        },
        _setTrackingOff: function () {
            track("pixel_track_enable");
            this._setCurrentTrackingStatusOff();
            this._composeWindowViewController.notify("pixelTrackingOff")
        },
        _setCurrentTrackingStatusOn: function () {
            this._isTrackedSend = true;
            this._button.removeClass("streak__pixelTrackerIcon_unselected");
            this._button.addClass("streak__pixelTrackerIcon_selected");
            this._button.setTooltip(BB.Locale.getString("pixel_track_current_on"));
            if (this._composeWindowViewController) this._composeWindowViewController.notify("pixelTrackingOn")
        },
        _setCurrentTrackingStatusOff: function (tooltip) {
            this._isTrackedSend =
                false;
            this._button.removeClass("streak__pixelTrackerIcon_selected");
            this._button.addClass("streak__pixelTrackerIcon_unselected");
            if (tooltip) this._button.setTooltip(tooltip);
            else this._button.setTooltip(BB.Locale.getString("pixel_track_current_off")); if (this._composeWindowViewController) this._composeWindowViewController.notify("pixelTrackingOff")
        },
        _setSavedTrackingStatus: function (value) {
            BB.UserSettings.set("pixelTracker/shouldTrack", value);
            BB.UserSettings.saveSettings()
        },
        _shouldTrackByDefault: function () {
            return BB.Data.streakSettings.settingIsEnabled("tracking_default_on_setting")
        },
        _shouldTrack: function () {
            return this._isTrackedSend
        },
        aboutToSend: function () {
            if (this._shouldTrack()) {
                this._injectTrackingHTML();
                this._backupContacts = this._composeWindowViewController.getToContacts()
            }
        },
        _showShareModalOnOpen: function () {
            if (BB.Services.PixelTrackingLimiter.shouldShowShareModalOnOpen()) this._showShareModal()
        },
        _showShareModal: function () {
            this._shareModal = Streak.Library.getInstance("BentoBox.Modules.PixelTrackingShareModalViewController");
            this._shareModal.show(function () {});
            BB.Services.PixelTrackingLimiter.registerSeenShareModal()
        },
        _injectTrackingHTML: function () {
            this._guid = BB.PixelTrackingHTMLGenerator.injectTrackingHTML(this._composeWindowViewController)
        },
        threadResponse: function (thread) {
            if (!this._shouldTrack()) return;
            this._debouncedCreateThread(thread)
        },
        _createTrackedLink: function (thread) {
            var self = this;
            var guid = this._guid;
            var threadId = thread.key();
            var subject = thread.get("subject");
            var emails = thread.get("emailAddresses");
            var names = thread.get("names");
            var snippetKeyList = this._getUsedSnippetKeys();
            if (!emails || !names || emails.length ===
                0 || names.length === 0) {
                emails = this._getBackupEmailAddresses();
                names = this._getBackupNames()
            }
            Gmail.RFCMessageIdExtractor.getRFCMessageIdForThread(thread, function (messageId) {
                var trackedLink = new Streak.BentoBox.Models.TrackedLink({
                    "guid": guid,
                    "hexGmailThreadId": threadId,
                    "subject": subject,
                    "names": names,
                    "emails": emails,
                    "snippetKeyList": snippetKeyList,
                    "isMailMerge": false,
                    "rfcMessageId": messageId
                });
                trackedLink.save();
                Streak.NotificationCenter.notify({
                    eventName: "trackedEmailSent"
                });
                BB.Modules.PixelTrackerConversationImageFixer.sendIgnoreImageRequest(guid)
            });
            track("pixel_track_email_sent")
        },
        snippetAdded: function (snippet) {
            this._usedSnippets.push(snippet)
        },
        mailHelperSendingEmails: function () {
            this._isTrackedSend = false
        },
        _getUsedSnippetKeys: function () {
            return _.map(this._usedSnippets, function (snippet) {
                return snippet.key()
            })
        },
        _getBackupEmailAddresses: function () {
            if (!this._backupContacts) return [];
            return _.pluck(this._backupContacts, "emailAddress")
        },
        _getBackupNames: function () {
            if (!this._backupContacts) return [];
            return _.pluck(this._backupContacts, "name")
        },
        _getThreadRFCMessageId: function (thread,
            callback) {
            var self = this;
            Streak.Requester.gmailGet({
                view: "om",
                th: thread.key()
            }, function (response) {
                var messageId;
                try {
                    messageId = self._extractRFCMessageId(response)
                } catch (err) {}
                if (messageId) {
                    callback(messageId);
                    return
                }
                BB.logError("extracting messageId\n" + response);
                callback()
            }, function () {
                BB.logError("rfc message id request failed");
                callback()
            })
        },
        _extractRFCMessageId: function (response) {
            if (!response) return;
            var parts = response.split(/\r|\n/);
            if (parts.length === 1) return;
            var messageParts = _.filter(parts, function (part) {
                return part.match(/Message-ID/)
            });
            if (messageParts.length !== 1) return;
            return messageParts[0].replace(/.*\<(.*)?\>.*/, "$1")
        },
        destroy: function () {
            if (this._notificationUnbinder) this._notificationUnbinder();
            var backupContacts = this._backupContacts;
            var backupIsTrackedSend = this._isTrackedSend;
            BB.Modules.ComposeViewControllerBase.prototype.destroy.call(this);
            this._backupContacts = backupContacts;
            this._isTrackedSend = backupIsTrackedSend
        }
    });
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    BB.Modules.PixelTrackerOnComposeViewController =
        PixelTrackerOnComposeViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackerOnComposeMasterController = function () {
        Gmail.GmailComposeManager.registerModifierModule(this)
    };
    _.extend(PixelTrackerOnComposeMasterController.prototype, {
        getViewControllers: function () {
            return new BB.Modules.PixelTrackerOnComposeViewController
        }
    });
    DependencyManager.addFunction({
        functionKey: "pixelTrackerOnComposeMasterControllerInitialized",
        functionToCall: function (callback) {
            if (!BB.Modules.PixelTrackerOnComposeMasterController) BB.Modules.PixelTrackerOnComposeMasterController =
                new PixelTrackerOnComposeMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailComposeWindowMasterControllerInitialized", "gmailLoaded", "userLoggedIn", "pixelTrackingLimiterInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        _ = Streak._;
    var PixelTrackerOnReplyViewController = Streak.Class.subclass({
        superclass: BB.Modules.PixelTrackerOnComposeViewController,
        _memberVariables: [{
            name: "_threadId",
            destroy: false
        }],
        initialize: function (composeWindowViewController) {
            BB.Modules.PixelTrackerOnComposeViewController.prototype.initialize.call(this, composeWindowViewController);
            var activeThread = BB.Threads.getActiveThread();
            if (activeThread) this._threadId =
                activeThread.key()
        },
        _showShareModalOnOpen: function () {},
        aboutToSend: function () {
            if (this._shouldTrack()) {
                this._injectTrackingHTML();
                var fakeThread = this._createFakeReplyThread();
                this.threadResponse(fakeThread);
                BB.Tracker.track("pixel tracking send tracked reply")
            }
        },
        _createFakeReplyThread: function () {
            var fakeThread = BB.Models.ClientGmailThread.create();
            var activeThread = BB.Threads.getActiveThread();
            fakeThread.set("threadGmailId", activeThread.key());
            var names = this._extractNames();
            var emails = this._extractEmailAddresses();
            fakeThread.set("emailAddresses", emails);
            fakeThread.set("names", names);
            fakeThread.set("subject", activeThread.get("subject"));
            return fakeThread
        },
        _extractNames: function () {
            var contacts = this._composeWindowViewController.getToContacts();
            return _.map(contacts, function (contact) {
                return contact.name || contact.emailAddress
            })
        },
        _extractEmailAddresses: function () {
            var contacts = this._composeWindowViewController.getToContacts();
            return _.map(contacts, function (contact) {
                return contact.emailAddress
            })
        },
        _trackedLinkSaved: function (trackedLink) {
            var trackedThread =
                BB.Data.getTrackedThread(trackedLink.get("hexGmailThreadId"));
            if (trackedThread) trackedThread.addTrackedLink(trackedLink.getObj())
        }
    });
    BB.Modules.PixelTrackerOnReplyViewController = PixelTrackerOnReplyViewController
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackerOnReplyMasterController = function () {
        Gmail.GmailReplyManager.registerModifierModule(this)
    };
    _.extend(PixelTrackerOnReplyMasterController.prototype, {
        getViewControllers: function () {
            return [new BB.Modules.PixelTrackerOnReplyViewController]
        }
    });
    DependencyManager.addFunction({
        functionKey: "pixelTrackerOnReplyMasterControllerInitialized",
        functionToCall: function (callback) {
            if (!BB.Modules.PixelTrackerOnReplyMasterController) BB.Modules.PixelTrackerOnReplyMasterController = new PixelTrackerOnReplyMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailComposeWindowMasterControllerInitialized", "gmailLoaded", "userLoggedIn", "pixelTrackingLimiterInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        jwerty = Streak.jwerty,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Locale = Streak.Locale,
        HTML = Streak.HTML,
        Data = Streak.BentoBox.Data,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        TRACKED_KEY: "\u1427",
        URL_KEY: "%E1%90%A7",
        SEARCH_URL: "%E1%90%A7+from%3Ame",
        SEARCH_REPLACEMENT: "has:tracking",
        GMAIL_SELECTED_CLASS: "ain",
        GMAIL_SELECTED_INNER_CLASS: "nZ aiq",
        GMAIL_HOVER_CLASS: "NQ",
        EXPANDO_POINT_DOWN_CLASS: "aih",
        EXPANDO_POINT_RIGHT_CLASS: "aii",
        EXPANDO_HOVER_CLASS: "aij"
    };
    CONSTANTS.TRACKED_KEY_REGEX =
        new RegExp(CONSTANTS.TRACKED_KEY, "img");
    CONSTANTS.REPLACE_KEY_REGEX = new RegExp(CONSTANTS.SEARCH_REPLACEMENT, "img");
    var PixelTrackerSearch = {
        CONSTANTS: CONSTANTS,
        _sentMailLink: null,
        _searchLink: null,
        _expando: null,
        init: function (callback) {
            if (!BB.Services.PixelTrackingLimiter.isTrackingEnabled()) {
                if (callback) callback();
                return
            }
            if (!this._isSentMailLinkValid()) BB.logError("sent mail left link not found");
            else {
                this._setupSearchLink();
                this._setupSearchButtonObserver();
                this._setupSearchBarOverride();
                this._setupHighlightSearchLinkObserver()
            } if (callback) callback()
        },
        _isSentMailLinkValid: function () {
            var sentMailLink = Gmail.getSentMailLink();
            if (!sentMailLink || sentMailLink.length === 0) return false;
            return true
        },
        _setupSearchLink: function () {
            this._sentMailLink = Gmail.getSentMailLink();
            this._addSearchLinkEntry();
            this._addToggleButtonToSentMailLink();
            this._updateSearchLinkVisibilityStatusUI()
        },
        _addSearchLinkEntry: function () {
            var self = this;
            this._searchLink = HTML.get("pixelTrackerLeftSearchLink", true);
            this._searchLink.click(function (e) {
                BB.UI.setURL("search/" + CONSTANTS.SEARCH_URL);
                e.preventDefault();
                e.stopPropagation();
                track("pixel_track_search", {
                    type: "mouse",
                    source: "link"
                })
            });
            this._searchLink.find(".TO").easyHoverClass(CONSTANTS.GMAIL_HOVER_CLASS);
            this._sentMailLink.append(this._searchLink)
        },
        _addToggleButtonToSentMailLink: function () {
            var self = this;
            this._expando = $('<div class="TH J-J5-Ji expando streak__pt_sentMailExpando" role="link" tabindex="0"></div>');
            this._expando[0].addEventListener("click", function (e) {
                self._toggleSearchLinkVisibilityStatus();
                e.preventDefault();
                e.stopPropagation();
                track("pixel_track_toggle_visibility")
            }, true);
            this._expando.easyHoverClass(CONSTANTS.EXPANDO_HOVER_CLASS);
            this._sentMailLink.find("> .TO > .TN").prepend(this._expando)
        },
        _toggleSearchLinkVisibilityStatus: function () {
            var currentStatus = this._getCurrentVisibilityStatus();
            var newStatus = !currentStatus;
            BB.UserSettings.set("pixelTracking/searchLinkVisible", newStatus);
            BB.UserSettings.save();
            this._updateSearchLinkVisibilityStatusUI()
        },
        _getCurrentVisibilityStatus: function () {
            return BB.UserSettings.getSetting("pixelTracking/searchLinkVisible")
        },
        _updateSearchLinkVisibilityStatusUI: function () {
            var status = this._getCurrentVisibilityStatus();
            if (status === true) {
                this._expando.addClass(CONSTANTS.EXPANDO_POINT_DOWN_CLASS);
                this._expando.removeClass(CONSTANTS.EXPANDO_POINT_RIGHT_CLASS);
                this._sentMailLink.find(".streak__pixelTrackerSearchLink").show()
            } else {
                this._expando.removeClass(CONSTANTS.EXPANDO_POINT_DOWN_CLASS);
                this._expando.addClass(CONSTANTS.EXPANDO_POINT_RIGHT_CLASS);
                this._sentMailLink.find(".streak__pixelTrackerSearchLink").hide()
            }
        },
        _setupSearchBarOverride: function () {
            var self =
                this;
            Gmail.observe("viewChanged", function () {
                var searchInput = Gmail.getSearchInput();
                var searchVal = searchInput.val();
                if (searchVal) self._replaceSearchText(CONSTANTS.TRACKED_KEY_REGEX, CONSTANTS.SEARCH_REPLACEMENT);
                else if (self._doesURLHaveTrackingSearch()) setTimeout(function () {
                    self._replaceSearchText(CONSTANTS.TRACKED_KEY_REGEX, CONSTANTS.SEARCH_REPLACEMENT)
                }, 500)
            }, 1E3)
        },
        _setupSearchButtonObserver: function () {
            var self = this;
            var searchButton = Gmail.getSearchButton();
            if (!searchButton || searchButton.length ===
                0) return;
            var searchInput = Gmail.getSearchInput();
            searchButton = searchButton[0];
            searchButton.addEventListener("mousedown", function (e) {
                self._replaceSearchText(CONSTANTS.REPLACE_KEY_REGEX, '"' + CONSTANTS.TRACKED_KEY + '"');
                track("pixel_track_search", {
                    type: "mouse",
                    source: "searchButton"
                })
            }, true);
            searchButton.addEventListener("keydown", function (e) {
                    if (jwerty.is("space/enter", e)) {
                        self._replaceSearchText(CONSTANTS.REPLACE_KEY_REGEX, '"' + CONSTANTS.TRACKED_KEY + '"');
                        track("pixel_track_search", {
                            type: "keyboard",
                            source: "searchButton"
                        })
                    }
                },
                true);
            searchInput[0].addEventListener("keydown", function (e) {
                if (jwerty.is("enter", e)) {
                    self._replaceSearchText(CONSTANTS.REPLACE_KEY_REGEX, '"' + CONSTANTS.TRACKED_KEY + '"');
                    track("pixel_track_search", {
                        type: "keyboard",
                        source: "searchInput"
                    })
                }
            }, true)
        },
        _setupHighlightSearchLinkObserver: function () {
            var self = this;
            Gmail.observe("viewChanged", function () {
                if (self._doesURLHaveTrackingSearch()) {
                    self._searchLink.addClass(CONSTANTS.GMAIL_SELECTED_CLASS);
                    self._searchLink.find(".TO").addClass(CONSTANTS.GMAIL_SELECTED_INNER_CLASS)
                } else {
                    self._searchLink.removeClass(CONSTANTS.GMAIL_SELECTED_CLASS);
                    self._searchLink.find(".TO").removeClass(CONSTANTS.GMAIL_SELECTED_INNER_CLASS)
                }
            })
        },
        _replaceSearchText: function (find, replaceText) {
            var searchInput = Gmail.getSearchInput();
            var searchVal = searchInput.val();
            searchInput.val(searchVal.replace(find, replaceText))
        },
        _doesURLHaveTrackingSearch: function () {
            return location.hash.indexOf(CONSTANTS.URL_KEY) > -1
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerSearchInitialized",
        functionToCall: PixelTrackerSearch.init,
        functionContext: PixelTrackerSearch,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "localeLoaded", "userLoggedIn", "pixelTrackingLimiterInitialized", "userSettingsInitialized"]
    });
    BB.Modules.PixelTrackerSearch = PixelTrackerSearch;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        APIRequester = Streak.APIRequester,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var IGNORE_IMAGE_WAIT_TIME = 5 * 1E3;
    var PixelTrackerConversationImageFixer = Streak.Class.subclass({
        className: "PixelTrackerConversationImageFixer",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            Streak.DomWatcher.watchForNewSelector("[role=main] .h7 .Bk > div", this._handleConversationMessageLoaded.bind(this));
            Streak.DomWatcher.watchForNewSelector("[contenteditable=true]", this._handleEditorLoaded.bind(this));
            Streak.DomWatcher.watchForNewSelector("[contenteditable=true] > .gmail_extra", this._handleConversationMessageLoaded.bind(this));
            NotificationCenter.addFunction({
                eventName: "newReplyArea",
                functionToCall: this._newReplyArea,
                functionContext: this
            })
        },
        _handleEditorLoaded: function (editorNode) {
            this._handleConversationMessageLoaded(editorNode);
            $(editorNode).find('[hspace="streak-pt-mark"]').remove()
        },
        _handleConversationMessageLoaded: function (messageNode) {
            var markerNodes = $(messageNode).find('[hspace="streak-pt-mark"]');
            for (var ii = 0; ii < markerNodes.length; ii++) this._processMarkerNode(markerNodes[ii])
        },
        _processMarkerNode: function (markerNode) {
            var node = $(markerNode);
            var guid = this._extractGuid(node);
            if (!guid) return;
            this.sendIgnoreImageRequest(guid)
        },
        _extractGuid: function (node) {
            var img = node.find("img");
            return this._extractGuidFromURL(img[0].src)
        },
        _newReplyArea: function (eventParameters) {
            var replyAreaViewController = eventParameters.replyAreaController;
            var draftValue = replyAreaViewController.getHiddenDraftValue();
            if (draftValue.indexOf("guid=") === -1) return;
            if (draftValue.indexOf("<img") === -1) return;
            draftValue = draftValue.replace(/\<img/img, "<fakeimage");
            var div = Streak.$(document.createElement("div"));
            div[0].innerHTML = draftValue;
            var fakeImages = div.find("fakeimage");
            for (var ii = 0; ii < fakeImages.length; ii++) this._processFakeImage(fakeImages[ii])
        },
        _processFakeImage: function (fakeImageNode) {
            var node =
                $(fakeImageNode);
            var guid = this._extractGuidFromURL(node.attr("src"));
            if (!guid) return;
            this.sendIgnoreImageRequest(guid)
        },
        _extractGuidFromURL: function (src) {
            if (!src) return;
            var parts = src.split("#");
            var unproxiedURL = parts[0];
            if (parts.length > 1) unproxiedURL = parts[1];
            if (unproxiedURL.indexOf("mailfoo") === -1 && unproxiedURL.indexOf("streak") === -1) return;
            if (unproxiedURL.indexOf("sender=") > -1)
                if (this._doesNotContainUserEmail(unproxiedURL)) return;
            var index = src.indexOf("guid=");
            if (index === -1) return;
            return src.substring(index +
                5)
        },
        _doesNotContainUserEmail: function (unproxiedURL) {
            var encodedEmail = encodeURIComponent(BB.getUser().getEmail());
            var base64EncodedEmail = BB.PixelTrackingHTMLGenerator.getEncodedEmailAddress();
            return unproxiedURL.indexOf("sender=" + encodedEmail) === -1 && unproxiedURL.indexOf("sender=" + BB.getUser().getEmail()) === -1 && unproxiedURL.indexOf("sender=" + base64EncodedEmail) === -1
        },
        sendIgnoreImageRequest: function (guid) {
            setTimeout(function () {
                APIRequester.create({
                    msgUrl: "trackedlinks/" + guid + "/ignoredviews"
                })
            }, IGNORE_IMAGE_WAIT_TIME)
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerConversationImageFixerInitialized",
        functionToCall: function (callback) {
            Library.set("BentoBox.Modules.PixelTrackerConversationImageFixer", new PixelTrackerConversationImageFixer);
            if (callback) callback()
        },
        dependentFunctionKeys: ["gmailLoaded", "userLoggedIn"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var Bar = {
        defaults: {
            showLeft: true,
            showRight: true,
            cancelFunc: $.noop,
            leftButtonFunction: $.noop,
            rightButtonFunction: $.noop,
            leftButtonText: "Previous",
            rightButtonText: "Next",
            rightButtonHTML: null,
            leftButtonHTML: null,
            leftButtonColor: "blue",
            rightButtonColor: "blue",
            showRightButton: true,
            showLeftButton: true,
            hideLeftButton: true,
            html: "",
            customClasses: "",
            linkText: "Exit Tour",
            showLink: true
        },
        templates: {},
        create: function (options) {
            this._init();
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o, this.defaults)
        },
        _init: function () {
            if (!this.templates.Bar) this.templates.Bar = HTML.get("TourBar")
        }
    };
    Bar.impl = function (_options, defaults) {
        var htmlElements = [];
        var _bar = null;
        var self = this;
        self.options = _options;
        self.defaults = defaults;
        var reuse = function (_options) {
            var o = {};
            $.extend(o, self.defaults, _options);
            self.options = o;
            refresh()
        };
        var refresh = function () {
            self._barHTML.children(".barContent").append(self.options.html);
            $(self._barHTML).addClass(self.options.customClasses);
            self._rButton.setOnFunc(self.options.rightButtonFunction);
            $(self._rButton.el).html(self.options.rightButtonText);
            var rDisplay = self.options.showRightButton ? "visible" : "hidden";
            $(self._rButton.el).css("visibility", rDisplay);
            self._lButton.setOnFunc(self.options.leftButtonFunction);
            $(self._lButton.el).html(self.options.leftButtonText);
            var lDisplay = self.options.showLeftButton ? "visible" : "hidden";
            $(self._lButton.el).css("visibility", lDisplay);
            if (self.options.hideLeftButton) $(self._lButton.el).hide()
        };
        var show =
            function () {
                var barHTMLString = Bar.templates.Bar({
                    content: ""
                });
                var barHTML = $(barHTMLString);
                barHTML.append(self.options.html);
                self._barHTML = barHTML;
                var lButton = BB.Widgets.Button.create({
                    name: self.options.leftButtonText,
                    color: self.options.leftButtonColor,
                    onFunc: self.options.leftButtonFunction
                });
                barHTML.addClass(self.options.customClasses);
                barHTML.children(".__streak_barLeftButton").append($(lButton.el));
                if (!self.options.showLeftButton) $(lButton.el).css("visibility", "hidden");
                self._lButton = lButton;
                var rButton =
                    BB.Widgets.Button.create({
                        name: self.options.rightButtonText,
                        color: self.options.rightButtonColor,
                        onFunc: function () {
                            self.options.rightButtonFunction()
                        }
                    });
                barHTML.children(".barRightButton").append($(rButton.el));
                self._rButton = rButton;
                if (!self.options.showRightButton) rButton.el.css("visibility", "hidden");
                if (self.options.showLink) {
                    if (!self.options.showLeftButton && !self.options.showRightButton) {
                        barHTML.find(".__streak_barLeftButton").hide();
                        barHTML.find(".barRightButton").hide();
                        barHTML.find(".streakTourBarOr").hide()
                    }
                    var link =
                        barHTML.find(".streakTourBarExit");
                    link.click(self.options.cancelFunc)
                }
                barHTML.appendTo(Streak.Gmail.elements.body);
                htmlElements.push(barHTML);
                _bar = barHTML
        }, hide = function () {
                _.each(htmlElements, function (element) {
                    $(element).hide()
                })
            };
        unhide = function () {
            _.each(htmlElements, function (element) {
                $(element).show()
            })
        };
        destroy = function () {
            _.each(htmlElements, function (element) {
                $(element).remove()
            })
        };
        return {
            show: show,
            "hide": hide,
            "unhide": unhide,
            destroy: destroy,
            reuse: reuse,
            getType: function () {
                return "BAR"
            }
        }
    };
    BB.Widgets.Tour =
        BB.Widgets.Tour || {};
    BB.Widgets.Tour.Bar = Bar
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var Highlight = {
        defaults: {
            targetElement: null,
            clickCallback: $.noop,
            buffer: 5
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    Highlight.impl = function (options) {
        var uiElements = {};
        var createDiv = function (css, id, borderHighlight) {
            var div = uiElements[id];
            if (!div) {
                div = $("<div> </div>");
                div.addClass("tour_highlight");
                if (borderHighlight) div.addClass("tour_highlight_border tour_highlight_border_" +
                    borderHighlight);
                if (_.isReal(options.backgroundOpacity)) div.css({
                    opacity: options.backgroundOpacity
                });
                $(Streak.Gmail.elements.body).append(div)
            }
            div.unbind("click").click(function () {
                options.clickCallback()
            });
            div.css(css);
            uiElements[id] = div
        };
        var createTopLeft = function (el) {
            createDiv({
                left: 0,
                width: Math.max(elementCoordinates.topLeft.x, 0) + "px",
                top: 0,
                height: Math.max(elementCoordinates.topLeft.y, 0) + "px"
            }, "topLeft")
        };
        var createTop = function (el) {
            createDiv({
                left: elementCoordinates.topLeft.x + "px",
                top: 0,
                width: Math.max(elementCoordinates.width,
                    0) + "px",
                height: Math.max(elementCoordinates.topLeft.y, 0) + "px"
            }, "top", "bottom")
        };
        var createTopRight = function (el) {
            createDiv({
                left: elementCoordinates.bottomRight.x + "px",
                right: 0,
                top: 0,
                height: Math.max(elementCoordinates.topLeft.y, 0) + "px"
            }, "topRight")
        };
        var createLeft = function (el) {
            createDiv({
                left: 0,
                width: Math.max(elementCoordinates.topLeft.x, 0) + "px",
                top: 0,
                bottom: 0
            }, "left", "right")
        };
        var createRight = function (el) {
            createDiv({
                left: elementCoordinates.bottomRight.x + "px",
                right: 0,
                top: 0,
                bottom: 0
            }, "right", "left")
        };
        var createBottomLeft = function () {
            createDiv({
                bottom: 0,
                top: elementCoordinates.bottomRight.y + "px",
                left: 0,
                width: Math.max(elementCoordinates.topLeft.x, 0) + "px"
            }, "bottomLeft")
        };
        var createBottom = function (el) {
            createDiv({
                top: elementCoordinates.bottomRight.y + "px",
                left: elementCoordinates.topLeft.x + "px",
                width: Math.max(elementCoordinates.width, 0) + "px",
                bottom: 0
            }, "bottom", "top")
        };
        var createBottomRight = function () {
            createDiv({
                top: elementCoordinates.bottomRight.y + "px",
                left: elementCoordinates.bottomRight.x + "px",
                right: 0,
                bottom: 0
            }, "bottomRight")
        };
        var elementCoordinates = {
            topLeft: {
                x: 0,
                y: 0
            },
            bottomRight: {
                x: 0,
                y: 0
            }
        };
        var interval = null;
        var destroyed = false;
        var show = function () {
            destroyed = false;
            $(window).unbind("resize", position);
            $(window).bind("resize", position);
            interval = _.repeatEvery(position, 2E3)
        };
        var position = function () {
            var buffer = options.buffer;
            var target = $(options.targetElement || options.targetSelector);
            if (target.length === 0 || destroyed) {
                destroy();
                return
            }
            elementCoordinates.topLeft.x = target.offset().left - buffer;
            elementCoordinates.topLeft.y =
                target.offset().top - buffer;
            elementCoordinates.bottomRight.x = target.offset().left + target.outerWidth() + buffer;
            elementCoordinates.bottomRight.y = target.offset().top + target.outerHeight() + buffer;
            elementCoordinates.width = target.outerWidth() + 2 * buffer;
            elementCoordinates.height = target.outerHeight() + 2 * buffer;
            createTop();
            createLeft();
            createRight();
            createBottom()
        };
        var hide = function () {
            for (var key in uiElements) uiElements[key].hide()
        };
        var unhide = function () {
            for (var key in uiElements) uiElements[key].show()
        };
        var destroy =
            function () {
                destroyed = true;
                if (interval) interval.stop();
                for (var key in uiElements) uiElements[key].remove();
                uiElements = {};
                $(window).unbind("resize", position)
        };
        var reuse = function (newOptions) {
            _.extend(options, newOptions)
        };
        return {
            "show": show,
            "hide": hide,
            "unhide": unhide,
            "destroy": destroy,
            "reuse": reuse,
            "getType": function () {
                return "HIGHLIGHT"
            }
        }
    };
    BB.Widgets.Tour = BB.Widgets.Tour || {};
    BB.Widgets.Tour.Highlight = Highlight
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var TourModal = function (options) {
        BB.Widgets.Widget.call(this, options);
        var options = {
            inner: options.html,
            escClose: false,
            showCancel: options.showLeftButton,
            cancelText: options.leftButtonText,
            cancelButtonColor: options.leftButtonColor,
            showConfirm: options.showRightButton,
            confirmText: options.rightButtonText,
            close: false,
            force: true,
            overlayCss: {
                backgroundColor: "black"
            },
            opacity: 65,
            dontStack: true
        };
        this.options =
            _.extend({}, TourModal.prototype.defaults, options, this.options);
        this._modal = BB.Widgets.Modal.create(this.options)
    };
    TourModal.prototype = Object.create(BB.Widgets.Widget.prototype);
    _.extend(TourModal.prototype, {
        show: function () {
            return this._modal.show()
        },
        destroy: function () {
            if (this._modal.getEl().is(":FastVisible")) $.modal.close()
        },
        defaults: {
            showLink: false,
            linkText: "Exit",
            linkFunction: $.noop
        }
    });
    TourModal.create = function (options) {
        return new TourModal(options)
    };
    BB.Widgets.Tour = BB.Widgets.Tour || {};
    BB.Widgets.Tour.TourModal =
        TourModal
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var Overlay = {
        defaults: {
            tips: [],
            infoCss: {},
            infoTop: "50%",
            infoLeft: "50%",
            infoHTML: "",
            infoDescription: "",
            showRightButton: true,
            showLeftButton: true,
            leftButtonFunction: $.noop,
            rightButtonFunction: $.noop,
            leftButtonText: "Previous",
            rightButtonText: "Next",
            rightButtonHTML: null,
            leftButtonHTML: null,
            leftButtonColor: "blue",
            rightButtonColor: "blue",
            showInfo: true,
            overlayColor: "black",
            opacity: 0.65
        },
        create: function (options) {
            var o = {};
            $.extend(o, this.defaults, options);
            return new this.impl(o)
        }
    };
    Overlay.impl = function (options) {
        var dirtyUIElements = [];
        var miniTips = [];
        var self = this;
        var bgBlackout;
        var reuse = function (_options) {
            var o = {};
            $.extend(o, self.defaults, _options);
            self.options = o;
            refresh()
        };
        var refresh = function () {
            destroyElements(miniTips);
            generateMiniTips(self.options.tips)
        };
        var generateMiniTips = function (tips) {
            try {
                _.each(tips, function (tip) {
                    var minitip = createMiniTooltip(tip);
                    dirtyUIElements.push(minitip);
                    miniTips.push(minitip)
                })
            } catch (e) {}
        };
        var showOverlay = function () {
            bgBlackout = createShadowBackground(options.overlayColor, 9997, options.opacity);
            dirtyUIElements.push(bgBlackout);
            if (options.showInfo) {
                var infoContainer = $("<div> </div>");
                infoContainer.append(options.infoHTML);
                infoContainer.append('<div class="overlayButtons"></div>');
                infoContainer.css({
                    "position": "fixed",
                    "top": options.infoTop,
                    "left": options.infoLeft,
                    zIndex: 9998,
                    color: "white"
                });
                infoContainer.css(options.infoCss);
                dirtyUIElements.push(infoContainer);
                Streak.Gmail.elements.body.append(infoContainer);
                if (options.showLeftButton) {
                    var lButton = BB.Widgets.Button.create({
                        name: options.leftButtonText,
                        color: options.leftButtonColor,
                        onFunc: options.leftButtonFunction
                    });
                    $(infoContainer).children(".overlayButtons").append($(lButton.el))
                }
                if (options.showRightButton) {
                    var rButton = BB.Widgets.Button.create({
                        name: options.rightButtonText,
                        color: options.rightButtonColor,
                        onFunc: function () {
                            options.rightButtonFunction()
                        }
                    });
                    $(infoContainer).children(".overlayButtons").append($(rButton.el))
                }
            }
            generateMiniTips(options.tips)
        },
            createShadowBackground = function (color, zIndex, opacity) {
                var blackout = $(Streak.document.createElement("div"));
                blackout.addClass("tour-overlay");
                blackout.css("zIndex", zIndex || 9997);
                blackout.css("opacity", opacity || 0.5);
                blackout.css("background", color);
                Streak.Gmail.elements.body.append(blackout);
                dirtyUIElements.push(blackout);
                return blackout
            }, createMiniTooltip = function (tip) {
                jqueryObj = $(tip.targetElement);
                var zIndex = tip.zIndex || 9999;
                var stickyRight = tip.stickyRight;
                var offset = jqueryObj.offset();
                var blankDiv =
                    $(document.createElement("div"));
                blankDiv.addClass("bbOverlayTip");
                blankDiv.html(tip.description);
                if (jqueryObj.length > 0) {
                    var topBuffer = 15;
                    var leftBuffer = 0;
                    var rightBuffer = 10;
                    var newTop = offset.top + topBuffer + jqueryObj.height();
                    var newLeft = offset.left + leftBuffer;
                    var newRight = offset.left - rightBuffer + jqueryObj.width();
                    newRight = $(Gmail.elements.body).width() - newRight;
                    if (stickyRight) blankDiv.css("right", newRight + "px");
                    else blankDiv.css("left", newLeft + "px");
                    blankDiv.css("position", "fixed");
                    blankDiv.css("color",
                        "white");
                    blankDiv.css("zIndex", zIndex);
                    blankDiv.css("top", newTop + "px");
                    var underline = $(document.createElement("div"));
                    underline.css("width", jqueryObj.width() + "px");
                    underline.css("height", "2px");
                    underline.css("position", "fixed");
                    underline.css("background", "white");
                    underline.css("zIndex", zIndex || 9999);
                    underline.css("top", newTop - topBuffer + "px");
                    $(blankDiv).append(underline);
                    if (stickyRight) underline.css("right", newRight + "px");
                    else underline.css("left", newLeft + "px");
                    var verticalLine = $(document.createElement("div"));
                    verticalLine.css("width", "2px");
                    verticalLine.css("height", "14px");
                    verticalLine.css("position", "fixed");
                    verticalLine.css("background", "white");
                    verticalLine.css("zIndex", zIndex);
                    verticalLine.css("top", newTop - topBuffer + "px");
                    $(blankDiv).append(verticalLine);
                    if (stickyRight) verticalLine.css("right", newRight + 10 + "px");
                    else verticalLine.css("left", newLeft + 10 + "px")
                }
                if (tip.buttons && tip.buttons.length > 0) {
                    var buttonOverlay = $('<div class="overlayButtons"></div>');
                    for (var i = 0; i < tip.buttons.length; i++) {
                        var button =
                            BB.Widgets.Button.create({
                                name: tip.buttons[i].name,
                                color: tip.buttons[i].color || "blue",
                                onFunc: tip.buttons[i]["function"]
                            });
                        buttonOverlay.append(button.el)
                    }
                    blankDiv.append(buttonOverlay)
                }
                $(Streak.Gmail.elements.body).append(blankDiv);
                return blankDiv
            };
        var destroyElements = function (elements) {
            _.each(elements, function (domElement) {
                $(domElement).remove()
            });
            elements = []
        };
        var cleanUpUIElements = function () {
            destroyElements(dirtyUIElements)
        };
        return {
            "show": showOverlay,
            "reuse": reuse,
            "destroy": cleanUpUIElements,
            getType: function () {
                return "OVERLAY"
            }
        }
    };
    BB.Widgets.Tour = BB.Widgets.Tour || {};
    BB.Widgets.Tour.Overlay = Overlay
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var jQuery = $;
    var Tooltip = {
        create: function (o) {
            return new this.impl(o)
        }
    };
    Tooltip.impl = function (o) {
        var options = o;
        return guiders.createGuider(options)
    };
    var guiders = function ($) {
        var guiders = {};
        guiders.version = "1.3.0";
        guiders._defaultSettings = {
            attachTo: null,
            autoFocus: false,
            buttons: [{
                name: "Close"
            }],
            buttonCustomHTML: "",
            classString: null,
            closeOnEscape: false,
            description: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
            highlight: null,
            isHashable: true,
            offset: {
                top: null,
                left: null
            },
            onClose: null,
            onHide: null,
            onShow: null,
            overlay: false,
            position: 0,
            shouldSkip: function () {},
            title: null,
            width: 400,
            xButton: false,
            bottomLink: null
        };
        guiders._htmlSkeleton = ["<div class='guider'>", "  <div class='guiders_content'>", "    <div class='guiders_title Kj-JD-K7'></div>", "    <div class='guiders_close'></div>", "    <p class='guiders_description'></p>", "    <div class='guiders_buttons_container'>", "    </div>", "    <div class='guiders_link'>", "    </div>",
            "  </div>", "  <div class='guiders_arrow'>", "    <div class='guiders_arrow_inner'>", "    </div>", "  </div>", "</div>"
        ].join("");
        guiders._arrowSize = 42;
        guiders._backButtonTitle = "Back";
        guiders._buttonAttributes = {
            "href": "javascript:void(0);"
        };
        guiders._buttonClassName = "guiders_button";
        guiders._buttonClickEvent = "click touch";
        guiders._buttonElement = "<a></a>";
        guiders._closeButtonTitle = "Close";
        guiders._currentGuiderID = null;
        guiders._fixedOrAbsolute = "fixed";
        guiders._guiders = [];
        guiders._lastCreatedGuiderID = null;
        guiders._nextButtonTitle = "Next";
        guiders._offsetNameMapping = {
            "topLeft": 11,
            "top": 12,
            "topRight": 1,
            "rightTop": 2,
            "right": 3,
            "rightBottom": 4,
            "bottomRight": 5,
            "bottom": 6,
            "bottomLeft": 7,
            "leftBottom": 8,
            "left": 9,
            "leftTop": 10
        };
        guiders._windowHeight = 0;
        var ieBrowserMatch = navigator.userAgent.match("MSIE (.)");
        guiders._isIE = ieBrowserMatch && ieBrowserMatch.length > 1;
        guiders._ieVersion = ieBrowserMatch && ieBrowserMatch.length > 1 ? Number(ieBrowserMatch[1]) : -1;
        guiders._addButtons = function (myGuider) {
            var guiderButtonsContainer =
                myGuider.elem.find(".guiders_buttons_container");
            if (myGuider.buttons === null || myGuider.buttons.length === 0) {
                guiderButtonsContainer.remove();
                return
            }
            myGuider.buttons = myGuider.buttons.reverse();
            for (var i = myGuider.buttons.length - 1; i >= 0; i--) {
                var button = myGuider.buttons[i];
                var rButton = BB.Widgets.Button.create({
                    name: button.name,
                    color: button.color || "blue",
                    onFunc: button.onclick || button.
                    function
                });
                guiderButtonsContainer.append($(rButton.el))
            }
            if (myGuider.bottomLink && myGuider.bottomLink.visible) {
                var bottomLink =
                    $('<a href="#">' + myGuider.bottomLink.text + "</a>");
                myGuider.elem.find(".guiders_link").append(bottomLink);
                bottomLink.click(function (e) {
                    if (myGuider.bottomLink["function"]) myGuider.bottomLink["function"]();
                    e.preventDefault();
                    e.stopPropagation()
                })
            } else myGuider.elem.find(".guiders_link").hide(); if (myGuider.buttonCustomHTML !== "") {
                var myCustomHTML = $(myGuider.buttonCustomHTML);
                myGuider.elem.find(".guiders_buttons_container").append(myCustomHTML)
            }
            if (myGuider.buttons.length === 0) guiderButtonsContainer.remove()
        };
        guiders._addXButton = function (myGuider) {
            var xButtonContainer = myGuider.elem.find(".guiders_close");
            var xButton = $("<div></div>", {
                "class": "guiders_x_button",
                "role": "button"
            });
            xButtonContainer.append(xButton);
            xButton.click(function () {
                guiders.hideAll();
                if (myGuider.onClose) myGuider.onClose(myGuider, true)
            })
        };
        guiders._attach = function (myGuider) {
            if (typeof myGuider !== "object") return;
            var attachTo = $(myGuider.attachTo);
            var myHeight = myGuider.elem.innerHeight();
            var myWidth = myGuider.elem.innerWidth();
            if (myGuider.position ===
                0 || attachTo.length === 0) {
                var fixedOrAbsolute = "fixed";
                if (guiders._isIE && guiders._ieVersion < 9) fixedOrAbsolute = "absolute";
                myGuider.elem.css("position", fixedOrAbsolute);
                myGuider.elem.css("top", ($(window).height() - myHeight) / 3 + "px");
                myGuider.elem.css("left", ($(window).width() - myWidth) / 2 + "px");
                return
            }
            var base = attachTo.offset();
            var top = base.top;
            var left = base.left;
            var topMarginOfBody = $("body").outerHeight(true) - $("body").outerHeight(false);
            top -= topMarginOfBody;
            if (guiders._offsetNameMapping[myGuider.position]) myGuider.position =
                guiders._offsetNameMapping[myGuider.position];
            var attachToHeight = attachTo.innerHeight();
            var attachToWidth = attachTo.innerWidth();
            var bufferOffset = 0.9 * guiders._arrowSize;
            var offsetMap = {
                1: [-bufferOffset - myHeight, attachToWidth - myWidth],
                2: [0, bufferOffset + attachToWidth],
                3: [attachToHeight / 2 - myHeight / 2, bufferOffset + attachToWidth],
                4: [attachToHeight - myHeight, bufferOffset + attachToWidth],
                5: [bufferOffset + attachToHeight, attachToWidth - myWidth],
                6: [bufferOffset + attachToHeight, attachToWidth / 2 - myWidth / 2],
                7: [bufferOffset +
                    attachToHeight, 0
                ],
                8: [attachToHeight - myHeight, -myWidth - bufferOffset],
                9: [attachToHeight / 2 - myHeight / 2, -myWidth - bufferOffset],
                10: [0, -myWidth - bufferOffset],
                11: [-bufferOffset - myHeight, 0],
                12: [-bufferOffset - myHeight, attachToWidth / 2 - myWidth / 2]
            };
            var offset = offsetMap[myGuider.position];
            top += offset[0];
            left += offset[1];
            var positionType = "absolute";
            if (attachTo.css("position") === "fixed" && guiders._fixedOrAbsolute === "fixed") {
                positionType = "fixed";
                top -= $(window).scrollTop();
                left -= $(window).scrollLeft()
            }
            if (myGuider.offset.top !==
                null) top += myGuider.offset.top;
            if (myGuider.offset.left !== null) left += myGuider.offset.left;
            guiders._styleArrow(myGuider);
            myGuider.elem.css({
                "position": positionType,
                "top": top,
                "left": left
            });
            return myGuider
        };
        guiders._styleArrow = function (myGuider) {
            var position = myGuider.position || 0;
            if (!position) return;
            var myGuiderArrow = $(myGuider.elem.find(".guiders_arrow"));
            var newClass = {
                1: "guiders_arrow_down",
                2: "guiders_arrow_left",
                3: "guiders_arrow_left",
                4: "guiders_arrow_left",
                5: "guiders_arrow_up",
                6: "guiders_arrow_up",
                7: "guiders_arrow_up",
                8: "guiders_arrow_right",
                9: "guiders_arrow_right",
                10: "guiders_arrow_right",
                11: "guiders_arrow_down",
                12: "guiders_arrow_down"
            };
            myGuiderArrow.addClass(newClass[position]);
            var myHeight = myGuider.elem.innerHeight();
            var myWidth = myGuider.elem.innerWidth();
            var arrowOffset = guiders._arrowSize / 2;
            var positionMap = {
                1: ["right", arrowOffset],
                2: ["top", arrowOffset],
                3: ["top", myHeight / 2 - arrowOffset - 20],
                4: ["bottom", arrowOffset],
                5: ["right", arrowOffset],
                6: ["left", myWidth / 2 - arrowOffset - 20],
                7: ["left", arrowOffset],
                8: ["bottom", arrowOffset],
                9: ["top", myHeight / 2 - arrowOffset - 20],
                10: ["top", arrowOffset],
                11: ["left", arrowOffset],
                12: ["left", myWidth / 2 - arrowOffset - 20]
            };
            var position = positionMap[myGuider.position];
            myGuiderArrow.css(position[0], position[1] + "px")
        };
        guiders._showIfHashed = function (myGuider) {
            var GUIDER_HASH_TAG = "guider=";
            var hashIndex = window.location.hash.indexOf(GUIDER_HASH_TAG);
            if (hashIndex !== -1) {
                var hashGuiderId = window.location.hash.substr(hashIndex + GUIDER_HASH_TAG.length);
                if (myGuider.id.toLowerCase() === hashGuiderId.toLowerCase()) guiders.show(myGuider.id)
            }
        };
        guiders.reposition = function () {
            for (var i = 0; i < guiders._guiders.length; i++) guiders._attach(guiders._guiders[i])
        };
        guiders.createGuider = function (passedSettings) {
            if (passedSettings === null || passedSettings === undefined) passedSettings = {};
            var myGuider = $.extend({}, guiders._defaultSettings, passedSettings);
            myGuider.id = myGuider.id || String(Math.floor(Math.random() * 1E3));
            var guiderElement = $(guiders._htmlSkeleton);
            myGuider.elem = guiderElement;
            if (typeof myGuider.classString !== "undefined" && myGuider.classString !== null) myGuider.elem.addClass(myGuider.classString);
            myGuider.elem.css("width", myGuider.width + "px");
            var guiderTitleContainer = guiderElement.find(".guiders_title");
            if (myGuider.title) guiderTitleContainer.html(myGuider.title);
            else guiderTitleContainer.hide();
            guiderElement.find(".guiders_description").html(myGuider.description);
            guiders._addButtons(myGuider);
            if (myGuider.xButton) guiders._addXButton(myGuider);
            else myGuider.elem.find(".guiders_close").hide();
            guiderElement.hide();
            guiderElement.appendTo("body");
            guiderElement.attr("id", myGuider.id);
            if (typeof myGuider.attachTo !==
                "undefined" && myGuider !== null) guiders._attach(myGuider);
            guiders._guiders.push(myGuider);
            myGuider.show = function () {
                guiders.show(myGuider);
                return myGuider
            };
            myGuider.destroy = function () {
                guiderElement.remove();
                guiders._guiders.removeVal(myGuider)
            };
            return myGuider
        };
        guiders.show = function (myGuider) {
            if (myGuider.onShow) myGuider.onShow(myGuider);
            guiders._attach(myGuider);
            myGuider.elem.fadeIn("fast").data("locked", false);
            var windowHeight = guiders._windowHeight = $(window).height();
            var scrollHeight = $(window).scrollTop();
            var guiderOffset = myGuider.elem.offset();
            var guiderElemHeight = myGuider.elem.height();
            var isGuiderBelow = scrollHeight + windowHeight < guiderOffset.top + guiderElemHeight;
            var isGuiderAbove = guiderOffset.top < scrollHeight;
            if (myGuider.autoFocus && (isGuiderBelow || isGuiderAbove)) setTimeout(guiders.scrollToCurrent, 10);
            $(myGuider.elem).trigger("guiders.show");
            if (myGuider.elem.position().left + myGuider.elem.width() > Streak.$(window).width()) myGuider.elem.css("left", Streak.$(window).width() - (myGuider.elem.width() + 10) +
                "px");
            guiders.getType = function () {
                return "TOOLTIP"
            };
            return guiders
        };
        var _resizing = undefined;
        $(window).resize(function () {
            if (typeof _resizing !== "undefined") clearTimeout(_resizing);
            _resizing = setTimeout(function () {
                _resizing = undefined;
                if (typeof guiders !== "undefined") guiders.reposition()
            }, 20)
        });
        return guiders
    }.call(this, jQuery);
    BB.Widgets.Tour = BB.Widgets.Tour || {};
    BB.Widgets.Tour.Tooltip = Tooltip
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var WaitForClick = Streak.Class.subclass({
        className: "WaitForClick",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_boundElement",
            destroy: false
        }, {
            name: "_boundFunction",
            destroy: false
        }, {
            name: "_options",
            destroy: false
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        setup: function (options) {
            this._options = options
        },
        show: function () {
            this._boundElement = $("body");
            this._boundFunction = this._elementClicked.bind(this);
            this._boundElement[0].addEventListener("click", this._boundFunction, true)
        },
        getType: function () {
            return "WAIT_FOR_CLICK"
        },
        _elementClicked: function (e) {
            if (!$(this._options.targetSelector).isAncestor(e.target) && !$(this._options.rawTargetSelector).isAncestor(e.target)) return;
            if (this._options.function) this._options.
            function ()
        },
        destroy: function () {
            this._boundElement[0].removeEventListener("click",
                this._boundFunction, true);
            Streak.Object.prototype.destroy.call(this)
        }
    });
    Library.set("BentoBox.Widgets.Tour.WaitForClick", WaitForClick)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var WaitForEvent = Streak.Class.subclass({
        className: "WaitForEvent",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_boundElement",
            destroy: false
        }, {
            name: "_boundFunction",
            destroy: false
        }, {
            name: "_options",
            destroy: false
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        setup: function (options) {
            this._options = options
        },
        show: function () {
            this._boundElement = $("body");
            this._boundFunction = this._eventHappened.bind(this);
            this._boundElement[0].addEventListener(this._options.event, this._boundFunction, true)
        },
        getType: function () {
            return "WAIT_FOR_EVENT"
        },
        _eventHappened: function (e) {
            if (!$(this._options.targetSelector).isAncestor(e.target) && !$(this._options.rawTargetSelector).isAncestor(e.target)) return;
            if (this._options.function) this._options.
            function ()
        },
        destroy: function () {
            this._boundElement[0].removeEventListener(this._options.event,
                this._boundFunction, true);
            Streak.Object.prototype.destroy.call(this)
        }
    });
    Library.set("BentoBox.Widgets.Tour.WaitForEvent", WaitForEvent)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var BottomModal = Streak.Class.subclass({
        className: "BottomModal",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_options",
            destroy: false
        }, {
            name: "_helpModalViewController",
            destroy: true
        }, {
            name: "_helpModalWrapper",
            destroy: false
        }, {
            name: "_leftButton",
            destroy: true
        }, {
            name: "_rightButton",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        setup: function (options) {
            this._options = options
        },
        show: function () {
            this._helpModalViewController = Library.getInstance("BentoBox.Widgets.HelpModalViewController");
            this._helpModalViewController.addDelegate(this);
            this._helpModalViewController.setTitleText(this._options.title);
            this._helpModalViewController.setContentHTML(this._options.body);
            this._helpModalViewController.hideMinimize();
            this._helpModalViewController.hideClose();
            this._helpModalViewController.showBackButton();
            this._helpModalViewController.setTopClickable(false);
            this._addLeftButton();
            this._addRightButton();
            this._addToBody()
        },
        _addLeftButton: function () {
            if (!this._options.leftButton) return;
            this._leftButton = BB.Widgets.ButtonFactory.createButton({
                type: "Gmail",
                color: "blue",
                text: this._options.leftButton.name,
                onFunction: this._options.leftButton.
                function
            });
            this._helpModalViewController.addLeftButton(this._leftButton)
        },
        _addRightButton: function () {
            if (!this._options.rightButton) return;
            this._rightButton = BB.Widgets.ButtonFactory.createButton({
                type: "Gmail",
                color: "blue",
                text: this._options.rightButton.name,
                onFunction: this._options.rightButton.
                function
            });
            this._helpModalViewController.addRightButton(this._RightButton)
        },
        _addToBody: function () {
            this._helpModalViewController.getView().getElement().addClass("streak__bottomModal");
            this._helpModalWrapper = Gmail.addToComposeArea(this._helpModalViewController.getView().getElement())
        },
        backButtonClicked: function () {
            this._options.backButtonFunction()
        },
        getType: function () {
            return "BOTTOM_MODAL"
        },
        destroy: function () {
            if (this._helpModalWrapper) {
                Gmail.removeFromComposeArea(this._helpModalWrapper);
                this._helpModalWrapper.remove()
            }
            Streak.Object.prototype.destroy.call(this)
        }
    });
    Library.set("BentoBox.Widgets.Tour.BottomModal", BottomModal)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Date = Streak.Date;
    var TourBaseCore = function (options) {};
    _.extend(TourBaseCore.prototype, {
        init: function (options, forceRun, cb) {
            var self = this;
            self._totalPagesSeen = 0;
            self._options = options;
            self._name = options.tourBookName;
            self._forceRun = forceRun;
            self._isNotPersistant = options._isNotPersistant;
            self.resetDataStructs();
            if (!self.cssFile) {
                self.cssFile = Streak.server + this.getResourceURL("css");
                Streak.$("body").append('<link rel="stylesheet" type="text/css" href="' +
                    self.cssFile + '">')
            }
            var after = _.onceAfter(3, function () {
                if (cb) cb()
            });
            if (this._localeClone) after();
            else {
                this._localeClone = Streak.Locale.getClone();
                this._localeClone.override(this.getResourceURL("locale"), after)
            } if (this._html) after();
            else {
                self._html = BB.Modules.OverridableHTML.create({
                    "fileName": this.getResourceURL("html"),
                    Locale: this._localeClone
                });
                self._html.loadHTML(after)
            }
            self.setUpTour();
            after()
        },
        setUpTour: function () {
            var self = this;
            self._currentViewURL = null;
            self._inTour = false;
            self._initialViewUrl =
                Gmail.hash.partsString
        },
        resetDataStructs: function () {
            var self = this;
            self._state = {};
            self._previousTransitions = [];
            self._seenPages = [];
            self._oldWidgets = {};
            self._newWidgets = {}
        },
        reset: function (forceRun, isManualTrigger) {
            var self = this;
            if (forceRun && !isManualTrigger) {
                var state = self.getSavedState();
                if (Streak._.isReal(state)) {
                    self._previousTransitions = state._previousTransitions;
                    self._currentIndex = state._currentIndex;
                    self._seenPages = state._seenPages;
                    self.loadInstanceSettings(state._instanceSettings)
                } else self._currentIndex =
                    0
            }
            if (self._pages) {
                if (!forceRun || isManualTrigger) self._currentIndex = 0;
                self._currentPage = self._pages[self._currentIndex] || self._pages[0]
            }
            if (self._currentPage && self._currentPage.onEnter) self._currentViewURL = null;
            else self._currentViewURL = Gmail.hash.partsString;
            self._inTour = false
        },
        startTour: function (triggered) {
            var self = this;
            this._inTour = true;
            if (triggered) this.recordEvent("startedTour");
            self.recordChaptersActive(self._currentChapter);
            if (self.getPausedState() || !triggered) {
                self._currentViewURL = Gmail.hash.partsString;
                self._softExitTour();
                self.showReturnToTourPopUp()
            } else {
                self._oldWidgets = self._newWidgets;
                self.cleanUp();
                this.loadPage(this._currentPage)
            }
        },
        _clearActiveTour: function () {
            BB.UserSettings.setSetting("tour/activeTour/" + this._name, null);
            BB.UserSettings.saveSettings()
        },
        recordChaptersActive: function (chapterName) {
            if (this._isNotPersistant) return;
            BB.UserSettings.setSetting("tour/activeTour/" + this._name, chapterName);
            BB.UserSettings.saveSettings()
        },
        getResourceURL: function (extension) {
            return "/tours/" + this._name +
                "/" + this._name + "." + extension
        },
        setChapter: function (chapterName, pageNumber, forceRun, source) {
            var self = this;
            if (forceRun);
            else {
                self._previousTransitions.push({
                    index: self._currentIndex,
                    pages: self._pages,
                    chapterName: self._currentChapter
                });
                self._currentIndex = pageNumber
            }
            self._currentChapter = chapterName;
            var Chapter = self._options.Chapters[chapterName];
            var options = {};
            if (source) options.source = source;
            else if (forceRun) options.source = "refresh";
            else options.source = "trigger";
            self.recordEvent("changeChapterTo", options);
            self._pages = Chapter.pages
        },
        shouldHandleViewChange: function () {
            var self = this;
            return self._inTour && self._currentViewURL
        },
        viewChanged: function (viewName) {
            var self = this;
            if (self._currentViewURL !== Gmail.hash.partsString) {
                self._softExitTour();
                self.showReturnToTourPopUp();
                self.recordPausedState(true)
            }
        },
        recordEvent: function (eventName, optionalObj) {
            var self = this;
            var trackerObj = {
                category: "TourPassive",
                eventName: eventName,
                tour: self._name,
                page: this._currentChapter + "-" + this._currentIndex,
                totalPagesSeen: self._totalPagesSeen
            };
            _.extend(trackerObj, optionalObj);
            Streak.BentoBox.Tracker.recordEvent(trackerObj)
        },
        recordExitEvent: function () {
            var self = this;
            Streak.BentoBox.Tracker.recordEvent({
                category: "tourExit",
                eventName: "Exit " + this._name,
                page: this._currentChapter + "-" + this._currentIndex,
                totalPagesSeen: self._totalPagesSeen
            })
        },
        convertHTMLandTranslations: function (options) {
            var self = this;
            var newOptions = {};
            _.each(options, function (value, key) {
                newOptions[key] = self.determineTypeOfValue(value).processed
            });
            return newOptions
        },
        determineTypeOfValue: function (value) {
            var self =
                this;
            if (_.isArray(value)) {
                var newArray = [];
                for (var i = 0; i < value.length; i++) newArray.push(self.determineTypeOfValue(value[i]).processed);
                return {
                    type: typeof value,
                    original: value,
                    processed: newArray
                }
            }
            if (_.isObject(value)) {
                var newObject = {};
                for (var aKey in value) newObject[aKey] = self.determineTypeOfValue(value[aKey]).processed;
                return {
                    type: typeof value,
                    original: value,
                    processed: newObject
                }
            }
            if (typeof value !== "string") return {
                type: typeof value,
                original: value,
                processed: value
            };
            if (value && value.length > 2) {
                var valueLength =
                    value.length;
                var type;
                var processed;
                var original = value;
                if (value[0] === "%" && value[valueLength - 1] === "%") type = "TRANSLATION";
                else if (value[0] === "*" && value[valueLength - 1] === "*") type = "HTML";
                else type = "STRING";
                processed = BB.UI.processString(value, self._localeClone, self._html);
                return {
                    "type": type,
                    "processed": processed,
                    "original": original
                }
            } else return {
                type: "STRING",
                original: value,
                processed: value
            }
        },
        cleanUpDataCreatedByTour: function (self) {},
        showReturnToTourPopUp: function () {
            var self = this;
            var buttons = [{
                name: "Exit",
                onclick: function () {
                    self.recordEvent("exitTourTooltip");
                    self.cleanUp.call(self, true);
                    self.cleanUpDataCreatedByTour(self);
                    self.notifyDependenciesOfExit();
                    self.recordPausedState(false)
                }
            }, {
                name: "Continue",
                onclick: function () {
                    self.recordEvent("resumeTour");
                    self.recordPausedState(false);
                    self.cleanUp.call(self, true);
                    self.startTour(true);
                    self._inTour = true
                }
            }];
            var exitToolTipOptions = {
                buttons: buttons,
                attachTo: "#workflowStatusText",
                description: "If you would like to return to the tour click below",
                position: "left",
                title: "Back to tour",
                width: 220
            };
            if (this._options.returnToTourTooltip) {
                _.extend(exitToolTipOptions, this._options.returnToTourTooltip);
                if (this._options.returnToTourTooltip.exitButtonText) exitToolTipOptions.buttons[0].name = this._options.returnToTourTooltip.exitButtonText;
                if (this._options.returnToTourTooltip.continueButtonText) exitToolTipOptions.buttons[1].name = this._options.returnToTourTooltip.continueButtonText
            }
            var tooltip = BB.Widgets.Tour.Tooltip.create(exitToolTipOptions);
            if (!self._newWidgets["TOOLTIP"]) self._newWidgets["TOOLTIP"] = [];
            self._newWidgets["TOOLTIP"].push(tooltip);
            tooltip.show()
        },
        notifyDependenciesOfExit: function () {
            if (this._options.exitCallback) this._options.exitCallback();
            this._clearActiveTour();
            this.recordPausedState(false)
        },
        _softExitTour: function () {
            this._inTour = false;
            this.recordEvent("_softExitTour");
            this.cleanUp()
        },
        getFunction: function (fxn) {
            var self = this;
            var convertedFunction;
            if (typeof fxn === "string") convertedFunction = function () {
                self[fxn].apply(self, [])
            };
            else convertedFunction = function () {
                self[fxn.functionName].apply(self,
                    fxn.args)
            };
            return function () {
                if (typeof fxn === "string") self.recordEvent(fxn);
                else self.recordEvent(fxn.functionName);
                convertedFunction()
            }
        },
        getSavedState: function () {
            return Streak.BentoBox.UserSettings.get("tour/activeTourState/" + this._name)
        },
        getPausedState: function () {
            return BB.UserSettings.get("tour/activeTourExitState/")
        },
        recordPausedState: function (state) {
            if (this._isNotPersistant) return;
            if (state) {
                BB.UserSettings.setSetting("tour/activeTourExitState/", true);
                BB.UserSettings.saveSettings()
            } else {
                BB.UserSettings.setSetting("tour/activeTourExitState/",
                    null);
                BB.UserSettings.saveSettings()
            }
        },
        _clearOutState: function () {
            var self = this;
            BB.UserSettings.setSetting("tour/activeTourState/" + this._name, null);
            BB.UserSettings.saveSettings()
        },
        _recordState: function () {
            var self = this;
            if (this._isNotPersistant) return;
            BB.UserSettings.setSetting("tour/activeTourState/" + this._name, {
                "_seenPages": self._seenPages,
                "_currentIndex": self._currentIndex,
                "_previousTransitions": self._previousTransitions,
                "_instanceSettings": self.getInstanceSettings()
            });
            BB.UserSettings.saveSettings()
        },
        loadPage: function (page) {
            var self = this;
            if (!_.isReal(self._seenPages)) self._seenPages = [];
            self._seenPages.push(page);
            self._recordState();
            self.recordEvent("pageEnter");
            if (page.onEnter) this[page.onEnter](function () {
                self.loadItems()
            });
            else self.loadItems()
        },
        loadItems: function () {
            var self = this;
            var items = self._currentPage.itemsOnScreen;
            setTimeout(function () {
                self._newWidgets = {};
                _.each(items, function (item) {
                    self.loadItem(item)
                });
                self.cleanUp();
                self._oldWidgets = _.clone(self._newWidgets)
            }, 5)
        },
        loadItem: function (item) {
            var self =
                this;
            var widget = null;
            item = self.convertHTMLandTranslations(item);
            widget = self.getItem(item.type);
            var options;
            switch (item.type) {
            case "MODAL":
                options = {};
                $.extend(options, item, {
                    "cancelFunc": self.getFunction(item.leftButtonFunction),
                    "confirmFunc": self.getFunction(item.rightButtonFunction),
                    "linkFunc": self.getFunction(item.linkFunction)
                });
                if (widget && widget.reuse) widget.reuse(options);
                else widget = BB.Widgets.Tour.TourModal.create(options);
                widget.show();
                break;
            case "FUNCTION":
                var fxn = self[item.name];
                var callbacks =
                    _.extend({
                        next: "next",
                        previous: "previous"
                    }, item.callbacks);
                for (var callbackName in callbacks) callbacks[callbackName] = self.getFunction(callbacks[callbackName]);
                var args = [callbacks];
                if (item.args) args = args.concat(item.args);
                fxn.apply(self, args);
                var destroy = self[item.name + "Destroy"];
                if (destroy) widget = {
                    destroy: destroy.bind(self)
                };
                break;
            case "HIGHLIGHT":
                if (widget && widget.reuse) widget.reuse(item);
                else widget = BB.Widgets.Tour.Highlight.create(item);
                widget.show();
                break;
            case "OVERLAY":
                item.leftButtonFunction =
                    self.getFunction(item.leftButtonFunction);
                item.rightButtonFunction = self.getFunction(item.rightButtonFunction);
                if (item.tips && item.tips.length > 0)
                    for (var i = 0; i < item.tips.length; i++)
                        if (item.tips[i].buttons && item.tips[i].buttons.length > 0)
                            for (var j = 0; j < item.tips[i].buttons.length; j++) item.tips[i].buttons[j]["function"] = self.getFunction(item.tips[i].buttons[j]["function"]);
                if (widget && widget.reuse) widget.reuse(item);
                else widget = BB.Widgets.Tour.Overlay.create(item);
                widget.show();
                break;
            case "TOOLTIP":
                var buttons = [];
                if (!item.buttons) item.buttons = [{
                    "name": self._localeClone.getString("tour_previous"),
                    "function": "previous"
                }, {
                    "name": self._localeClone.getString("tour_next"),
                    "function": "next"
                }];
                if (!item.exitLink) item.exitLink = {
                    visible: true,
                    text: self._localeClone.getString("tour_exit"),
                    "function": self.getFunction("exitTourAndRedirect")
                };
                else item.exitLink["function"] = self.getFunction(item.exitLink.functionName);
                _.each(item.buttons, function (button) {
                    buttons.push({
                        name: button.name,
                        onclick: function () {
                            self.getFunction(button["function"])()
                        },
                        color: button.color
                    })
                });
                options = {
                    attachTo: item.targetID,
                    buttons: buttons,
                    description: item.html,
                    position: item.position,
                    title: item.title,
                    width: item.width || 200,
                    offset: _.extend({
                        top: null,
                        left: null
                    }, item.offset || {}),
                    bottomLink: item.bottomLink || item.exitLink
                };
                if (widget && widget.reuse) widget.reuse(options);
                else widget = BB.Widgets.Tour.Tooltip.create(options);
                widget.show();
                break;
            case "BAR":
                options = $.extend({}, item, {
                    leftButtonFunction: self.getFunction(item.leftButtonFunction),
                    rightButtonFunction: self.getFunction(item.rightButtonFunction),
                    exitTourFunction: function () {
                        self.exitTourAndRedirect()
                    }
                });
                if (widget && widget.reuse) widget.reuse(options);
                else widget = BB.Widgets.Tour.Bar.create(options);
                widget.show();
                break;
            default:
                break
            }
            if (widget) {
                if (!self._newWidgets[item.type]) self._newWidgets[item.type] = [];
                self._newWidgets[item.type].push(widget)
            }
            return widget
        },
        getItem: function (type) {
            if (this._oldWidgets[type] && this._oldWidgets[type].length > 0)
                if (this._oldWidgets[type][0].reuse) return this._oldWidgets[type].pop();
            return null
        },
        cleanUp: function (isFull) {
            var self =
                this;
            var i;
            var key;
            for (key in self._oldWidgets)
                for (i = 0; i < self._oldWidgets[key].length; i++)
                    if (self._oldWidgets[key][i].destroy) self._oldWidgets[key][i].destroy();
            if (isFull)
                for (key in self._newWidgets)
                    for (i = 0; i < self._newWidgets[key].length; i++)
                        if (self._newWidgets[key][i].destroy) self._newWidgets[key][i].destroy()
        }
    });
    BB.Modules.Tour = BB.Modules.Tour || {};
    BB.Modules.TourBaseCore = TourBaseCore
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Date = Streak.Date;
    var TourBase = function (options) {};
    TourBase.prototype = Object.create(BB.Modules.TourBaseCore.prototype);
    _.extend(TourBase.prototype, {
        exit: function (exitFrom) {
            this.recordLeavingChapter(exitFrom);
            this.recordExitEvent();
            this.notifyDependenciesOfExit();
            this.cleanUpDataCreatedByTour();
            this._softExitTour();
            this.recordPausedState(false)
        },
        exitTourAndRedirect: function () {
            this.exit("exitTourAndRedirect");
            BB.UI.setURL(this._initialViewUrl)
        },
        finish: function () {
            this.exit("finish")
        },
        next: function () {
            var self = this;
            self._currentIndex++;
            self._totalPagesSeen++;
            self.recordEvent("pageExit");
            if (self._currentIndex < self._pages.length) {
                if (self._currentPage.onExit && self[self._currentPage.onExit]) self[self._currentPage.onExit]();
                self._currentPage = self._pages[self._currentIndex];
                self.loadPage.call(self, self._currentPage)
            } else self._currentIndex--;
            self._recordState()
        },
        previous: function () {
            var self = this;
            var page;
            self._currentIndex--;
            self._totalPagesSeen++;
            self.recordEvent("pageExit");
            if (self._currentIndex >= 0 || self._previousTransitions.length > 0) {
                if (self._currentIndex < 0) {
                    var transition = self._previousTransitions.pop();
                    self._pages = transition.pages;
                    self._currentIndex = transition.index;
                    self.recordChaptersActive(transition.chapterName)
                } else if (self._currentPage.onExit && self[self._currentPage.onExit]) self[self._currentPage.onExit]();
                self._currentPage = self._pages[self._currentIndex];
                if (self._currentPage.noHistory) {
                    self.previous();
                    self._recordState();
                    return
                }
                self.loadPage.call(self, self._currentPage)
            } else self._currentIndex++;
            self._recordState()
        },
        recordLeavingChapter: function (destination) {
            if (this._currentChapter) {
                this.recordEvent("leavingChapter", {
                    "pagesLeft": this._pages.length - this._currentIndex,
                    "destination": destination,
                    "chapterAndPage": this._currentChapter + "/" + this._currentIndex
                });
                this.recordEvent("pageExit", {
                    "destination": destination,
                    "chapterAndPage": this._currentChapter + "/" + this._currentIndex
                })
            }
        },
        changeChapterTo: function (chapterName) {
            this.recordLeavingChapter(chapterName);
            var pageNumber = 0;
            this.setChapter(chapterName, pageNumber - 1, false, "jsonFile");
            this.next();
            this.recordChaptersActive(chapterName)
        },
        sampleCustomFunction: function () {
            console.log("Sample share custom fxn!")
        },
        sampleCustomFunctionDestroy: function () {
            console.log("destroying sample..")
        },
        loadPipelineView: function (callback) {
            this._currentViewURL = Streak.BentoBox.Data.getAllPipelines()[0].link();
            BB.UI.setURL(Streak.BentoBox.Data.getAllPipelines()[0].link());
            if (callback) callback()
        },
        loadBoxView: function (callback) {
            this._currentViewURL =
                Streak.BentoBox.Data.getAllBoxes()[0].link();
            BB.UI.setURL(Streak.BentoBox.Data.getAllBoxes()[0].link());
            if (callback) callback()
        },
        condition: function (callbacks, expression) {
            var self = this;
            var result;
            eval("result = " + expression);
            if (result) callbacks["true"]();
            else callbacks["false"]()
        },
        intervalCondition: function (callbacks, expression, intervalCheck, maxInterval) {
            var self = this;
            var delay = Math.max(500, intervalCheck || 500);
            var maxDelay = maxInterval || 1E4;
            var delayCounter = 0;
            var checkFunc = function () {
                delayCounter += delay;
                eval("var result=" + expression);
                if (result) callbacks.next();
                else if (delayCounter > maxDelay) {
                    setTimeout(function () {
                        self.exit()
                    }, 500);
                    self.recordEvent("failedintervalCondition", {
                        expression: expression,
                        delay: delay,
                        maxDelay: maxDelay
                    })
                } else setTimeout(checkFunc, delay)
            };
            checkFunc()
        },
        getInstanceSettings: function () {
            return {}
        },
        loadInstanceSettings: function (settings) {}
    });
    BB.Modules.Tour = BB.Modules.Tour || {};
    BB.Modules.TourBase = TourBase
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Date = Streak.Date;
    var CONSTANTS = {
        DEFAULT_ACCOUNTS: ["streak.web.test.1@gmail.com", "streak.web.test.2@gmail.com", "streak.web.test.3@gmail.com", "streak.web.test.4@gmail.com"]
    };
    var TourRunner = {
        _tour: null,
        _tourOptions: null,
        initialized: false,
        init: function (cb) {
            var self = this;
            if (!self.initialized) {
                Streak.Gmail.observe("viewChanged", function (viewName) {
                    if (self._tour && self._tour.shouldHandleViewChange()) self._tour.viewChanged();
                    else {
                        self.setOffViewTrigger(viewName);
                        self.setOffViewExpressionTrigger()
                    }
                }, null, 1E3);
                Streak.NotificationCenter.addFunction({
                    eventName: "newComposeWindow",
                    functionToCall: this.setOffComposeTrigger,
                    functionContext: this
                });
                Streak.NotificationCenter.addFunction({
                    eventName: "newReplyArea",
                    functionToCall: this.setOffReplyTrigger,
                    functionContext: this
                });
                self.initialized = true
            }
            if (cb) cb()
        },
        initRunTour: function (callback) {
            var tourBook = BB.getUser().get("tourId");
            if (tourBook) this.runTour(tourBook, null, callback);
            else if (callback) callback()
        },
        runTour: function (tourBookName, activeChapter, callback) {
            var self = this;
            this.getOptions(tourBookName, function (options) {
                self._tourOptions = options;
                self._tourOptions.tourBookName = tourBookName;
                var isManualTrigger = false;
                if (activeChapter) isManualTrigger = true;
                else activeChapter = self.getActiveChapter(tourBookName); if (activeChapter) {
                    self._tourRunning = true;
                    self._notifyTourRunning()
                }
                self.parseTriggers();
                options._isNotPersistant = false;
                if (activeChapter) self.startTourChapter(options, activeChapter, true, isManualTrigger);
                if (callback) callback()
            })
        },
        _notifyTourRunning: function () {
            BB.trigger("tourRunning");
            Streak.NotificationCenter.notify("tourStarting")
        },
        _notifyTourStopped: function () {
            BB.trigger("tourStoppedRunning");
            Streak.NotificationCenter.notify("tourFinished")
        },
        getOptions: function (tourBook, cb) {
            Streak.Requester.getString({
                msgUrl: "/tours/" + tourBook + "/" + tourBook + ".json"
            }, function (e) {
                var options = $.parseJSON(e);
                cb(options)
            }, function (error) {})
        },
        getActiveChapter: function (tourBookName) {
            return BB.UserSettings.get("tour/activeTour/" +
                tourBookName)
        },
        parseTriggers: function () {
            this._initializeChapterTypeArrays();
            for (var chapterName in this._tourOptions.Chapters) this._processTriggerForChapterName(chapterName);
            this.checkStateTriggers();
            this.setOffViewExpressionTrigger();
            this.setOffFirstLoadExpressionTrigger()
        },
        _initializeChapterTypeArrays: function () {
            this._viewExpressionChapters = [];
            this._composeChapters = [];
            this._replyChapters = [];
            this._firstLoadExpressionChapters = [];
            this._tourRunning = false
        },
        _processTriggerForChapterName: function (chapterName) {
            var chapter =
                this._tourOptions.Chapters[chapterName];
            chapter.name = chapterName;
            var trigger = chapter.trigger;
            if (!trigger) return;
            this._processTriggerForChapter(chapter)
        },
        _processTriggerForChapter: function (chapter) {
            var flattenedTriggers = [];
            this._flattenChapterTriggers(chapter.trigger, flattenedTriggers);
            for (var ii = 0; ii < flattenedTriggers.length; ii++) this._registerChapterByTriggerType(flattenedTriggers[ii], chapter)
        },
        _flattenChapterTriggers: function (trigger, currentList) {
            if (trigger.type === "OR" || trigger.type === "AND") {
                var triggerList =
                    trigger.list;
                for (var ii = 0; ii < triggerList.length; ii++) this._flattenChapterTriggers(triggerList[ii], currentList)
            } else if (trigger.type) currentList.push(trigger)
        },
        _registerChapterByTriggerType: function (trigger, chapter) {
            var type = trigger.type.toUpperCase();
            switch (type) {
            case "VIEW_CHANGE":
                this._registerViewTrigger(trigger, chapter);
                break;
            case "VIEW_CHANGE_EXPRESSION":
                this._registerViewExpressionTrigger(trigger, chapter);
                break;
            case "USER_DATA":
                break;
            case "DATA":
                this._registerDataTrigger(trigger, chapter);
                break;
            case "DATA_STATE":
                this._registerDataStateTrigger(trigger, chapter);
                break;
            case "GMAIL_STATE":
                this._registerGmailStateTrigger(trigger, chapter);
                break;
            case "FIRST_LOAD_EXPRESSION":
                this._registerFirstLoadExpression(trigger, chapter);
                break
            }
        },
        _registerViewExpressionTrigger: function (trigger, chapter) {
            this._viewExpressionChapters.push(chapter)
        },
        _registerDataStateTrigger: function (trigger, chapter) {},
        _registerDataTrigger: function (trigger, chapter) {},
        _registerGmailStateTrigger: function (trigger, chapter) {
            switch (trigger.params) {
            case "NEW_COMPOSE":
                this._composeChapters.push(chapter);
                break;
            case "NEW_REPLY":
                this._replyChapters.push(chapter);
                break
            }
        },
        _registerFirstLoadExpression: function (trigger, chapter) {
            this._firstLoadExpressionChapters.push(chapter)
        },
        startTourChapter: function (options, chapterName, forceRun, isManualTrigger) {
            var self = this;
            if (!forceRun && (self._tourRunning || self.seenChapterBefore(options, chapterName))) return;
            self.markChapterAsSeen(options, chapterName);
            var tour = new BB.Modules.Tours[options.className](options);
            options.exitCallback = function () {
                self._tourRunning = false;
                self._notifyTourStopped()
            };
            self.forceRun = forceRun;
            tour.init(options, forceRun, function () {
                self._tourRunning = true;
                self._notifyTourRunning();
                tour.setChapter(chapterName, 0, self.forceRun);
                tour.reset(self.forceRun, isManualTrigger);
                tour.startTour(!forceRun || isManualTrigger)
            });
            this._tour = tour
        },
        markChapterAsSeen: function (options, chapterName) {
            BB.UserSettings.setSetting("tour/seenTours/" + options.id + "/" + chapterName, true);
            BB.UserSettings.saveSettings()
        },
        checkBoxesTrigger: function (params) {
            if (params.condition === "===") return Streak.BentoBox.Data.getAllBoxes() ===
                parseInt(params.param, 10);
            return false
        },
        seenChapterBefore: function (options, chapterName) {
            var result = BB.UserSettings.get("tour/seenTours/" + options.id + "/" + chapterName) === true;
            return result
        },
        hasSeenChapterBefore: function (chapterName) {
            return BB.UserSettings.get("tour/seenTours/" + this._tourOptions.id + "/" + chapterName) === true
        },
        forceStartTourChapter: function (chapterName) {
            var options = this._helpTourOptions;
            var self = this;
            if (self._tourRunning || self._tourHelpRunning) return;
            self._tourHelpRunning = true;
            self._notifyTourRunning();
            var tour = new BB.Modules.Tours[options.className](options);
            options.exitCallback = function () {
                self._tourHelpRunning = false;
                self._notifyTourStopped()
            };
            self.forceRun = true;
            tour.init(options, true, function () {
                tour.setChapter(chapterName, 0, self.forceRun);
                tour.reset(true, null);
                tour.startTour(true)
            })
        },
        setOffViewTrigger: function () {
            if (this._viewTriggers) this.checkAndRunTour(this._viewTriggers)
        },
        setOffViewExpressionTrigger: function () {
            this.checkAndRunTour(this._viewExpressionChapters)
        },
        setOffDataTrigger: function () {},
        setupPipelineTrigger: function () {},
        setOffComposeTrigger: function () {
            this.checkAndRunTour(this._composeChapters)
        },
        setOffReplyTrigger: function () {
            this.checkAndRunTour(this._replyChapters)
        },
        setOffFirstLoadExpressionTrigger: function () {
            this.checkAndRunTour(this._firstLoadExpressionChapters)
        },
        checkAndRunTour: function (chapters) {
            if (chapters && chapters.length > 0)
                for (var ii = 0; ii < chapters.length; ii++) {
                    var chapter = chapters[ii];
                    var shouldRunTour = this.shouldRunTour(chapter);
                    if (shouldRunTour) {
                        this.startTourChapter(this._tourOptions,
                            chapter.name, false);
                        return
                    }
                }
        },
        shouldRunTour: function (chapter) {
            var trigger = chapter.trigger;
            if (!trigger) return false;
            if (this._tourRunning) return false;
            if (this.seenChapterBefore(this._tourOptions, chapter.name)) return false;
            return this.evaluateList(chapter.trigger)
        },
        evaluateList: function (trigger) {
            var result = true;
            var list = trigger.list;
            if (trigger.type === "OR")
                for (var ii = 0; ii < list.length; ii++) {
                    result = this.evaluateList(list[ii]);
                    if (result) break
                } else if (trigger.type === "AND")
                    for (var ii = 0; ii < list.length; ii++) {
                        result =
                            this.evaluateList(list[ii]);
                        if (!result) break
                    } else result = this._evaluateTrigger(trigger);
            return result
        },
        _evaluateTrigger: function (trigger) {
            var type = trigger.type.toUpperCase();
            switch (type) {
            case "VIEW_CHANGE":
                return this._evaluateView(trigger.params);
            case "VIEW_CHANGE_EXPRESSION":
                return this._evaluateViewExpression(trigger.params);
            case "FIRST_LOAD_EXPRESSION":
                return this._evaluateViewExpression(trigger.params);
            case "GMAIL_STATE":
                return this._evaluateGmailState(trigger.params);
            case "DATA_STATE":
                return this._evaluateDataState(trigger.params);
                break;
            case "EXTRA_CONDITION_EXPRESSION":
                return this._evaluateViewExpression(trigger.params)
            }
            return false
        },
        _evaluateView: function (params) {
            return params.toLowerCase() === Streak.Gmail.hash.parts[0].toLowerCase()
        },
        _evaluateViewExpression: function (params) {
            var result = false;
            eval("result = " + params);
            return result
        },
        _evaluateDataState: function (params) {
            if (params.collectionType.toUpperCase() === "BOX")
                if (params.property.toUpperCase() === "COUNT") {
                    var boxes = Streak.BentoBox.Data.getAllBoxes();
                    if (params.created) boxes =
                        _.filter(boxes, function (box) {
                            return box.get("creatorKey") === BB.getUser().key()
                        });
                    var result;
                    eval("result = " + boxes.length + params.comparisonOperator + parseInt(params.variableValue));
                    return result
                }
            return false
        },
        _evaluateGmailState: function () {
            return true
        },
        checkStateTriggers: function () {
            var self = this;
            _.each(this._dataStateTriggers, function (triggersArray) {
                self.checkAndRunTour(triggersArray)
            })
        },
        teardown: function () {
            if (this._tour && this._tourRunning) {
                this._tour._softExitTour();
                this._tour.recordPausedState(true)
            }
        },
        reup: function () {
            if (this._tour && this._tourRunning) this._tour.showReturnToTourPopUp()
        },
        isTourRunning: function () {
            return this._tourRunning || this._tourHelpRunning
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "tourRunnerInitialized",
        functionToCall: TourRunner.init,
        functionContext: TourRunner,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded", "userSettingsInitialized", "bentoBox.triggerFirstGmailViewChange"]
    });
    Streak.DependencyManager.addFunction({
        functionKey: "tourRunner.initRunTour",
        functionToCall: TourRunner.initRunTour,
        functionContext: TourRunner,
        dependentFunctionKeys: ["tourRunnerInitialized"]
    });
    BB.Modules.TourRunner = TourRunner
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var FirstRunTour = function (options) {
        BB.Modules.TourBase.call(this, options);
        this.useCase = "default";
        this.tourData = options.tourData
    };
    FirstRunTour.prototype = Object.create(BB.Modules.TourBase.prototype);
    _.extend(FirstRunTour.prototype, {
        newPipelineModal: null,
        createdPipelines: [],
        fakeBoxes: [],
        createdBoxes: [],
        modifiedCollections: [],
        preload: function (cb) {
            this.getShareModal();
            if (cb) cb()
        },
        getShareModal: function () {
            if (!this.shareStreakModal) this.shareStreakModal =
                BB.Widgets.ShareStreak.create({
                    modalOptions: {
                        close: false,
                        escClose: false,
                        title: this._localeClone.getString("share_streak_modal_title"),
                        confirmText: this._localeClone.getString("tour_next"),
                        cancelText: this._localeClone.getString("tour_skip")
                    },
                    modalDescription: this._localeClone.getString("share_streak_modal_description")
                });
            return this.shareStreakModal
        },
        loadPipelineView: function (callback) {
            var self = this;
            if (BB.UI.isPipelineView()) {
                this._currentViewURL = Gmail.hash.partsString;
                this.currentPipeline = BB.Data.getPipeline(Gmail.getConversationId());
                callback();
                return
            }
            this._currentViewURL = this.currentPipeline.link();
            BB.UI.setURL(this._currentViewURL, callback)
        },
        setupPipeline: function () {
            var boxes = BB.Data.getPipelineBoxes(this.currentPipeline.key());
            if (boxes.length < 2) {
                boxes._refresh = boxes.refresh;
                boxes.refresh = function (cb) {
                    cb()
                };
                this.modifiedCollections.push(boxes);
                var nameKey = null;
                for (var key in this.tourData.fakeBoxInformation.mapping)
                    if (this._localeClone.getString(key) === this.currentPipeline.displayName()) {
                        nameKey = key;
                        break
                    }
                if (nameKey) {
                    var names =
                        this.tourData.fakeBoxInformation.data.names[this.tourData.fakeBoxInformation.mapping[nameKey]];
                    for (var i = 1; i < names.length; i++) {
                        var box = this.createFakeBox(this.currentPipeline, names[i]);
                        boxes.addModel(box)
                    }
                }
            }
            if (this._options.tourData)
                if (this._options.tourData.stringModeMapping) {
                    var mapping = this._options.tourData.stringModeMapping;
                    for (var key in mapping) {
                        var aKey = BB.UI.processString(key);
                        if (aKey === this.currentPipeline.displayName()) {
                            var mode = mapping[key];
                            this.useCase = mode;
                            this._localeClone.setMode(this.useCase);
                            this._html.setMode(this.useCase);
                            break
                        }
                    }
                }
        },
        createFakeBox: function (pipeline, name) {
            var box = BB.Models.Box.create({
                name: name,
                pipelineKey: pipeline.key()
            });
            box.save = function (cb) {
                cb()
            };
            box.link = function () {
                return pipeline.link()
            };
            var randomNote = this.tourData.fakeBoxInformation.data.notes[_.random(0, this.tourData.fakeBoxInformation.data.notes.length - 1)];
            box.set("notes", randomNote);
            var stages = pipeline.get("stageOrder");
            var randomStage = stages[_.random(0, stages.length - 1)];
            box.set("stageKey", randomStage);
            box.set("boxKey",
                "__new__" + Streak.Date.create().getTime() * Math.random());
            var fields = box.getFields();
            for (var j = 0; j < fields.length; j++) {
                var field = fields[j];
                field.save = function (cb) {
                    if (cb) cb()
                };
                switch (field.get("type")) {
                case "TEXT_INPUT":
                    for (var fieldName in this.tourData.fakeBoxInformation.data.fields)
                        if (this._localeClone.getString(fieldName) === pipeline.getField(field.key()).displayName()) {
                            var fieldValues = this.tourData.fakeBoxInformation.data.fields[fieldName];
                            var randomText = fieldValues[_.random(0, fieldValues.length -
                                1)];
                            field.set("value", randomText);
                            break
                        }
                    break;
                case "DATE":
                    var randomDate = _.random(0, 30);
                    field.set("value", Streak.Date.create().addDays(-1 * randomDate).getTime() + "");
                    break;
                case "PERSON":
                    break
                }
            }
            this.fakeBoxes.push(box);
            return box
        },
        createBox: function () {
            var self = this;
            this.currentPipeline.onCreate(function () {
                var nameKey = null;
                for (var key in self.tourData.fakeBoxInformation.mapping)
                    if (self._localeClone.getString(key) === self.currentPipeline.displayName()) {
                        nameKey = key;
                        break
                    }
                var names;
                if (nameKey) names = self.tourData.fakeBoxInformation.data.names[self.tourData.fakeBoxInformation.mapping[nameKey]];
                if (!names || names.length === 0) names = ["Mike Roberts"];
                BB.Data.createBox(names[0], self.currentPipeline.key(), function (box) {
                    self.createdBoxes.push(box);
                    self.currentBox = box;
                    self.setupBox();
                    self._recordState()
                })
            })
        },
        setupBox: function () {
            var self = this;
            if (this.currentBox.get("notes").length === 0) this.currentBox.set("notes", self._localeClone.getString("tour_sample_box_notes"));
            var fields = this.currentBox.getFields();
            for (var j = 0; j < fields.length; j++) {
                var field = fields[j];
                field.save = function (cb) {
                    if (cb) cb()
                };
                switch (field.get("type")) {
                case "TEXT_INPUT":
                    for (var fieldName in this.tourData.fakeBoxInformation.data.fields)
                        if (this._localeClone.getString(fieldName) ===
                            this.currentPipeline.getField(field.key()).displayName()) {
                            var fieldValues = this.tourData.fakeBoxInformation.data.fields[fieldName];
                            var randomText = fieldValues[_.random(0, fieldValues.length - 1)];
                            field.set("value", randomText);
                            break
                        }
                    break;
                case "DATE":
                    var randomDate = _.random(0, 30);
                    field.set("value", Streak.Date.create().addDays(-1 * randomDate).getTime() + "");
                    break;
                case "PERSON":
                    break
                }
            }
            var threads = BB.Data.getGmailThreadGroup(this.currentBox.key(), null, true);
            if (threads)
                if (threads.length === 0) {
                    var thread1 = BB.Models.GmailThread.create({
                        subject: self._localeClone.getString("tour_sample_email_1_subject"),
                        names: [self._localeClone.getString("tour_sample_email_1_name")],
                        emailAddresses: [self._localeClone.getString("tour_sample_email_1_address")],
                        lastEmailTimestamp: Streak.Date.ccreate().getTime()
                    });
                    thread1.link = function () {
                        return self.currentBox.link()
                    };
                    thread1.save = function (cb) {
                        if (cb) cb()
                    };
                    threads.addModel(thread1);
                    var thread2 = BB.Models.GmailThread.create({
                        subject: self._localeClone.getString("tour_sample_email_2_subject"),
                        names: [self._localeClone.getString("tour_sample_email_2_name")],
                        emailAddresses: [self._localeClone.getString("tour_sample_email_2_address")],
                        lastEmailTimestamp: Streak.Date.ccreate("yesterday at 9pm").getTime()
                    });
                    thread2.link = function () {
                        return self.currentBox.link()
                    };
                    thread2.save = function (cb) {
                        if (cb) cb()
                    };
                    threads.addModel(thread2);
                    var thread3 = BB.Models.GmailThread.create({
                        subject: self._localeClone.getString("tour_sample_email_3_subject"),
                        names: [self._localeClone.getString("tour_sample_email_3_name")],
                        emailAddresses: [self._localeClone.getString("tour_sample_email_3_address")],
                        lastEmailTimestamp: Streak.Date.ccreate("yesterday at 8am").getTime()
                    });
                    thread3.link = function () {
                        return self.currentBox.link()
                    };
                    thread3.save = function (cb) {
                        if (cb) cb()
                    };
                    threads.addModel(thread3)
                }
            this.currentBox.refresh = function (cb) {
                if (cb) cb()
            };
            threads.refresh = function (cb) {
                if (cb) cb()
            }
        },
        loadBoxView: function (callback) {
            var self = this;
            if (BB.UI.isBoxView()) {
                this._currentViewURL = Gmail.hash.partsString;
                callback();
                return
            }
            this._currentViewURL = this.currentBox.link();
            BB.UI.setURL(this._currentViewURL);
            callback()
        },
        loadInbox: function (callback) {
            this._currentViewURL = Gmail.Constants.Inbox;
            if (Gmail.view !== Gmail.Constants.Inbox) BB.UI.setURL(Gmail.Constants.Inbox, callback);
            else callback()
        },
        pickPipeline: function (callbacks) {
            var self = this;
            this.newModalPipeline = BB.Widgets.NewPipelineModal.create({
                title: "How Can Streak Help You?",
                subHeadingText: "Don't worry, you can change this later",
                showCancel: false,
                close: false,
                escClose: false,
                showConfirm: false,
                noPipelineChosenCallback: this.noPipelinePicked.bind(this),
                pipelineChosenCallback: callbacks.next,
                pipelinePrecreateCallback: function (pipeline) {
                    self.pipelinePicked(pipeline)
                }
            });
            this.newModalPipeline.show()
        },
        pickPipelineDestroy: function () {
            this.newModalPipeline.close()
        },
        pickMultiplePipelines: function (callbacks) {
            var self = this;
            this.newModalPipeline = BB.Widgets.NewMultiPipelineModal.create({
                title: this._localeClone.getString("tour_choose_pipeline_modal_help_title"),
                subHeadingText: this._localeClone.getString("tour_choose_pipeline_modal_help_description"),
                confirmText: this._localeClone.getString("tour_next"),
                pipelineTemplates: this.tourData.pipelineChoices,
                noPipelineChosenCallback: this.noPipelinePicked.bind(this),
                pipelineChosenCallback: callbacks.next,
                pipelinePrecreateCallback: function (pipeline) {
                    self.pipelinePicked(pipeline)
                }
            });
            this.newModalPipeline.show()
        },
        pickMultiplePipelinesDestroy: function () {
            this.newModalPipeline.close()
        },
        pipelinePicked: function (pipelines) {
            var self = this;
            if (!_.isArray(pipelines)) pipelines = [pipelines];
            this.recordEvent("pipelinesCreated", {
                value: pipelines.length
            });
            this.createdPipelines = pipelines;
            if (this.createdPipelines.length > 0) this.currentPipeline = this.createdPipelines[0];
            else this.currentPipeline =
                BB.Data.getAllPipelines()[0];
            this.getShareModal().setPipelines(this.createdPipelines);
            this.currentPipeline.onCreate(function () {
                self.createBox();
                self.setupPipeline()
            })
        },
        noPipelinePicked: function () {
            this.changeChapterTo("noPipelineChosen")
        },
        shareStreak: function (callbacks) {
            var self = this;
            this.getShareModal().show({
                cancelFunction: function () {
                    self.recordEvent("streakNotShared");
                    self.recordEvent("streakShareModalClosed");
                    callbacks.next()
                },
                onPresave: function (acl) {
                    self.recordEvent("streakShared", {
                        value: acl.length
                    });
                    self.recordEvent("streakShareModalClosed");
                    callbacks.next()
                },
                pipelines: this.createdPipelines
            })
        },
        shareStreakDestroy: function () {
            this.getShareModal().close()
        },
        setupExistingPipeline: function (callback) {
            this.currentPipeline = _.max(BB.Data.getAllPipelines(), function (pipeline) {
                return BB.Data.getPipelineBoxes(pipeline.key()).length
            });
            var boxes = BB.Data.getPipelineBoxes(this.currentPipeline.key());
            if (boxes.length === 0) {
                this.createBox();
                this.setupPipeline()
            } else this.currentBox = boxes[0]; if (callback) callback()
        },
        cleanUpDataCreatedByTour: function () {
            for (var i = 0; i < this.fakeBoxes.length; i++) this.fakeBoxes[i].trigger("delete");
            this.fakeBoxes.length = 0;
            for (var i = 0; i < this.createdBoxes.length; i++) this.createdBoxes[i].del();
            this.createdBoxes.length = 0;
            for (var i = 0; i < this.modifiedCollections.length; i++) this.modifiedCollections[i].refresh = this.modifiedCollections[i]._refresh;
            this.modifiedCollections.length = 0
        },
        getInstanceSettings: function () {
            var ret = {};
            if (this.createdPipelines && this.createdPipelines.length > 0) ret.pipelineKeys =
                _.map(this.createdPipelines, function (pipeline) {
                    return pipeline.key()
                });
            if (this.createdBoxes && this.createdBoxes.length > 0) ret.boxKeys = _.map(this.createdBoxes, function (box) {
                return box.key()
            });
            if (this.currentPipeline) ret.currentPipelineKey = this.currentPipeline.key();
            if (this.currentBox) ret.currentBoxKey = this.currentBox.key();
            return ret
        },
        loadInstanceSettings: function (settings) {
            if (settings) {
                this.createdPipelines = [];
                if (settings.pipelineKeys && settings.pipelineKeys.length > 0)
                    for (var i = 0; i < settings.pipelineKeys.length; i++) {
                        var pipeline =
                            BB.Data.getPipeline(settings.pipelineKeys[i]);
                        if (pipeline) this.createdPipelines.push(pipeline)
                    }
                this.createdBoxes = [];
                if (settings.boxKeys && settings.boxKeys.length > 0)
                    for (var i = 0; i < settings.boxKeys.length; i++) {
                        var box = BB.Data.getBox(settings.boxKeys[i]);
                        if (box) this.createdBoxes.push(box)
                    }
                if (settings.currentPipelineKey) {
                    var pipeline = BB.Data.getPipeline(settings.currentPipelineKey);
                    if (pipeline) this.currentPipeline = pipeline;
                    else this.currentPipeline = BB.Data.getAllPipelines()[0]
                } else if (BB.Data.getAllPipelines().length >
                    0) this.currentPipeline = BB.Data.getAllPipelines()[0];
                if (settings.currentBoxKey) {
                    var box = BB.Data.getBox(settings.currentBoxKey);
                    if (box) this.currentBox = box;
                    else if (this.createdBoxes.length > 0) this.currentBox = this.createdBoxes[0];
                    else if (this.currentPipeline) {
                        var madeBoxes = _.filter(BB.Data.getPipelineBoxes(this.currentPipeline.key()), function (aBox) {
                            return aBox.isSavedOnServer()
                        });
                        if (madeBoxes.length > 0) this.currentBox = madeBoxes[0]
                    }
                } else if (BB.Data.getAllBoxes().length > 0) {
                    this.currentBox = BB.Data.getAllBoxes()[0];
                    if (this.currentBox.getPipeline().key() !== this.currentPipeline.key()) this.currentPipeline = this.currentBox.getPipeline()
                }
                if (this.currentPipeline) {
                    this.setupPipeline();
                    if (!this.currentBox) this.createBox()
                }
                if (this.currentBox) this.setupBox()
            }
        }
    });
    BB.Modules.Tours = BB.Modules.Tours || {};
    BB.Modules.Tours.FirstRunTour = FirstRunTour
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    };
    var ExtendedTour = function (options) {
        BB.Modules.Tours.FirstRunTour.call(this, options)
    };
    ExtendedTour.prototype = Object.create(BB.Modules.Tours.FirstRunTour.prototype);
    _.extend(ExtendedTour.prototype, {
        showIOSModal: function (callbacks) {
            var inner = $(this._html.get("extendedTouriPhoneModalInner")());
            var inputWrapper = inner.find(".extendedTourIPhoneModalInput");
            var input = inputWrapper.find("input");
            var inputStatus = inner.find(".extendedTourIPhoneModalInputStatus");
            var submitButton = BB.Widgets.Button.create({
                name: "Send To My Phone",
                color: "blue",
                onFunc: function (e) {
                    track("send_ios_link_attempt");
                    submitButton.disable();
                    modal.getOkButton().disable();
                    submitButton.el.html("<div>Sending...</div>");
                    var phoneNumber = input.val();
                    Requester.get({
                        msgUrl: "/ajaxcalls/sendUserIOSText",
                        phoneNumber: phoneNumber
                    }, function (res) {
                        if (res.success) {
                            track("send_ios_link_successful");
                            submitButton.el.html("<div>Sent!</div>");
                            setTimeout(function () {
                                modal.close();
                                callbacks.next()
                            }, 2 * 1E3)
                        } else {
                            track("send_ios_link_failure");
                            modal.getOkButton().enable();
                            submitButton.enable();
                            submitButton.el.html("<div>Send To My Phone</div>");
                            inputStatus.css("color", "red");
                            inputStatus.html("Sorry there was an error. Please go to www.streak.com/iphone on your iPhone.");
                            inputStatus.show()
                        }
                    }, function () {
                        inputStatus.css("color", "red");
                        inputStatus.html("Sorry there was an error. Please go to www.streak.com/iphone on your iPhone.");
                        inputStatus.show()
                    }, null, null, true)
                }
            });
            inputWrapper.find(".extendedTourIPhoneModalInputButton").append(submitButton.el);
            input.on("keydown", function (e) {
                if (e.which === 13) submitButton.on()
            });
            input.on("focus", function (e) {
                inputWrapper.addClass("acm")
            });
            input.on("blur", function (e) {
                inputWrapper.removeClass("acm")
            });
            $.tabChain([input, submitButton.el]);
            var modal = BB.Widgets.Modal.create({
                title: "Get Streak for your iPhone",
                width: "550px",
                inner: inner,
                showConfirm: true,
                showCancel: false,
                confirmText: "No thanks",
                doneButtonColor: "normal",
                onClose: callbacks.next
            });
            modal.show();
            setTimeout(function () {
                input.focus()
            }, 50)
        }
    });
    BB.Modules.Tours = BB.Modules.Tours || {};
    BB.Modules.Tours.ExtendedTour = ExtendedTour
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var HelpLoader = Streak.Class.subclass({
        className: "HelpLoader",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_doneCallback",
            destroy: false
        }, {
            name: "_helpViewController",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        setup: function (callback) {
            this._doneCallback =
                callback;
            this._downloadHelpFileAndSetupView()
        },
        _downloadHelpFileAndSetupView: function () {
            Streak.Requester.get({
                msgUrl: "/tours/help/help.json"
            }, this._successfulHelpFileDownload.bind(this), this._failedHelpFileDownload.bind(this))
        },
        _successfulHelpFileDownload: function (helpFile) {
            this._helpFile = helpFile;
            if (this._isHelpVisibleByDefault()) this.getHelpViewController().show();
            this._doneCallback()
        },
        _failedHelpFileDownload: function () {
            this._doneCallback()
        },
        _isHelpVisibleByDefault: function () {
            return !BB.UserSettings.get("help/defaultHidden")
        },
        getHelpViewController: function () {
            if (!this._helpViewController) {
                this._helpViewController = Library.getInstance("BentoBox.Modules.Help.HelpViewController");
                this._helpViewController.setHelpFile(this._helpFile)
            }
            return this._helpViewController
        }
    });
    DependencyManager.addFunction({
        functionKey: "helpLoaderInitialized",
        functionReference: function () {
            var helpLoader = new HelpLoader;
            var promise = new Streak.Promise(function (resolve, reject) {
                helpLoader.setup(resolve)
            });
            Library.set("BentoBox.Modules.Help.HelpLoader", helpLoader);
            return promise
        },
        dependentFunctionKeys: ["bentoBox.triggerFirstGmailViewChange"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var HelpView = Streak.Class.subclass({
        className: "HelpView",
        superclass: UI.View,
        _memberVariables: [{
            name: "_modalView",
            destroy: true
        }, {
            name: "_modalWrapper",
            destroy: true
        }],
        _initialize: function () {
            UI.View.prototype._initialize.call(this)
        },
        _setupElement: function () {},
        setModalView: function (modalView) {
            this._modalView = modalView;
            this.getElement().addClass("streak__helpView")
        },
        getElement: function () {
            return this._modalView.getElement()
        },
        show: function () {
            if (this._modalWrapper) {
                Gmail.readdToComposeArea(this._modalWrapper);
                return
            }
            this._modalWrapper = Gmail.addToComposeArea(this.getElement(), 350)
        },
        hide: function () {
            Gmail.removeFromComposeArea(this._modalWrapper)
        }
    });
    Library.set("BentoBox.Modules.Help.HelpView", HelpView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var HelpViewController = Streak.Class.subclass({
        className: "HelpViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_helpFile",
            destroy: false,
            set: true
        }, {
            name: "_helpModalViewController",
            destroy: true
        }, {
            name: "_searchableListViewController",
            destroy: true
        }, {
            name: "_unbinders",
            destroy: false
        }, {
            name: "_trackQueryDebouncer",
            destroy: false
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this);
            this._unbinders = [];
            this._setupSearchableListViewController();
            this._setupHelpModalViewController();
            this._view.setModalView(this._helpModalViewController.getView());
            this._trackQueryDebouncer = _.debounce(this._trackQuery.bind(this), 500)
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Modules.Help.HelpView")
        },
        _setupSearchableListViewController: function () {
            this._searchableListViewController =
                Library.getInstance("BentoBox.Widgets.SearchableListViewController");
            this._searchableListViewController.setPlaceholder(BB.Locale.getString("search_help"));
            this._searchableListViewController.setShouldLockSelection(false)
        },
        _setupHelpModalViewController: function () {
            this._helpModalViewController = Library.getInstance("BentoBox.Widgets.HelpModalViewController");
            this._helpModalViewController.addDelegate(this);
            this._helpModalViewController.hideBackButton();
            this._helpModalViewController.setContentViewController(this._searchableListViewController);
            var searchViewController = this._searchableListViewController.getSearchInputViewController();
            this._helpModalViewController.setTitleViewController(searchViewController);
            this._helpModalViewController.setTitleText("Streak Help")
        },
        setHelpFile: function (helpFile) {
            this._helpFile = helpFile;
            this._searchableListViewController.addDelegate(this);
            this._searchableListViewController.setDataSource(this)
        },
        _bindToTourEvents: function () {
            var self = this;
            var unbinder = NotificationCenter.addFunction({
                eventName: "tourStarting",
                functionToCall: function () {
                    self._view.hide()
                }
            });
            this._unbinders.push(unbinder);
            unbinder = NotificationCenter.addFunction({
                eventName: "tourFinished",
                functionToCall: function () {
                    self._view.show();
                    self._searchableListViewController.focus()
                }
            });
            this._unbinders.push(unbinder)
        },
        _unbindFromTourEvents: function () {
            for (var ii = 0; ii < this._unbinders.length; ii++) this._unbinders[ii]();
            this._unbinders.length = 0
        },
        show: function (shouldRestore) {
            this._bindToTourEvents();
            this._searchableListViewController.reset();
            this._view.show();
            if (shouldRestore) this._helpModalViewController.restore();
            this._searchableListViewController.focus()
        },
        closeClicked: function () {
            BB.Tracker.track("help menu closed");
            this._view.hide();
            BB.UserSettings.set("help/defaultHidden", true);
            if (this._hasNotSeenTopMenuTooltip()) this._showTopMenuTooltip();
            this._unbindFromTourEvents();
            BB.UserSettings.save()
        },
        minimizeClicked: function () {
            BB.Tracker.track("help menu minimized");
            this._helpModalViewController.setIconClass("streak__helpView_icon")
        },
        restoreClicked: function () {
            BB.Tracker.track("help menu restored");
            this._helpModalViewController.setIconClass("");
            this._searchableListViewController.focus()
        },
        getNumberOfSections: function () {
            return this._helpFile.HelpMenu.length
        },
        getSectionTitle: function (sectionIndex) {
            return this._helpFile.HelpMenu[sectionIndex].name
        },
        getNumberOfRows: function (sectionIndex) {
            return this._helpFile.HelpMenu[sectionIndex].chapters.length
        },
        getRowData: function (sectionIndex, rowIndex) {
            return {
                text: this._helpFile.HelpMenu[sectionIndex].chapters[rowIndex],
                chapterName: this._helpFile.HelpMenu[sectionIndex].chapters[rowIndex]
            }
        },
        getRowSearchString: function (sectionIndex, rowIndex) {
            return this._helpFile.HelpMenu[sectionIndex].chapters[rowIndex]
        },
        keydown: function (event) {
            if (!Streak.jwerty.is("escape", event)) return;
            this.closeClicked()
        },
        queryChange: function (query) {
            this._trackQueryDebouncer(query)
        },
        _trackQuery: function (query) {
            if (!query) return;
            BB.Tracker.track("help queried", {
                query: query
            })
        },
        rowSelected: function (rowData) {
            this._startTourChapter(rowData.chapterName)
        },
        _startTourChapter: function (chapterName) {
            var chapterDefinition = this._getChapterDefinition(chapterName);
            if (!chapterDefinition) return;
            var tourChapterViewController = new BB.Tour.TourChapterViewController;
            tourChapterViewController.run(chapterDefinition, this._helpFile.Chapters)
        },
        _getChapterDefinition: function (chapterName) {
            var chapters = this._helpFile.Chapters;
            for (var ii = 0; ii < chapters.length; ii++) {
                var chapter = chapters[ii];
                if (chapter.name === chapterName) return JSON.deepClone(chapter)
            }
            return null
        },
        _hasNotSeenTopMenuTooltip: function () {
            return !BB.UserSettings.get("help/seenTopMenuTooltip")
        },
        _showTopMenuTooltip: function () {
            this._startTourChapter("How to access Streak Help");
            BB.UserSettings.set("help/seenTopMenuTooltip", true)
        },
        destroy: function () {
            for (var ii = 0; ii < this._unbinders.length; ii++) this._unbinders[ii]();
            UI.ViewController.prototype.destroy.call(this)
        }
    });
    Library.set("BentoBox.Modules.Help.HelpViewController", HelpViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        HTML = Streak.HTML,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        BB = Streak.BentoBox;
    var StreakSettingsView = {
        init: function (cb) {
            var self = this;
            self.trackingContext = {
                widgetContext: "streakSettigns"
            };
            if (!self.initialized) {
                self.templates = {};
                self.templates.button = HTML.get("streakSettingsButton");
                self.templates.page = HTML.get("streakSettingsPage");
                self.templates.section = HTML.get("streakSettingsSection");
                self.templates.setting = HTML.get("streakSettingsSetting");
                self.templates.settingParentButton = HTML.get("streakSettingsParentButton");
                self.templates.subsettingTitle = HTML.get("streakSettingsSubsettingTitle");
                self.templates.comboButton = HTML.get("streakSettingsComboButton");
                self.templates.subtitle = HTML.get("streakSettingsSubtitle");
                var streakMenuButton = $(self.templates.button());
                self._streakMenuButton = streakMenuButton;
                $(streakMenuButton).click(function () {
                    Streak.BentoBox.UI.setURL("settingsStreak")
                });
                self._fromSettings = false;
                Gmail.observe("viewChanged", $.proxy(self.render,
                    self));
                self.initialized = true
            }
            if (cb) cb()
        },
        track: function (event, prop) {
            BB.Tracker.trackStreakActive(this.trackingContext, prop, {
                eventName: event
            })
        },
        oppositeMap: function (entry) {
            if (entry === "filters") return "accounts";
            else return "filters"
        },
        getFirstSettingsPage: function () {
            var self = this;
            return Streak.BentoBox.Data.streakSettings.getPages()[0]
        },
        isSelected: function (selected, value) {
            var isSelected = false;
            _.each(selected, function (s) {
                if (s === value) isSelected = true
            });
            return isSelected
        },
        constructToggle: function (path, possibleValues,
            selectedValues, setting, hasChildren, subsettingWidgtets) {
            var self = this;
            var radioList;
            if (possibleValues.length === 2 && _(possibleValues).contains("enabled")) {
                var changeCallback = function (value) {
                    if (hasChildren)
                        if (value === "enabled") _.each(subsettingWidgtets, function (ww) {
                            ww.button.enable();
                            $(ww.el).removeClass("streakDisabled")
                        });
                        else _.each(subsettingWidgtets, function (ww) {
                            ww.button.disable();
                            $(ww.el).addClass("streakDisabled")
                        });
                    BB.Data.streakSettings.setSelectedValues(path.pageKey, path.sectionKey, setting.key, [value])
                };
                radioList = BB.Widgets.RadioList.create({
                    changeCallback: changeCallback
                });
                for (var ii = 0; ii < possibleValues.length; ii++) radioList.addOption(BB.Locale.getString(possibleValues[ii]), possibleValues[ii]);
                radioList.setSelected(selectedValues[0]);
                if (hasChildren)
                    if (_(selectedValues).contains("enabled")) changeCallback("enabled");
                    else changeCallback("disabled");
                radioList.el.addClass("rS")
            }
            return radioList
        },
        constructComboDropDown: function (path, possibleValues, selectedValues, setting) {
            var self = this;
            var menu =
                Streak.BentoBox.Widgets.Menu.create();
            var checkedCurrent = selectedValues;
            var button = $(self.templates.comboButton({
                text: Streak.Locale.getString(setting.displayName)
            }));
            var buttonEl = button.find(".streakSettingsComboButtonText");
            var bm = BB.Widgets.ButtonMenu.create({
                menu: menu.el,
                closeOnSelect: false,
                customButton: button,
                onFunc: function (e) {
                    self.track("openedComoboDropDown", _.extend(path, {
                        "settingKey": setting.key
                    }));
                    if (e) e.stopPropagation()
                },
                offFunc: function (e) {
                    self.track("closedComoboDropDown", _.extend(path, {
                        "settingKey": setting.key
                    }));
                    if (e) e.stopPropagation()
                }
            });
            if (selectedValues.length === 0) selectedValues = ["None"];

            function updateButtonText(values) {
                if (values.length > 0) buttonEl.html(_.map(values, function (ii) {
                    return Streak.Locale.getString(ii)
                }).join(", "));
                else buttonEl.html(Streak.Locale.getString("none"))
            }
            var _itemButtons = [];
            menu.addItem(Streak.Locale.getString("none"), function (isChecked, e) {
                if (isChecked) {
                    checkedCurrent = [];
                    BB.Data.streakSettings.setSelectedValues(path.pageKey, path.sectionKey, setting.key,
                        checkedCurrent);
                    _.each(_itemButtons, function (iButton) {
                        iButton.setCheckboxState(false);
                        $(buttonEl).html(Streak.Locale.getString("none"))
                    })
                } else;
            });
            menu.addSeparator();
            _.each(possibleValues, function (item) {
                var _item = item;
                var contains = _.indexOf(selectedValues, _item) >= 0;
                var itemButton = menu.addCheckItem(Streak.Locale.getString(item), function (isChecked, e) {
                    if (isChecked) checkedCurrent.push(_item);
                    else checkedCurrent = _.without(checkedCurrent, _item);
                    updateButtonText(checkedCurrent);
                    BB.Data.streakSettings.setSelectedValues(path.pageKey,
                        path.sectionKey, setting.key, checkedCurrent);
                    if (checkedCurrent.indexOf("desktopNotification") > -1) self._checkDesktopNotificationPermission()
                }, contains);
                _itemButtons.push(itemButton)
            });
            updateButtonText(selectedValues);
            return bm
        },
        getWidget: function (path, setting, hasChildren, subsettingWidgtets) {
            var self = this;
            var selectedValues = setting.selectedValues;
            if (selectedValues.length > 0 && selectedValues[0] === "default") selectedValues = setting.defaultValues;
            switch (setting.widgetType) {
            case "enabled_disabled":
                return self.constructToggle(path,
                    setting.possibleValues, selectedValues, setting, hasChildren, subsettingWidgtets);
                break;
            case "combo_dropdown":
                return self.constructComboDropDown(path, setting.possibleValues, selectedValues, setting);
                break;
            default:
                return ""
            }
        },
        renderSubSetting: function (path, subsetting, settingContainer) {
            var self = this;
            var subsettingTitle = $(self.templates.subsettingTitle({
                subsettingTitle: Streak.Locale.getString(subsetting.displayName)
            }));
            if (subsetting.subtitle) subsettingTitle.append(self.templates.subtitle({
                text: BB.Locale.getString(subsetting.subtitle)
            }));
            var widget = self.getWidget(path, subsetting);
            settingContainer.find(".streakSettingsSubsettingList").append(subsettingTitle);
            settingContainer.find(".streakSettingsSubsettingWidgets").append(widget.el);
            return widget
        },
        shouldRenderSetting: function (setting) {
            return true
        },
        renderSetting: function (path, setting) {
            var self = this;
            var widget;
            if (!this.shouldRenderSetting(setting)) return;
            var settingContainer = $(self.templates.setting({
                settingTitle: Streak.Locale.getString(setting.displayName)
            }));
            if (setting.subtitle) settingContainer.find(".streakSettingsSettingTitle").append(self.templates.subtitle({
                text: BB.Locale.getString(setting.subtitle)
            }));
            var subsettingWidgtets = [];
            if (_.isReal(setting.subsettings) && setting.subsettings.length > 0)
                for (var ii = 0; ii < setting.subsettings.length; ii++) subsettingWidgtets.push(self.renderSubSetting(path, setting.subsettings[ii], settingContainer));
            else settingContainer.find(".streakSettingChildSetting").remove(); if (_.isReal(setting.subsettings) && setting.subsettings.length > 0) widget = self.getWidget(path, setting, true, subsettingWidgtets);
            else widget = self.getWidget(path, setting);
            settingContainer.find(".streakSettingsSettingWidget").append(widget.el);
            return settingContainer
        },
        renderSettingsSection: function (settingsSection, path) {
            var self = this;
            var settingsSectionContainer = $(self.templates.section({
                sectionTitle: Streak.Locale.getString(settingsSection.displayName)
            }));
            _.each(settingsSection.settings, function (setting) {
                settingsSectionContainer.find(".streakSettingsSectionBody").append(self.renderSetting(path, setting))
            });
            return settingsSectionContainer
        },
        loadStreakSettings: function () {
            var self = this;
            var page = self.getFirstSettingsPage();
            var pageKey = page.key;
            _.each(page.sections, function (sectionData) {
                var path = {
                    "pageKey": pageKey,
                    "sectionKey": sectionData.key
                };
                self._streakSettingsContainer.append(self.renderSettingsSection(sectionData, path))
            })
        },
        renderStreakSettings: function () {
            var self = this;
            if (_.isNotReal(self._streakSettingsContainer)) self._streakSettingsContainer = $(self.templates.page());
            self._streakSettingsContainer.empty();
            Gmail.Settings.getContentBodyBlockContainer().find(".streakSettings").remove();
            self.loadStreakSettings();
            Gmail.Settings.getContentBodyBlockContainer().append(self._streakSettingsContainer);
            self._streakSettingsContainer.css("display", "")
        },
        render: function () {
            var self = this;
            if (Gmail.view === "settings") {
                if (_.isDefined(self._streakSettingsContainer)) self._streakSettingsContainer.css("display", "none");
                if (Streak.Gmail.getCurrentMainContainer().find(".aeH .streakSettingsButton").length === 0) Streak.Gmail.Settings.getEndingMenuMarker().before(self._streakMenuButton);
                else self._streakMenuButton = Streak.Gmail.getCurrentMainContainer().find(".streakSettingsButton");
                try {
                    self._streakMenuButton.removeClass("fZ").addClass("f1")
                } catch (e) {}
                Gmail.Settings.getContentBodyBlock().css("display",
                    "");
                self._streakMenuButton.removeClass("fZ").addClass("f1")
            } else if (Gmail.view === "settingsStreak") {
                self.renderStreakSettings();
                BB.Data.streakSettings.refresh(function () {
                    self.renderStreakSettings()
                });
                Gmail.Settings.getSettingTabs().off(".streak");
                Gmail.Settings.getSettingTabs().on("click.streak", function (e) {
                    if (Gmail.view === "settingsStreak") {
                        var targetURL;
                        try {
                            targetURL = Streak.$(e.target).attr("href").split("/").last();
                            if (targetURL === "#streakSettings") return;
                            Streak.$(e.target.parentElement).removeClass("f1").addClass("fZ")
                        } catch (f) {
                            targetURL =
                                null;
                            var newTarget = $(e.target).find("a");
                            if (_.isDefined(newTarget.attr("href"))) {
                                targetURL = Streak.$(newTarget).attr("href").split("/").last();
                                Streak.$(e.target).removeClass("f1").addClass("fZ")
                            }
                        }
                        Streak.BentoBox.UI.setURL("setttings/" + self.oppositeMap(targetURL));
                        Streak.BentoBox.UI.setURL("settings/" + targetURL)
                    }
                    self._streakMenuButton.removeClass("f1").addClass("fZ")
                });
                Gmail.Settings.getSettingTabs().removeClass("fZ").addClass("f1");
                self._streakMenuButton.removeClass("f1").addClass("fZ");
                Streak.Gmail.Settings.getContentBodyBlock().css("display",
                    "none");
                self._streakSettingsContainer.css("display", "")
            }
        },
        _checkDesktopNotificationPermission: function () {
            if (typeof window.webkitNotifications !== "undefined") {
                var permissionStatus = window.webkitNotifications.checkPermission();
                if (permissionStatus === 1) window.webkitNotifications.requestPermission();
                else if (permissionStatus === 2) {
                    var messageBodyLink = "https://support.google.com/chrome/answer/3220216?hl=en";
                    if (Streak.isSafari) messageBodyLink = "http://support.apple.com/kb/PH11949";
                    var modal = BB.Widgets.Modal.create({
                        title: BB.Locale.getString("enable_browser_notifications_title"),
                        inner: BB.Locale.getString("enable_browser_notifications_body"),
                        showCancel: false,
                        confirmText: BB.Locale.getString("ok"),
                        confirmFunc: function () {}
                    });
                    modal.getEl().find(".inner a")[0].setAttribute("href", messageBodyLink);
                    modal.show()
                }
            }
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "streakSettingsViewInitialized",
        functionToCall: StreakSettingsView.init,
        functionContext: StreakSettingsView,
        dependentFunctionKeys: ["gmailLoaded", "data.streakSettings.initialized", "htmlLoaded"]
    });
    BB.Modules.StreakSettingsView =
        StreakSettingsView
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        StateMachine = Streak.StateMachine,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var PipelineMenu = function () {
        this._menu = BB.Widgets.Menu.create({
            maxHeight: 450
        });
        this._shareButton = null;
        this._colorPicker = null;
        this._menuItems = {
            rename: null,
            createSimilar: null,
            hide: null,
            show: null,
            deleteSeparator: null,
            "delete": null
        };
        this._currentPipeline = null;
        this._currentPipelineList = null;
        this._setup()
    };
    _.extend(PipelineMenu.prototype, {
        _setup: function () {
            this._createShareButton();
            this._menu.addSeparator();
            this._createColorPicker();
            this._menu.addSeparator();
            this._addModifyItems();
            this._menu.addSeparator();
            this._addMovePositionItems();
            this._addShowHideItems();
            this._addDeleteItems()
        },
        _createShareButton: function () {
            this._shareButton = BB.Modules.PipelineView.ShareButton.create({
                isButton: false,
                isDark: true,
                iconAfter: false
            });
            this._menu.addItem(this._shareButton.el)
        },
        _createColorPicker: function () {
            var self = this;
            this._colorPicker = BB.Widgets.ColorPicker.create({
                label: BB.Locale.getString("color_pipeline"),
                colorChosenFunc: function (newColor) {
                    isDefault = false;
                    color = newColor;
                    self._currentPipeline.setColor(color);
                    self._currentPipeline.trigger("colorChanged");
                    self.track("pipelineColorChanged")
                },
                showRemove: true,
                removeColorFunc: function () {
                    color = {
                        backgroundColor: "rgb(255, 173, 71)",
                        textColor: "rgb(0, 0, 0)"
                    };
                    isDefault = true;
                    self._currentPipeline.setColor(null);
                    self._currentPipeline.trigger("colorChanged");
                    self.track("pipelineColorRemoved")
                }
            });
            this._menu.addSection(this._colorPicker.el)
        },
        _addModifyItems: function () {
            var self =
                this;
            this._addRenameItem();
            this._addCreateSimilarItem()
        },
        _addRenameItem: function () {
            var self = this;
            this._menuItems.rename = this._menu.addItem(BB.Locale.getString("rename_pipeline"), function () {
                self.track("renamePipeline");
                BB.Widgets.Modal.textboxModal({
                    title: BB.Locale.getString("rename_pipeline"),
                    allowEmpty: false,
                    startingText: self._currentPipeline.displayName(),
                    callback: function (newName) {
                        self._currentPipeline.set("name", newName);
                        self._currentPipeline.save()
                    }
                })
            })
        },
        _addCreateSimilarItem: function () {
            var self =
                this;
            this._menuItems.createSimilar = this._menu.addItem(BB.Locale.getString("create_similar_pipeline"), function () {
                BB.Data.createSimilarPipeline(self._currentPipeline);
                self.track("createSimilarPipeline")
            })
        },
        _addMovePositionItems: function () {
            var self = this;
            this._menuItems.moveUp = this._menu.addItem(BB.Locale.getString("move_up"), function () {
                var currentPosition = self._currentPipelineList.indexOf(self._currentPipeline.key());
                var temp = self._currentPipelineList[currentPosition - 1];
                self._currentPipelineList[currentPosition -
                    1] = self._currentPipeline.key();
                self._currentPipelineList[currentPosition] = temp;
                BB.UserSettings.set("leftLink/pipelineSort", _.clone(self._currentPipelineList));
                BB.UserSettings.save(true)
            });
            this._menuItems.moveDown = this._menu.addItem(BB.Locale.getString("move_down"), function () {
                var currentPosition = self._currentPipelineList.indexOf(self._currentPipeline.key());
                var temp = self._currentPipelineList[currentPosition + 1];
                self._currentPipelineList[currentPosition + 1] = self._currentPipeline.key();
                self._currentPipelineList[currentPosition] =
                    temp;
                BB.UserSettings.set("leftLink/pipelineSort", _.clone(self._currentPipelineList));
                BB.UserSettings.save(true)
            })
        },
        _addShowHideItems: function () {
            this._addShowItem();
            this._addHideItem()
        },
        _addShowItem: function () {
            var self = this;
            this._menuItems.show = this._menu.addItem(BB.Locale.getString("unhide_pipeline"), function () {
                self._currentPipeline.setHidden(false);
                self.track("showPipeline")
            })
        },
        _addHideItem: function () {
            var self = this;
            this._menuItems.hide = this._menu.addItem(BB.Locale.getString("hide_pipeline"), function () {
                self._currentPipeline.setHidden(true);
                self.track("hidePipeline")
            })
        },
        _addDeleteItems: function () {
            var self = this;
            this._menuItems.deleteSeparator = this._menu.addSeparator();
            this._menuItems["delete"] = this._menu.addItem(BB.Locale.getString("delete_pipeline"), function () {
                self._deletePipeline(self._currentPipeline);
                self.track("deletePipeline")
            })
        },
        _doesUserOwnPipeline: function () {
            return this._currentPipeline.get("creatorKey") === BB.getUser().key()
        },
        _deletePipeline: function (pipeline) {
            if (!this._doesUserOwnPipeline(pipeline)) {
                Gmail.showNotice(BB.Locale.getString("no_permission"),
                    7E3);
                return
            }
            var boxes = BB.Data.getPipelineBoxes(pipeline.key());
            var message = "This pipeline contains <strong>" + boxes.length + " box" + (boxes.length === 1 ? "" : "es") + "</strong> which will all be deleted.";
            var acl = pipeline.get("aclEntries");
            if (acl && acl.length > 0) {
                message += " This pipeline is shared with <strong>" + acl.length + " collaborator" + (acl.length > 1 ? "s" : "") + "</strong>";
                if (pipeline.get("orgWide")) message += " and the <strong>" + pipeline.get("organization").organizationId + " organization</strong>"
            }
            var delTitle =
                BB.Locale.getString("confirm_delete_pipeline") + pipeline.displayName() + "?";
            BB.Widgets.Modal.confirm(delTitle, message, function () {
                if (boxes.length === 0) {
                    Gmail.showNotice(BB.Locale.getString("deleting"));
                    pipeline.del(function () {
                        Gmail.showNotice(BB.Locale.getString("delete_successful"), 5E3)
                    })
                } else {
                    var del2Message = BB.Locale.getString("confirm_2_text");
                    var del2Modal = BB.Widgets.Modal.create({
                        title: delTitle,
                        confirmFunc: function () {
                            Gmail.showNotice(BB.Locale.getString("deleting"));
                            pipeline.del(function () {
                                Gmail.showNotice(BB.Locale.getString("delete_successful"),
                                    5E3)
                            })
                        },
                        confirmText: BB.Locale.getString("delete"),
                        inner: '<div class="superConfirm">' + del2Message + "</div>",
                        doneButtonColor: "red"
                    });
                    del2Modal.show(true)
                }
            })
        },
        setCurrentPipeline: function (pipeline, pipelineList) {
            this._currentPipeline = pipeline;
            this._currentPipelineList = pipelineList;
            if (!pipeline) return;
            this._updateShareButton();
            this._updateColorPicker();
            this._updateShowHideItems();
            this._updateDeleteItems();
            this._updateMoveItems()
        },
        getElement: function () {
            return this._menu.el
        },
        getCurrentPipeline: function () {
            return this._currentPipeline
        },
        _updateShareButton: function () {
            this._shareButton.setPipeline(this._currentPipeline)
        },
        _updateColorPicker: function () {
            this._colorPicker.updateColor(this._currentPipeline.getColor(), this._currentPipeline.displayName());
            this._colorPicker.showMenu()
        },
        _updateShowHideItems: function () {
            this._menuItems.show.hide();
            this._menuItems.hide.hide();
            if (this._currentPipeline.isHidden()) this._menuItems.show.show();
            else this._menuItems.hide.show()
        },
        _updateDeleteItems: function () {
            if (this._doesUserOwnPipeline(this._currentPipeline)) {
                this._menuItems.deleteSeparator.show();
                this._menuItems["delete"].show()
            } else {
                this._menuItems.deleteSeparator.hide();
                this._menuItems["delete"].hide()
            }
        },
        _updateMoveItems: function () {
            this._menuItems.moveUp.hide();
            this._menuItems.moveDown.hide();
            if (this._currentPipeline.isHidden()) return;
            var currentIndex = this._currentPipelineList.indexOf(this._currentPipeline.key());
            if (currentIndex > 0) this._menuItems.moveUp.show();
            if (currentIndex !== this._currentPipelineList.length - 1) this._menuItems.moveDown.show()
        },
        track: function (event, prop) {
            BB.Tracker.trackStreakActive(this.trackingContext,
                prop, {
                    eventName: event
                })
        }
    });

    function init(callback) {
        BB.Modules.LeftLink.PipelineMenu = new PipelineMenu;
        if (callback) callback()
    }
    Streak.DependencyManager.addFunction({
        functionKey: "leftLink.pipelineMenuInitialized",
        functionToCall: init,
        dependentFunctionKeys: ["pipelineView.shareButtonInitialized", "menuInitialized", "widgets.colorPicker.initialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        StateMachine = Streak.StateMachine,
        Gmail = Streak.Gmail,
        Requester = Streak.Requester,
        HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var SavedViewsMenu = function () {
        this._menu = BB.Widgets.Menu.create();
        this._menuItems = {
            showInInbox: null,
            rename: null,
            duplicate: null,
            "delete": null
        };
        this._currentPipeline = null;
        this._currentSavedView = null;
        this._setup()
    };
    _.extend(SavedViewsMenu.prototype, {
        _setup: function () {
            this._addShowInInboxItem();
            this._menu.addSeparator();
            this._addRenameItem();
            this._addDuplicateItem();
            this._addDeleteItem()
        },
        _addShowInInboxItem: function () {
            var self = this;
            this._menuItems.showInInbox = this._menu.addCheckItem(BB.Locale.getString("saved_view_add_to_inbox"), function (isChecked) {
                if (isChecked) {
                    self.track("addSavedViewToInbox");
                    BB.Modules.HeadsUp.addSection(self._currentSavedView.viewKey, self._currentPipeline.key())
                } else {
                    self.track("removeSavedViewFromInbox");
                    BB.Modules.HeadsUp.removeSection(self._currentSavedView.viewKey)
                }
            })
        },
        _updateShowInInboxItem: function () {
            this._menuItems.showInInbox.setCheckboxState(BB.Modules.PipelineView.SavedViewsController.externalIsInHeadsUp(this._currentSavedView.viewKey))
        },
        _addRenameItem: function () {
            var self = this;
            this._menuItems.rename = this._menu.addItem(BB.Locale.getString("saved_view_rename"), function () {
                self.track("renameSavedView");
                BB.Widgets.Modal.textboxModal({
                    title: BB.Locale.getString("saved_view_rename"),
                    allowEmpty: false,
                    startingText: self._currentSavedView.name,
                    callback: function (newName) {
                        self._currentSavedView.name = newName;
                        self._currentPipeline.updateSavedView(self._currentSavedView)
                    }
                })
            })
        },
        _addDuplicateItem: function () {
            var self = this;
            this._menuItems.duplicate = this._menu.addItem(BB.Locale.getString("saved_view_duplicate"),
                function () {
                    self.track("duplicateSavedView");
                    self._currentPipeline.addSavedView(self._currentSavedView.name + "*", self._currentSavedView.settings)
                })
        },
        _addDeleteItem: function () {
            var self = this;
            this._menuItems["delete"] = this._menu.addItem(BB.Locale.getString("saved_view_delete"), function () {
                self.track("deleteSavedViewAttempt");
                BB.Widgets.Modal.confirmDelete(self._currentSavedView.name, function () {
                    self.track("deleteSavedViewSuccess");
                    BB.Modules.PipelineView.SavedViewsController.externalDeleteSavedView(self._currentPipeline,
                        self._currentSavedView)
                })
            })
        },
        setCurrentPipelineAndSavedView: function (pipeline, savedView) {
            this._currentPipeline = pipeline;
            this._currentSavedView = savedView;
            if (!pipeline || !savedView) return;
            this._updateShowInInboxItem()
        },
        getElement: function () {
            return this._menu.el
        },
        track: function (event, prop) {
            BB.Tracker.trackStreakActive(this.trackingContext, prop, {
                eventName: event
            })
        }
    });

    function init(callback) {
        BB.Modules.LeftLink.SavedViewsMenu = new SavedViewsMenu;
        if (callback) callback()
    }
    Streak.DependencyManager.addFunction({
        functionKey: "leftLink.savedViewsMenuInitialized",
        functionToCall: init,
        dependentFunctionKeys: ["menuInitialized", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        Library = Streak.Library,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var superClass = Streak.UI.ViewController,
        superPrototype = Streak.UI.ViewController.prototype;
    SimpleBoxesMenuViewController = Streak.Class.subclass({
        superclass: superClass,
        _memberVariables: [{
            name: "_listViewController",
            destroy: true
        }, {
            name: "_boxDetailViewController",
            destroy: true
        }, {
            name: "_searchBoxViewController",
            destroy: true
        }, {
            name: "_listModel",
            destroy: true
        }, {
            name: "_excludedBoxKeys",
            destroy: true
        }, {
            name: "_boxFilterFunction",
            destroy: false
        }, {
            name: "_isMenuOpen",
            destroy: true
        }],
        _initialize: function () {
            superPrototype._initialize.call(this);
            this._view = Library.getInstance("BentoBox.Modules.SimpleBoxesMenu.SimpleBoxesMenuView");
            this._listModel = Library.getInstance("BentoBox.Widgets.ListView.ListViewBaseModel");
            this._listViewController = Library.getInstance("BentoBox.Widgets.ListView.ListViewViewController");
            this._listViewController.addDelegate(this);
            this._listViewController.setDataSource(this._listModel);
            this._listModel.addDelegate(this._listViewController);
            this._searchBoxViewController = new BB.Widgets.SearchSimpleVC;
            this._searchBoxViewController.addDelegate(this._listViewController);
            this._searchBoxViewController.addDelegate(this);
            this._searchBoxViewController.setPlaceholder(BB.Locale.getString("add_linked_box"));
            this._boxDetailViewController = new BB.Widgets.BoxesDetailsVC;
            this._view.setListView(this._listViewController.getView());
            this._view.setSearchBox(this._searchBoxViewController.getView());
            this._view.setBoxDetailPane(this._boxDetailViewController.getView());
            this._view.hideListContainer();
            this._blurTimeout
        },
        setExcludedBoxKeys: function (excludedBoxKeys) {
            this._excludedBoxKeys = {};
            if (!excludedBoxKeys || !_.isArray(excludedBoxKeys)) return;
            for (var ii = 0; ii < excludedBoxKeys.length; ii++) this._excludedBoxKeys[excludedBoxKeys[ii]] = true
        },
        getFocusElement: function () {
            return this._searchBoxViewController.getFocusElement()
        },
        setBoxFilterFunction: function (boxFilterFunction) {
            this._boxFilterFunction =
                boxFilterFunction
        },
        inputFocus: function () {
            clearTimeout(this._blurTimeout)
        },
        inputBlur: function () {
            var self = this;
            clearTimeout(this._blurTimeout);
            this._blurTimeout = setTimeout(function () {
                if (self._view) self._view.hideListContainer()
            }, 250)
        },
        queryChange: function (query) {
            this._listModel.removeAllSections();
            if (query.length === 0) {
                this._isMenuOpen = false;
                this._view.hideListContainer();
                return
            }
            this._isMenuOpen = true;
            this._view.showListContainer();
            var existingBoxes = BB.Services.BoxSearcher.searchNameByQuery(query);
            var self =
                this;
            existingBoxes = _.filter(existingBoxes, function (box) {
                return !self._excludedBoxKeys[box.key()]
            });
            if (this._boxFilterFunction) existingBoxes = _.filter(existingBoxes, this._boxFilterFunction);
            if (existingBoxes.length === 0) {
                this._isMenuOpen = false;
                this._view.hideListContainer();
                return
            }
            this._listModel.addSection({
                rows: _.map(existingBoxes, function (box) {
                    return {
                        text: box.displayName(),
                        data: box
                    }
                })
            })
        },
        rowFocused: function (rowInfo) {
            if (!rowInfo || !rowInfo.data) return;
            this._boxDetailViewController.setModel(rowInfo.data)
        },
        rowPressed: function (rowInfo) {
            if (!rowInfo || !rowInfo.data) return;
            this._callDelegateFunction("boxChosen", rowInfo.data);
            this._searchBoxViewController.clearQuery();
            this.queryChange("");
            BB.Tracker.track("simple boxes menu box chosen");
            this.inputFocus();
            this.focus()
        },
        reset: function () {
            this._listModel.removeAllSections()
        },
        focus: function () {
            this._searchBoxViewController.focus()
        },
        setQuery: function (query) {
            this._searchBoxViewController.setQuery(query)
        },
        getSearchBoxViewController: function () {
            return this._searchBoxViewController
        },
        isMenuOpen: function () {
            return this._isMenuOpen
        }
    });
    Library.set("BentoBox.Modules.SimpleBoxesMenu.SimpleBoxesMenuViewController", SimpleBoxesMenuViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        Library = Streak.Library,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SimpleBoxesMenuView = Streak.Class.subclass({
        superclass: Streak.UI.View,
        _initialize: function () {
            Streak.UI.View.prototype._initialize.call(this);
            this._element = HTML.get("simpleBoxesMenu", true)
        },
        setListView: function (listView) {
            this._element.find(".streak__simpleBoxesMenu_list").html(listView.getElement())
        },
        setSearchBox: function (searchView) {
            this._element.find(".streak__simpleBoxesMenu_search").html(searchView.getElement())
        },
        setBoxDetailPane: function (boxDetailView) {
            this._element.find(".streak__simpleBoxesMenu_boxDetails").html(boxDetailView.getElement())
        },
        hideListContainer: function () {
            this._element.find(".streak__simpleBoxesMenu_listContainer").hide()
        },
        showListContainer: function () {
            this._element.find(".streak__simpleBoxesMenu_listContainer").show();
            this._element.find(".streak__simpleBoxesMenu_listContainer").containByScreen(this._element.find(".streak__simpleBoxesMenu_search"))
        },
        hideList: function () {
            this._element.find(".streak__simpleBoxesMenu_list").hide()
        },
        showList: function () {
            this._element.find(".streak__simpleBoxesMenu_list").show()
        }
    });
    Library.set("BentoBox.Modules.SimpleBoxesMenu.SimpleBoxesMenuView", SimpleBoxesMenuView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SpreadsheetLinkedBoxesView = Streak.Class.subclass({
        superclass: UI.View,
        _memberVariables: [{
            name: "_inputView",
            destroy: false
        }],
        _initialize: function () {
            UI.View.prototype._initialize.call(this);
            this._element = HTML.get("spreadsheetLinkedBoxes", true);
            return this
        },
        addLinkedBoxView: function (linkedBoxView) {
            this._inputView.getElement().before(linkedBoxView.getElement())
        },
        setAddBoxInputView: function (inputView) {
            this._inputView = inputView;
            this._element.append(inputView.getElement())
        }
    });
    Library.set("BentoBox.Widgets.SpreadsheetLinkedBoxesView", SpreadsheetLinkedBoxesView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        jwerty = Streak.jwerty,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SpreadsheetLinkedBoxesViewController = Streak.Class.subclass({
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_box",
            destroy: false
        }, {
            name: "_property",
            destroy: false
        }, {
            name: "_simpleBoxesMenu",
            destroy: true
        }, {
            name: "_pipelineKey",
            destroy: false
        }, {
            name: "_temporaryBoxKeys",
            destroy: true
        }, {
            name: "_linkedBoxViewControllers",
            destroy: true
        }, {
            name: "_searchBoxViewController",
            destroy: false
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this);
            this._view = Library.getInstance("BentoBox.Widgets.SpreadsheetLinkedBoxesView");
            this._simpleBoxesMenu = Library.getInstance("BentoBox.Modules.SimpleBoxesMenu.SimpleBoxesMenuViewController");
            this._simpleBoxesMenu.setBoxFilterFunction(_.bind(this._boxFilterFunction, this));
            this._simpleBoxesMenu.addDelegate(this);
            this._searchBoxViewController = this._simpleBoxesMenu.getSearchBoxViewController();
            this._setupSearchBoxViewController();
            this._view.setAddBoxInputView(this._simpleBoxesMenu.getView());
            this._linkedBoxViewControllers = [];
            return this
        },
        setup: function (options) {
            this._linkedBoxViewControllers.length = 0;
            this._setBox(options.model);
            this._setProperty(options.property)
        },
        _setBox: function (box) {
            this._box = box;
            this._temporaryBoxKeys = _.clone(this._box.get("linkedBoxKeys") || [])
        },
        _setProperty: function (property) {
            this._property =
                property;
            var parts = property.split(".");
            if (parts.length > 0) this._pipelineKey = parts[1];
            else this._pipelineKey = null;
            this._simpleBoxesMenu.setExcludedBoxKeys(this._temporaryBoxKeys.concat(this._box.key()));
            this._renderLinkedBoxesInPipeline()
        },
        updateValue: function () {
            var boxKeys = this._box.get("linkedBoxKeys");
            if (!JSON.isEqual(boxKeys, this._temporaryBoxKeys)) {
                _.mutate("union", boxKeys, this._temporaryBoxKeys);
                this._box.set("linkedBoxKeys", this._temporaryBoxKeys);
                this._box.save();
                BB.Tracker.track("spreadsheet linked boxes updated")
            }
        },
        _boxFilterFunction: function (box) {
            return !this._pipelineKey || box.getPipeline().key() === this._pipelineKey
        },
        _renderLinkedBoxesInPipeline: function () {
            var linkedBoxes = this._getLinkedBoxKeysInPipeline();
            for (var ii = 0; ii < linkedBoxes.length; ii++) this._renderBoxInList(linkedBoxes[ii])
        },
        _getLinkedBoxKeysInPipeline: function () {
            var boxKeys = this._box.get("linkedBoxKeys");
            if (!boxKeys) return [];
            var pipelineKey = this._pipelineKey;
            return _.chain(boxKeys).map(function (boxKey) {
                return BB.Data.getBox(boxKey)
            }).filter(function (box) {
                return box &&
                    (!pipelineKey || box.getPipeline().key() === pipelineKey)
            }).value()
        },
        _renderBoxInList: function (box) {
            var linkedBoxViewController = Library.getInstance("BentoBox.Widgets.SpreadsheetLinkedBoxViewController");
            linkedBoxViewController.setBox(box);
            linkedBoxViewController.addDelegate(this);
            this._linkedBoxViewControllers.push(linkedBoxViewController);
            this._view.addLinkedBoxView(linkedBoxViewController.getView())
        },
        _setupSearchBoxViewController: function () {
            this._searchBoxViewController.setPlaceholder("");
            this._searchBoxViewController.addDelegate(this)
        },
        keydown: function (event) {
            if (jwerty.is("escape", event)) {
                this._temporaryBoxKeys = this._box.get("linkedBoxKeys");
                this._searchBoxViewController.getView().getElement().trigger("escapePressed");
                return
            }
            if (jwerty.is("enter", event)) {
                if (!this._simpleBoxesMenu.isMenuOpen()) this._searchBoxViewController.getView().getElement().trigger("enterPressed");
                return
            }
            if (jwerty.is("backspace", event)) {
                if (!this._searchBoxViewController.isEmpty()) return;
                if (!this._linkedBoxViewControllers || this._linkedBoxViewControllers.length ===
                    0) return;
                var lastBoxViewController = _.last(this._linkedBoxViewControllers);
                this.boxRemoved(lastBoxViewController.getBox(), lastBoxViewController);
                return
            }
        },
        boxChosen: function (box) {
            _.mutate("union", this._temporaryBoxKeys, [box.key()]);
            this._simpleBoxesMenu.setExcludedBoxKeys(this._temporaryBoxKeys);
            this._renderBoxInList(box)
        },
        boxClicked: function (box) {
            BB.UI.setURL(box.link())
        },
        boxRemoved: function (box, linkedBoxViewController) {
            this._temporaryBoxKeys.removeVal(box.key());
            linkedBoxViewController.destroy();
            this._linkedBoxViewControllers.removeVal(linkedBoxViewController)
        },
        getElement: function () {
            return this._view.getElement()
        },
        focus: function (isFromRedraw) {
            if (!isFromRedraw) this._simpleBoxesMenu.reset();
            this._simpleBoxesMenu.focus()
        },
        set: function (query) {
            this._simpleBoxesMenu.reset();
            this._simpleBoxesMenu.setQuery(query)
        },
        preDetach: function () {
            for (var ii = 0; ii < this._linkedBoxViewControllers.length; ii++) this._linkedBoxViewControllers[ii].destroy();
            this._linkedBoxViewControllers.length = 0
        }
    });
    Streak.Library.set("BentoBox.Widgets.SpreadsheetLinkedBoxesViewController",
        SpreadsheetLinkedBoxesViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SpreadsheetLinkedBoxView = Streak.Class.subclass({
        superclass: UI.View,
        _initialize: function () {
            UI.View.prototype._initialize.call(this);
            this._element = HTML.get("spreadsheetLinkedBox", true);
            this._setupBindings();
            return this
        },
        setText: function (text) {
            this._element.find(".streak__spreadsheetLinkedBox_text").html(text);
            this._element[0].setAttribute("title", text)
        },
        _setupBindings: function () {
            var self = this;
            this._element.find(".streak__spreadsheetLinkedBox_text").on("click", function (e) {
                self._callDelegateFunction("textClicked")
            });
            this._element.find(".streak__spreadsheetLinkedBox_x").on("click", function (e) {
                self._callDelegateFunction("xClicked");
                e.stopPropagation()
            })
        }
    });
    Library.set("BentoBox.Widgets.SpreadsheetLinkedBoxView", SpreadsheetLinkedBoxView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SpreadsheetLinkedBoxViewController = Streak.Class.subclass({
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_box",
            destroy: false
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this)
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Widgets.SpreadsheetLinkedBoxView")
        },
        setBox: function (box) {
            this._box = box;
            this._view.setText(box.displayName())
        },
        getBox: function () {
            return this._box
        },
        textClicked: function () {
            this._callDelegateFunction("boxClicked", this._box);
            BB.Tracker.track("spreadsheet linked box link clicked")
        },
        xClicked: function () {
            this._callDelegateFunction("boxRemoved", this._box, this);
            BB.Tracker.track("spreadsheet linked box x clicked")
        }
    });
    Library.set("BentoBox.Widgets.SpreadsheetLinkedBoxViewController", SpreadsheetLinkedBoxViewController)
})(Streak);
Streak.BentoBox.Modules.Reports = {};
Streak.BentoBox.Modules.Reports.Constants = {
    ANY_USER: "ANY_USER",
    ALL_USERS: "ALL_USERS",
    HOURLY: "HOURLY",
    DAILY: "DAILY",
    WEEKLY: "WEEKLY",
    MONTHLY: "MONTHLY",
    YEARLY: "YEARLY",
    LAST_SIXTY_MINUTES: "LAST_SIXTY_MINUTES",
    TODAY: "TODAY",
    THIS_WEEK: "THIS_WEEK",
    THIS_MONTH: "THIS_MONTH",
    THIS_YEAR: "THIS_YEAR",
    INTO_STAGE_COLOR: "rgb(68, 185, 132)",
    OUT_OF_STAGE_COLOR: "rgb(230, 101, 80)",
    ALL_STAGES: "ALL_STAGES",
    KNOWN_DEALSIZE_COLUMNS: ["Deal Size", "Investment Amount", "Amount", "Cost", "Rent"],
    DEALSIZE_COLUMN_BLACKLIST: ["Stage",
        "Assigned To"
    ]
};
(function (Streak) {
    var $ = Streak.$,
        _ = Streak._,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        Date = Streak.Date,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports;
    var Constants = Reports.Constants;
    Reports.Utils = {
        timeRangeToLocaleKey: function (timeRange) {
            if (timeRange === Reports.Constants.LAST_SIXTY_MINUTES) return "time_range_last_sixty_minutes";
            if (timeRange === Reports.Constants.TODAY) return "time_range_this_day";
            if (timeRange === Reports.Constants.THIS_WEEK) return "time_range_this_week";
            if (timeRange === Reports.Constants.THIS_MONTH) return "time_range_this_month";
            if (timeRange === Reports.Constants.THIS_YEAR) return "time_range_this_year"
        },
        timeGranularityToLocaleKey: function (timeGranularity) {
            if (timeGranularity === Reports.Constants.HOURLY) return "time_granularity_hour";
            if (timeGranularity === Reports.Constants.DAILY) return "time_granularity_day";
            if (timeGranularity === Reports.Constants.WEEKLY) return "time_granularity_week";
            if (timeGranularity === Reports.Constants.MONTHLY) return "time_granularity_month";
            if (timeGranularity === Reports.Constants.YEARLY) return "time_granularity_year"
        },
        bestUnitForDurationInSeconds: function (seconds) {
            var unitLowerBound = 5;
            var units = [{
                sizeInSeconds: 1,
                nameTranslationKey: "seconds",
                numberAbbreviationTranslationKey: "number_seconds_abbreviated"
            }, {
                sizeInSeconds: 60,
                nameTranslationKey: "minutes",
                numberAbbreviationTranslationKey: "number_minutes_abbreviated"
            }, {
                sizeInSeconds: 60 * 60,
                nameTranslationKey: "hours",
                numberAbbreviationTranslationKey: "number_hours_abbreviated"
            }, {
                sizeInSeconds: 60 * 60 * 24,
                nameTranslationKey: "days",
                numberAbbreviationTranslationKey: "number_days_abbreviated"
            }];
            for (var i = 0; i < units.length; i++) {
                var unit = units[units.length - i - 1];
                if (unit.sizeInSeconds * unitLowerBound < seconds) return unit
            }
            return units[0]
        },
        round: function (x, places) {
            var convert = Math.pow(10, places);
            return Math.round(x * convert) / convert
        },
        containsUser: function (parameters) {
            if (_.contains(parameters.userFilter, Reports.Constants.ANY_USER) && parameters.user !== Reports.Constants.ALL_USERS) return true;
            if (_.contains(parameters.userFilter, parameters.user)) return true;
            return false
        },
        shouldShowUserColumn: function (userFilter) {
            return !_.contains(userFilter,
                Reports.Constants.ALL_USERS)
        },
        filterJsonParts: function (parameters) {
            var parts = parameters.parts;
            var filteredParts = [];
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                if (parameters.timeGranularity && part.timeGranularity !== parameters.timeGranularity) continue;
                if (parameters.timeRange && part.timeRange !== parameters.timeRange) continue;
                if (parameters.stageKey && part.stageKey !== parameters.stageKey) continue;
                if (parameters.userFilter && !Reports.Utils.containsUser({
                    user: part.userKey,
                    userFilter: parameters.userFilter
                })) continue;
                filteredParts.push(part)
            }
            return filteredParts
        },
        addUserNameToJsonParts: function (parameters) {
            var parts = parameters.parts;
            var users = parameters.users;
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                if (part.userKey === "ALL_USERS") part.userName = Locale.getString("reports_all_users");
                else {
                    var user = users[part.userKey];
                    if (user) part.userName = user.displayName
                }
            }
        },
        usersFromPipeline: function (parameters) {
            var pipeline = parameters.pipeline;
            var users = {};
            var boxes = BB.Data.getPipelineBoxes(pipeline.key());
            for (var i = 0; i <
                boxes.length; i++) {
                var box = boxes[i];
                var sharingEntries = box.getAssignedToSharingEntries();
                for (var j = 0; j < sharingEntries.length; j++) {
                    var sharingEntry = sharingEntries[j];
                    users[sharingEntry.userKey] = {
                        userKey: sharingEntry.userKey,
                        displayName: sharingEntry.displayName
                    }
                }
            }
            return users
        },
        timeRangeLocalization: function (timeRange) {
            var timeRangeLocaleKey = this.timeRangeToLocaleKey(timeRange);
            return Locale.getString(timeRangeLocaleKey)
        },
        timeGranularityLocalization: function (timeGranularity) {
            var timeGranularityLocaleKey =
                Reports.Utils.timeGranularityToLocaleKey(timeGranularity);
            return Locale.getString(timeGranularityLocaleKey)
        },
        getBoxValueForColumn: function (parameters) {
            var box = parameters.box;
            var column = parameters.column;
            var pipeline = parameters.pipeline;
            if (column.columnType === "property") return box.getGroupByValue(column.value.property);
            else if (column.columnType === "field") {
                var pipeField = pipeline.getField(column.value.fieldKey);
                if (pipeField) {
                    var type = pipeField.get("type");
                    var val = box.getFieldValue(column.value.fieldKey);
                    if (!val) return ["no_value"];
                    switch (type) {
                    case "DATE":
                    case "TEXT_INPUT":
                        return [val];
                        break;
                    case "PERSON":
                        return val && val.length ? _.pluck(val, "fullName") : ["no_value"];
                        break
                    }
                } else return null
            }
        },
        getBoxValueDisplay: function (parameters) {
            var column = parameters.column;
            var settings = column.value.columnKey;
            var group = parameters.key;
            var pipeline = parameters.pipeline;
            var name = "no_value";
            if (settings === "property|stageKey") {
                var stage = pipeline.getStage(group);
                if (stage) name = pipeline.getStage(group).displayName()
            } else if (settings.indexOf("property") > -1) {
                var type = BB.Models.Pipeline.getPropertyFilterAndGroupType(column.value.property);
                switch (type) {
                case "DATE":
                    var d = Date.ccreate(group);
                    if (d.isValid()) name = d.prettyDate(true);
                    break;
                case "TEXT_INPUT":
                    name = $.cleanText(group, true);
                    break;
                default:
                    name = group;
                    break
                }
            } else if (settings.indexOf("field") > -1) {
                var field = pipeline.getField(settings.split("|")[1]);
                switch (field.get("type")) {
                case "DATE":
                    var d = Date.ccreate(group);
                    if (d.isValid()) name = d.prettyDate(true);
                    break;
                case "TEXT_INPUT":
                    name = $.cleanText(group, true);
                    break;
                case "PERSON":
                    name = group;
                    break
                }
            }
            if (name === "no_value") return "No Value";
            return name
        },
        isColumnDate: function (parameters) {
            var column = parameters.column;
            var pipeline = parameters.pipeline;
            if (column.value.columnKey.indexOf("property") > -1) return BB.Models.Pipeline.getPropertyFilterAndGroupType(column.value.property) === "DATE";
            else return pipeline.getField(column.value.columnKey.split("|")[1]) === "DATE"
        },
        countWithSplitCredit: function (list, hashFunction) {
            var results = {};
            _.each(list, function (elt) {
                var hashes =
                    hashFunction(elt);
                var credit = 1 / hashes.length;
                _.each(hashes, function (hash) {
                    results[hash] = (results[hash] || 0) + credit
                })
            });
            return results
        },
        sumWithSplitCredit: function (list, parameters) {
            var results = {};
            _.each(list, function (elt) {
                var hashes = parameters.groupBy(elt);
                var credit = parameters.valueBy(elt) / hashes.length;
                _.each(hashes, function (hash) {
                    results[hash] = (results[hash] || 0) + credit
                })
            });
            return results
        },
        _getOrderedColumnsForPipeline: function (pipeline) {
            return BB.UI.getPipelineColumnList(pipeline, pipeline.getGroupableSystemColumns())
        },
        _isStageColumn: function (column) {
            return column.columnType === "property" && column.value.property === "stageKey"
        },
        _isAssignedToColumn: function (column) {
            return column.columnType === "property" && column.value.property === "assignedToSharingEntries"
        },
        _isLinkedBoxColumn: function (column) {
            return column.columnType === "property" && column.value.property.indexOf("linkedBoxes") > -1
        },
        getOrderedColumnKeysForPipeline_exceptStageAndAssignedTo: function (pipeline) {
            var columns = this._getOrderedColumnsForPipeline(pipeline);
            var self =
                this;
            columns = _.reject(columns, function (column) {
                return self._isStageColumn(column) || self._isAssignedToColumn(column) || self._isLinkedBoxColumn(column)
            });
            var columnKeys = [];
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                columnKeys.push(column.value.columnKey)
            }
            return columnKeys
        },
        getOrderedColumnKeysForPipeline: function (pipeline) {
            var columns = this._getOrderedColumnsForPipeline(pipeline);
            var columnKeys = [];
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                columnKeys.push(column.value.columnKey)
            }
            return columnKeys
        },
        getStageColumnKeyForPipeline: function (pipeline) {
            var self = this;
            var stageColumn = _.find(this.getColumnsForPipeline(pipeline), function (column) {
                return self._isStageColumn(column)
            });
            if (!stageColumn) return null;
            return stageColumn.value.columnKey
        },
        getAssignedToColumnKeyForPipeline: function (pipeline) {
            var self = this;
            var assignedToColumn = _.find(this.getColumnsForPipeline(pipeline), function (column) {
                return self._isAssignedToColumn(column)
            });
            if (!assignedToColumn) return null;
            return assignedToColumn.value.columnKey
        },
        getAllColumnsForPipeline: function (pipeline) {
            var orderedColumns = BB.UI.getPipelineColumnList(pipeline, pipeline.getAllSystemColumns().concat(BB.Models.Pipeline.getGroupableSystemProperties()));
            var columns = {};
            for (var i = 0; i < orderedColumns.length; i++) {
                var column = orderedColumns[i];
                columns[column.value.columnKey] = column
            }
            return columns
        },
        getColumnsForPipeline: function (pipeline) {
            var orderedColumns = BB.UI.getPipelineColumnList(pipeline, BB.Models.Pipeline.getGroupableSystemProperties());
            var columns = {};
            for (var i =
                0; i < orderedColumns.length; i++) {
                var column = orderedColumns[i];
                columns[column.value.columnKey] = column
            }
            return columns
        },
        getPrettyDateTimeStringFromSeconds: function (seconds) {
            var timeString, shortTimeString;
            var days = seconds / (60 * 60 * 24);
            if (days < 1) {
                var hours = seconds / (60 * 60);
                if (hours < 1) {
                    var minutes = seconds / 60;
                    if (minutes < 1) {
                        var prettySeconds = Math.round(seconds);
                        shortTimeString = Locale.getString("number_seconds_abbreviated", {
                            number: prettySeconds
                        });
                        timeString = Locale.getString("number_seconds", {
                            number: prettySeconds
                        })
                    } else {
                        var prettyMinutes =
                            this._prettifyNumber(minutes);
                        shortTimeString = Locale.getString("number_minutes_abbreviated", {
                            number: prettyMinutes
                        });
                        timeString = Locale.getString("number_minutes", {
                            number: prettyMinutes
                        })
                    }
                } else {
                    var prettyHours = this._prettifyNumber(hours);
                    shortTimeString = Locale.getString("number_hours_abbreviated", {
                        number: prettyHours
                    });
                    timeString = Locale.getString("number_hours", {
                        number: prettyHours
                    })
                }
            } else {
                var prettyDays = this._prettifyNumber(days);
                shortTimeString = Locale.getString("number_days_abbreviated", {
                    number: prettyDays
                });
                timeString = Locale.getString("number_days", {
                    number: prettyDays
                })
            }
            return {
                shortTimeString: shortTimeString,
                timeString: timeString
            }
        },
        _prettifyNumber: function (number) {
            if (number > 5) return Math.round(number);
            else return number.toFixed(1)
        },
        unformatCurrency: function (value) {
            var FAILURE = null;
            if (value == null) return FAILURE;
            if (typeof value === "number") return value;
            var stripped = ("" + value).replace(/\((.*)\)/, "-$1").replace(/[^0-9-.,]/g, "");
            var validationRegex = /^-?(\d{1,3}(?:\.\d{3})*)(,\d{2}|-+)?$|^-?(\d{1,3}(?:,\d{3})*)(\.\d{2}|-+)?$|^-?(\d+)(\.\d{2}|-+)?$/;
            var match = validationRegex.exec(stripped);
            if (match) {
                if (match[1]) var unformatted = parseFloat(match[1].replace(/[^0-9]/, "") + "." + (match[2] || "").replace(/[^0-9]/, ""));
                else if (match[3]) var unformatted = parseFloat(match[3].replace(/[^0-9]/, "") + "." + (match[4] || "").replace(/[^0-9]/, ""));
                else var unformatted = parseFloat(match[5].replace(/[^0-9]/, "") + "." + (match[6] || "").replace(/[^0-9]/, ""));
                return !isNaN(unformatted) ? unformatted : FAILURE
            } else return FAILURE;
            return !isNaN(unformatted) ? unformatted : 0
        },
        formatCurrency: function (number,
            currencySymbol) {
            if (!_.isFinite(number)) return "?";
            if (!currencySymbol) currencySymbol = "$";
            var usePrecision = 2,
                opts = {
                    thousand: ",",
                    decimal: "."
                };
            var negative = number < 0 ? "-" : "",
                base = parseInt(Math.abs(number).toFixed(usePrecision), 10) + "",
                mod = base.length > 3 ? base.length % 3 : 0;
            return negative + currencySymbol + (mod ? base.substr(0, mod) + opts.thousand : "") + base.substr(mod).replace(/(\d{3})(?=\d)/g, "$1" + opts.thousand) + (usePrecision ? opts.decimal + Math.abs(number).toFixed(usePrecision).split(".")[1] : "")
        },
        deletePipelineSettings: function (pipelineKey) {
            var pipeline =
                Data.getPipeline(pipelineKey);
            pipeline.setUISettings("reporting", null)
        },
        delegateUnfoundMethods: function (facade, backup) {
            return _.extend(this.bindAll(backup), facade)
        },
        guessDealsizeColumn: function (columns) {
            var res = _.find(columns, function (column) {
                for (var i = 0; i < Reports.Constants.KNOWN_DEALSIZE_COLUMNS.length; i++)
                    if (Reports.Constants.KNOWN_DEALSIZE_COLUMNS[i] === column.name) return true;
                return false
            });
            return res
        },
        possibleDealsizeColumns: function (pipeline, columns) {
            return _.filter(columns, function (column) {
                var blacklist =
                    Reports.Constants.DEALSIZE_COLUMN_BLACKLIST;
                for (var i = 0; i < blacklist.length; i++)
                    if (column.name === blacklist[i]) return false;
                return true
            })
        }
    }
})(Streak);
(function (Streak) {
    var _ = Streak._;
    var Reports = Streak.BentoBox.Modules.Reports;
    var Constants = Reports.Constants;
    var superclass = Streak.Object;
    Reports.TimeseriesData = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_users",
            destroy: false
        }, {
            name: "_userColumns",
            destroy: false
        }, {
            name: "_timestamps",
            destroy: false
        }, {
            name: "_timeColumns",
            destroy: false
        }, {
            name: "_timeColumnIndex",
            destroy: false
        }, {
            name: "_data",
            destroy: false
        }, {
            name: "_seriesStyles",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._data = new google.visualization.DataTable;
            this._users = [];
            this._userColumns = {};
            this._timestamps = [];
            this._timeColumns = {};
            this._seriesStyles = {};
            this._timeColumnIndex = this._data.addColumn("datetime", "Time")
        },
        addPoint: function (point) {
            var userColumn = this._ensureUserColumnExists(point.series, point.tooltip);
            var timestampRow = this._ensureTimestampRowExists(point.time, point.tooltip);
            this._setPoint({
                rowIndex: timestampRow,
                columnIndex: userColumn,
                value: point.value
            });
            if (_.isReal(point.tooltip)) this._setPoint({
                rowIndex: timestampRow,
                columnIndex: userColumn + 1,
                value: point.tooltip
            })
        },
        setSeriesStyle: function (parameters) {
            this._seriesStyles[parameters.series] = parameters.style
        },
        _setPoint: function (point) {
            this._data.setCell(point.rowIndex, point.columnIndex, point.value)
        },
        _ensureUserColumnExists: function (user, withTooltip) {
            if (!_.contains(this._users, user)) {
                var userColumnIndex = this._data.addColumn("number", user);
                this._userColumns[user] = userColumnIndex;
                this._users.push(user);
                if (_.isReal(withTooltip)) this._data.addColumn({
                    type: "string",
                    role: "tooltip",
                    "p": {
                        "html": true
                    }
                })
            }
            return this._userColumns[user]
        },
        _ensureTimestampRowExists: function (timestamp, withTooltip) {
            var normalizedTimestamp = this._hashTimestamp(timestamp);
            if (!_.contains(this._timestamps, normalizedTimestamp)) {
                var timeRowsIndex = this._data.addRow();
                this._setPoint({
                    rowIndex: timeRowsIndex,
                    columnIndex: this._timeColumnIndex,
                    value: timestamp
                });
                this._timestamps.push(normalizedTimestamp);
                this._timeColumns[normalizedTimestamp] = timeRowsIndex
            }
            return this._timeColumns[normalizedTimestamp]
        },
        _hashTimestamp: function (raw_timestamp) {
            return raw_timestamp.getTime()
        },
        getVisualizationDataTable: function () {
            return this._data
        },
        getSeriesChartFormatter: function () {
            var styles = [];
            for (i = 0; i < this._users.length; i++) {
                var user = this._users[i];
                var style = this._seriesStyles[user];
                if (style) this.styles.push(style);
                else this.styles.push({})
            }
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PipelineReportSettingsGlobalController = Streak.Class.subclass({
        className: "PipelineReportSettingsGlobalController",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            this._bindToEvents()
        },
        _bindToEvents: function () {
            var self =
                this;
            BB.Data.getAllPipelines().bind("set", function (field, pipeline) {
                if (field !== "uiSettings") return;
                NotificationCenter.notify({
                    eventName: "pipelineReportSettings.changed",
                    pipelineKey: pipeline.key()
                })
            })
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pipelineReportSettingsGlobalControllerInitialized",
        functionToCall: function (callback) {
            Library.set("BentoBox.PipelineReportSettingsGlobalController", new PipelineReportSettingsGlobalController);
            if (callback) callback()
        },
        dependentFunctionKeys: ["data.pipelines.initialized"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports,
        Tracker = Streak.BentoBox.Tracker,
        UI = Streak.UI;
    var superclass = UI.View;
    Reports.YellowConfigureBarView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_text",
            destroy: false
        }, {
            name: "_title",
            destroy: false
        }, {
            name: "_button",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._text = this._element.find(".streak__reports_configure_text");
            this._title = this._element.find(".streak__reports_configure_text_title");
            this._button = this._element.find(".streak__reports_configure_button");
            var self = this;
            this._confirmButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                text: BB.Locale.getString("reports_configure").capitalize(),
                color: "blue",
                onFunction: function () {
                    self._callDelegateFunction("configureButtonPressed")
                }
            });
            this._button.html(this._confirmButton.getElement())
        },
        _setupElement: function () {
            this._element = HTML.getElement("streak_reports__yellow_configure_bar")
        },
        setText: function (text) {
            this._text.text(text)
        },
        setTitle: function (text) {
            this._title.text(text)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports,
        Tracker = Streak.BentoBox.Tracker,
        UI = Streak.UI;
    var superclass = UI.ViewController;
    Reports.YellowConfigureBarViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_configureViewController",
            get: true,
            set: true,
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._view.addDelegate(this);
            this._view.setText(Locale.getString("reports_no_deal_size_columns_text"));
            this._view.setTitle(Locale.getString("reports_no_deal_size_columns_title"))
        },
        _setupView: function () {
            this._view = new Reports.YellowConfigureBarView
        },
        configureButtonPressed: function () {
            this.showConfigureView()
        },
        showConfigureView: function () {
            var modalInner = this._configureViewController.getView().getElement();
            var self = this;
            var modal = BB.Widgets.Modal.create({
                title: Locale.getString("reports_configure_title"),
                inner: modalInner,
                showConfirm: true,
                showCancel: false,
                width: 475,
                confirmFunc: function () {
                    self._configureViewController.save()
                },
                confirmText: Locale.getString("save")
            });
            modal.show()
        }
    })
})(Streak);
Streak.BentoBox.Modules.Reports.Charts = {};
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI,
        Reports = Streak.BentoBox.Modules.Reports,
        Locale = Streak.Locale,
        Utils = Streak.Utils,
        HTML = Streak.HTML;
    var superclass = Streak.UI.View;
    var CONSTANTS = {
        BAR_HEIGHT: 70
    };
    Reports.InOutView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            "name": "_data",
            destroy: false
        }, {
            "name": "_backgroundColor",
            destroy: false
        }, {
            "name": "_textColor",
            destroy: false
        }, {
            "name": "_mainBox",
            destroy: false
        }, {
            "name": "_netBox",
            destroy: false
        }, {
            "name": "_inBar",
            destroy: false
        }, {
            "name": "_outBar",
            destroy: false
        }, {
            "name": "_inBarSpacer",
            destroy: false
        }, {
            "name": "_outBarSpacer",
            destroy: false
        }],
        _setupElement: function () {
            this._element = HTML.getElement("streak__reports_stage_report_in_out_box")
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._mainBox = this._element.find(".streak__reports_main_box");
            this._netBox = this._element.find(".streak__reports_net_label");
            this._inBar = this._element.find(".streak__inArrow .streak__reports_bar");
            this._outBar = this._element.find(".streak__outArrow .streak__reports_bar");
            this._inBarSpacer = this._element.find(".streak__inArrow .streak__reports_bar_spacer");
            this._outBarSpacer = this._element.find(".streak__outArrow .streak__reports_bar_spacer");
            this._data = {};
            this._isSelected = false
        },
        setData: function (data) {
            this._data = data;
            if (data) {
                this._element.find(".streak__reports_inText").text(data. in );
                this._netBox.text(Utils.signedNumber(data.net));
                var netText = this._element.find(".streak__reports_net_label");
                if (data.net > 0) {
                    netText.removeClass("streak__reports_none_color");
                    netText.removeClass("streak__reports_out_of_color");
                    netText.addClass("streak__reports_into_color")
                } else if (data.net < 0) {
                    netText.removeClass("streak__reports_none_color");
                    netText.removeClass("streak__reports_into_color");
                    netText.addClass("streak__reports_out_of_color")
                } else {
                    netText.addClass("streak__reports_none_color");
                    netText.removeClass("streak__reports_into_color");
                    netText.removeClass("streak__reports_out_of_color")
                }
                this._element.find(".streak__reports_outText").text(data.out);
                this._element.find(".streak__reports_inout_label").text(data.label);
                this._element.find(".streak__reports_inout_label").attr("data-tooltip",
                    data.label);
                var inHeight = this._barHeight(data. in , data.max);
                var outHeight = this._barHeight(data.out, data.max);
                var inSpacerHeight = CONSTANTS.BAR_HEIGHT - inHeight;
                var outSpacerHeight = CONSTANTS.BAR_HEIGHT - outHeight;
                this._inBar.css({
                    "height": inHeight + "px"
                });
                this._outBar.css({
                    "height": outHeight + "px"
                });
                this._inBarSpacer.css({
                    "height": inSpacerHeight + "px"
                });
                this._outBarSpacer.css({
                    "height": outSpacerHeight + "px"
                })
            } else {
                this._element.find(".streak__reports_inText").text("");
                this._element.find(".streak__reports_outText").text("");
                this._element.find(".streak__reports_net").text("");
                this._element.find(".streak__reports_inout_label").text("")
            }
            this._redraw()
        },
        _barHeight: function (count, max) {
            if (count == 0) return 0;
            var logCount = Math.log(count) + 1;
            var logMax = Math.log(max) + 1;
            return logCount / logMax * CONSTANTS.BAR_HEIGHT
        },
        setBackgroundColor: function (backgroundColor) {
            this._backgroundColor = backgroundColor;
            this._mainBox.css("background-color", backgroundColor);
            this._netBox.css("border-color", backgroundColor)
        },
        setTextColor: function (textColor) {
            this._textColor =
                textColor;
            this._mainBox.css("color", textColor)
        },
        getZoomElement: function () {
            return this._mainBox
        },
        setZoomElementClickHandler: function (handler) {
            this.getZoomElement().click(handler)
        },
        setSelected: function () {
            this._element.addClass("streak__reports_inout_selected")
        },
        setUnselected: function () {
            this._element.removeClass("streak__reports_inout_selected")
        },
        _redraw: function () {}
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        UI = Streak.UI,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Streak.Class.mixin(UI.ChartViewController);
    Reports.Charts.StageInOutViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            "name": "_data",
            destroy: false
        }, {
            "name": "_stageKey",
            get: true,
            destroy: false
        }, {
            "name": "_pipeline",
            get: true,
            destroy: false
        }],
        _setupView: function () {
            this._view = new Reports.InOutView
        },
        _retrieveData: function () {
            this._data = this._dataSource.getSummaryData(this._stageKey);
            this._view.setData(this._data)
        },
        setPipeline: function (pipeline) {
            this._pipeline = pipeline;
            this._setupColors()
        },
        _setupColors: function () {
            var backgroundColor = "black";
            var textColor = "white";
            if (this._stageKey && this._pipeline) {
                var stageColors = BB.UI.getStageColors(this._pipeline);
                backgroundColor = stageColors[this._stageKey].backgroundColor;
                textColor = stageColors[this._stageKey].textColor
            }
            this._view.setBackgroundColor(backgroundColor);
            this._view.setTextColor(textColor)
        },
        selectStageKey: function (stageKey) {
            var self =
                this;
            this._stageKey = stageKey;
            this._setupColors();
            this._view.setZoomElementClickHandler(function () {
                self._notifySelected(stageKey)
            })
        },
        _notifySelected: function (stageKey) {
            var parameters = {
                view: this,
                stageKey: stageKey
            };
            this._callDelegateFunction("stageInOutMainViewSelected", parameters)
        },
        select: function () {
            this._view.setSelected()
        },
        unselect: function () {
            this._view.setUnselected()
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        HTML = Streak.HTML,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Streak.UI.ChartView;
    Reports.SummaryDetailChartView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            "name": "_selection",
            destroy: false,
            get: true
        }, {
            "name": "_detailer",
            destroy: false,
            set: true
        }, {
            "name": "_summaryElements",
            destroy: false
        }],
        _setupElement: function () {
            this._element = HTML.getElement("streak__reports_summarydetail_view")
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            var self = this;
            this._summaryElements = {};
            this._element.find(".streak__reports_summarydetail_summary")[0].onscroll = function () {
                self._summaryAreaScrolled()
            }
        },
        _getBoxInParent: function (childBox, parentBox) {
            var parentLeft = parentBox.offset().left;
            var parentTop = parentBox.offset().top;
            var childLeft = childBox.offset().left;
            var childTop = childBox.offset().top;
            var childWidth = childBox.outerWidth();
            var childHeight = childBox.innerHeight();
            var left = childLeft - parentLeft;
            var top = childTop - parentTop;
            var right = left + childWidth;
            var bottom = top + childHeight;
            return {
                left: left,
                top: top,
                right: right,
                bottom: bottom,
                bottomLeft: {
                    x: left,
                    y: bottom
                },
                bottomRight: {
                    x: right,
                    y: bottom
                },
                topLeft: {
                    x: left,
                    y: top
                },
                topRight: {
                    x: right,
                    y: top
                }
            }
        },
        _redrawBackground: function () {
            var zoomQuadralateral = this._element.find(".streak__detail_zoom polygon");
            if (this.anySelected()) {
                var index = this._selection;
                var summaryZoomBox = this.getSummaryZoomElement(index);
                var backgroundElement = this.getBackgroundElement();
                var summaryBoxPositionInBackgroundCoordinates = this._getBoxInParent(summaryZoomBox,
                    backgroundElement);
                var detailBox = this.getDetailElement();
                var detailBoxPositionInBackgroundCoordinates = this._getBoxInParent(detailBox, backgroundElement);
                var topLeftPoint = summaryBoxPositionInBackgroundCoordinates.bottomLeft;
                var topRightPoint = summaryBoxPositionInBackgroundCoordinates.bottomRight;
                var bottomLeftPoint = detailBoxPositionInBackgroundCoordinates.topLeft;
                var bottomRightPoint = detailBoxPositionInBackgroundCoordinates.topRight;
                var polygonPointObjects = [topLeftPoint, topRightPoint, bottomRightPoint,
                    bottomLeftPoint, topLeftPoint
                ];
                var polygonPointsString = "";
                for (var i = 0; i < polygonPointObjects.length; i++) {
                    if (i > 0) polygonPointsString += " ";
                    polygonPointsString += polygonPointObjects[i].x + "," + polygonPointObjects[i].y
                }
                zoomQuadralateral.attr("points", polygonPointsString);
                zoomQuadralateral.attr("visibility", "visible")
            } else zoomQuadralateral.attr("visibility", "hidden")
        },
        _summaryAreaScrolled: function () {
            this._redrawBackground()
        },
        setUnselected: function () {
            this._element.removeClass("streak__reports_summarydetail_selected")
        },
        setSelection: function (index) {
            this._selection = index;
            this._loadDetailView();
            this._redrawBackground();
            this._element.addClass("streak__reports_summarydetail_selected")
        },
        anySelected: function (index) {
            return this._selection !== null
        },
        addSummaryElement: function (view) {
            var summary = this._element.find(".streak__reports_summarydetail_summary");
            var index = _.size(this._summaryElements);
            if (index > 0) {
                var spacer = HTML.getElement("streak__reports_sumamrydetail_spacer");
                summary.append(spacer)
            }
            summary.append(view.getElement());
            this._summaryElements[index] = view;
            return index
        },
        getSummaryZoomElement: function (index) {
            return this._summaryElements[index].getZoomElement()
        },
        getDetailElement: function () {
            return this._element.find(".streak__reports_summarydetail_detail")
        },
        getBackgroundElement: function () {
            return this._element.find(".streak__reports_summarydetail_background")
        },
        windowResized: function () {
            superclass.prototype.windowResized.call(this);
            this._redrawBackground()
        },
        _notifySelected: function (index) {
            var parameters = {
                view: this,
                index: index
            };
            this._callDelegateFunction("summarySelectionChanged", parameters)
        },
        _loadDetailView: function () {
            if (this.anySelected()) {
                var detailView = this._detailer.getDetailViewForIndex(this.getSelection());
                this._element.find(".streak__reports_summarydetail_detail").html(detailView.getElement())
            } else this._element.find(".streak__reports_summarydetail_detail").html("")
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        HTML = Streak.HTML,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Streak.UI.ChartViewController;
    Reports.SummaryDetailChartViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            "name": "_summaryDetailData",
            destroy: false
        }, {
            "name": "_currentDetailIndex",
            destroy: false
        }],
        _setupView: function () {
            this._view = new Reports.SummaryDetailChartView
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._summaryDetailData = {};
            this._view.setDetailer(this)
        },
        getDetailViewForIndex: function (index) {
            return this._summaryDetailData[index].detailViewController.getView()
        },
        _makeDetailViewFor: function (key) {
            throw new Error("Implement _makeDetailViewFor");
        },
        _makeSummaryViewFor: function (key) {
            throw new Error("Implement _makeSummaryViewFor");
        },
        setSelectedChart: function (chart) {
            this._selectedChart = chart;
            this._redrawBackground()
        },
        addSummaryElement: function (parameters) {
            var key = parameters.key;
            parameters.summaryViewController = this._makeSummaryViewFor(key);
            parameters.detailViewController =
                this._makeDetailViewFor(key);
            var index = this._view.addSummaryElement(parameters.summaryViewController.getView());
            parameters.index = index;
            this._summaryDetailData[index] = parameters
        },
        select: function (key) {
            if (_.isReal(this._currentDetailIndex)) this._summaryDetailData[this._currentDetailIndex].summaryViewController.unselect();
            if (key == null) {
                this._view.setSelection(null);
                this._currentDetailIndex = null;
                this._view.setUnselected();
                return
            }
            var item = _.find(_.values(this._summaryDetailData), function (item) {
                return item.key ===
                    key
            });
            if (item) {
                this._view.setSelection(item.index);
                this._summaryDetailData[item.index].summaryViewController.select();
                this._currentDetailIndex = item.index
            }
        },
        _destroy: function () {
            for (var i = 0; i < this._summaryDetailData.length; i++) {
                var datum = this._summaryDetailData[i];
                datum.summaryViewController.destroy();
                datum.summaryViewController.destroy()
            }
            superclass.prototype.destroy.call(this)
        }
    })
})(Streak);
Streak.BentoBox.Modules.Reports.ReportCards = {};
(function (Streak) {
    var $ = Streak.$,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        UI = Streak.UI,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = UI.View;
    Reports.ReportCards.ReportCardView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_titleContainer",
            destroy: false
        }, {
            name: "_toolbarContainer",
            destroy: false
        }, {
            name: "_bodyContainer",
            destroy: false
        }, {
            name: "_messageContainer",
            destroy: false
        }, {
            name: "_numberOfMenuElementsInSection",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._titleContainer = this._element.find(".streak__reportCard_title");
            this._toolbarContainer = this._element.find(".streak__reportCard_toolbar");
            this._bodyContainer = this._element.find(".streak__reportCard_body");
            this._messageContainer = this._element.find(".streak__reportCard_message");
            this._explanationElement = this._element.find(".streak__reportCard_explanation");
            this._numberOfMenuElementsInSection = {}
        },
        _setupElement: function () {
            this._element = HTML.getElement("streak__reportCard")
        },
        setTitle: function (title) {
            this._titleContainer.html(title)
        },
        setBody: function (body) {
            this.hideMessage();
            this._bodyContainer.html(body.getElement())
        },
        hideMessage: function () {
            this._messageContainer.hide();
            this._bodyContainer.show()
        },
        setMessage: function (message) {
            this._bodyContainer.hide();
            this._messageContainer.show();
            this._messageContainer.html('<div class="streak__reports_message">' + message + "</div>")
        },
        showExplanation: function (text) {
            this._explanationElement.attr("data-tooltip", text);
            this._explanationElement.show()
        },
        hideExplanation: function () {
            this._explanationElement.hide()
        },
        addMenu: function (menu) {
            if (!menu.view) menu.view = menu;
            if (!menu.position) this.position = 0;
            var insertPos = 0;
            for (var positionKey in this._numberOfMenuElementsInSection)
                if (positionKey <= menu.position) {
                    var numberOfElementsInPosition = this._numberOfMenuElementsInSection[positionKey];
                    insertPos = insertPos + numberOfElementsInPosition
                }
            if (this._toolbarContainer.length > 0)
                if (insertPos) {
                    var child = this._toolbarContainer.child(":nth-child(" + insertPos + ")");
                    child.after(menu.view.getElement())
                } else this._toolbarContainer.prepend(menu.view.getElement());
                else this._toolbarContainer.append(menu.view.getElement());
            this._numberOfMenuElementsInSection[menu.position] = (this._numberOfMenuElementsInSection[menu.position] || 0) + 1
        },
        showMenus: function () {
            this._toolbarContainer.show()
        },
        hideMenus: function () {
            this._toolbarContainer.hide()
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        Tracker = Streak.BentoBox.Tracker,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = UI.ViewController;
    Reports.ReportCardViewController = Streak.Class.subclass({
        className: "ReportCardViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_users",
            destroy: false
        }, {
            name: "_titleLocaleKey",
            destroy: false
        }, {
            name: "_relevantUserKeys",
            destroy: false
        }, {
            name: "_bodyChartViewController",
            destroy: true
        }, {
            name: "_userFilterMenu",
            destroy: true
        }, {
            name: "_selectedUsers",
            get: true,
            destroy: false
        }, {
            name: "_columnKey",
            destroy: false
        }, {
            name: "_orderedColumnList",
            destroy: false
        }, {
            name: "_orderedStageKeys",
            destroy: false
        }, {
            name: "_pipeline",
            destroy: false
        }, {
            name: "_reportName",
            destroy: false
        }, {
            name: "_stageKey",
            destroy: false
        }, {
            name: "_stageMenu",
            destroy: true
        }, {
            name: "_stageMultipleSelectMenu",
            destroy: true
        }, {
            name: "_selectedStageKeys",
            get: true,
            destroy: true
        }, {
            name: "_allColumns",
            destroy: false
        }],
        _setupView: function () {
            this._view = new Reports.ReportCards.ReportCardView
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._selectedUsers = [Reports.Constants.ANY_USER];
            this._setupTrackingContext();
            this._gotReportData = false;
            this._view.setMessage(Locale.getString("notice_loading"));
            this.setupReportExplanation();
            this._view.hideMenus()
        },
        setupReportExplanation: function () {
            if (this._hasReportExplanation()) this._view.showExplanation(this._getReportExplanation());
            else this._view.hideExplanation()
        },
        _hasUserFilterMenu: function () {
            return false
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "reportCard"
            }
        },
        _hasUserFilterMenu: function () {
            return true
        },
        _setupUserFilterMenu: function () {
            var self = this;
            if (!this._hasUserFilterMenu()) return;
            if (this._userFilterMenu) return;
            var userItems = this._getSortedUserFilterMenuItems();
            if (userItems.length) {
                this._userFilterMenu = (new BB.Widgets.MultiselectMenuViewController).create({
                    buttonOptions: {
                        type: "GmailIconArrow",
                        color: "default",
                        hasButtonToLeft: true,
                        isFixedPosition: true,
                        text: Locale.getString("people"),
                        postOffFunction: function () {}
                    },
                    buttonPrefix: '<span style="font-weight:normal">' +
                        Locale.getString("people") + ": </span>",
                    collapseItem: {
                        label: Locale.getString("reports_all_people"),
                        value: [Reports.Constants.ANY_USER]
                    },
                    expandItem: {
                        label: Locale.getString("reports_select_people")
                    },
                    selectAllItem: {
                        label: Locale.getString("menu_select_all")
                    },
                    selectNoneItem: {
                        label: Locale.getString("menu_select_none")
                    },
                    items: userItems
                });
                this._userFilterMenu.addDelegate(this);
                this._view.addMenu(this._userFilterMenu.getView())
            }
        },
        _getSortedUserFilterMenuItems: function () {
            this._relevantUserKeys = this._findRelevantUserKeys();
            var sortedUserKeys = this._getSortedRelevantUserKeys();
            var items = [];
            for (var i = 0; i < sortedUserKeys.length; i++) {
                var userKey = sortedUserKeys[i];
                items.push({
                    value: userKey,
                    label: this._users[userKey].displayName,
                    selected: Reports.Utils.containsUser({
                        user: userKey,
                        userFilter: this._selectedUsers
                    })
                })
            }
            return items
        },
        _getSortedRelevantUserKeys: function () {
            var users = this._users;
            return _.chain(this._relevantUserKeys).filter(function (userKey) {
                return !!users[userKey]
            }).sortBy(function (userKey) {
                return users[userKey].displayName
            }).value()
        },
        _findRelevantUserKeys: function () {
            throw new Error("_findRelevantUserKeys must be defined to use a menu of people");
        },
        _getUserNameForPart: function (part) {
            if (part.userKey !== Reports.Constants.ALL_USERS) {
                var userData = this._users[part.userKey];
                return userData.displayName
            } else return Locale.getString("reports_all_users")
        },
        getTitle: function () {
            return Locale.getString(this._titleLocaleKey)
        },
        setBodyChartViewController: function (chartViewController) {
            this._bodyChartViewController = chartViewController
        },
        windowResized: function () {
            if (this._bodyChartViewController &&
                this._bodyChartViewController.windowResized) this._bodyChartViewController.windowResized()
        },
        multiselectMenuSelectionsChanged: function (parameters) {
            if (parameters.delegator === this._userFilterMenu) {
                Tracker.trackStreakActive(this._trackingContext, {
                    eventName: "userMenuChanged"
                });
                this.setSelectedUsers(parameters.selections)
            }
            if (parameters.delegator === this._stageMultipleSelectMenu) this.stageKeysSelectionChanged(parameters.selections);
            if (this._refreshData) this._refreshData()
        },
        setSelectedUsers: function (selectedUsers) {
            this._selectedUsers =
                selectedUsers
        },
        _getPeopleSummary: function () {
            if (!this._selectedUsers) return "";
            if (this._selectedUsers.length === 0) return Locale.getString("number_people", {
                number: this._selectedUsers.length
            });
            if (this._selectedUsers[0] === Reports.Constants.ALL_USERS) return Locale.getString("reports_all_people");
            if (this._selectedUsers[0] === Reports.Constants.ANY_USER) return Locale.getString("reports_all_people");
            if (this._selectedUsers.length === 1) return this._users[this._selectedUsers[0]].displayName;
            return Locale.getString("number_people", {
                number: this._selectedUsers.length
            })
        },
        _getReportExplanation: function () {
            return null
        },
        _hasReportExplanation: function () {
            return this._getReportExplanation() !== null
        },
        setPipeline: function (pipeline) {
            this._pipeline = pipeline;
            this._orderedStageKeys = _.map(pipeline.getStages().ordered, function (stage) {
                return stage.key()
            });
            this._columns = Reports.Utils.getColumnsForPipeline(this._pipeline);
            this._allColumns = Reports.Utils.getAllColumnsForPipeline(this._pipeline);
            this._setupColumnMenu();
            this._setupStageMenu();
            this._setupStageMultipleSelectMenu()
        },
        _hasStageMenu: function () {
            return false
        },
        _hasStageMultipleSelectMenu: function () {
            return false
        },
        _hasColumnMenu: function () {
            return false
        },
        _setupColumnMenu: function () {
            if (this._hasColumnMenu() && !this._columnMenu) {
                this._columnMenu = this._createColumnMenu();
                this._view.addMenu(this._columnMenu)
            }
        },
        _createColumnMenu: function () {
            var self = this;
            var columnMenu = BB.Widgets.ButtonCustomDropdown.create({
                trackingContext: _.clone(this._trackingContext),
                prefix: '<span style="font-weight:normal">' + Locale.getString("column") +
                    ": </span>",
                list: this._getColumnMenuItems(),
                changeFunc: function (menuItem) {
                    self.columnSelectionChanged(menuItem.value);
                    Tracker.trackStreakActive(self._trackingContext, {
                        eventName: "columnMenuChanged"
                    })
                },
                hasButtonToRight: true
            });
            return columnMenu
        },
        _getColumnMenuItems: function () {
            var menuItems = [];
            for (var columnKey in this._columns) {
                var columnValue = this._columns[columnKey];
                menuItems.push({
                    name: columnValue.name,
                    value: columnKey
                })
            }
            return menuItems
        },
        _setupStageMenu: function () {
            if (this._hasStageMenu() && !this._stageMenu) {
                this._stageMenu =
                    this._createStageMenu();
                this._view.addMenu(this._stageMenu)
            }
        },
        _createStageMenu: function () {
            var self = this;
            var stageMenu = BB.Widgets.ButtonCustomDropdown.create({
                trackingContext: _.clone(this._trackingContext),
                prefix: '<span style="font-weight:normal">' + Locale.getString("stage") + ": </span>",
                list: this._getStageMenuItems(),
                changeFunc: function (menuItem) {
                    self.stageKeySelectionChanged(menuItem.value);
                    Tracker.trackStreakActive(self._trackingContext, {
                        eventName: "stageMenuChanged"
                    })
                },
                hasButtonToRight: true
            });
            return stageMenu
        },
        _getStageMenuItems: function () {
            var menuItems = [];
            var stageKeys = this._orderedStageKeys;
            menuItems.push({
                name: Locale.getString("none_selected"),
                value: null
            });
            for (var i = 0; i < stageKeys.length; i++) {
                var stageKey = stageKeys[i];
                menuItems.push({
                    name: this._pipeline.getStage(stageKey).displayName(),
                    value: stageKey
                })
            }
            return menuItems
        },
        _setupStageMultipleSelectMenu: function () {
            if (this._hasStageMultipleSelectMenu() && !this._stageMultipleSelectMenu) {
                this._createStageMultipleSelectMenu();
                this._view.addMenu(this._stageMultipleSelectMenu.getView())
            }
        },
        _createStageMultipleSelectMenu: function () {
            var self = this;
            this._stageMultipleSelectMenu = (new BB.Widgets.MultiselectMenuViewController).create({
                buttonOptions: {
                    type: "GmailIconArrow",
                    color: "default",
                    hasButtonToLeft: true,
                    isFixedPosition: true,
                    text: Locale.getString("stage"),
                    postOffFunction: function () {}
                },
                buttonPrefix: '<span style="font-weight:normal">' + Locale.getString("stage") + ": </span>",
                collapseItem: {
                    label: Locale.getString("reports_all_stages"),
                    value: [Reports.Constants.ALL_STAGES]
                },
                expandItem: {
                    label: Locale.getString("reports_select_stages")
                },
                selectAllItem: {
                    label: Locale.getString("menu_select_all")
                },
                selectNoneItem: {
                    label: Locale.getString("menu_select_none")
                },
                items: this._getOrderedStageItems()
            });
            this._stageMultipleSelectMenu.addDelegate(this)
        },
        _getOrderedStageItems: function () {
            var stages = this._pipeline.getStages();
            var self = this;
            return _.map(stages.ordered, function (stage) {
                return {
                    value: stage.key(),
                    label: stage.displayName(),
                    selected: self._selectedStageKeys && self._selectedStageKeys.indexOf(stage.key()) > -1
                }
            })
        },
        columnSelectionChanged: function (column) {
            this._columnKey =
                column;
            if (this._columnMenu) this._columnMenu.setSelected(column)
        },
        stageKeySelectionChanged: function (stageKey) {
            this._stageKey = stageKey;
            this._stageMenu.setSelected(stageKey)
        },
        stageKeysSelectionChanged: function (stageKeys) {
            this._selectedStageKeys = stageKeys
        },
        selectStageKey: function (stageKey) {
            this._stageMenu.setSelected(stageKey);
            this.stageKeySelectionChanged(stageKey)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        Tracker = Streak.BentoBox.Tracker,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Reports.ReportCardViewController;
    Reports.ServerReportCardViewController = Streak.Class.subclass({
        className: "ServerReportCardViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_json",
            destroy: false
        }, {
            name: "_data",
            destroy: false
        }, {
            name: "_gotReportData",
            destroy: false
        }],
        _getReportData: function () {
            throw new Error("_getReportData must be defined");
        },
        _handleReportDataSuccess: function (json) {
            this._json = json;
            this._users = json.users;
            this._gotReportData = true;
            this._view.setBody(this._bodyChartViewController.getView());
            this._view.showMenus();
            this._refreshData({
                refreshUserFilterMenu: true,
                skipHandleReportDataSucessCallback: true
            })
        },
        _refreshData: function (parameters) {
            this._view.setTitle(this.getTitle());
            if (!this._gotReportData) return;
            if (this._relevantUserKeys && this._relevantUserKeys.length > 0 && this.getSelectedUsers().length == 0) this._view.setMessage(Locale.getString("reports_no_users_selected"));
            else this._view.hideMessage();
            this._data = this._getFilteredDataFromJSON();
            if (this._hasUserFilterMenu() && parameters && parameters.refreshUserFilterMenu) this._setupUserFilterMenu();
            this._callDelegateFunction("handleDataUpdated", this)
        },
        _getFilteredDataFromJSON: function () {
            throw new Error("_getFilteredDataFromJSON must be defined");
        },
        _handleReportDataFailure: function () {
            Tracker.trackStreakActive(this._trackingContext, {
                eventName: "reportLoadFailed"
            });
            this._view.setMessage(Locale.getString("reports_load_failed"));
            this._callDelegateFunction("handleReportFailed", this)
        },
        multiselectMenuSelectionsChanged: function (parameters) {
            superclass.prototype.multiselectMenuSelectionsChanged.call(this, parameters);
            if (parameters.delegator === this._userFilterMenu) this._refreshData({
                causedByUserSelectionChange: true
            })
        },
        _findRelevantUserKeys: function () {
            return Object.keys(this._json.users)
        },
        _getReportData: function () {
            Streak.APIRequester.get({
                msgUrl: "pipelines/" + this._pipeline.key() + "/reports/" + this._reportName
            }, _.bind(this._handleReportDataSuccess,
                this), _.bind(this._handleReportDataFailure, this))
        },
        getChartData: function () {
            return this._data
        },
        setPipeline: function (pipeline) {
            superclass.prototype.setPipeline.call(this, pipeline);
            this._getReportData()
        },
        multiselectMenuSelectionsChanged: function (parameters) {
            superclass.prototype.multiselectMenuSelectionsChanged.call(this, parameters);
            if (parameters.delegator === this._stageMultipleSelectMenu) this._refreshData()
        },
        columnSelectionChanged: function (column) {
            superclass.prototype.columnSelectionChanged.call(this,
                column);
            this._refreshData()
        },
        stageKeySelectionChanged: function (stageKey) {
            superclass.prototype.stageKeySelectionChanged.call(this, stageKey);
            this._refreshData()
        },
        setBodyChartViewController: function (chartViewController) {
            superclass.prototype.setBodyChartViewController.call(this, chartViewController);
            this._bodyChartViewController.setDataSource(this)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        Tracker = Streak.BentoBox.Tracker,
        Reports = Streak.BentoBox.Modules.Reports,
        Locale = Streak.Locale;
    var superclass = Reports.ServerReportCardViewController;
    Reports.ReportCards.TimeRangeReportCardViewController = Streak.Class.subclass({
        className: "TimeRangeReportCardViewController",
        superclass: superclass,
        memberVariables: [{
            "name": "_timeRange",
            destroy: false
        }, {
            "name": "_timeRangeMenu",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this.setTimeRange(Reports.Constants.THIS_WEEK);
            this._setupTimeRangeMenu()
        },
        getTitle: function () {
            if (!this._titleLocaleKey) return null;
            var timeRangeString = Reports.Utils.timeRangeLocalization(this._timeRange);
            return Locale.getString(this._titleLocaleKey, {
                "timeRange": timeRangeString,
                "people": this._getPeopleSummary()
            })
        },
        _setupTimeRangeMenu: function () {
            var self = this;
            this._timeRangeMenu = BB.Widgets.ButtonCustomDropdown.create({
                trackingContext: _.clone(this._trackingContext),
                prefix: '<span style="font-weight:normal">' +
                    Locale.getString("time_range") + ": </span>",
                list: [{
                    name: Locale.getString("time_range_this_day"),
                    value: Reports.Constants.TODAY
                }, {
                    name: Locale.getString("time_range_this_week"),
                    value: Reports.Constants.THIS_WEEK
                }, {
                    name: Locale.getString("time_range_this_month"),
                    value: Reports.Constants.THIS_MONTH
                }, {
                    name: Locale.getString("time_range_this_year"),
                    value: Reports.Constants.THIS_YEAR
                }],
                changeFunc: function (timeRange) {
                    self.setTimeRange(timeRange.value);
                    Tracker.trackStreakActive(self._trackingContext, {
                        eventName: "timeRangeMenuChanged"
                    })
                },
                hasButtonToRight: true
            });
            if (this._timeRangeMenu) {
                this._timeRangeMenu.setSelected(this._timeRange);
                this._view.addMenu(this._timeRangeMenu)
            }
        },
        setTimeRange: function (timeRange) {
            this._timeRange = timeRange;
            this._refreshData({
                refreshUserFilterMenu: true
            })
        },
        _getFilteredDataFromJSON: function () {
            if (!this._json) return null;
            var filteredParts = Reports.Utils.filterJsonParts({
                parts: this._json.parts,
                timeRange: this._timeRange,
                userFilter: this.getSelectedUsers()
            });
            Reports.Utils.addUserNameToJsonParts({
                parts: filteredParts,
                users: this._json.users
            });
            return filteredParts
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports;
    var CONSTANTS = {
        CHART_ITEM_HEIGHT: 60,
        CHART_PADDING: 0
    };
    var superclass = UI.ChartViewController;
    Reports.Charts.StageChangeStageDetailViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_inColor",
            destroy: false
        }, {
            name: "_outColor",
            destroy: false
        }, {
            name: "_stageKey",
            set: true,
            destroy: false
        }, {
            name: "_pipeline",
            set: true,
            destroy: false
        }],
        _setupView: function () {
            this._view = new UI.BarChartView
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._view.setMinimum(0);
            this._view.setSeriesColors([Reports.Constants.INTO_STAGE_COLOR, Reports.Constants.OUT_OF_STAGE_COLOR]);
            this._view.setLegendWidth(250)
        },
        _retrieveData: function () {
            this._data = this._dataSource.getDetailData(this._stageKey);
            if (this._data) {
                this._view.setHeight(CONSTANTS.CHART_ITEM_HEIGHT * this._data.length + CONSTANTS.CHART_PADDING);
                if (this._data.length >= 15) this._view.setChartHeightPercentage(90);
                else if (this._data.length >
                    5) this._view.setChartHeightPercentage(80);
                else this._view.setChartHeightPercentage(null); if (this._data.length === 1) this._data.push(["", 0, 0])
            }
            this._view.setData(this._data)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        HTML = Streak.HTML,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Reports.SummaryDetailChartView;
    Reports.StageEventsTimeRangeSummaryDetailChartView = Streak.Class.subclass({
        superclass: superclass,
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            var bar = $(document.createElement("div"));
            bar.addClass("streak__reports_yaxis_bar");
            this._element.find(".streak__reports_summarydetail_background").prepend(bar)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI,
        Locale = Streak.Locale,
        Tracker = Streak.BentoBox.Tracker,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Reports.SummaryDetailChartViewController;
    Reports.Charts.StageChangeSummaryDetailChartViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            "name": "_data",
            destroy: false
        }, {
            "name": "_summaryData",
            destroy: false
        }, {
            "name": "_pipeline",
            destroy: false
        }, {
            "name": "_stages",
            destroy: false
        }, {
            "name": "_stageKeys",
            destroy: false
        }, {
            "name": "_detailViewControllers",
            destroy: true
        }, {
            "name": "_summaryViewControllers",
            destroy: true
        }, {
            "name": "_setupSummaryViewIsSetUp",
            destroy: false
        }, {
            "name": "_filterInactiveUsers",
            destroy: true,
            get: true,
            set: true
        }],
        _setupView: function () {
            this._view = new Reports.StageEventsTimeRangeSummaryDetailChartView
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupTrackingContext();
            this._detailViewControllers = {};
            this._summaryViewControllers = {};
            this._setupSummaryViewIsSetUp = false;
            this._filterInactiveUsers = false
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "stageEventsSummaryDetail"
            }
        },
        setPipeline: function (pipeline) {
            this._pipeline = pipeline;
            this._stages = pipeline.getStages().ordered;
            this._stageKeys = _.map(this._stages, function (stage) {
                return stage.key()
            });
            this._setupSummaryView()
        },
        _retrieveData: function () {
            superclass.prototype._retrieveData.call(this);
            this._callDelegateFunction("handleDataUpdated", this)
        },
        getDetailData: function (stageKey) {
            if (!this._data) return null;
            return this._getSingleStageDataSplitByUserFromParts(stageKey)
        },
        getSummaryData: function (stageKey) {
            if (!this._data) return null;
            var data = this._getSummaryDataForSingleStageFromParts(stageKey);
            data.label = this._pipeline.getStage(stageKey).displayName();
            return data
        },
        _getSingleStageDataSplitByUserFromParts: function (stageKey) {
            var parts;
            if (this._filterInactiveUsers) parts = this._data.sortBy(function (part) {
                return -(part. in +part.out)
            });
            else parts = this._data.sortBy("userName");
            var data = [];
            var headers = this._getHeaders();
            data.push(headers);
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                if (stageKey === part.stageKey)
                    if (!(this._filterInactiveUsers &&
                        part. in === 0 && part.out === 0)) data.push([part.userName, part. in , part.out])
            }
            return data
        },
        _getSummaryDataForSingleStageFromParts: function (stageKey) {
            var data = this._getSummaryDataForAllStagesFromParts();
            return {
                "in": data. in [stageKey],
                out: data.out[stageKey],
                net: data.net[stageKey],
                max: data.max
            }
        },
        _getSummaryDataForAllStagesFromParts: function () {
            if (!this._data) return;
            var parts = this._data;
            var inCounts = {};
            var outCounts = {};
            var netCounts = {};
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                var stageKey = part.stageKey;
                inCounts[stageKey] = (inCounts[stageKey] || 0) + part. in ;
                outCounts[stageKey] = (outCounts[stageKey] || 0) + part.out;
                netCounts[stageKey] = (netCounts[stageKey] || 0) + part.netChange
            }
            return {
                "in": inCounts,
                out: outCounts,
                net: netCounts,
                max: Math.max(_.max(_.values(inCounts)), _.max(_.values(outCounts)))
            }
        },
        _getHeaders: function () {
            var headerKeys = ["reports_user", "reports_stage_in", "reports_stage_out"];
            return Locale.getStrings(headerKeys)
        },
        _makeDetailViewFor: function (stageKey) {
            if (_.isUndefined(this._detailViewControllers[stageKey])) {
                var viewController =
                    new Reports.Charts.StageChangeStageDetailViewController;
                viewController.setDataSource(this);
                viewController.setPipeline(this._pipeline);
                viewController.setStageKey(stageKey);
                this._detailViewControllers[stageKey] = viewController
            }
            return viewController
        },
        _makeSummaryViewFor: function (stageKey) {
            var viewController = new Reports.Charts.StageInOutViewController;
            viewController.setPipeline(this._pipeline);
            viewController.selectStageKey(stageKey);
            viewController.setDataSource(this);
            viewController.addDelegate(this);
            return viewController
        },
        handleDataUpdated: function (dataSource) {
            superclass.prototype.handleDataUpdated.call(this, dataSource);
            this._setupSummaryView()
        },
        windowResized: function () {
            superclass.prototype.windowResized.call(this);
            _.each(this._detailViewControllers, function (subviewController) {
                subviewController.windowResized()
            });
            _.each(this._summaryViewControllers, function (subviewController) {
                subviewController.windowResized()
            })
        },
        _setupSummaryView: function () {
            if (!this._pipeline) return;
            if (!this._setupSummaryViewIsSetUp) {
                this._setupSummaryViewIsSetUp =
                    true;
                var self = this;
                _.each(this._stageKeys, function (stagekey) {
                    self.addSummaryElement({
                        key: stagekey
                    })
                })
            }
        },
        stageInOutMainViewSelected: function (parameters) {
            Tracker.trackStreakActive(this._trackingContext, {
                eventName: "stageEventsStageToggled"
            });
            this._callDelegateFunction("selectedStageKeyToggled", this, parameters.stageKey)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        Reports = Streak.BentoBox.Modules.Reports,
        Locale = Streak.Locale;
    var superclass = Reports.ReportCards.TimeRangeReportCardViewController;
    Reports.ReportCards.StageChangeViewController = Streak.Class.subclass({
        className: "StageChangeViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_inColor",
            destroy: false
        }, {
            name: "_outColor",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupTrackingContext();
            this._reportName =
                "StageEventsTimeRange";
            this._titleLocaleKey = "report_title_stage_change";
            this.setBodyChartViewController(new Reports.Charts.StageChangeSummaryDetailChartViewController);
            this.configureBodyChartViewController();
            this._bodyChartViewController.addDelegate(this);
            this._view.setTitle(this.getTitle())
        },
        _hasStageMenu: function () {
            return true
        },
        _hasUserFilterMenu: function () {
            return true
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "stageChangeReportCard"
            }
        },
        configureBodyChartViewController: function () {
            if (this._selectedUsers &&
                this._selectedUsers[0] === "ANY_USER") this._bodyChartViewController.setFilterInactiveUsers(true);
            else this._bodyChartViewController.setFilterInactiveUsers(false)
        },
        setPipeline: function (pipeline) {
            superclass.prototype.setPipeline.call(this, pipeline);
            this._bodyChartViewController.setPipeline(pipeline)
        },
        selectedStageKeyToggled: function (controller, stageKey) {
            if (this._stageKey === stageKey) this.stageKeySelectionChanged(null);
            else this.stageKeySelectionChanged(stageKey)
        },
        selectedUsersChanged: function (selectedUsers) {
            superclass.prototype.selectedUsersChanged.call(this,
                selectedUsers);
            this.configureBodyChartViewController()
        },
        selectStageKey: function (controller, stageKey) {
            superclass.prototype.selectStageKey.call(this, stageKey)
        },
        stageKeySelectionChanged: function (stageKey) {
            this._bodyChartViewController.select(stageKey);
            superclass.prototype.stageKeySelectionChanged.call(this, stageKey)
        },
        _findRelevantUserKeys: function () {
            var parts = Reports.Utils.filterJsonParts({
                parts: this._json.parts,
                timeRange: this._timeRange
            });
            var userKeys = {};
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                if (part.userKey == "ALL_USERS") continue;
                if (part. in !== 0 || part.out !== 0) userKeys[part.userKey] = true
            }
            return Object.keys(userKeys)
        },
        _getReportExplanation: function () {
            return Locale.getString("stage_change_report_explanation")
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        UI = Streak.UI,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports;
    var CONSTANTS = {
        MIN_STAGE_WIDTH: 110
    };
    var superclass = UI.ChartView;
    Reports.TimeInStageChartView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_chartElement",
            destroy: false
        }, {
            name: "_messageElement",
            destroy: false
        }],
        _setupElement: function () {
            this._element = HTML.getElement("streak__reports_timeInStage")
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._chartElement = this._element.find(".streak__reports_timeInStage_chart");
            this._messageElement = this._element.find(".streak__reports_timeInStage_message")
        },
        setStageConfigurations: function (stages) {
            this.reset();
            this._chartElement.css("minWidth", stages.length * CONSTANTS.MIN_STAGE_WIDTH + "px");
            for (var i = 0; i < stages.length; i++) this._addStage(stages[i])
        },
        _addStage: function (parameters) {
            var stageElement = HTML.getElement("streak__reports_timeInStage_stage");
            stageElement.css("background-color", parameters.backgroundColor);
            stageElement.css("minWidth", CONSTANTS.MIN_STAGE_WIDTH + "px");
            stageElement.css("color", parameters.textColor);
            stageElement.find(".streak__reports_timeInStage_stage_name").text(parameters.name);
            var timeStrings = this._getTimeStrings(parameters.seconds);
            var boxString = Locale.getString("number_boxes", {
                number: parameters.boxes,
                pluralize: [parameters.boxes]
            });
            stageElement.find(".streak__reports_timeInStage_stage_time").text(timeStrings.shortTimeString);
            stageElement.css("width", parameters.percentage + "%");
            stageElement.attr("data-tooltip",
                parameters.name + "\n" + timeStrings.timeString + "\n" + boxString);
            this._chartElement.append(stageElement)
        },
        _getTimeStrings: function (seconds) {
            var timeString, shortTimeString;
            var days = seconds / (60 * 60 * 24);
            if (days < 1) {
                var hours = seconds / (60 * 60);
                if (hours < 1) {
                    var minutes = seconds / 60;
                    if (minutes < 1) {
                        var prettySeconds = Math.round(seconds);
                        shortTimeString = Locale.getString("number_seconds_abbreviated", {
                            number: prettySeconds
                        });
                        timeString = Locale.getString("number_seconds", {
                            number: prettySeconds
                        })
                    } else {
                        var prettyMinutes = this._prettifyNumber(minutes);
                        shortTimeString = Locale.getString("number_minutes_abbreviated", {
                            number: prettyMinutes
                        });
                        timeString = Locale.getString("number_minutes", {
                            number: prettyMinutes
                        })
                    }
                } else {
                    var prettyHours = this._prettifyNumber(hours);
                    shortTimeString = Locale.getString("number_hours_abbreviated", {
                        number: prettyHours
                    });
                    timeString = Locale.getString("number_hours", {
                        number: prettyHours
                    })
                }
            } else {
                var prettyDays = this._prettifyNumber(days);
                shortTimeString = Locale.getString("number_days_abbreviated", {
                    number: prettyDays
                });
                timeString = Locale.getString("number_days", {
                    number: prettyDays
                })
            }
            return {
                shortTimeString: shortTimeString,
                timeString: timeString
            }
        },
        _prettifyNumber: function (number) {
            if (number > 5) return Math.round(number);
            else return number.toFixed(1)
        },
        reset: function () {
            this._chartElement.empty();
            this._chartElement.show();
            this._messageElement.empty();
            this._messageElement.hide()
        },
        showMessage: function (message) {
            this._chartElement.hide();
            this._messageElement.show();
            this._messageElement.html(message)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI,
        BB = Streak.BentoBox,
        Locale = Streak.Locale,
        Tracker = Streak.BentoBox.Tracker,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = UI.ChartViewController;
    Reports.ReportCards.TimeInStageChartViewController = Streak.Class.subclass({
        className: "TimeInStageChartViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_pipeline",
            destroy: false
        }, {
            name: "_stages",
            destroy: false
        }, {
            name: "_stageKeys",
            destroy: false
        }, {
            name: "_stageColors",
            destroy: false
        }, {
            name: "_totalSecondsInStage",
            destroy: false
        }, {
            name: "_timeRange",
            destroy: false,
            get: true,
            set: true
        }],
        _setupView: function () {
            this._view = new Reports.TimeInStageChartView
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupTrackingContext()
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "timeInStageChart"
            }
        },
        setPipeline: function (pipeline) {
            this._pipeline = pipeline;
            this._stages = pipeline.getStages().ordered;
            this._stageKeys = _.map(this._stages, function (stage) {
                return stage.key()
            });
            this._stageColors =
                BB.UI.getStageColors(this._pipeline);
            this._setupChart()
        },
        _setupChart: function () {
            if (!this._data) return;
            this._populateStageTimePercentages();
            if (this._totalSecondsInStage === 0) {
                var timeRange = Reports.Utils.timeRangeLocalization(this._timeRange).toLowerCase();
                this._view.showMessage(Locale.getString("time_in_stage_no_data", {
                    timeRange: timeRange
                }));
                return
            }
            var stages = [];
            for (var i = 0; i < this._stageKeys.length; i++) {
                var stageKey = this._stageKeys[i];
                var stageData = _.find(this._data, function (stageData) {
                    return stageData.stageKey ===
                        stageKey
                });
                if (!_.isUndefined(stageData)) {
                    var stage = this._pipeline.getStage(stageData.stageKey);
                    var stageColor = this._stageColors[stageData.stageKey];
                    var backgroundColor = stageColor.backgroundColor;
                    var textColor = stageColor.textColor;
                    if (stageData.averageSecondsInStage > 0) stages.push({
                        name: stage.displayName(),
                        backgroundColor: backgroundColor,
                        textColor: textColor,
                        seconds: stageData.averageSecondsInStage,
                        percentage: stageData.percentage,
                        boxes: stageData.boxesExitingStage
                    })
                }
            }
            this._view.setStageConfigurations(stages)
        },
        _populateStageTimePercentages: function () {
            this._totalSecondsInStage = 0;
            for (var i = 0; i < this._data.length; i++) {
                var stageData = this._data[i];
                if (stageData.averageSecondsInStage) this._totalSecondsInStage += stageData.averageSecondsInStage
            }
            for (var i = 0; i < this._data.length; i++) {
                var stageData = this._data[i];
                if (stageData.averageSecondsInStage) stageData.percentage = 100 * (stageData.averageSecondsInStage / this._totalSecondsInStage);
                else stageData.percentage = 0
            }
        },
        handleDataUpdated: function (dataSource) {
            superclass.prototype.handleDataUpdated.call(this,
                dataSource);
            this._setupChart()
        },
        windowResized: function () {
            this._setupChart()
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Reports = Streak.BentoBox.Modules.Reports,
        UI = Streak.UI,
        Locale = Streak.Locale;
    var superclass = Reports.ReportCards.TimeRangeReportCardViewController;
    Reports.ReportCards.TimeInStageViewController = Streak.Class.subclass({
        className: "TimeInStageViewController",
        superclass: superclass,
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._selectedUsers = [Reports.Constants.ALL_USERS];
            this._setupTrackingContext();
            this._reportName = "StageTimeTimeRange";
            this._titleLocaleKey =
                "report_title_time_in_stage";
            this._view.setTitle(this.getTitle());
            this.setBodyChartViewController(new Reports.ReportCards.TimeInStageChartViewController)
        },
        setBodyChartViewController: function (bodyChartViewController) {
            superclass.prototype.setBodyChartViewController.call(this, bodyChartViewController);
            bodyChartViewController.setTimeRange(this._timeRange)
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "timeInStageReportCard"
            }
        },
        setTimeRange: function (timeRange) {
            superclass.prototype.setTimeRange.call(this,
                timeRange);
            if (this._bodyChartViewController) this._bodyChartViewController.setTimeRange(timeRange)
        },
        setPipeline: function (pipeline) {
            superclass.prototype.setPipeline.call(this, pipeline);
            this._bodyChartViewController.setPipeline(pipeline)
        },
        _getFilteredDataFromJSON: function () {
            var parts = superclass.prototype._getFilteredDataFromJSON.call(this);
            var data = [];
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                var averageSecondsInStage = part.averageSecondsInStage === "undefined" ? 0 : part.averageSecondsInStage;
                data.push({
                    stageKey: part.stageKey,
                    averageSecondsInStage: averageSecondsInStage,
                    boxesExitingStage: part.boxesExitingStage
                })
            }
            return data
        },
        _getReportExplanation: function () {
            return Locale.getString("time_in_stage_report_explanation")
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        Date = Streak.Date,
        Reports = Streak.BentoBox.Modules.Reports,
        UI = Streak.UI,
        Locale = Streak.Locale;
    var superclass = Reports.ServerReportCardViewController;
    Reports.ReportCards.ColumnSpecificChartViewController = Streak.Class.subclass({
        className: "ColumnSpecificChartViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_chartView",
            destroy: false
        }, {
            name: "_defaultColumn",
            get: true,
            set: true,
            destroy: false
        }, {
            name: "_lastSelectedColumn",
            destroy: false
        }, {
            name: "_lastSelectedUsers",
            destroy: false
        }, {
            name: "_lastSelectedStageKeys",
            destroy: false
        }, {
            name: "_totalBoxes",
            destroy: true
        }],
        _initialize: function (parameters) {
            superclass.prototype._initialize.call(this);
            this._selectedUsers = [Reports.Constants.ALL_USERS];
            this._setupTrackingContext();
            this._reportName = "ColumnSpecificRingChart";
            this._titleLocaleKey = "report_title_column_specific_over_time";
            this._view.setTitle(this.getTitle());
            this._configureChartView();
            this.defaultColumn = null
        },
        getTitle: function () {
            if (!this._titleLocaleKey) return null;
            return Locale.getString(this._titleLocaleKey, {
                "column": this.getColumnName(),
                "people": this._getPeopleSummary()
            })
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "columnSpecificReportCard"
            }
        },
        setTotalBoxes: function (totalBoxes) {
            this._totalBoxes = totalBoxes;
            this._chartView.setCenterLabelValue(this._totalBoxes);
            this._chartView.setCenterLabelUnit(Locale.getString("boxes").toLowerCase())
        },
        _hasStageMultipleSelectMenu: function () {
            return true
        },
        _hasUserFilterMenu: function () {
            return true
        },
        _hasColumnMenu: function () {
            return true
        },
        getColumnName: function () {
            if (this.getColumn()) return this.getColumn().name;
            else return ""
        },
        _configureChartView: function () {
            this.setBodyChartViewController(new UI.ChartViewController);
            var chartView = UI.ChartFactory.createChart({
                type: "RING_CHART",
                height: 300,
                chartArea: {
                    width: "70%",
                    height: "90%"
                },
                sliceVisibilityThreshold: 1 / 72,
                pieHole: 0.5
            });
            this._chartView = chartView;
            this._bodyChartViewController.setView(chartView)
        },
        _getReportData: function (parameters) {
            this._loadUserDataForPipeline();
            var selectedColumn = this.getColumn();
            var data = [this._getHeaders()];
            var pipeline = this._pipeline;
            if (selectedColumn) {
                var boxes = Data.getPipelineBoxes(this._pipeline.key());
                var selectedStageKeys = this.getSelectedStageKeys();
                if (selectedStageKeys) boxes = _.filter(boxes, function (box) {
                    var stageKey = box.get("stageKey");
                    return _.contains(selectedStageKeys, stageKey)
                });
                var userFilter = this.getSelectedUsers();
                if (userFilter && !_.contains(userFilter, Reports.Constants.ALL_USERS)) boxes = _.filter(boxes, function (box) {
                    var assignedTos =
                        box.getAssignedToSharingEntries();
                    if (Reports.Utils.containsUser({
                        userFilter: userFilter,
                        user: box.get("creatorKey")
                    })) return true;
                    for (var i = 0; i < assignedTos.length; i++) {
                        var user = assignedTos[i];
                        if (Reports.Utils.containsUser({
                            userFilter: userFilter,
                            user: user.userKey
                        })) return true
                    }
                    return false
                });
                var pipeline = this._pipeline;
                this.setTotalBoxes(boxes.length);
                var grouped = Reports.Utils.countWithSplitCredit(boxes, function (box) {
                    return Reports.Utils.getBoxValueForColumn({
                        box: box,
                        column: selectedColumn,
                        pipeline: pipeline
                    })
                });
                _.each(grouped, function (value, key) {
                    data.push([Reports.Utils.getBoxValueDisplay({
                        column: selectedColumn,
                        key: key,
                        pipeline: pipeline
                    }), value])
                })
            } else;
            var json = {
                users: this._users,
                data: data
            };
            var handleSuccessParams = {
                refreshUserFilterMenu: !(parameters && parameters.causedByUserSelectionChange)
            };
            this._handleReportDataSuccess(json, handleSuccessParams)
        },
        reportWorthShowing: function () {
            if (Reports.Utils.isColumnDate({
                column: this._allColumns[this._defaultColumn],
                pipeline: this._pipeline
            })) return false;
            var data = this._json.data;
            return !(data.length <= 1 || data.length == 2 && data[1][0] !== "No Value")
        },
        _handleReportDataSuccess: function (json, parameters) {
            this._json = json;
            this._users = json.users;
            this._gotReportData = true;
            this._view.setBody(this._bodyChartViewController.getView());
            this._view.showMenus();
            this._refreshData({
                refreshUserFilterMenu: parameters && parameters.refreshUserFilterMenu,
                skipHandleReportDataSucessCallback: true
            })
        },
        _loadUserDataForPipeline: function () {
            this._users = Reports.Utils.usersFromPipeline({
                pipeline: this._pipeline
            })
        },
        _refreshData: function (parameters) {
            if (this._filterOptionsChanged()) {
                this._setLastFilterOptions();
                this._getReportData(parameters)
            }
            superclass.prototype._refreshData.call(this, parameters)
        },
        _getFilteredDataFromJSON: function () {
            return google.visualization.arrayToDataTable(this._json.data)
        },
        _filterOptionsChanged: function () {
            if (this.getSelectedStageKeys() !== this._lastSelectedStageKeys) return true;
            if (this.getSelectedUsers() !== this._lastSelectedUsers) return true;
            if (this._columnKey !== this._lastSelectedColumn) return true;
            return false
        },
        _setLastFilterOptions: function () {
            this._lastSelectedStageKeys = this.getSelectedStageKeys();
            this._lastSelectedUsers = this.getSelectedUsers();
            this._lastSelectedColumn = this._columnKey
        },
        _getHeaders: function (sortedStageKeys) {
            return ["Value", "Number of Boxes"]
        },
        _getReportExplanation: function () {
            return Locale.getString("column_specific_report_explanation", {
                "column": this.getColumnName()
            })
        },
        getColumn: function () {
            if (this._columnKey) return this._columns[this._columnKey];
            else return null
        },
        columnSelectionChanged: function (column) {
            superclass.prototype.columnSelectionChanged.call(this,
                column);
            this.setupReportExplanation()
        },
        setPipeline: function (pipeline) {
            var ret = superclass.prototype.setPipeline.call(this, pipeline);
            if (this.getDefaultColumn() && !this._columnKey) this.columnSelectionChanged(this.getDefaultColumn());
            return ret
        }
    })
})(Streak);
(function (Streak) {
    var Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Reports.ReportCards.ColumnSpecificChartViewController;
    Reports.ReportCards.AssignedToColumnChartViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [],
        _initialize: function () {
            superclass.prototype._initialize.call(this)
        },
        _hasColumnMenu: function () {
            return false
        },
        _hasUserFilterMenu: function () {
            return false
        }
    })
})(Streak);
(function (Streak) {
    var Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Reports.ReportCards.ColumnSpecificChartViewController;
    Reports.ReportCards.StageColumnChartViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [],
        _initialize: function () {
            superclass.prototype._initialize.call(this)
        },
        _hasColumnMenu: function () {
            return false
        },
        _hasStageMultipleSelectMenu: function () {
            return false
        }
    })
})(Streak);
Streak.BentoBox.Modules.Reports.PipelineReports = {};
(function (Streak) {
    var HTML = Streak.HTML,
        BB = Streak.BentoBox;
    var superclass = Streak.UI.View;
    BB.Modules.Reports.PipelineReports.PipelineReportsView = Streak.Class.subclass({
        superclass: superclass,
        _setupElement: function () {
            this._element = HTML.getElement("streak__pipelineReports")
        },
        setPipelineName: function (pipelineName) {
            this._element.find(".streak__reports_title").html(pipelineName)
        },
        setBackButton: function (backButton) {
            this._element.find(".streak__reports_backButton").html(backButton.el)
        },
        addMenu: function (menu) {
            this._element.find(".streak__reports_toolbarButtons").append(menu.getElement())
        },
        setReportCollectionView: function (view) {
            this._element.find(".streak__reports_reportCollectionContainer").html(view.getElement())
        },
        hideNotice: function () {
            this._element.find(".streak__reports_notice").hide()
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        $ = Streak.$,
        BB = Streak.BentoBox,
        Locale = Streak.Locale,
        HTML = Streak.HTML,
        UI = Streak.UI,
        Reports = Streak.BentoBox.Modules.Reports;
    var ReportCards = Reports.ReportCards;
    var superclass = Streak.UI.ViewController;
    Reports.PipelineReports.PipelineReportsViewController = Streak.Class.subclass({
        className: "PipelineReportsViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_pipeline",
            destroy: false
        }, {
            name: "_reportCardCollectionViewController",
            destroy: true
        }, {
            name: "_reportCardViewControllers",
            destroy: true
        }, {
            name: "_trackingContext",
            destroy: false
        }, {
            name: "_windowResizeListener",
            destroy: false
        }, {
            name: "_reportsReady",
            destroy: false
        }, {
            name: "_specialColumnsRow",
            destroy: false
        }],
        _setupView: function () {
            this._view = new Reports.PipelineReports.PipelineReportsView
        },
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._reportCardViewControllers = [];
            this._reportsReady = [];
            this._setupTrackingContext();
            this._attachView();
            this._setupBackButton();
            this._setupNotice();
            this._setupReportsCollection();
            this._addWindowResizeListener();
            return this
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "pipelineReports"
            }
        },
        _attachView: function () {
            BB.UI.getCanvas().append(this._view.getElement())
        },
        _setupBackButton: function () {
            var self = this;
            var backButton = BB.Widgets.Button.create({
                isToggle: false,
                name: HTML.get("pipelineToolbarBackButton"),
                onFunc: function () {
                    BB.Tracker.trackStreakActive({
                        eventName: "backButtonPressed"
                    }, self._trackingContext);
                    history.back()
                }
            });
            this._view.setBackButton(backButton)
        },
        _setupNotice: function () {
            if (BB.isFeatureEnabled("reports")) this._view.hideNotice()
        },
        _setupReportsCollection: function () {
            this._reportCardCollectionViewController = new UI.SplitRowsCollectionViewController;
            this._view.setReportCollectionView(this._reportCardCollectionViewController.getView());
            this._setupReportViews()
        },
        _setupReportViews: function () {
            this._specialColumnsRow = this._reportCardCollectionViewController.addRow();
            var viewControllerClasses = [
                [ReportCards.TotalValueReportCardViewController, ReportCards.TotalValueByPersonReportCardViewController],
                [ReportCards.StageChangeViewController],
                [ReportCards.TimeInStageViewController]
            ];
            for (var i = 0; i < viewControllerClasses.length; i++) {
                var viewControllerClassRow = viewControllerClasses[i];
                for (var j = 0; j < viewControllerClassRow.length; j++) {
                    var reportCardViewControllerClass = viewControllerClassRow[j];
                    this._setupCardViewController({
                        reportCardViewControllerClass: reportCardViewControllerClass,
                        newRow: j == 0
                    })
                }
            }
        },
        _setupCardViewController: function (parameters) {
            var reportCardViewController = new parameters.reportCardViewControllerClass;
            reportCardViewController.addDelegate(this);
            this.addDelegate(reportCardViewController);
            if (parameters.newRow) var row = this._reportCardCollectionViewController.addRow();
            else var row = this._reportCardCollectionViewController.getLastRow();
            this._reportCardCollectionViewController.addViewControllerToRow(reportCardViewController, row);
            this._reportCardViewControllers.push(reportCardViewController);
            return reportCardViewController
        },
        _addWindowResizeListener: function () {
            this._windowResizeListener = _.bind(_.debounce(this._handleWindowResize,
                100), this);
            window.addEventListener("resize", this._windowResizeListener)
        },
        _handleWindowResize: function () {
            this._callDelegateFunction("windowResized")
        },
        setPipeline: function (pipeline) {
            this._pipeline = pipeline;
            this._setupTitle();
            this._setupColumnReports();
            this._callDelegateFunction("setPipeline", this._pipeline)
        },
        _setupTitle: function () {
            this._view.setPipelineName(BB.Locale.getString("pipeline_reports_title", {
                pipeline: this._pipeline.displayName()
            }))
        },
        _setupColumnReports: function () {
            var stageColumnKey = Reports.Utils.getStageColumnKeyForPipeline(this._pipeline);
            if (stageColumnKey) {
                var stageColumnReport = new ReportCards.StageColumnChartViewController;
                stageColumnReport.addDelegate(this);
                this.addDelegate(stageColumnReport);
                stageColumnReport.setDefaultColumn(stageColumnKey);
                stageColumnReport.setPipeline(this._pipeline);
                this._reportCardCollectionViewController.addViewControllerToRow(stageColumnReport, this._specialColumnsRow)
            }
            var assignedToColumnKey = Reports.Utils.getAssignedToColumnKeyForPipeline(this._pipeline);
            if (assignedToColumnKey) {
                var assignedToColumnReport =
                    new ReportCards.AssignedToColumnChartViewController;
                assignedToColumnReport.addDelegate(this);
                this.addDelegate(assignedToColumnReport);
                assignedToColumnReport.setDefaultColumn(assignedToColumnKey);
                assignedToColumnReport.setPipeline(this._pipeline);
                this._reportCardCollectionViewController.addViewControllerToRow(assignedToColumnReport, this._specialColumnsRow)
            }
            var columnKeys = Reports.Utils.getOrderedColumnKeysForPipeline_exceptStageAndAssignedTo(this._pipeline);
            var reportsWorthShowing = [];
            for (var i = 0; i <
                columnKeys.length && reportsWorthShowing.length < 2; i++) {
                var columnKey = columnKeys[i];
                var cardController = new ReportCards.ColumnSpecificChartViewController;
                cardController.addDelegate(this);
                this.addDelegate(cardController);
                cardController.setDefaultColumn(columnKey);
                cardController.setPipeline(this._pipeline);
                if (cardController.reportWorthShowing()) reportsWorthShowing.push(cardController)
            }
            var row = null;
            for (var i = 0; i < reportsWorthShowing.length; i++) {
                var cardController = reportsWorthShowing[i];
                if (i % 2 == 0) row = this._reportCardCollectionViewController.addRow();
                this._reportCardCollectionViewController.addViewControllerToRow(cardController, row)
            }
        },
        handleReportFailed: function (reportViewController) {
            this._handleReportReady(reportViewController)
        },
        _handleReportReady: function (reportViewController) {
            if (this._reportsReady.indexOf(reportViewController) === -1) this._reportsReady.push(reportViewController)
        },
        destroy: function () {
            this._removeWindowResizeListener();
            superclass.prototype.destroy.call(this)
        },
        _removeWindowResizeListener: function () {
            window.removeEventListener("resize",
                this._windowResizeListener)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        Gmail = Streak.Gmail,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox,
        Tracker = Streak.BentoBox.Tracker,
        Reports = Streak.BentoBox.Modules.Reports;
    var superclass = Streak.Object;
    Reports.PipelineReports.PipelineReportsMasterController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_pipelineReportsViewController",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._bindToGmail();
            this._viewChanged()
        },
        _bindToGmail: function () {
            var self =
                this;
            Gmail.observe("viewChanged", function (view) {
                self._viewChanged()
            })
        },
        _viewChanged: function () {
            if (this._pipelineReportsViewController) {
                this._pipelineReportsViewController.destroy();
                this._pipelineReportsViewController = null
            }
            if (BB.UI.isPipelineReportsView()) {
                this._pipelineReportsViewController = new Reports.PipelineReports.PipelineReportsViewController;
                Tracker.trackStreakActive({
                    eventName: "goToPipelineReports"
                });
                this._pipelineReportsViewController.setPipeline(BB.Data.getPipeline(Gmail.getConversationId()))
            }
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pipelineReportsInitialized",
        functionToCall: function (callback) {
            Reports.PipelineReports.PipelineReportsMasterControllerInstance = new Reports.PipelineReports.PipelineReportsMasterController;
            if (callback) callback()
        },
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded", "chartsInitialized"]
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        DependencyManager = Streak.DependencyManager,
        Gmail = Streak.Gmail,
        Library = Streak.Library,
        Utils = Streak.Utils;
    var superclass = Streak.Object;
    var initialLocationHash = Messenger.getData("originalLocation") || location.hash;
    var DeepLinkLoaderMasterController = Streak.Class.subclass({
        superclass: superclass,
        _memberVariables: [{
            name: "_deepLinkFunction",
            destroy: true
        }, {
            name: "_deepLinkKey",
            destroy: true
        }, {
            name: "_deepLinkLoadingViewController",
            destroy: true
        }, {
            name: "_initialLocationHash",
            get: true,
            destroy: true
        }, {
            name: "_viewChangedBindingGUID",
            destroy: true
        }, {
            name: "_bentoBoxUnbinder",
            destroy: true
        }, {
            name: "_gmailLoadedUnbinder",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this.setInitialLocationHash(initialLocationHash);
            if (BB.UI.isBentoBoxView(this.getInitialView())) this._bindAll()
        },
        destroy: function () {
            superclass.prototype.destroy.call(this);
            this._unbindAll()
        },
        _bindAll: function () {
            this._bindToViewChanged();
            this._bindToGmailLoaded();
            this._bindToBentoBoxLoaded()
        },
        _unbindAll: function () {
            this._unbindToViewChanged();
            this._unbindToGmailLoaded();
            this._unbindToBentoBoxLoaded()
        },
        setInitialLocationHash: function (complicatedHash) {
            if (complicatedHash.indexOf("#") === -1) {
                this._initialLocationHash = "";
                return
            }
            var hash = Utils.removePrefix(complicatedHash, "#");
            while (hash.startsWith("loading/")) hash = Utils.removePrefix(hash, "loading/");
            this._initialLocationHash = hash
        },
        getInitialView: function () {
            return Gmail.getStoredView(this.getInitialLocationHash().split("/"))
        },
        _bindToViewChanged: function () {
            var self =
                this;
            if (!this._viewChangedBindingGUID) {
                this._viewChangedBindingGUID = Streak.guid();
                Gmail.observe("viewChanged", this._viewChanged.bind(this), this._viewChangedBindingGUID)
            }
        },
        _unbindToViewChanged: function () {
            if (this._viewChangedBindingGUID) {
                Gmail.unobserve("viewChanged", this._viewChangedBindingGUID);
                this._viewChangedBindingGUID = null
            }
        },
        _bindToGmailLoaded: function () {
            this._gmailLoadedUnbinder = Streak.NotificationCenter.addFunction({
                eventName: "gmailLoaded",
                functionToCall: this._gmailLoaded,
                functionContext: this
            })
        },
        _unbindToGmailLoaded: function () {
            if (this._gmailLoadedUnbinder) this._gmailLoadedUnbinder();
            this._gmailLoadedUnbinder = null
        },
        _bindToBentoBoxLoaded: function () {
            this._bentoBoxUnbinder = Streak.NotificationCenter.addFunction({
                eventName: "bentoBoxIsReady",
                functionToCall: this._bentoBoxLoaded,
                functionContext: this
            })
        },
        _unbindToBentoBoxLoaded: function () {
            if (this._bentoBoxUnbinder) this._bentoBoxUnbinder();
            this._bentoBoxUnbinder = null
        },
        _viewChanged: function (newView) {
            if (!this._deepLinkLoadingEverShown) this.showDeepLinkLoading();
            else if (BB.UI.isDeepLinkLoadingView());
            else this.hideDeepLinkLoading()
        },
        _gmailLoaded: function () {
            this.showDeepLinkLoading()
        },
        _bentoBoxLoaded: function () {
            if (!this._deepLinkLoadingHidden) this.hideDeepLinkLoading()
        },
        showDeepLinkLoading: function () {
            if (this._deepLinkLoadingHidden) return;
            this._deepLinkLoadingEverShown = true;
            if (!BB.UI.isDeepLinkLoadingView()) BB.UI.setURL(Gmail.Constants.DeepLinkLoading + "/" + this.getInitialLocationHash())
        },
        hideDeepLinkLoading: function () {
            this._deepLinkLoadingHidden = true;
            if (BB.UI.isDeepLinkLoadingView()) this.goToInitiallyLoadedLocation()
        },
        goToInitiallyLoadedLocation: function () {
            BB.UI.setURL(this.getInitialLocationHash())
        },
        getLoadingViewTarget: function () {
            return Gmail.hash.parts[1]
        }
    });
    Library.set("BentoBox.Modules.DeepLinkLoader.DeepLinkLoaderMasterController", DeepLinkLoaderMasterController);
    Streak.DependencyManager.addFunction({
        functionKey: "deepLinkLoaderMasterControllerInitialized",
        functionToCall: function (callback) {
            try {
                Library.set("BentoBox.Modules.DeepLinkLoader.DeepLinkLoaderMasterControllerInstance", new DeepLinkLoaderMasterController)
            } catch (e) {
                BB.logError("Problem in deepLinkLoader constructor",
                    e)
            }
            if (callback) callback()
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        Gmail = Streak.Gmail,
        HTML = Streak.HTML,
        Library = Streak.Library,
        UI = Streak.UI;
    var superclass = Streak.UI.ViewController;
    var DeepLinkLoadingViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_loadingViewTarget",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupView();
            Gmail.validateAndCorrectURLHash();
            this._bindToViewChanged();
            this.checkShouldShow();
            this.setLoadedPercentage(1)
        },
        _setupView: function () {
            this._view =
                Library.getInstance("BentoBox.Modules.DeepLinkLoader.DeepLinkLoadingView")
        },
        _bindToViewChanged: function () {
            Gmail.observe("viewChanged", this._viewChanged.bind(this))
        },
        _viewChanged: function () {
            this.checkShouldShow()
        },
        checkShouldShow: function () {
            if (BB.UI.isDeepLinkLoadingView()) {
                var masterControllerInstance = Library.get("BentoBox.Modules.DeepLinkLoader.DeepLinkLoaderMasterControllerInstance");
                this._loadingViewTarget = masterControllerInstance.getLoadingViewTarget();
                this._view.setLoadingTarget(this._loadingViewTarget);
                BB.UI.getCanvas().append(this._view.getElement())
            } else {
                this._loadingViewTarget = null;
                this._view.setLoadingTarget(null);
                this._view.getElement().remove()
            }
        },
        setLoadedPercentage: function (percentage) {
            this._view.setLoadedPercentage(percentage)
        }
    });
    Library.set("BentoBox.Modules.DeepLinkLoader.DeepLinkLoadingViewController", DeepLinkLoadingViewController);
    Streak.DependencyManager.addFunction({
        functionKey: "deepLinkLoaderViewControllerInitialized",
        functionToCall: function (callback) {
            Library.set("BentoBox.Modules.DeepLinkLoader.DeepLinkLoaderViewControllerInstance",
                new DeepLinkLoadingViewController);
            if (callback) callback()
        },
        dependentFunctionKeys: ["htmlLoaded", "localeLoaded"]
    })
})(Streak);
(function (Streak) {
    var HTML = Streak.HTML,
        BB = Streak.BentoBox,
        Library = Streak.Library,
        Locale = BB.Locale;
    var superclass = Streak.UI.View;
    var DeepLinkLoadingView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_targetView",
            destroy: true
        }, {
            name: "_loadingText",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._element = HTML.getElement("streak__deepLinkLoading");
            this._loadingText = this._element.find(".streak__loadingText");
            this._loaderBar = this._element.find(".streak__loaderBar");
            return this
        },
        setLoadingTarget: function (targetView) {
            this._targetView = targetView;
            var defaultLoadingMessage = Locale.getString("loading");
            var text = defaultLoadingMessage;
            if (targetView) {
                var specificLoadingKey = "loading_" + targetView;
                var specificLoadingMessage = Locale.getString(specificLoadingKey);
                if (specificLoadingKey !== specificLoadingMessage) text = specificLoadingMessage
            }
            this._loadingText.text(text)
        },
        setLoadedPercentage: function (percentage) {
            percentage = percentage * 100;
            this._loaderBar.find("div").css("width", percentage +
                "%")
        }
    });
    Library.set("BentoBox.Modules.DeepLinkLoader.DeepLinkLoadingView", DeepLinkLoadingView)
})(Streak);
(function (Streak) {
    var BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Reports = Streak.BentoBox.Modules.Reports,
        UI = Streak.UI;
    var superclass = UI.View;
    Reports.DealSizeSelectionMenuView = Streak.Class.subclass({
        className: "DealSizeSelectionMenuView",
        superclass: superclass,
        memberVariables: [{
            name: "_dropdown",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._dropdown = this._element.find(".streak__reports_deal_size_dropdown")
        },
        _setupElement: function () {
            this._element = HTML.getElement("streak__reports_deal_size_selection_menu")
        },
        setDropdown: function (view) {
            var element = view.getElement();
            element.addClass("streak__reports_deal_size_dropdown");
            this._dropdown.html(element)
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        UI = Streak.UI,
        HTML = Streak.HTML,
        Reports = Streak.BentoBox.Modules.Reports,
        Tracker = Streak.BentoBox.Tracker;
    var superclass = UI.ViewController;
    Reports.DealSizeSelectionMenuViewController = Streak.Class.subclass({
        className: "DealSizeSelectionMenuViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_confirmButton",
            destroy: false
        }, {
            name: "_columns",
            destroy: false
        }, {
            name: "_dealSizeColumnMenu",
            destroy: false
        }, {
            name: "_dataSource",
            destroy: false
        }, {
            name: "_trackingContext",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupTrackingContext()
        },
        _setupView: function () {
            this._view = new Reports.DealSizeSelectionMenuView
        },
        setColumns: function (columns) {
            this._columns = [this.getDefaultColumn()].concat(_.map(columns, function (column) {
                return {
                    name: column.name,
                    value: column
                }
            }));
            this._setupDealSizeColumn()
        },
        getDefaultColumn: function () {
            return {
                name: "No Column",
                value: null
            }
        },
        _setupDealSizeColumn: function () {
            var self = this;
            this._dealSizeColumnMenu = BB.Widgets.ButtonCustomDropdown.create({
                trackingContext: _.clone(this._trackingContext),
                list: this._columns,
                changeFunc: function (menuItem) {
                    self.dealSizeColumnChanged(menuItem.value);
                    Tracker.trackStreakActive(self._trackingContext, {
                        eventName: "dealSizeColumnMenuChanged"
                    })
                },
                comparisonFunction: function (listItemValue, potentialSelectedItemValue) {
                    if (_.isNotReal(listItemValue)) return _.isNotReal(potentialSelectedItemValue);
                    if (_.isNotReal(potentialSelectedItemValue)) return false;
                    return listItemValue.value.columnKey === potentialSelectedItemValue.value.columnKey
                },
                hasButtonToRight: true
            });
            this._view.setDropdown(this._dealSizeColumnMenu)
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource
        },
        save: function () {
            this._callDelegateFunction("confirmButtonPressed")
        },
        dealSizeColumnChanged: function (dealSizeColumn) {
            this._callDelegateFunction("dealSizeColumnChanged", dealSizeColumn)
        },
        setSelectedDealSizeColumn: function (dealSizeColumn) {
            this._dealSizeColumnMenu.setSelected(dealSizeColumn)
        },
        getSelectedDealSizeColumn: function () {
            return this._dealSizeColumnMenu.getSelected()
        },
        _setupTrackingContext: function () {
            this._trackingContext = {
                widgetContext: "reportCard"
            }
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.$,
        BB = Streak.BentoBox,
        HTML = Streak.HTML,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports,
        UI = Streak.UI;
    var superclass = Reports.ReportCards.ReportCardView;
    Reports.ReportCards.DealSizeBasedReportCardView = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_bottomView",
            destroy: false
        }, {
            name: "_topView",
            destroy: false
        }, {
            name: "_transparent",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._topView = this._element.find(".streak__reports_top_view");
            this._bottomView = this._element.find(".streak__reports_bottom_view")
        },
        _setupElement: function () {
            this._reportCard = HTML.getElement("streak__reportCard");
            this._element = HTML.getElement("streak_dealSizeBasedReportCard");
            this._element.find(".streak__reports_bottom_view").append(this._reportCard);
            this._element.find("* .streak__reportCard").removeClass("streak__reportCard")
        },
        hideTopView: function () {
            this._topView.hide();
            this._bottomView.fadeTo("fast", 1)
        },
        showTopView: function () {
            this._topView.show();
            this._bottomView.fadeTo("fast",
                0.2)
        },
        setTopView: function (view) {
            this._topView.html(view.getElement())
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        UI = Streak.UI,
        Locale = Streak.Locale,
        BB = Streak.BentoBox,
        Tracker = Streak.BentoBox.Tracker,
        Reports = Streak.BentoBox.Modules.Reports,
        NotificationCenter = Streak.NotificationCenter;
    var superclass = Reports.ReportCardViewController;
    Reports.ReportCards.DealSizeBasedReportCardViewController = Streak.Class.subclass({
        superclass: superclass,
        memberVariables: [{
            name: "_configureWarning",
            destroy: true
        }, {
            name: "_dealSizeColumnKey",
            destroy: false
        }, {
            name: "_dealSizeSelectionMenuViewController",
            destroy: true
        }, {
            name: "_mainBodyViewController",
            destroy: true
        }, {
            name: "_pipelineSettingListenUnbinder",
            destroy: true
        }, {
            name: "_possibleDealsizeColumns",
            destroy: false
        }, {
            name: "_reportRealBodyView",
            destroy: false
        }, {
            name: "_yellowConfigureBarViewController",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupValueColumnSelection();
            this._setupConfigureWarning();
            this._view.setTitle(this.getTitle());
            this.showDealSizeSelectionView();
            this._setupXButton()
        },
        setPipeline: function (pipeline) {
            superclass.prototype.setPipeline.call(this,
                pipeline);
            this._possibleDealsizeColumns = Reports.Utils.possibleDealsizeColumns(this._pipeline, BB.UI.getPipelineColumnList(this._pipeline, null, true));
            this._dealSizeSelectionMenuViewController.setColumns(this._possibleDealsizeColumns);
            if (this._pipelineSettingListenUnbinder) this._pipelineSettingListenUnbinder();
            this._pipelineSettingListenUnbinder = NotificationCenter.addFunction({
                eventName: "pipelineReportSettings.changed",
                filterParameters: {
                    pipelineKey: pipeline.key()
                },
                functionToCall: this.pipelineSettingsUpdated,
                functionContext: this
            });
            this.pipelineSettingsUpdated()
        },
        destroy: function () {
            superclass.prototype._initialize.call(this);
            if (this._pipelineSettingListenUnbinder) this._pipelineSettingListenUnbinder()
        },
        _setupView: function () {
            this._view = new Reports.ReportCards.DealSizeBasedReportCardView
        },
        _setupValueColumnSelection: function () {
            this._dealSizeSelectionMenuViewController = new Reports.DealSizeSelectionMenuViewController;
            this._dealSizeSelectionMenuViewController.addDelegate(this)
        },
        _setupConfigureWarning: function () {
            this._yellowConfigureBarViewController =
                new Reports.YellowConfigureBarViewController;
            this._yellowConfigureBarViewController.setConfigureViewController(this._dealSizeSelectionMenuViewController);
            this._view.setTopView(this._yellowConfigureBarViewController.getView())
        },
        showMainView: function () {
            this._view.hideTopView();
            this._view.hideMessage();
            this._view.showMenus()
        },
        showDealSizeSelectionView: function () {
            this._view.showTopView();
            this._view.hideMessage();
            this._view.hideMenus()
        },
        _setupXButton: function () {
            if (!this._xButton) {
                this._xButton = this._createXButton();
                this._view.addMenu({
                    view: this._xButton,
                    position: 1
                })
            }
        },
        _createXButton: function () {
            var self = this;
            var xbutton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Text",
                text: "X",
                onFunction: function () {
                    self.xButtonPressed()
                }
            });
            return xbutton
        },
        setGlobalDealSizeColumnKey: function (columnKey) {
            if (this._pipeline) this._pipeline.setUISettings("reporting/dealSizeColumn", columnKey)
        },
        getGlobalDealSizeColumnKey: function () {
            if (this._pipeline) return this._pipeline.getUISettingsByPath("reporting/dealSizeColumn")
        },
        confirmButtonPressed: function () {
            this.setGlobalDealSizeColumnKey(this._dealSizeColumnKey);
            this._inColumnSelectionMenu = this._dealSizeColumnKey === null;
            this.updateMode()
        },
        dealSizeColumnChanged: function (dealSizeColumn) {
            this._dealSizeColumnKey = dealSizeColumn ? dealSizeColumn.value.columnKey : null
        },
        xButtonPressed: function () {
            if (this._pipeline) this._pipeline.setUISettings("reporting/dealSizeColumn", null)
        },
        updateMode: function () {
            if (this._inColumnSelectionMenu) this.showDealSizeSelectionView();
            else if (this._dealSizeColumnKey === null);
            else this.showMainView()
        },
        pipelineSettingsUpdated: function () {
            var dealSizeColumnKey =
                this.getGlobalDealSizeColumnKey();
            var selectedColumn;
            if (dealSizeColumnKey) selectedColumn = this._allColumns[dealSizeColumnKey];
            else {
                selectedColumn = Reports.Utils.guessDealsizeColumn(this._possibleDealsizeColumns);
                if (!selectedColumn && this._possibleDealsizeColumns.length > 0) selectedColumn = this._possibleDealsizeColumns[0]
            }
            this._dealSizeSelectionMenuViewController.setSelectedDealSizeColumn(selectedColumn);
            var selectedDropdownColumn = this._dealSizeSelectionMenuViewController.getSelectedDealSizeColumn();
            this._dealSizeColumnKey =
                selectedDropdownColumn.value ? selectedDropdownColumn.value.value.columnKey : null;
            this._inColumnSelectionMenu = !dealSizeColumnKey;
            this.updateMode()
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports,
        Tracker = Streak.BentoBox.Tracker,
        UI = Streak.UI;
    var superclass = Reports.ReportCards.DealSizeBasedReportCardViewController;
    Reports.ReportCards.TotalValueByPersonReportCardViewController = Streak.Class.subclass({
        className: "TotalValueByPersonReportCardViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_totalMoney",
            destroy: true
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupFakeData();
            this._configureChartView()
        },
        _configureChartView: function () {
            var chartViewController = new UI.ChartViewController;
            var chartView = UI.ChartFactory.createChart({
                type: "RING_CHART",
                height: 300,
                chartArea: {
                    width: "70%",
                    height: "90%"
                },
                pieSliceText: "value",
                sliceVisibilityThreshold: 1 / 72,
                pieHole: 0.5
            });
            this._chartView = chartView;
            chartViewController.setView(chartView);
            chartViewController.setDataSource(this);
            this.setBodyChartViewController(chartViewController);
            this._view.setBody(chartView)
        },
        getTitle: function () {
            return Locale.getString("report_title_total_value_by_person")
        },
        getChartData: function () {
            if (this._pipeline && this.getGlobalDealSizeColumnKey() !== null) return this._data;
            else return this._fakeData
        },
        _updateChartData: function () {
            var dealSizeColumn = this._columns[this.getGlobalDealSizeColumnKey()];
            var data = [this._getHeaders()];
            if (!dealSizeColumn) return data;
            var boxes = Data.getPipelineBoxes(this._pipeline.key());
            var assignedToColumn = this._columns[Reports.Utils.getAssignedToColumnKeyForPipeline(this._pipeline)];
            var pipeline = this._pipeline;
            var selectedStageKeys = this.getSelectedStageKeys();
            if (selectedStageKeys) boxes = _.filter(boxes, function (box) {
                var stageKey = box.get("stageKey");
                return _.contains(selectedStageKeys, stageKey)
            });
            var grouped = Reports.Utils.sumWithSplitCredit(boxes, {
                valueBy: function (box) {
                    return Reports.Utils.unformatCurrency(Reports.Utils.getBoxValueForColumn({
                        box: box,
                        column: dealSizeColumn,
                        pipeline: pipeline
                    })) || 0
                },
                groupBy: function (box) {
                    return Reports.Utils.getBoxValueForColumn({
                        box: box,
                        column: assignedToColumn,
                        pipeline: pipeline
                    })
                }
            });
            _.each(grouped, function (value, key) {
                var displayName =
                    Reports.Utils.getBoxValueDisplay({
                        column: dealSizeColumn,
                        key: key,
                        pipeline: pipeline
                    });
                if (displayName === "No Value") displayName = "Not Assigned";
                data.push([displayName, value])
            });
            var total = _.chain(boxes).map(function (box) {
                return Reports.Utils.unformatCurrency(Reports.Utils.getBoxValueForColumn({
                    box: box,
                    column: dealSizeColumn,
                    pipeline: pipeline
                })) || 0
            }).value().sum();
            this.setTotalMoney(total);
            data = google.visualization.arrayToDataTable(data);
            var formatter = new google.visualization.NumberFormat({
                prefix: "$",
                negativeColor: "red",
                negativeParens: true
            });
            formatter.format(data, 1);
            this._data = data;
            return this._data
        },
        _getHeaders: function () {
            return ["Value", "Value"]
        },
        setTotalMoney: function (total) {
            this._totalMoney = total;
            this._chartView.setCenterLabelValue(Reports.Utils.formatCurrency(this._totalMoney));
            this._chartView.setCenterLabelUnit(null)
        },
        setPipeline: function (pipeline) {
            superclass.prototype.setPipeline.call(this, pipeline);
            this._updateChartData();
            this._callDelegateFunction("handleDataUpdated")
        },
        pipelineSettingsUpdated: function (parameters) {
            superclass.prototype.pipelineSettingsUpdated.call(this,
                parameters);
            this._updateChartData();
            this._callDelegateFunction("handleDataUpdated")
        },
        stageKeysSelectionChanged: function (stageKeys) {
            superclass.prototype.stageKeysSelectionChanged.call(this, stageKeys);
            this._updateChartData();
            this._callDelegateFunction("handleDataUpdated")
        },
        _setupFakeData: function () {
            this._fakeData = [
                ["", ""],
                ["Foo", 1 / 6],
                ["Bar", 1 / 3],
                ["Baz", 1 / 2]
            ];
            this._totalMoney = null
        },
        _hasStageMultipleSelectMenu: function () {
            return true
        }
    })
})(Streak);
(function (Streak) {
    var _ = Streak._,
        BB = Streak.BentoBox,
        Data = Streak.BentoBox.Data,
        Locale = Streak.Locale,
        Reports = Streak.BentoBox.Modules.Reports,
        Tracker = Streak.BentoBox.Tracker,
        UI = Streak.UI;
    var superclass = Reports.ReportCards.DealSizeBasedReportCardViewController;
    Reports.ReportCards.TotalValueReportCardViewController = Streak.Class.subclass({
        className: "TotalValueReportCardViewController",
        superclass: superclass,
        memberVariables: [{
            name: "_chartViewController",
            destroy: false
        }],
        _initialize: function () {
            superclass.prototype._initialize.call(this);
            this._setupFakeData();
            this._setupChartViewController()
        },
        getTitle: function () {
            return Locale.getString("report_title_total_value")
        },
        getChartData: function () {
            if (this._pipeline && this.getGlobalDealSizeColumnKey() !== null) return this._data;
            else return this._fakeData
        },
        _setupChartViewController: function () {
            this._chartViewController = new UI.ViewController;
            this._chartViewController.getView().addClass("streak__reports_total_value_report_dollar_amount");
            this.setBodyChartViewController(this._chartViewController);
            this._view.setBody(this._chartViewController.getView())
        },
        _updateChartData: function () {
            var dealSizeColumn = this._columns[this.getGlobalDealSizeColumnKey()];
            if (!dealSizeColumn) return this._fakeData;
            var boxes = Data.getPipelineBoxes(this._pipeline.key());
            var pipeline = this._pipeline;
            var selectedStageKeys = this.getSelectedStageKeys();
            if (selectedStageKeys && _.contains(selectedStageKeys, Reports.Constants.ALL_STAGES));
            else if (selectedStageKeys) boxes = _.filter(boxes, function (box) {
                var stageKey = box.get("stageKey");
                return _.contains(selectedStageKeys, stageKey)
            });
            var total =
                _.chain(boxes).map(function (box) {
                    return Reports.Utils.unformatCurrency(Reports.Utils.getBoxValueForColumn({
                        box: box,
                        column: dealSizeColumn,
                        pipeline: pipeline
                    })) || 0
                }).value().sum();
            this._data = total;
            return this._data
        },
        _updateView: function () {
            this._chartViewController.getView().getElement().html(Reports.Utils.formatCurrency(this.getChartData()))
        },
        _getHeaders: function () {
            return ["Value", "Value"]
        },
        setPipeline: function (pipeline) {
            superclass.prototype.setPipeline.call(this, pipeline);
            this._updateChartData();
            this._updateView()
        },
        pipelineSettingsUpdated: function (parameters) {
            superclass.prototype.pipelineSettingsUpdated.call(this, parameters);
            this._updateChartData();
            this._updateView()
        },
        stageKeysSelectionChanged: function (stageKeys) {
            superclass.prototype.stageKeysSelectionChanged.call(this, stageKeys);
            this._updateChartData();
            this._updateView()
        },
        _setupFakeData: function () {
            this._fakeData = "?"
        },
        _hasStageMultipleSelectMenu: function () {
            return true
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackingTour = function (options) {
        BB.Modules.Tours.ExtendedTour.call(this, options);
        this._composeWindowViewController = null;
        this._searchValue = null;
        this._shareModal = Library.getInstance("BentoBox.Modules.PixelTrackingShareModalViewController")
    };
    PixelTrackingTour.prototype =
        Object.create(BB.Modules.Tours.ExtendedTour.prototype);
    _.extend(PixelTrackingTour.prototype, {
        openComposeWindow: function (callback) {
            var self = this;
            Gmail.GmailComposeWindowRequester.requestNewComposeWindow(function (composeWindowViewController) {
                self._composeWindowViewController = composeWindowViewController;
                callback()
            })
        },
        closeComposeWindow: function () {
            if (!this._composeWindowViewController.isDestroyed()) try {
                this._composeWindowViewController.close()
            } catch (err) {}
        },
        ensureTrackedSearchLinkVisible: function (callback) {
            if (!Streak.$(".streak__pixelTrackerSearchLink").is(":visible")) Streak.$(".streak__pt_sentMailExpando").simulateRawClick();
            setTimeout(function () {
                callback()
            }, 100)
        },
        showHasTrackingInSearch: function (callback) {
            this._searchValue = Gmail.getSearchInput().val();
            Gmail.getSearchInput().val("has:tracking");
            callback()
        },
        restoreSearch: function () {
            Gmail.getSearchInput().val(this._searchValue)
        },
        showPixelTrackingShareModal: function (callbacks) {
            this._shareModal.show(function () {
                callbacks.next()
            })
        },
        setDefaultTrackingStatusOn: function () {
            this._setDefaultTrackingStatus("enabled")
        },
        setDefaultTrackingStatusOff: function () {
            this._setDefaultTrackingStatus("disabled")
        },
        _setDefaultTrackingStatus: function (value) {
            BB.Data.streakSettings.setSettingValue("tracking_default_on_setting", [value]);
            this.exit();
            NotificationCenter.notify({
                eventName: "defaultTrackingSettingChanged"
            })
        }
    });
    Library.set("BentoBox.Modules.Tours.PixelTrackingTour", PixelTrackingTour)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackingShareModalViewController = Streak.Class.subclass({
        superclass: Streak.UI.ViewController,
        _memberVariables: [{
            name: "_doneButton",
            destroy: false
        }, {
            name: "_contactsChooserViewController",
            destroy: true
        }, {
            name: "_emailBodyTextarea",
            destroy: true
        }, {
            name: "_selectedContacts",
            destroy: false
        }, {
            name: "_doneCallback",
            destroy: false
        }],
        _initialize: function () {
            Streak.UI.ViewController.prototype._initialize.call(this)
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Modules.PixelTrackingShareModalView");
            this._setupElements()
        },
        _setupElements: function () {
            this._setupContactsChooser();
            this._setupEmailBody();
            this._setupModal()
        },
        _setupContactsChooser: function () {
            this._contactsChooserViewController = Library.getInstance("BentoBox.Widgets.ContactsChooserViewController");
            this._contactsChooserViewController.addDelegate(this);
            this._view.setContactsChooserView(this._contactsChooserViewController.getView())
        },
        _setupEmailBody: function () {
            this._emailBodyTextarea = Library.getInstance("BentoBox.Widgets.GmailTextareaViewController");
            this._view.setEmailBodyView(this._emailBodyTextarea.getView());
            this._emailBodyTextarea.setHTML("Hey there, <br><br>I just started using Streak's awesome extension for tracking emails. It lets you know when people open the emails you send. I'm using it and you should too! <a href=\"https://www.streak.com/email-tracking-in-gmail\">Download it here.</a>")
        },
        _setupModal: function () {
            var self = this;
            this._view.setupModal(_.bind(this._sendEmails, this), _.bind(this._cancel, this))
        },
        _cancel: function () {
            this._doneCallback()
        },
        _sendEmails: function () {
            this._view.showSending();
            var emailPackages = this._createEmailPackages();
            var packageLength = emailPackages.length;
            var self = this;
            BB.Services.PixelTrackingLimiter.registerInvitesSent(this._getSelectedEmailAddresses());
            BB.MailHelper.sendMultipleEmails({
                emailPackages: emailPackages,
                finishedSendingCallback: function () {
                    self._doneCallback();
                    self.destroy()
                }
            });
            BB.Tracker.track("sharing pixel tracking", {
                numberOfEmails: packageLength
            });
            self._view.hideModalButtons();
            return true
        },
        _getSelectedEmailAddresses: function () {
            return _.pluck(this._selectedContacts, "email")
        },
        _createEmailPackages: function () {
            var bodyText = this._emailBodyTextarea.getHTML();
            return _.map(this._selectedContacts, function (contact) {
                return {
                    toAddresses: [contact.email],
                    body: bodyText,
                    subject: "Try out Streak's Email Tracking extension!"
                }
            })
        },
        selectedContactsChanged: function (selectedContacts) {
            this._selectedContacts =
                selectedContacts;
            if (selectedContacts.length >= 5) this._doneButton.enable();
            else this._doneButton.disable()
        },
        show: function (doneCallback) {
            this._doneCallback = doneCallback;
            this._doneButton = this._view.show();
            this._doneButton.disable();
            BB.Tracker.track("share pixel tracking prompt")
        }
    });
    Library.set("BentoBox.Modules.PixelTrackingShareModalViewController", PixelTrackingShareModalViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackingShareModalView = Streak.Class.subclass({
        superclass: Streak.UI.View,
        _memberVariables: [{
            name: "_modal",
            destroy: true
        }, {
            name: "_doneButton",
            destroy: false
        }, {
            name: "_cancelButton",
            destroy: false
        }],
        _initialize: function () {
            Streak.UI.View.prototype._initialize.call(this)
        },
        _setupElement: function () {
            this._element = HTML.getElement("pixelTrackingShareModal");
            this._element.find(".streak__pixelTrackingShareModal_setup").show();
            this._element.find(".streak__pixelTrackingShareModal_sending").hide()
        },
        setupModal: function (confirmFunction, cancelFunction) {
            this._modal = BB.Widgets.Modal.create({
                title: "Unlock Unlimited Email Tracking",
                inner: this._element,
                confirmFunc: confirmFunction,
                confirmText: "Unlock Unlimited",
                cancelFunc: cancelFunction,
                width: "510px"
            })
        },
        setContactsChooserView: function (contactsChooserView) {
            this._element.find(".streak__pixelTrackingShareModal_chooseContacts").html(contactsChooserView.getElement())
        },
        setEmailBodyView: function (emailBodyView) {
            this._element.find(".streak__pixelTrackingShareModal_emailBodyInput").html(emailBodyView.getElement())
        },
        show: function () {
            this._modal.show();
            return this._modal.getOkButton()
        },
        showSending: function () {
            this._element.find(".streak__pixelTrackingShareModal_setup").hide();
            this._element.find(".streak__pixelTrackingShareModal_sending").show()
        },
        hideModalButtons: function () {
            this._modal.getOkButton().getElement().hide();
            this._modal.getCancelButton().getElement().hide()
        }
    });
    Library.set("BentoBox.Modules.PixelTrackingShareModalView", PixelTrackingShareModalView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ContactsChooserEntryView = Streak.Class.subclass({
        superclass: Streak.UI.View,
        _memberVariables: [],
        _initialize: function () {
            Streak.UI.View.prototype._initialize.call(this);
            this._element = HTML.getElement("contactsChooserContact")
        },
        setContent: function (imageUrl, name,
            tag) {
            var suggestionElement = $(BB.Contacts.suggestionTemplate({
                image: imageUrl,
                name: name,
                tag: tag
            })).children().unwrap();
            this._element.find(".aclRowContent").append(suggestionElement)
        },
        setCheckbox: function (checkbox) {
            this._element.find(".selectionCheckbox").html(checkbox)
        },
        setChecked: function (value) {
            this._element.toggleClass("bbChecked", value)
        }
    });
    Library.set("BentoBox.Widgets.ContactsChooserEntryView", ContactsChooserEntryView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ContactsChooserEntryViewController = Streak.Class.subclass({
        superclass: Streak.UI.ViewController,
        _memberVariables: [{
            name: "_checkbox",
            destroy: true
        }, {
            name: "_person",
            destroy: true,
            get: true
        }],
        _initialize: function () {
            Streak.UI.ViewController.prototype._initialize.call(this)
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Widgets.ContactsChooserEntryView");
            this._setupCheckbox();
            this._bindEvents()
        },
        _setupCheckbox: function () {
            this._checkbox = Gmail.widgets.getCheckbox("");
            this._view.setCheckbox(this._checkbox);
            var self = this;
            this._checkbox.bind("change", function () {
                self._view.setChecked(self.isChecked());
                self._callDelegateFunction("entryCheckStateChanged")
            })
        },
        _bindEvents: function () {
            var self = this;
            this._view.getElement().on("click", function () {
                self._checkbox.click()
            })
        },
        setChecked: function (value) {
            this._checkbox.setChecked(value);
            this._view.setChecked(value)
        },
        isChecked: function () {
            return this._checkbox.isChecked()
        },
        setPerson: function (person) {
            var image = person.imageUrl;
            var name = person.fullName || person.email;
            var tag = person.fullName ? person.email : "&nbsp;";
            this._view.setContent(image, name, tag);
            this._person = person
        }
    });
    Library.set("BentoBox.Widgets.ContactsChooserEntryViewController", ContactsChooserEntryViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ContactsChooserView = Streak.Class.subclass({
        superclass: Streak.UI.View,
        _memberVariables: [],
        _initialize: function () {
            Streak.UI.View.prototype._initialize.call(this);
            this._element = HTML.getElement("contactsChooser")
        },
        showIndexingMessage: function () {
            this._element.find(".streak__contactsChooser_list").hide();
            this._element.find(".streak__contactsChooser_indexing").show();
            this._element.find(".streak__contactsChooser_noContacts").hide()
        },
        showNoContacts: function () {
            this._element.find(".streak__contactsChooser_list").hide();
            this._element.find(".streak__contactsChooser_indexing").hide();
            this._element.find(".streak__contactsChooser_noContacts").show()
        },
        addContactEntryView: function (contactEntryView, prepend) {
            this._element.find(".streak__contactsChooser_list").show();
            this._element.find(".streak__contactsChooser_indexing").fastHide();
            this._element.find(".streak__contactsChooser_noContacts").fastHide();
            var addFunction = "append";
            if (prepend) addFunction = "prepend";
            this._element.find(".streak__contactsChooser_list")[addFunction](contactEntryView.getElement())
        },
        setPersonPickerView: function (personPickerView) {
            this._element.find(".streak__contactsChooser_input").append(personPickerView.getElement())
        },
        setAddButtonView: function (addButtonView) {
            this._element.find(".streak__contactsChooser_input").append(addButtonView.getElement())
        }
    });
    Library.set("BentoBox.Widgets.ContactsChooserView",
        ContactsChooserView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ContactsChooserViewController = Streak.Class.subclass({
        superclass: Streak.UI.ViewController,
        _memberVariables: [{
            name: "_personPicker",
            destroy: true
        }, {
            name: "_addPersonButton",
            destroy: true
        }, {
            name: "_excludedPeople",
            destroy: true
        }, {
            name: "_contactEntryViewControllers",
            destroy: true
        }],
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Widgets.ContactsChooserView")
        },
        _initialize: function () {
            Streak.UI.ViewController.prototype._initialize.call(this);
            this._contactEntryViewControllers = [];
            this._excludedPeople = [];
            this._view.showIndexingMessage();
            this._setupPersonPicker();
            this._setupAddPersonButton();
            this._setupTopContacts()
        },
        _setupPersonPicker: function () {
            var self = this;
            this._personPicker = BB.Widgets.PersonPicker.create({
                selectFunc: function (person) {
                    self._renderContact(person, true);
                    self.entryCheckStateChanged()
                },
                allowName: false
            });
            this._view.setPersonPickerView(this._personPicker)
        },
        _setupAddPersonButton: function () {
            var self = this;
            this._addPersonButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Gmail",
                color: "red",
                text: BB.Locale.getString("add"),
                onFunction: function () {
                    self._personPicker.selectItem()
                }
            });
            this._view.setAddButtonView(this._addPersonButton)
        },
        _setupTopContacts: function () {
            var self = this;
            BB.Contacts.getTopContacts(function (results) {
                results = results || [];
                if (results.length ===
                    0) self._view.showNoContacts();
                else _(results).chain().filter(function (person) {
                    return person.email !== BB.getUser().get("email") && person.fullName !== person.email
                }).each(function (person) {
                    self._renderContact(person, false)
                })
            }, 50)
        },
        _renderContact: function (person, isChecked) {
            var contactEntry = Library.getInstance("BentoBox.Widgets.ContactsChooserEntryViewController");
            contactEntry.setPerson(person);
            contactEntry.setChecked(isChecked);
            contactEntry.addDelegate(this);
            this._view.addContactEntryView(contactEntry.getView(),
                isChecked);
            this._contactEntryViewControllers.push(contactEntry);
            this._excludedPeople.push(person.email);
            this._updateExcludedPeople()
        },
        _updateExcludedPeople: function () {
            this._personPicker.setExcluded(this._excludedPeople)
        },
        entryCheckStateChanged: function () {
            this._callDelegateFunction("selectedContactsChanged", this.getSelectedContacts())
        },
        getSelectedContacts: function () {
            return _.chain(this._contactEntryViewControllers).filter(function (entry) {
                return entry.isChecked()
            }).map(function (entry) {
                return entry.getPerson()
            }).value()
        }
    });
    Library.set("BentoBox.Widgets.ContactsChooserViewController", ContactsChooserViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailTextareaViewController = Streak.Class.subclass({
        superclass: Streak.UI.ViewController,
        memberVariables: [{
            name: "_plainTextOnly",
            defaultValue: false,
            destroy: true
        }],
        _initialize: function (options) {
            Streak.UI.ViewController.prototype._initialize.call(this);
            if (options &&
                options.plainTextOnly !== undefined) this._plainTextOnly = options.plainTextOnly;
            if (this._plainTextOnly) this._view.addClass("streak__gmailTextarea_textOnly")
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Widgets.GmailTextareaView")
        },
        getHTML: function () {
            return this._view.getHTML()
        },
        setHTML: function (html) {
            return this._view.setHTML(html)
        },
        getText: function () {
            return this._view.getText()
        }
    });
    Library.set("BentoBox.Widgets.GmailTextareaViewController", GmailTextareaViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailTextareaView = Streak.Class.subclass({
        superclass: Streak.UI.View,
        _memberVariables: [{
            name: "_innerElement",
            destroy: true
        }],
        _initialize: function () {
            Streak.UI.View.prototype._initialize.call(this)
        },
        _setupElement: function () {
            this._element = $('<div class="streak__gmailTextarea"></div>');
            this._innerElement = $('<div class="R5" contenteditable="true"></div>');
            this._element.html(this._innerElement);
            this._element.addClass("aco");
            this._setupBindings()
        },
        _setupBindings: function () {
            var self = this;
            this._innerElement.focus(function () {
                self._element.removeClass("aco");
                self._element.addClass("acm")
            });
            this._innerElement.blur(function () {
                self._element.removeClass("acm");
                self._element.addClass("aco")
            })
        },
        getHTML: function () {
            return this._innerElement[0].innerHTML
        },
        setHTML: function (html) {
            this._innerElement[0].innerHTML =
                html
        },
        getText: function () {
            return this._innerElement.plainText()
        }
    });
    Library.set("BentoBox.Widgets.GmailTextareaView", GmailTextareaView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var RapportiveSidebarMasterController = Streak.Class.subclass({
        className: "RapportiveSidebarMasterController",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_activeSidebar",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            Gmail.observe("conversationThreadLoadedEvent", this._handleConversationLoaded.bind(this))
        },
        _handleConversationLoaded: function () {
            if (!Gmail.isRapportiveInstalled()) return;
            if (this._activeSidebar) this._activeSidebar.destroy();
            this._activeSidebar = Library.getInstance("BentoBox.Modules.RapportiveSidebarViewController")
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "rapportiveSidebarMasterControllerInitialized",
        functionToCall: function (callback) {
            Library.set("BentoBox.Modules.RapportiveSidebarMasterController",
                new RapportiveSidebarMasterController);
            if (callback) callback()
        },
        dependentFunctionKeys: ["userLoggedIn"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var _hideRapportiveCSSRule;
    var RapportiveSidebarViewController = Streak.Class.subclass({
        className: "RapportiveSidebarViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_sidebarId",
            destroy: true
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this);
            var view = this._view;
            this._sidebarId = BB.Modules.TabbedSidebarMaster.registerNewSidebar({
                prettyTitle: "rapportive",
                sidebar: this,
                priority: 2,
                dontShowIfOnlyTab: true,
                iconClass: "streak__rapportive_icon",
                dependentTabIdentifiers: ["pixelTrackerSidebar"]
            }, BB.Threads.getActiveThread().key())
        },
        getElement: function () {
            return this._view.getElement()
        },
        sidebarShown: function () {
            this._removeHideRapportiveCSSRule()
        },
        sidebarHidden: function () {
            this._addHideRapportiveCSSRule()
        },
        addedToSidebar: function () {
            this._addHideRapportiveCSSRule()
        },
        notAddedToSidebar: function () {
            this._removeHideRapportiveCSSRule()
        },
        _addHideRapportiveCSSRule: function () {
            if (_hideRapportiveCSSRule) return;
            _hideRapportiveCSSRule = Streak.CSSStyleManipulator.addRule("#rapportive-sidebar {visibility: hidden;}")
        },
        _removeHideRapportiveCSSRule: function () {
            if (_hideRapportiveCSSRule) {
                _hideRapportiveCSSRule.destroy();
                _hideRapportiveCSSRule = null
            }
        },
        destroy: function () {
            if (_hideRapportiveCSSRule) {
                _hideRapportiveCSSRule.destroy();
                _hideRapportiveCSSRule = null
            }
            BB.Modules.TabbedSidebarMaster.removeSidebar(this._sidebarId);
            UI.ViewController.prototype.destroy.call(this)
        }
    });
    Library.set("BentoBox.Modules.RapportiveSidebarViewController", RapportiveSidebarViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var SearchableListViewController = Streak.Class.subclass({
        className: "SearchableListViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_dataSource",
            destroy: false,
            set: true
        }, {
            name: "_searchViewController",
            destroy: true
        }, {
            name: "_listViewController",
            destroy: true
        }, {
            name: "_visibleSectionsAndRows",
            destroy: true
        }, {
            name: "_shouldLockSelection",
            destroy: false,
            set: true
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this);
            this._shouldLockSelection = true;
            this._view.getElement().addClass("streak__searchableList");
            this._visibleSectionsAndRows = [];
            this._setupSearchController();
            this._setupListController();
            this._searchViewController.addDelegate(this._listViewController)
        },
        _setupSearchController: function () {
            this._searchViewController = new BB.Widgets.SearchSimpleVC;
            this._searchViewController.addDelegate(this);
            this._view.addSubview(this._searchViewController.getView())
        },
        _setupListController: function () {
            this._listViewController = new BB.Widgets.ListView.ListViewViewController;
            this._listViewController.addDelegate(this);
            this.addDelegate(this._listViewController);
            this._view.addSubview(this._listViewController.getView())
        },
        setPlaceholder: function (placeholder) {
            this._searchViewController.setPlaceholder(placeholder)
        },
        setDataSource: function (dataSource) {
            this._dataSource = dataSource;
            this._listViewController.setDataSource(this);
            this.queryChange()
        },
        _setupVisibleSectionsAndRows: function () {
            var query = this._searchViewController.getQuery().toLowerCase();
            this._visibleSectionsAndRows.length = 0;
            var numberOfSections = this._dataSource.getNumberOfSections();
            for (var sectionIndex = 0; sectionIndex < numberOfSections; sectionIndex++) {
                var numberOfRows = this._dataSource.getNumberOfRows(sectionIndex);
                var matchingRowIndexes = [];
                for (var rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {
                    var searchString = this._dataSource.getRowSearchString(sectionIndex,
                        rowIndex);
                    if (this._doesQueryMatchSearchString(query, searchString)) matchingRowIndexes.push(rowIndex)
                }
                if (matchingRowIndexes.length > 0) this._addVisibleSection(sectionIndex, matchingRowIndexes)
            }
        },
        _doesQueryMatchSearchString: function (query, searchString) {
            return !query || searchString && searchString.toLowerCase().indexOf(query) > -1
        },
        _addVisibleSection: function (sectionIndex, matchingRowIndexes) {
            this._visibleSectionsAndRows.push({
                sectionIndex: sectionIndex,
                matchingRowIndexes: matchingRowIndexes
            })
        },
        getSearchInputViewController: function () {
            return this._searchViewController
        },
        numberOfSections: function () {
            return this._visibleSectionsAndRows.length
        },
        sectionShouldShow: function (sectionIndex) {
            return true
        },
        numberOfRowsForSection: function (sectionIndex) {
            var visibleSectionObject = this._visibleSectionsAndRows[sectionIndex];
            return visibleSectionObject.matchingRowIndexes.length
        },
        infoForRow: function (sectionIndex, rowIndex) {
            var visibleSectionObject = this._visibleSectionsAndRows[sectionIndex];
            var realSectionIndex = visibleSectionObject.sectionIndex;
            var realRowIndex = visibleSectionObject.matchingRowIndexes[rowIndex];
            return this._dataSource.getRowData(realSectionIndex, realRowIndex)
        },
        sectionTitle: function (sectionIndex) {
            var visibleSectionObject = this._visibleSectionsAndRows[sectionIndex];
            return this._dataSource.getSectionTitle(visibleSectionObject.sectionIndex)
        },
        doesSectionToggle: function () {
            return true
        },
        focus: function () {
            this._searchViewController.focus()
        },
        reset: function () {
            this._listViewController.reset()
        },
        rowFocused: function (rowData) {
            this._callDelegateFunction("rowHighlighted", rowData)
        },
        rowPressed: function (rowData) {
            this._callDelegateFunction("rowSelected",
                rowData);
            if (!this._shouldLockSelection) this._listViewController.reset()
        },
        queryChange: function () {
            this._setupVisibleSectionsAndRows();
            this._callDelegateFunction("dataChanged");
            this._callDelegateFunction("queryChange", this._searchViewController.getQuery())
        },
        keydown: function (event) {
            this._callDelegateFunction("keydown", event)
        }
    });
    Library.set("BentoBox.Widgets.SearchableListViewController", SearchableListViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var NoticeView = Streak.Class.subclass({
        className: "NoticeView",
        superclass: UI.View,
        _memberVariables: [{
            name: "_innerMessage",
            destroy: true
        }],
        _initialize: function () {
            UI.View.prototype._initialize.call(this)
        },
        _setupElement: function () {
            UI.View.prototype._setupElement.call(this);
            this._element.addClass("b8 streak__notice");
            this._innerMessage = $(document.createElement("div"));
            this._innerMessage.addClass("vh");
            this._element.html(this._innerMessage)
        },
        setMessage: function (message) {
            this._innerMessage[0].innerHTML = message
        },
        show: function () {
            Gmail.elements.body.append(this._element)
        },
        hide: function () {
            this._element.detach()
        }
    });
    Library.set("BentoBox.UI.NoticeView", NoticeView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var NoticeViewController = Streak.Class.subclass({
        className: "NoticeViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_currentlyShowing",
            destroy: false
        }, {
            name: "_currentTimeout",
            destroy: false
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this)
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.UI.NoticeView")
        },
        show: function (message, delay) {
            clearTimeout(this._currentTimeout);
            this._view.setMessage(message);
            this._view.show();
            if (delay) this._currentTimeout = setTimeout(this.hide.bind(this), delay)
        },
        hide: function () {
            this._view.hide()
        }
    });
    Library.set("BentoBox.UI.NoticeViewController", new NoticeViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var HelpModalView = Streak.Class.subclass({
        className: "HelpModalView",
        superclass: UI.View,
        _memberVariables: [],
        _initialize: function () {
            UI.View.prototype._initialize.call(this)
        },
        _setupElement: function () {
            this._element = HTML.getElement("helpModal");
            this._bindToElements()
        },
        _bindToElements: function () {
            this._bindToTopClick();
            this._bindToBackButton();
            this._bindToMinimize();
            this._bindToRestore();
            this._bindToClose()
        },
        _bindToTopClick: function () {
            var self = this;
            this._element.find(".streak__helpModal_top").on("click", function (e) {
                if (e.target.tagName === "INPUT" || $(e.target).parents("input").length > 0) return;
                self._callDelegateFunction("topClicked")
            })
        },
        toggleTopClickableClass: function (value) {
            this._element.find(".streak__helpModal_top").toggleClass("streak__helpModal_topClickable", value)
        },
        _bindToBackButton: function () {
            var self = this;
            this._element.find(".streak__helpModal_top_backButton").on("click", function (e) {
                self._callDelegateFunction("backButtonClicked");
                e.stopPropagation()
            })
        },
        _bindToMinimize: function () {
            var self = this;
            this._element.find(".streak__helpModal_top_buttons_minimize").on("click", function (e) {
                self._callDelegateFunction("minimizeClicked");
                e.stopPropagation()
            })
        },
        _bindToRestore: function () {
            var self = this;
            this._element.find(".streak__helpModal_top_buttons_restore").on("click", function (e) {
                self._callDelegateFunction("restoreClicked");
                e.stopPropagation()
            })
        },
        _bindToClose: function () {
            var self = this;
            this._element.find(".streak__helpModal_top_buttons_close").on("click", function (e) {
                self._callDelegateFunction("closeClicked");
                e.stopPropagation()
            })
        },
        showBackButton: function () {
            this._element.find(".streak__helpModal_top_backButton").show()
        },
        hideBackButton: function () {
            this._element.find(".streak__helpModal_top_backButton").hide()
        },
        setIconClass: function (className) {
            this._element.find("[role=streak__icon]")[0].setAttribute("class", className)
        },
        setTitleText: function (text) {
            this._element.find(".streak__helpModal_top_main").html(text)
        },
        setTitleView: function (view) {
            this._element.find(".streak__helpModal_top_main").html(view.getElement())
        },
        hideContent: function () {
            this._element.find(".streak__helpModal_content").hide()
        },
        showContent: function () {
            this._element.find(".streak__helpModal_content").show()
        },
        showMinimize: function () {
            this._element.find(".streak__helpModal_top_buttons_minimize").show()
        },
        hideMinimize: function () {
            this._element.find(".streak__helpModal_top_buttons_minimize").hide()
        },
        showRestore: function () {
            this._element.find(".streak__helpModal_top_buttons_restore").show()
        },
        hideRestore: function () {
            this._element.find(".streak__helpModal_top_buttons_restore").hide()
        },
        showClose: function () {
            this._element.find(".streak__helpModal_top_buttons_close").show()
        },
        hideClose: function () {
            this._element.find(".streak__helpModal_top_buttons_close").hide()
        },
        setContentHTML: function (html) {
            this._element.find(".streak__helpModal_content").html(html)
        },
        setContentView: function (view) {
            this._element.find(".streak__helpModal_content").html(view.getElement())
        },
        addClass: function (className) {
            this._element.addClass(className)
        },
        removeClass: function (className) {
            this._element.removeClass(className)
        },
        hideLowerButtonArea: function () {
            this._element.find(".streak__helpModal_buttonArea").hide()
        },
        showLowerButtonArea: function () {
            this._element.find(".streak__helpModal_buttonArea").show()
        },
        addLeftButton: function (button) {
            this._element.find(".streak__helpModal_buttonArea_left").html(button.getElement())
        },
        addRightButton: function (button) {
            this._element.find(".streak__helpModal_buttonArea_right").html(button.getElement())
        }
    });
    Library.set("BentoBox.Widgets.HelpModalView",
        HelpModalView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var HelpModalViewController = Streak.Class.subclass({
        className: "HelpModalViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_titleText",
            destroy: false
        }, {
            name: "_titleViewController",
            destroy: false
        }, {
            name: "_isTopClickable",
            destroy: false
        }, {
            name: "_isMinimized",
            destroy: false
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this);
            this._isMinimized = false;
            this._isTopClickable = true
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Widgets.HelpModalView");
            this._view.hideBackButton();
            this._view.showMinimize();
            this._view.hideRestore();
            this._view.hideLowerButtonArea();
            this._view.toggleTopClickableClass(this._isTopClickable)
        },
        topClicked: function () {
            if (!this._isTopClickable) return;
            if (this._isMinimized) {
                this.restoreClicked();
                return
            }
            this.minimizeClicked()
        },
        minimizeClicked: function () {
            if (this._isMinimized) return;
            this._view.hideContent();
            this._view.showRestore();
            this._view.hideMinimize();
            if (this._titleViewController) this._titleViewController.getView().getElement().detach();
            if (this._titleText) this._view.setTitleText(this._titleText);
            this._isMinimized = true;
            this._view.addClass("streak__helpModal_minimized");
            this._callDelegateFunction("minimizeClicked")
        },
        restore: function () {
            this.restoreClicked()
        },
        restoreClicked: function () {
            if (!this._isMinimized) return;
            this._view.showContent();
            this._view.hideRestore();
            this._view.showMinimize();
            this._view.removeClass("streak__helpModal_minimized");
            if (this._titleViewController) this._view.setTitleView(this._titleViewController.getView());
            this._isMinimized = false;
            this._callDelegateFunction("restoreClicked")
        },
        closeClicked: function () {
            this._callDelegateFunction("closeClicked")
        },
        backButtonClicked: function () {
            this._callDelegateFunction("backButtonClicked")
        },
        showBackButton: function () {
            this._view.showBackButton()
        },
        hideBackButton: function () {
            this._view.hideBackButton()
        },
        setIconClass: function (className) {
            this._view.setIconClass(className)
        },
        setTitleText: function (text) {
            this._titleText = text;
            if (!this._titleViewController) this._view.setTitleText(text)
        },
        setTitleViewController: function (titleViewController) {
            this._titleViewController = titleViewController;
            this._view.setTitleView(titleViewController.getView())
        },
        setContentHTML: function (html) {
            this._view.setContentHTML(html)
        },
        setContentViewController: function (contentViewController) {
            this._view.setContentView(contentViewController.getView())
        },
        setTopClickable: function (value) {
            this._isTopClickable = value;
            this._view.toggleTopClickableClass(value)
        },
        showMinimize: function () {
            this._view.showMinimize()
        },
        hideMinimize: function () {
            this._view.hideMinimize()
        },
        showClose: function () {
            this._view.showClose()
        },
        hideClose: function () {
            this._view.hideClose()
        },
        addLeftButton: function (leftButton) {
            this._view.showLowerButtonArea();
            this._view.addLeftButton(leftButton)
        },
        addRightButton: function (rightButton) {
            this._view.showLowerButtonArea();
            this._view.addRightButton()
        }
    });
    Library.set("BentoBox.Widgets.HelpModalViewController", HelpModalViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var ARROW_HORIZONTAL_HEIGHT = 15,
        ARROW_HORIZONTAL_WIDTH = 32,
        ARROW_VERTICAL_HEIGHT = 32,
        ARROW_VERTICAL_WIDTH = 15;
    var TooltipViewController = Streak.Class.subclass({
        className: "TooltipViewController",
        superclass: UI.ViewController,
        _memberVariables: [{
            name: "_leftButton",
            destroy: true
        }, {
            name: "_rightButton",
            destroy: true
        }, {
            name: "_target",
            destroy: false
        }, {
            name: "_targetSelector",
            destroy: false
        }, {
            name: "_placement",
            destroy: false
        }, {
            name: "_elementChecker",
            destroy: true
        }],
        _initialize: function () {
            UI.ViewController.prototype._initialize.call(this)
        },
        _setupView: function () {
            this._view = Library.getInstance("BentoBox.Widgets.TooltipView")
        },
        setTitle: function (title) {
            this._view.setTitle(title)
        },
        setContent: function (content) {
            this._view.setContent(content)
        },
        setActionContent: function (content) {
            this._view.showActionBox();
            this._view.setActionContent(content)
        },
        addLeftButton: function (name, callback) {
            this._view.showActionBox();
            this._leftButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Gmail",
                color: "blue",
                text: name,
                onFunction: callback
            });
            this._view.addLeftButton(this._leftButton)
        },
        addRightButton: function (name, callback) {
            this._view.showActionBox();
            this._rightButton = BB.Widgets.Buttons.ButtonFactory.createButton({
                type: "Gmail",
                color: "blue",
                text: name,
                onFunction: callback
            });
            this._view.addRightButton(this._rightButton)
        },
        removeLeftButton: function () {
            if (this._leftButton) this._leftButton.destroy();
            if (this._rightButton) return;
            this._view.hideActionBox()
        },
        removeRightButton: function () {
            if (this._RightButton) this._RightButton.destroy();
            if (this._leftButton) return;
            this._view.hideActionBox()
        },
        setTarget: function (selector) {
            this._target = $(selector);
            this._targetSelector = selector
        },
        setPlacement: function (placement) {
            this._placement = placement
        },
        closeClicked: function () {
            this._callDelegateFunction("closeClicked")
        },
        show: function () {
            this._view.hideArrow();
            this._view.show();
            if (this._target.length === 0) this._target = $(this._targetSelector);
            if (this._target.length === 0) {
                this._callDelegateFunction("elementNotFound");
                return
            }
            var targetBoundingBox = this._target.getBoundingBox(true);
            var tipBoundingBox = this._view.getElement().getBoundingBox(true);
            var theBoundingBoxWrapperToUse;
            if (this._placement) theBoundingBoxWrapperToUse = this._getPlacementBoundingBox(targetBoundingBox, tipBoundingBox);
            else theBoundingBoxWrapperToUse = this._getAutomaticPlacementBoundingBox(targetBoundingBox,
                tipBoundingBox);
            var containedBoundingBox = this._containBoundingBox(theBoundingBoxWrapperToUse.value);
            this._setPositionAtBoundingBox(containedBoundingBox);
            this._setArrowPosition(theBoundingBoxWrapperToUse.type, containedBoundingBox, targetBoundingBox);
            this._startCheckingForTarget()
        },
        _getPlacementBoundingBox: function (targetBoundingBox, tipBoundingBox) {
            var boundingBox = this["_get" + this._placement.position.capitalize() + "PositionBoundingBox"](targetBoundingBox, tipBoundingBox);
            if (this._placement.top) {
                var topOffset =
                    0;
                if (this._placement.tipOffsetFromArrow && this._placement.tipOffsetFromArrow.top) topOffset = this._placement.tipOffsetFromArrow.top;
                boundingBox[0].y = targetBoundingBox[0].y - tipBoundingBox.height / 2 + this._placement.top + topOffset;
                boundingBox[1].y = boundingBox[0].y + tipBoundingBox.height
            }
            if (this._placement.left) {
                var leftOffset = 0;
                if (this._placement.tipOffsetFromArrow && this._placement.tipOffsetFromArrow.left) leftOffset = this._placement.tipOffsetFromArrow.left;
                boundingBox[0].x = targetBoundingBox[0].x - tipBoundingBox.width /
                    2 + this._placement.left + leftOffset;
                boundingBox[1].x = boundingBox[0].x + tipBoundingBox.width
            }
            return {
                type: this._placement.position,
                value: boundingBox
            }
        },
        _getAutomaticPlacementBoundingBox: function (targetBoundingBox, tipBoundingBox) {
            var boundingBoxWrappers = [{
                type: "top",
                value: this._getTopPositionBoundingBox(targetBoundingBox, tipBoundingBox)
            }, {
                type: "left",
                value: this._getLeftPositionBoundingBox(targetBoundingBox, tipBoundingBox)
            }, {
                type: "right",
                value: this._getRightPositionBoundingBox(targetBoundingBox, tipBoundingBox)
            }, {
                type: "bottom",
                value: this._getBottomPositionBoundingBox(targetBoundingBox, tipBoundingBox)
            }];
            var bestBoundingBoxWrapper = this._figureOutBestBoundingBox(boundingBoxWrappers);
            return bestBoundingBoxWrapper
        },
        _getTopPositionBoundingBox: function (targetBoundingBox, tipBoundingBox) {
            var top = targetBoundingBox[0].y - tipBoundingBox.height - ARROW_HORIZONTAL_HEIGHT;
            var left = targetBoundingBox[0].x + targetBoundingBox.width / 2 - tipBoundingBox.width / 2;
            return [{
                x: left,
                y: top
            }, {
                x: left + tipBoundingBox.width,
                y: top + tipBoundingBox.height
            }]
        },
        _getRightPositionBoundingBox: function (targetBoundingBox, tipBoundingBox) {
            var left = targetBoundingBox[1].x + ARROW_VERTICAL_WIDTH;
            var top = targetBoundingBox[0].y + targetBoundingBox.height / 2 - tipBoundingBox.height / 2;
            return [{
                x: left,
                y: top
            }, {
                x: left + tipBoundingBox.width,
                y: top + tipBoundingBox.height
            }]
        },
        _getBottomPositionBoundingBox: function (targetBoundingBox, tipBoundingBox) {
            var top = targetBoundingBox[1].y + ARROW_HORIZONTAL_HEIGHT;
            var left = targetBoundingBox[0].x + targetBoundingBox.width / 2 - tipBoundingBox.width / 2;
            return [{
                x: left,
                y: top
            }, {
                x: left + tipBoundingBox.width,
                y: top + tipBoundingBox.height
            }]
        },
        _getLeftPositionBoundingBox: function (targetBoundingBox, tipBoundingBox) {
            var left = targetBoundingBox[0].x - ARROW_VERTICAL_WIDTH - tipBoundingBox.width;
            var top = targetBoundingBox[0].y + targetBoundingBox.height / 2 - tipBoundingBox.height / 2;
            return [{
                x: left,
                y: top
            }, {
                x: left + tipBoundingBox.width,
                y: top + tipBoundingBox.height
            }]
        },
        _figureOutBestBoundingBox: function (boundingBoxWrappers) {
            for (var ii = 0; ii < boundingBoxWrappers.length; ii++) boundingBoxWrappers[ii].smallestDistance =
                this._getSmallestDistance(boundingBoxWrappers[ii]);
            return _.sortBy(boundingBoxWrappers, function (boundingBoxWrapper) {
                return boundingBoxWrapper.smallestDistance
            }).reverse()[0]
        },
        _getSmallestDistance: function (boundingBoxWrapper) {
            var distances = [boundingBoxWrapper.value[0].y, boundingBoxWrapper.value[0].x, document.body.clientWidth - boundingBoxWrapper.value[1].x, document.body.clientHeight - boundingBoxWrapper.value[1].y];
            return _.sortBy(distances, function (distance) {
                return distance
            })[0]
        },
        _containBoundingBox: function (boundingBox) {
            var boundingBoxHeight =
                boundingBox[1].y - boundingBox[0].y;
            var boundingBoxWidth = boundingBox[1].x - boundingBox[1].x;
            if (boundingBox[0].y < -1) {
                boundingBox[0].y = 0;
                boundingBox[1].y = boundingBox[0].y + boundingBoxHeight
            } else if (boundingBox[1].y > document.body.clientHeight) {
                boundingBox[0].y = document.body.clientHeight - boundingBoxHeight;
                boundingBox[1].y = boundingBox[0].y + boundingBoxHeight
            }
            if (boundingBox[0].x < -1) {
                boundingBox[0].x = 0;
                boundingBox[1].x = boundingBox[0].x + boundingBoxWidth
            } else if (boundingBox[1] > document.body.clientWidth) {
                boundingBox[0].x =
                    document.body.clientWidth - boundingBoxWidth;
                boundingBox[1].x = boundingBox[0].x + boundingBoxWidth
            }
            return boundingBox
        },
        _setPositionAtBoundingBox: function (boundingBox) {
            this._view.setPosition({
                top: boundingBox[0].y,
                left: boundingBox[0].x
            })
        },
        _setArrowPosition: function (type, containedBoundingBox, targetBoundingBox) {
            var position = {};
            if (this._placement) {
                this._setArrowPositionWithPlacement(type, containedBoundingBox);
                return
            }
            switch (type) {
            case "top":
                position.top = targetBoundingBox[0].y - ARROW_HORIZONTAL_HEIGHT;
                position.left =
                    (targetBoundingBox[0].x + targetBoundingBox[1].x) / 2 - ARROW_HORIZONTAL_WIDTH / 2;
                break;
            case "left":
                position.top = (targetBoundingBox[0].y + targetBoundingBox[1].y) / 2 - ARROW_VERTICAL_HEIGHT / 2;
                position.left = targetBoundingBox[0].x - ARROW_VERTICAL_WIDTH;
                break;
            case "right":
                position.top = (targetBoundingBox[0].y + targetBoundingBox[1].y) / 2 - ARROW_VERTICAL_HEIGHT / 2;
                position.left = targetBoundingBox[1].x;
                break;
            case "bottom":
                position.top = targetBoundingBox[1].y;
                position.left = (targetBoundingBox[0].x + targetBoundingBox[1].x) / 2 -
                    ARROW_HORIZONTAL_WIDTH / 2;
                break
            }
            this._view.showArrow(type, position)
        },
        _setArrowPositionWithPlacement: function (type, containedBoundingBox) {
            var position = {};
            switch (type) {
            case "top":
                position.top = containedBoundingBox[1].y;
                position.left = (containedBoundingBox[0].x + containedBoundingBox[1].x) / 2 - ARROW_HORIZONTAL_WIDTH / 2;
                break;
            case "left":
                position.top = (containedBoundingBox[0].y + containedBoundingBox[1].y) / 2 - ARROW_VERTICAL_HEIGHT / 2;
                position.left = containedBoundingBox[1].x;
                break;
            case "right":
                position.top = (containedBoundingBox[0].y +
                    containedBoundingBox[1].y) / 2 - ARROW_VERTICAL_HEIGHT / 2;
                position.left = containedBoundingBox[0].x - ARROW_VERTICAL_WIDTH;
                break;
            case "bottom":
                position.top = containedBoundingBox[0].y - ARROW_HORIZONTAL_HEIGHT;
                position.left = (containedBoundingBox[0].x + containedBoundingBox[1].x) / 2 - ARROW_HORIZONTAL_WIDTH / 2;
                break
            }
            if (this._placement.tipOffsetFromArrow) {
                if (this._placement.tipOffsetFromArrow.top) position.top -= this._placement.tipOffsetFromArrow.top;
                if (this._placement.tipOffsetFromArrow.left) position.left -= this._placement.tipOffsetFromArrow.left
            }
            this._view.showArrow(type,
                position)
        },
        _startCheckingForTarget: function () {
            var self = this;
            this._elementChecker = _.repeatEvery(function () {
                if (self._target.isVisible()) return;
                self._callDelegateFunction("elementNoLongerFound");
                self.destroy()
            }, 500, true)
        }
    });
    Library.set("BentoBox.Widgets.TooltipViewController", TooltipViewController)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var TooltipView = Streak.Class.subclass({
        className: "TooltipView",
        superclass: UI.View,
        _memberVariables: [{
            name: "_tooltipArrow",
            destroy: true
        }],
        _initialize: function () {
            UI.View.prototype._initialize.call(this);
            this._bindToClose()
        },
        _setupElement: function () {
            this._element =
                HTML.getElement("tooltip");
            this._tooltipArrow = HTML.getElement("tooltip_arrow")
        },
        _bindToClose: function () {
            var self = this;
            this._element.find(".streak__tooltip_close").on("click", function (e) {
                self._callDelegateFunction("closeClicked")
            })
        },
        setTitle: function (title) {
            this._element.find(".streak__tooltip_header_title")[0].innerHTML = title
        },
        setContent: function (content) {
            this._element.find(".streak__tooltip_main_content")[0].innerHTML = content
        },
        setActionContent: function (content) {
            this._element.find(".streak__tooltip_main_actionBox_content").html(content)
        },
        addLeftButton: function (button) {
            this._element.find(".streak__tooltip_main_actionBox_left").html(button.getElement())
        },
        addRightButton: function (button) {
            this._element.find(".streak__tooltip_main_actionBox_right").html(button.getElement())
        },
        showActionBox: function () {
            this._element.find(".streak__tooltip_main_content").addClass("streak__tooltip_main_content_withActionBox");
            this._element.find(".streak__tooltip_main_actionBox")[0].style.display = "flex"
        },
        hideActionBox: function () {
            this._element.find(".streak__tooltip_main_content").removeClass("streak__tooltip_main_content_withActionBox");
            this._element.find(".streak__tooltip_main_actionBox")[0].style.display = "none"
        },
        show: function () {
            Gmail.elements.body.append(this._element)
        },
        setPosition: function (positionObject) {
            this._element.css(positionObject)
        },
        showArrow: function (type, position) {
            Gmail.elements.body.append(this._tooltipArrow);
            this._tooltipArrow[0].setAttribute("class", "streak__tooltip_arrow streak__tooltip_arrow_" + type);
            this._tooltipArrow.css(position);
            this._tooltipArrow.show()
        },
        hideArrow: function () {
            this._tooltipArrow.hide()
        }
    });
    Library.set("BentoBox.Widgets.TooltipView",
        TooltipView)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var GmailTooltip = Streak.Class.subclass({
        className: "GmailTooltip",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_options",
            destroy: false
        }, {
            name: "_tooltipViewController",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        setup: function (options) {
            this._options =
                options;
            this._tooltipViewController = Library.getInstance("BentoBox.Widgets.TooltipViewController")
        },
        show: function () {
            this._tooltipViewController.setTitle(this._options.title);
            this._tooltipViewController.setContent(this._options.body);
            this._tooltipViewController.setTarget(this._options.targetSelector);
            if (this._options.actionContent) this._tooltipViewController.setActionContent(this._options.actionContent);
            if (this._options.leftButton) this._tooltipViewController.addLeftButton(this._options.leftButton.name,
                this._options.leftButton.function);
            if (this._options.rightButton) this._tooltipViewController.addRightButton(this._options.rightButton.name, this._options.rightButton.function);
            if (this._options.placement) this._tooltipViewController.setPlacement(this._options.placement);
            this._tooltipViewController.addDelegate(this);
            this._tooltipViewController.show()
        },
        closeClicked: function () {
            this._options.earlyExitTourFunction("tooltip close clicked")
        },
        elementNotFound: function () {
            this._options.earlyExitTourFunction("tooltip element not found")
        },
        elementNoLongerFound: function () {
            this._options.earlyExitTourFunction("tooltip element disappeared")
        },
        getType: function () {
            return "GMAIL_TOOLTIP"
        }
    });
    Library.set("BentoBox.Widgets.Tour.GmailTooltip", GmailTooltip)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var BAD_EXTENSIONS = ["demimoohidhmolhbphaklnmokjhjgjlf", "fmdomiplhgolgpibfdjjhgbcbkdcfkmk", "gakklmehjhhdfjjgnmpkjoemjmeomnli", "dheionainndbbpoacpnopgmnihkcmnkl", "iffdacemhfpnchinokehhnppllonacfj", "kdadialhpiikehpdeejjeiikopddkjem", "mlomiejdfkolichcflejclcbmpeaniij",
        "bmihblnpomgpjkfddepdpdafhhepdbek", "hpioniioecjjbhbnnbhcifmgmoiibalo"
    ];
    var BadExtensionNotifierGlobalController = Streak.Class.subclass({
        className: "BadExtensionNotifierGlobalController",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            if (this._checkDisabled()) return;
            var self = this;
            Messenger.sendMessage("extensionListRequest", null, "extensionListResponse", this._checkExtensions.bind(this))
        },
        _checkDisabled: function () {
            return BB.LocalSettings.get("warnings/extensionConflictNoticeDisabled")
        },
        _disableCheck: function () {
            BB.LocalSettings.set("warnings/extensionConflictNoticeDisabled", true)
        },
        _checkExtensions: function (appsAndExtensions) {
            var extensions = _.chain(appsAndExtensions).filter(function (appOrExtension) {
                return !appOrExtension.isApp && appOrExtension.mayDisable && appOrExtension.enabled
            }).filter(function (extension) {
                return BAD_EXTENSIONS.indexOf(extension.id) > -1
            }).pluck("name").value();
            if (extensions.length === 0) return;
            this._showWarning(extensions)
        },
        _isCirrusInstalled: function () {
            return $("#ci-sidepanel").length >
                0
        },
        _isSmartrInstalled: function () {
            return Gmail.isXobniInstalled()
        },
        _isSignalInstalled: function () {
            return window.Gmail || window.GmailJS
        },
        _isMightyTextInstalled: function () {
            return $("#gText").length > 0
        },
        _showWarning: function (extensions) {
            var inner = $(document.createElement("div"));
            inner[0].innerHTML = HTML.getString("badExtensionNotifier");
            var ul = $(document.createElement("ul"));
            for (var ii = 0; ii < extensions.length; ii++) ul.append("<li><b>" + extensions[ii] + "</b></li>");
            inner.append(ul);
            var self = this;
            var modal = BB.Widgets.Modal.create({
                title: "Streak Extension Conflicts Found",
                inner: inner,
                showCancel: false,
                showLink: true,
                linkText: "Don't show me this again",
                linkFunc: function () {
                    self._disableCheck();
                    modal.close()
                }
            });
            modal.show()
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "badExtensionNotifierGlobalControllerInitialized",
        functionReference: function () {
            Library.set("BentoBox.Services.BadExtensionNotifierGlobalController", new BadExtensionNotifierGlobalController)
        },
        dependentFunctionKeys: ["htmlLoaded"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackerRecentViewsAjaxInterceptorSource = Streak.Class.subclass({
        className: "PixelTrackerRecentViewsAjaxInterceptorSource",
        superclass: Gmail.AjaxInterceptorSourceBase,
        _memberVariables: [],
        _initialize: function () {
            Gmail.AjaxInterceptorSourceBase.prototype._initialize.call(this)
        },
        isRequestRelevant: function (urlParametres) {
            return urlParametres.q === "label:all before:5000/01/01" && urlParametres.view === "tl"
        },
        getAjaxInterceptor: function () {
            return Library.getInstance("BentoBox.Modules.PixelTrackerRecentViewsAjaxInterceptor")
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerRecentViewsAjaxInterceptorSourceInitialized",
        functionReference: function () {
            var source = new PixelTrackerRecentViewsAjaxInterceptorSource;
            Library.set("BentoBox.Modules.PixelTrackerRecentViewsAjaxInterceptorSource",
                source);
            Gmail.addAjaxInterceptorSource(source)
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        APIRequester = Streak.APIRequester,
        BB = Streak.BentoBox;
    var PixelTrackerRecentViewsAjaxInterceptor = Streak.Class.subclass({
        className: "PixelTrackerRecentViewsAjaxInterceptor",
        superclass: Gmail.AjaxInterceptorBase,
        _memberVariables: [{
            name: "_recentlyViewedThreads",
            destroy: false
        }, {
            name: "_isFinishedGettingRecentlyViewedEmails",
            destroy: false
        }, {
            name: "_isErrorGettingThreadsFromStreak",
            destroy: false
        }, {
            name: "_xhr",
            destroy: false
        }, {
            name: "_resolvePromise",
            destroy: false
        }, {
            name: "_rejectPromise",
            destroy: false
        }, {
            name: "_hasStartedGettingRecentViews",
            destroy: false
        }, {
            name: "_trackedThreads",
            destroy: false
        }],
        _initialize: function () {
            Gmail.AjaxInterceptorSourceBase.prototype._initialize.call(this);
            this._hasStartedGettingRecentViews = false
        },
        requestStatusUpdated: function (xhr) {
            this._xhr = xhr;
            var promise;
            if (xhr.readyState < 3) promise = new Streak.Promise(function (resolve,
                reject) {
                resolve()
            });
            else {
                var self = this;
                promise = new Streak.Promise(function (resolve, reject) {
                    self._resolvePromise = resolve;
                    self._rejectPromise = reject
                });
                this._startGettingListOfRecentViews()
            }
            return promise
        },
        _startGettingListOfRecentViews: function () {
            if (this._hasStartedGettingRecentViews) {
                this._checkStateAndModifyResponse();
                return
            }
            this._getListOfRecentlyReadTrackedThreads()
        },
        _getListOfRecentlyReadTrackedThreads: function () {
            this._hasStartedGettingRecentViews = true;
            NotificationCenter.notify("pixelTracker.gettingRecentlyViewedThreads");
            Streak.APIRequester.getUrl("trackedthreads/recent", this._handleListOfRecentlyReadTrackedThreads.bind(this), this._handleErrorGettingListOfRecentlyReadTrackedThreads.bind(this))
        },
        _handleErrorGettingListOfRecentlyReadTrackedThreads: function () {
            this._isErrorGettingThreadsFromStreak = true;
            this._checkStateAndModifyResponse()
        },
        _handleListOfRecentlyReadTrackedThreads: function (trackedThreads) {
            this._trackedThreads = _filterTrackedThreadsWithNoViewDate(trackedThreads);
            var rfcMessageIds = _extractMessageIdsFromTrackedThreads(this._trackedThreads);
            Gmail.GmailThreadRequester.getGmailThreadsForRFCMessageIds(rfcMessageIds, this._handleGmailThreads.bind(this))
        },
        _handleGmailThreads: function (recentlyViewedThreads) {
            BB.Threads.addJSONThreads(recentlyViewedThreads);
            this._isFinishedGettingRecentlyViewedEmails = true;
            this._recentlyViewedThreads = this._sortGmailThreadsBasedOnTrackedThreads(recentlyViewedThreads);
            this._checkStateAndModifyResponse()
        },
        _sortGmailThreadsBasedOnTrackedThreads: function (recentlyViewedThreads) {
            if (!recentlyViewedThreads) return [];
            var map = {};
            for (var ii = 0; ii < recentlyViewedThreads.length; ii++) map[recentlyViewedThreads[ii][0]] = recentlyViewedThreads[ii];
            var sortedTrackedThreads = _.sortBy(this._trackedThreads, function (trackedThread) {
                return trackedThread.mostRecentLinkFirstViewDate
            });
            var sortedThreads = [];
            for (var ii = 0; ii < sortedTrackedThreads.length; ii++) {
                var trackedThread = sortedTrackedThreads[ii];
                var gmailThread = map[trackedThread.hexGmailThreadId];
                if (gmailThread) sortedThreads.push(gmailThread)
            }
            return sortedThreads
        },
        _checkStateAndModifyResponse: function () {
            if (this._isResponseIncomplete()) {
                this._rejectPromise();
                return
            }
            if (this._isErrorGettingThreadsFromStreak) {
                NotificationCenter.notify("pixelTracker.errorGettingRecentlyViewedThreads");
                this._resolvePromise();
                return
            }
            if (!this._isFinishedGettingRecentlyViewedEmails) return;
            if (this._isThereNoRecentlyViewedThreads()) NotificationCenter.notify("pixelTracker.noRecentlyViewedThreads");
            this._modifyXHRResponse();
            this._resolvePromise()
        },
        _isResponseIncomplete: function () {
            try {
                var modified = Gmail.ThreadResponseProcessor.deserialize(this._xhr.responseText);
                if (modified) return false
            } catch (err) {}
            return true
        },
        _isThereNoRecentlyViewedThreads: function () {
            return !_.isArray(this._recentlyViewedThreads) || this._recentlyViewedThreads.length === 0
        },
        _modifyXHRResponse: function () {
            var modifiedResponse;
            try {
                modifiedResponse = Gmail.ThreadResponseProcessor.replaceThreadsInResponse(this._xhr.responseText, this._recentlyViewedThreads)
            } catch (err) {}
            if (!modifiedResponse) {
                this._rejectPromise();
                return
            }
            Object.defineProperty(this._xhr, "response", {
                get: function () {
                    return modifiedResponse
                }
            });
            Object.defineProperty(this._xhr, "responseText", {
                get: function () {
                    return modifiedResponse
                }
            });
            NotificationCenter.notify("pixelTracker.responseModified")
        }
    });

    function _filterTrackedThreadsWithNoViewDate(trackedThreads) {
        return _.filter(trackedThreads, function (trackedThread) {
            return !!trackedThread.mostRecentLinkFirstViewDate && !! trackedThread.mostRecentRfcMessageId
        })
    }

    function _extractMessageIdsFromTrackedThreads(trackedThreads) {
        var rfcMessageIds = [];
        if (!trackedThreads) return rfcMessageIds;
        for (var ii = 0; ii < trackedThreads.length; ii++) {
            var trackedThread = trackedThreads[ii];
            if (trackedThread.mostRecentRfcMessageId) rfcMessageIds.push(trackedThread.mostRecentRfcMessageId)
        }
        return rfcMessageIds
    }
    Library.set("BentoBox.Modules.PixelTrackerRecentViewsAjaxInterceptor", PixelTrackerRecentViewsAjaxInterceptor)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        jwerty = Streak.jwerty,
        Date = Streak.Date,
        Gmail = Streak.Gmail,
        Locale = Streak.Locale,
        HTML = Streak.HTML,
        Data = Streak.BentoBox.Data,
        BB = Streak.BentoBox;
    var CONSTANTS = {
        TRACKED_KEY: "label:all before:5000/01/01",
        URL_KEY: "label%3Aall+before%3A5000%2F01%2F01",
        SEARCH_URL: "label%3Aall+before%3A5000%2F01%2F01",
        SEARCH_REPLACEMENT: "is:recentlyviewed",
        GMAIL_SELECTED_CLASS: "ain",
        GMAIL_SELECTED_INNER_CLASS: "nZ aiq",
        GMAIL_HOVER_CLASS: "NQ",
        EXPANDO_POINT_DOWN_CLASS: "aih",
        EXPANDO_POINT_RIGHT_CLASS: "aii",
        EXPANDO_HOVER_CLASS: "aij"
    };
    CONSTANTS.TRACKED_KEY_REGEX = new RegExp(CONSTANTS.TRACKED_KEY, "img");
    CONSTANTS.REPLACE_KEY_REGEX = new RegExp(CONSTANTS.SEARCH_REPLACEMENT, "img");
    var PixelTrackerRecentViewsSearch = {
        CONSTANTS: CONSTANTS,
        _sentMailLink: null,
        _searchLink: null,
        _expando: null,
        init: function () {
            if (this._isSentMailLinkValid()) {
                this._setupSearchLink();
                this._setupSearchButtonObserver();
                this._setupSearchBarOverride();
                this._setupHighlightSearchLinkObserver()
            }
        },
        _isSentMailLinkValid: function () {
            var sentMailLink =
                Gmail.getSentMailLink();
            if (!sentMailLink || sentMailLink.length === 0) return false;
            return true
        },
        _setupSearchLink: function () {
            this._sentMailLink = Gmail.getSentMailLink();
            this._addSearchLinkEntry();
            if (BB.UserSettings.getSetting("pixelTracking/searchLinkVisible")) this._searchLink.show();
            else this._searchLink.hide()
        },
        _addSearchLinkEntry: function () {
            var self = this;
            this._searchLink = HTML.get("pixelTrackerLeftRecentViewsSearchLink", true);
            this._searchLink.click(function (e) {
                Streak.NotificationCenter.notify("pixelTracker.recentViewsClicked");
                Gmail.setURL("search/" + CONSTANTS.SEARCH_URL);
                e.preventDefault();
                e.stopPropagation();
                track("pixel_track_recent_views_search", {
                    type: "mouse",
                    source: "link"
                })
            });
            this._searchLink.find(".TO").easyHoverClass(CONSTANTS.GMAIL_HOVER_CLASS);
            this._sentMailLink.children().filter(":last").before(this._searchLink)
        },
        _setupSearchBarOverride: function () {
            var self = this;
            Gmail.observe("viewChanged", function () {
                var searchInput = Gmail.getSearchInput();
                var searchVal = searchInput.val();
                if (searchVal) self._replaceSearchText(CONSTANTS.TRACKED_KEY_REGEX,
                    CONSTANTS.SEARCH_REPLACEMENT);
                else if (self._doesURLHaveTrackingSearch()) setTimeout(function () {
                    self._replaceSearchText(CONSTANTS.TRACKED_KEY_REGEX, CONSTANTS.SEARCH_REPLACEMENT)
                }, 500)
            }, 1E3)
        },
        _setupSearchButtonObserver: function () {
            var self = this;
            var searchButton = Gmail.getSearchButton();
            if (!searchButton || searchButton.length === 0) return;
            var searchInput = Gmail.getSearchInput();
            searchButton = searchButton[0];
            searchButton.addEventListener("mousedown", function (e) {
                self._replaceSearchText(CONSTANTS.REPLACE_KEY_REGEX,
                    '"' + CONSTANTS.TRACKED_KEY + '"');
                track("pixel_track_recent_views_search", {
                    type: "mouse",
                    source: "searchButton"
                })
            }, true);
            searchButton.addEventListener("keydown", function (e) {
                if (jwerty.is("space/enter", e)) {
                    self._replaceSearchText(CONSTANTS.REPLACE_KEY_REGEX, '"' + CONSTANTS.TRACKED_KEY + '"');
                    track("pixel_track_recent_views_search", {
                        type: "keyboard",
                        source: "searchButton"
                    })
                }
            }, true);
            searchInput[0].addEventListener("keydown", function (e) {
                if (jwerty.is("enter", e)) {
                    self._replaceSearchText(CONSTANTS.REPLACE_KEY_REGEX,
                        '"' + CONSTANTS.TRACKED_KEY + '"');
                    track("pixel_track_recent_views_search", {
                        type: "keyboard",
                        source: "searchInput"
                    })
                }
            }, true)
        },
        _setupHighlightSearchLinkObserver: function () {
            var self = this;
            Gmail.observe("viewChanged", function () {
                if (self._doesURLHaveTrackingSearch()) {
                    self._searchLink.addClass(CONSTANTS.GMAIL_SELECTED_CLASS);
                    self._searchLink.find(".TO").addClass(CONSTANTS.GMAIL_SELECTED_INNER_CLASS)
                } else {
                    self._searchLink.removeClass(CONSTANTS.GMAIL_SELECTED_CLASS);
                    self._searchLink.find(".TO").removeClass(CONSTANTS.GMAIL_SELECTED_INNER_CLASS)
                }
            })
        },
        _replaceSearchText: function (find, replaceText) {
            var searchInput = Gmail.getSearchInput();
            var searchVal = searchInput.val();
            searchInput.val(searchVal.replace(find, replaceText))
        },
        _doesURLHaveTrackingSearch: function () {
            return location.hash.indexOf(CONSTANTS.URL_KEY) > -1
        }
    };
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerRecentViewsSearchInitialized",
        functionReference: PixelTrackerRecentViewsSearch.init,
        functionContext: PixelTrackerRecentViewsSearch,
        dependentFunctionKeys: ["gmailLoaded", "htmlLoaded",
            "localeLoaded", "enabledFeaturesControllerInitialized", "pixelTrackerSearchInitialized"
        ]
    });
    BB.Modules.PixelTrackerRecentViewsSearch = PixelTrackerRecentViewsSearch;
    var track = function (event, props) {
        BB.Tracker.trackStreakActive(props, {
            eventName: event
        })
    }
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackerRecentViewsResultPagePolisher = Streak.Class.subclass({
        className: "PixelTrackerRecentViewsResultPagePolisher",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_hasEmptyResults",
            destroy: true
        }, {
            name: "_shouldRenderEmpty",
            destroy: true
        }, {
            name: "_recentViewsElement",
            destroy: true
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            this._createRecentViewsElement();
            Gmail.observe("newInboxEmails", this._handleNewInboxEmails.bind(this));
            Gmail.observe("viewChanged", this._handleViewChanged.bind(this));
            this._bindToNotificationEvents()
        },
        _createRecentViewsElement: function () {
            this._recentViewsElement = $('<div class="ae4 UI streak__recentViews_emptyMessage" gh="tl"><div class="Cp"></div><div><table cellpadding="0" class="cf TB"><colgroup><col class="Cm"><col class="TE"><col></colgroup><tbody><tr class="TD"><td class="TC" colspan="3" style="text-align:center">There are no conversations that have been viewed.</td></tr></tbody></table></div></div>')
        },
        _handleNewInboxEmails: function () {
            if (!BB.Modules.PixelTrackerUtils.isRecentViewsResultsPage()) return;
            this._hideFakeRows()
        },
        _handleViewChanged: function () {
            if (!BB.Modules.PixelTrackerUtils.isRecentViewsResultsPage()) return;
            this._removeDocsSection();
            this._removeListNumbersAndPaging();
            this._removeTrashSection();
            this._hideMailText();
            if (this._hasEmptyResults) {
                this._showEmptyMessage();
                this._hasEmptyResults = false
            }
        },
        _hideFakeRows: function () {
            Gmail.getMainList().find("[streakhiderow]").parents("tr").hide()
        },
        _removeDocsSection: function () {
            Gmail.getMainList().nextAll().remove()
        },
        _removeListNumbersAndPaging: function () {
            Gmail.getCurrentMainContainer().find(".Cr").filterOutInvisible().remove()
        },
        _removeTrashSection: function () {
            Gmail.getMainList().children(".Cp").nextAll().remove()
        },
        _hideToolbarButtons: function () {
            Gmail.$("[gh=mtb]").hide()
        },
        _hideMailText: function () {
            Gmail.$(".Wc").hide()
        },
        _bindToNotificationEvents: function () {
            NotificationCenter.addFunction({
                eventName: "pixelTracker.noRecentlyViewedThreads",
                functionToCall: this._noRecentlyViewedThreads,
                functionContext: this
            });
            NotificationCenter.addFunction({
                eventName: "pixelTracker.responseModified",
                functionToCall: this._responseModified,
                functionContext: this
            })
        },
        _noRecentlyViewedThreads: function () {
            this._hasEmptyResults = true
        },
        _responseModified: function () {
            if (!BB.Modules.PixelTrackerUtils.isRecentViewsResultsPage()) return;
            if (this._hasEmptyResults) this._showEmptyMessage();
            this._hasEmptyResults = false
        },
        _showEmptyMessage: function () {
            Gmail.getListToolbarContainer().removeClass("Qj");
            Gmail.getMainList().after(this._recentViewsElement)
        }
    });
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerRecentViewsResultPagePolisherInitialized",
        functionReference: function () {
            Library.set("BentoBox.Modules.PixelTrackerRecentViewsResultPagePolisher", new PixelTrackerRecentViewsResultPagePolisher)
        }
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackerRecentViewsInboxRowManipulationSource = Streak.Class.subclass({
        className: "PixelTrackerRecentViewsInboxRowManipulationSource",
        superclass: Streak.Object,
        _memberVariables: [],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this)
        },
        getTableManipulation: function () {
            if (!_isResultsPage()) return;
            if (Gmail.isVerticalSplitPreviewPane()) return;
            return {
                type: "COLUMN_WIDTH",
                columnName: "DATE",
                width: 125
            }
        },
        getRowManipulation: function (threadObject, rowObject) {
            if (!_isResultsPage()) return;
            var threadInfo = threadObject.get("threadInfo");
            if (!threadInfo) return;
            var listTrackedThread = threadInfo.get("listTrackedThread");
            if (!listTrackedThread) return;
            var rowManipulation = Library.getInstance("BentoBox.Modules.PixelTrackerRecentViewsInboxRowManipulation");
            rowManipulation.setListTrackedThread(listTrackedThread);
            rowManipulation.setRowObject(rowObject);
            return rowManipulation
        }
    });
    var CONSTANTS = {
        URL_KEY: "label%3Aall+before%3A5000%2F01%2F01"
    };

    function _isResultsPage() {
        return Gmail.isListView() && location.hash.indexOf(CONSTANTS.URL_KEY) > -1
    }
    Streak.DependencyManager.addFunction({
        functionKey: "pixelTrackerRecentViewsInboxRowManipulationSourceInitialized",
        functionReference: function () {
            var source = new PixelTrackerRecentViewsInboxRowManipulationSource;
            Library.set("BentoBox.Modules.PixelTrackerRecentViewsInboxRowManipulationSource", source);
            Gmail.InboxManipulator.addDataSource(source)
        },
        dependentFunctionKeys: ["inboxManipulatorInitialized", "threadsInitialized", "htmlLoaded", "enabledFeaturesControllerInitialized"]
    })
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackerRecentViewsInboxRowManipulation = Streak.Class.subclass({
        className: "PixelTrackerRecentViewsInboxRowManipulation",
        superclass: Gmail.InboxManipulator.InboxRowManipulationBase,
        _memberVariables: [{
            name: "_listTrackedThread",
            destroy: false,
            set: true
        }, {
            name: "_rowObject",
            destroy: false,
            set: true
        }, {
            name: "_element",
            destroy: true
        }, {
            name: "_originalDate",
            destroy: false
        }],
        _initialize: function () {
            Gmail.InboxManipulator.InboxRowManipulationBase.prototype._initialize.call(this)
        },
        setRowObject: function (rowObject) {
            this._rowObject = rowObject;
            this._originalDate = rowObject.date.html()
        },
        getManipulationType: function () {
            return "REPLACE_CONTENT"
        },
        getColumnName: function () {
            return "DATE"
        },
        getElement: function () {
            if (this._element) return this._element;
            this._element = $(document.createElement("span"));
            var inner;
            var momentDate = Streak.moment(this._listTrackedThread.mostRecentLinkFirstViewDate);
            var dateString = momentDate.fromNow();
            inner = '<span class="streak__pixelTrackerRecentViews_readDate" title="' + momentDate.format() + '">' + dateString + "</span>";
            if (this._rowObject.isUnread) inner = "<b>" + inner + "</b>";
            this._element[0].innerHTML = inner;
            return this._element
        },
        undo: function () {
            if (this._element) this._element.remove();
            if (this._rowObject) this._rowObject.date.html(this._originalDate)
        }
    });
    Library.set("BentoBox.Modules.PixelTrackerRecentViewsInboxRowManipulation",
        PixelTrackerRecentViewsInboxRowManipulation)
})(Streak);
(function (Streak) {
    var $ = Streak.jQuery,
        _ = Streak._,
        Library = Streak.Library,
        Gmail = Streak.Gmail,
        Date = Streak.Date,
        HTML = Streak.HTML,
        UI = Streak.UI,
        NotificationCenter = Streak.NotificationCenter,
        DependencyManager = Streak.DependencyManager,
        BB = Streak.BentoBox;
    var PixelTrackerRecentViewsRefresher = Streak.Class.subclass({
        className: "PixelTrackerRecentViewsRefresher",
        superclass: Streak.Object,
        _memberVariables: [{
            name: "_state",
            destroy: false
        }],
        _initialize: function () {
            Streak.Object.prototype._initialize.call(this);
            this._bindToEvents()
        },
        _bindToEvents: function () {
            NotificationCenter.addFunction({
                eventName: "pixelTracker.recentViewsClicked",
                functionToCall: this._recentViewsClicked,
                functionContext: this
            });
            NotificationCenter.addFunction({
                eventName: "pixelTracker.gettingRecentlyViewedThreads",
                functionToCall: this._gettingRecentlyViewedThreads,
                functionContext: this
            });
            Gmail.observe("viewChanged", this._viewChanged.bind(this))
        },
        _recentViewsClicked: function () {
            if (BB.Modules.PixelTrackerUtils.isRecentViewsResultsPage()) {
                Gmail.triggerListRefresh();
                return
            }
            this._state =
                "recentViewsClicked"
        },
        _gettingRecentlyViewedThreads: function () {
            this._state = null
        },
        _viewChanged: function () {
            if (!BB.Modules.PixelTrackerUtils.isRecentViewsResultsPage()) return;
            if (this._state !== "recentViewsClicked") return;
            Gmail.triggerListRefresh()
        }
    });
    Library.set("BentoBox.Modules.PixelTrackerRecentViewsRefresher", new PixelTrackerRecentViewsRefresher)
})(Streak);